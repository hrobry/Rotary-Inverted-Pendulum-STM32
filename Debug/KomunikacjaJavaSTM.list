
KomunikacjaJavaSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080a8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  0800823c  0800823c  0001823c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087b0  080087b0  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  080087b0  080087b0  000187b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087b8  080087b8  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087b8  080087b8  000187b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087bc  080087bc  000187bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  080087c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  2000010c  080088cc  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  080088cc  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001616d  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d5b  00000000  00000000  000362a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00039008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  0003a0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e69  00000000  00000000  0003b0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017471  00000000  00000000  00052f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ff6a  00000000  00000000  0006a3a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa30c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048dc  00000000  00000000  000fa360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000010c 	.word	0x2000010c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008224 	.word	0x08008224

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000110 	.word	0x20000110
 80001d0:	08008224 	.word	0x08008224

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <GFX_draw_char>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b087      	sub	sp, #28
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	4604      	mov	r4, r0
 80004d4:	4608      	mov	r0, r1
 80004d6:	4611      	mov	r1, r2
 80004d8:	461a      	mov	r2, r3
 80004da:	4623      	mov	r3, r4
 80004dc:	80fb      	strh	r3, [r7, #6]
 80004de:	4603      	mov	r3, r0
 80004e0:	80bb      	strh	r3, [r7, #4]
 80004e2:	460b      	mov	r3, r1
 80004e4:	70fb      	strb	r3, [r7, #3]
 80004e6:	4613      	mov	r3, r2
 80004e8:	803b      	strh	r3, [r7, #0]
	int8_t i, j;
	uint8_t line;

	if((x >= WIDTH) || (y >= HEIGHT) || ((x + 6 * size_x - 1) < 0) || ((y + 8 * size_y - 1) < 0))
 80004ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004ee:	2b7f      	cmp	r3, #127	; 0x7f
 80004f0:	f300 8100 	bgt.w	80006f4 <GFX_draw_char+0x228>
 80004f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80004f8:	2b3f      	cmp	r3, #63	; 0x3f
 80004fa:	f300 80fb 	bgt.w	80006f4 <GFX_draw_char+0x228>
 80004fe:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000502:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000506:	4613      	mov	r3, r2
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	4413      	add	r3, r2
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	440b      	add	r3, r1
 8000510:	2b00      	cmp	r3, #0
 8000512:	f340 80ef 	ble.w	80006f4 <GFX_draw_char+0x228>
 8000516:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800051a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800051e:	00db      	lsls	r3, r3, #3
 8000520:	4413      	add	r3, r2
 8000522:	2b00      	cmp	r3, #0
 8000524:	f340 80e6 	ble.w	80006f4 <GFX_draw_char+0x228>
	{
		return;
	}

	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000528:	2300      	movs	r3, #0
 800052a:	73fb      	strb	r3, [r7, #15]
 800052c:	e0aa      	b.n	8000684 <GFX_draw_char+0x1b8>
	{
		line = (*(const unsigned char *)(&font[c * 5 + i]));
 800052e:	78fa      	ldrb	r2, [r7, #3]
 8000530:	4613      	mov	r3, r2
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	441a      	add	r2, r3
 8000536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800053a:	4413      	add	r3, r2
 800053c:	4a6f      	ldr	r2, [pc, #444]	; (80006fc <GFX_draw_char+0x230>)
 800053e:	5cd3      	ldrb	r3, [r2, r3]
 8000540:	737b      	strb	r3, [r7, #13]
		for(j = 7; j >= 0; j--, line >>= 1)
 8000542:	2307      	movs	r3, #7
 8000544:	73bb      	strb	r3, [r7, #14]
 8000546:	e092      	b.n	800066e <GFX_draw_char+0x1a2>
		{
			if(line & 1)
 8000548:	7b7b      	ldrb	r3, [r7, #13]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	2b00      	cmp	r3, #0
 8000550:	d040      	beq.n	80005d4 <GFX_draw_char+0x108>
			{
				if(size_x == 1 && size_y == 1)
 8000552:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000556:	2b01      	cmp	r3, #1
 8000558:	d116      	bne.n	8000588 <GFX_draw_char+0xbc>
 800055a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800055e:	2b01      	cmp	r3, #1
 8000560:	d112      	bne.n	8000588 <GFX_draw_char+0xbc>
				{
					SSD1306_draw_pixel(x + i, y + j, color);
 8000562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000566:	b29a      	uxth	r2, r3
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	4413      	add	r3, r2
 800056c:	b29b      	uxth	r3, r3
 800056e:	b218      	sxth	r0, r3
 8000570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000574:	b29a      	uxth	r2, r3
 8000576:	88bb      	ldrh	r3, [r7, #4]
 8000578:	4413      	add	r3, r2
 800057a:	b29b      	uxth	r3, r3
 800057c:	b21b      	sxth	r3, r3
 800057e:	883a      	ldrh	r2, [r7, #0]
 8000580:	4619      	mov	r1, r3
 8000582:	f000 f9f7 	bl	8000974 <SSD1306_draw_pixel>
 8000586:	e069      	b.n	800065c <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, color);
 8000588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800058c:	b29a      	uxth	r2, r3
 800058e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000592:	b29b      	uxth	r3, r3
 8000594:	fb12 f303 	smulbb	r3, r2, r3
 8000598:	b29a      	uxth	r2, r3
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	4413      	add	r3, r2
 800059e:	b29b      	uxth	r3, r3
 80005a0:	b218      	sxth	r0, r3
 80005a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	fb12 f303 	smulbb	r3, r2, r3
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	88bb      	ldrh	r3, [r7, #4]
 80005b6:	4413      	add	r3, r2
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	b219      	sxth	r1, r3
 80005bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005c0:	b21a      	sxth	r2, r3
 80005c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80005c6:	b21c      	sxth	r4, r3
 80005c8:	883b      	ldrh	r3, [r7, #0]
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	4623      	mov	r3, r4
 80005ce:	f000 f8d0 	bl	8000772 <GFX_draw_fill_rect>
 80005d2:	e043      	b.n	800065c <GFX_draw_char+0x190>
				}
			}
			else if(bg != color)
 80005d4:	8c3a      	ldrh	r2, [r7, #32]
 80005d6:	883b      	ldrh	r3, [r7, #0]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d03f      	beq.n	800065c <GFX_draw_char+0x190>
			{
				if(size_x == 1 && size_y == 1)
 80005dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d116      	bne.n	8000612 <GFX_draw_char+0x146>
 80005e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d112      	bne.n	8000612 <GFX_draw_char+0x146>
				{
					SSD1306_draw_pixel(x + i, y + j, bg);
 80005ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	4413      	add	r3, r2
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	b218      	sxth	r0, r3
 80005fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005fe:	b29a      	uxth	r2, r3
 8000600:	88bb      	ldrh	r3, [r7, #4]
 8000602:	4413      	add	r3, r2
 8000604:	b29b      	uxth	r3, r3
 8000606:	b21b      	sxth	r3, r3
 8000608:	8c3a      	ldrh	r2, [r7, #32]
 800060a:	4619      	mov	r1, r3
 800060c:	f000 f9b2 	bl	8000974 <SSD1306_draw_pixel>
 8000610:	e024      	b.n	800065c <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8000612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000616:	b29a      	uxth	r2, r3
 8000618:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800061c:	b29b      	uxth	r3, r3
 800061e:	fb12 f303 	smulbb	r3, r2, r3
 8000622:	b29a      	uxth	r2, r3
 8000624:	88fb      	ldrh	r3, [r7, #6]
 8000626:	4413      	add	r3, r2
 8000628:	b29b      	uxth	r3, r3
 800062a:	b218      	sxth	r0, r3
 800062c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000630:	b29a      	uxth	r2, r3
 8000632:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000636:	b29b      	uxth	r3, r3
 8000638:	fb12 f303 	smulbb	r3, r2, r3
 800063c:	b29a      	uxth	r2, r3
 800063e:	88bb      	ldrh	r3, [r7, #4]
 8000640:	4413      	add	r3, r2
 8000642:	b29b      	uxth	r3, r3
 8000644:	b219      	sxth	r1, r3
 8000646:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800064a:	b21a      	sxth	r2, r3
 800064c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000650:	b21c      	sxth	r4, r3
 8000652:	8c3b      	ldrh	r3, [r7, #32]
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	4623      	mov	r3, r4
 8000658:	f000 f88b 	bl	8000772 <GFX_draw_fill_rect>
		for(j = 7; j >= 0; j--, line >>= 1)
 800065c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	3b01      	subs	r3, #1
 8000664:	b2db      	uxtb	r3, r3
 8000666:	73bb      	strb	r3, [r7, #14]
 8000668:	7b7b      	ldrb	r3, [r7, #13]
 800066a:	085b      	lsrs	r3, r3, #1
 800066c:	737b      	strb	r3, [r7, #13]
 800066e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000672:	2b00      	cmp	r3, #0
 8000674:	f6bf af68 	bge.w	8000548 <GFX_draw_char+0x7c>
	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	3301      	adds	r3, #1
 8000680:	b2db      	uxtb	r3, r3
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000688:	2b04      	cmp	r3, #4
 800068a:	f77f af50 	ble.w	800052e <GFX_draw_char+0x62>
				}
			}
		}
	}

	if(bg != color) // If opaque, draw vertical line for last column
 800068e:	8c3a      	ldrh	r2, [r7, #32]
 8000690:	883b      	ldrh	r3, [r7, #0]
 8000692:	429a      	cmp	r2, r3
 8000694:	d02f      	beq.n	80006f6 <GFX_draw_char+0x22a>
	{
		if(size_x == 1 && size_y == 1)
 8000696:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800069a:	2b01      	cmp	r3, #1
 800069c:	d10e      	bne.n	80006bc <GFX_draw_char+0x1f0>
 800069e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d10a      	bne.n	80006bc <GFX_draw_char+0x1f0>
		{
			SSD1306_draw_fast_vline(x + 5, y, 8, bg);
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	3305      	adds	r3, #5
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	b218      	sxth	r0, r3
 80006ae:	8c3b      	ldrh	r3, [r7, #32]
 80006b0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80006b4:	2208      	movs	r2, #8
 80006b6:	f000 fb4f 	bl	8000d58 <SSD1306_draw_fast_vline>
 80006ba:	e01c      	b.n	80006f6 <GFX_draw_char+0x22a>
		}
		else
		{
			GFX_draw_fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 80006bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	461a      	mov	r2, r3
 80006c4:	0092      	lsls	r2, r2, #2
 80006c6:	4413      	add	r3, r2
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	4413      	add	r3, r2
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	b218      	sxth	r0, r3
 80006d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80006d6:	b21a      	sxth	r2, r3
 80006d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80006dc:	b29b      	uxth	r3, r3
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	b21c      	sxth	r4, r3
 80006e4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80006e8:	8c3b      	ldrh	r3, [r7, #32]
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	4623      	mov	r3, r4
 80006ee:	f000 f840 	bl	8000772 <GFX_draw_fill_rect>
 80006f2:	e000      	b.n	80006f6 <GFX_draw_char+0x22a>
		return;
 80006f4:	bf00      	nop
		}
	}
}
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd90      	pop	{r4, r7, pc}
 80006fc:	08008258 	.word	0x08008258

08000700 <GFX_draw_string>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_string(int16_t x, int16_t y, unsigned char * c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b08b      	sub	sp, #44	; 0x2c
 8000704:	af04      	add	r7, sp, #16
 8000706:	60ba      	str	r2, [r7, #8]
 8000708:	461a      	mov	r2, r3
 800070a:	4603      	mov	r3, r0
 800070c:	81fb      	strh	r3, [r7, #14]
 800070e:	460b      	mov	r3, r1
 8000710:	81bb      	strh	r3, [r7, #12]
 8000712:	4613      	mov	r3, r2
 8000714:	80fb      	strh	r3, [r7, #6]
	uint8_t offset = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	75fb      	strb	r3, [r7, #23]
	while(*c)
 800071a:	e021      	b.n	8000760 <GFX_draw_string+0x60>
	{
		GFX_draw_char(x+offset, y, *c, color, bg, size_x, size_y);
 800071c:	7dfb      	ldrb	r3, [r7, #23]
 800071e:	b29a      	uxth	r2, r3
 8000720:	89fb      	ldrh	r3, [r7, #14]
 8000722:	4413      	add	r3, r2
 8000724:	b29b      	uxth	r3, r3
 8000726:	b218      	sxth	r0, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	88fc      	ldrh	r4, [r7, #6]
 800072e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000732:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000736:	9302      	str	r3, [sp, #8]
 8000738:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800073c:	9301      	str	r3, [sp, #4]
 800073e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	4623      	mov	r3, r4
 8000744:	f7ff fec2 	bl	80004cc <GFX_draw_char>
		offset += (5 + 2) * size_x;
 8000748:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800074c:	461a      	mov	r2, r3
 800074e:	00d2      	lsls	r2, r2, #3
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	b2da      	uxtb	r2, r3
 8000754:	7dfb      	ldrb	r3, [r7, #23]
 8000756:	4413      	add	r3, r2
 8000758:	75fb      	strb	r3, [r7, #23]
		c++;
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	3301      	adds	r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
	while(*c)
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1d9      	bne.n	800071c <GFX_draw_string+0x1c>
	}
}
 8000768:	bf00      	nop
 800076a:	bf00      	nop
 800076c:	371c      	adds	r7, #28
 800076e:	46bd      	mov	sp, r7
 8000770:	bd90      	pop	{r4, r7, pc}

08000772 <GFX_draw_fill_rect>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void GFX_draw_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000772:	b590      	push	{r4, r7, lr}
 8000774:	b085      	sub	sp, #20
 8000776:	af00      	add	r7, sp, #0
 8000778:	4604      	mov	r4, r0
 800077a:	4608      	mov	r0, r1
 800077c:	4611      	mov	r1, r2
 800077e:	461a      	mov	r2, r3
 8000780:	4623      	mov	r3, r4
 8000782:	80fb      	strh	r3, [r7, #6]
 8000784:	4603      	mov	r3, r0
 8000786:	80bb      	strh	r3, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	807b      	strh	r3, [r7, #2]
 800078c:	4613      	mov	r3, r2
 800078e:	803b      	strh	r3, [r7, #0]
	for(int16_t i = x; i < x + w; i++)
 8000790:	88fb      	ldrh	r3, [r7, #6]
 8000792:	81fb      	strh	r3, [r7, #14]
 8000794:	e00e      	b.n	80007b4 <GFX_draw_fill_rect+0x42>
	{
		SSD1306_draw_fast_vline(i, y, h, color);
 8000796:	8c3b      	ldrh	r3, [r7, #32]
 8000798:	f9b7 2000 	ldrsh.w	r2, [r7]
 800079c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80007a0:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80007a4:	f000 fad8 	bl	8000d58 <SSD1306_draw_fast_vline>
	for(int16_t i = x; i < x + w; i++)
 80007a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	3301      	adds	r3, #1
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	81fb      	strh	r3, [r7, #14]
 80007b4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80007b8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80007bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007c0:	440b      	add	r3, r1
 80007c2:	429a      	cmp	r2, r3
 80007c4:	dbe7      	blt.n	8000796 <GFX_draw_fill_rect+0x24>
	}
}
 80007c6:	bf00      	nop
 80007c8:	bf00      	nop
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd90      	pop	{r4, r7, pc}

080007d0 <platform_write>:

static uint8_t * buffer;
static uint8_t rotation;

static uint8_t platform_write(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af04      	add	r7, sp, #16
 80007d6:	4603      	mov	r3, r0
 80007d8:	6039      	str	r1, [r7, #0]
 80007da:	71fb      	strb	r3, [r7, #7]
 80007dc:	4613      	mov	r3, r2
 80007de:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len, 100);
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	2364      	movs	r3, #100	; 0x64
 80007e6:	9302      	str	r3, [sp, #8]
 80007e8:	88bb      	ldrh	r3, [r7, #4]
 80007ea:	9301      	str	r3, [sp, #4]
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2301      	movs	r3, #1
 80007f2:	2178      	movs	r1, #120	; 0x78
 80007f4:	4803      	ldr	r0, [pc, #12]	; (8000804 <platform_write+0x34>)
 80007f6:	f002 fed7 	bl	80035a8 <HAL_I2C_Mem_Write>
	return 0;
 80007fa:	2300      	movs	r3, #0
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200001b0 	.word	0x200001b0

08000808 <platform_write_dma>:

static uint8_t platform_write_dma(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af02      	add	r7, sp, #8
 800080e:	4603      	mov	r3, r0
 8000810:	6039      	str	r1, [r7, #0]
 8000812:	71fb      	strb	r3, [r7, #7]
 8000814:	4613      	mov	r3, r2
 8000816:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len);
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	b29a      	uxth	r2, r3
 800081c:	88bb      	ldrh	r3, [r7, #4]
 800081e:	9301      	str	r3, [sp, #4]
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	2301      	movs	r3, #1
 8000826:	2178      	movs	r1, #120	; 0x78
 8000828:	4803      	ldr	r0, [pc, #12]	; (8000838 <platform_write_dma+0x30>)
 800082a:	f002 ffb7 	bl	800379c <HAL_I2C_Mem_Write_DMA>
	return 0;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200001b0 	.word	0x200001b0

0800083c <SSD1306_send_com>:

static void SSD1306_send_com(uint8_t c)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	platform_write(0x00, &c, 1);
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	2201      	movs	r2, #1
 800084a:	4619      	mov	r1, r3
 800084c:	2000      	movs	r0, #0
 800084e:	f7ff ffbf 	bl	80007d0 <platform_write>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <SSD1306_init>:

bool SSD1306_init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
  uint8_t comPins = 0x02, contrast = 0x8F, vccstate = SSD1306_SWITCHCAPVCC;
 8000862:	2302      	movs	r3, #2
 8000864:	71fb      	strb	r3, [r7, #7]
 8000866:	238f      	movs	r3, #143	; 0x8f
 8000868:	71bb      	strb	r3, [r7, #6]
 800086a:	2302      	movs	r3, #2
 800086c:	717b      	strb	r3, [r7, #5]

  if ((!buffer) && !(buffer = (uint8_t *)malloc(SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8))))
 800086e:	4b40      	ldr	r3, [pc, #256]	; (8000970 <SSD1306_init+0x114>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d10d      	bne.n	8000892 <SSD1306_init+0x36>
 8000876:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800087a:	f007 fbfb 	bl	8008074 <malloc>
 800087e:	4603      	mov	r3, r0
 8000880:	461a      	mov	r2, r3
 8000882:	4b3b      	ldr	r3, [pc, #236]	; (8000970 <SSD1306_init+0x114>)
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	4b3a      	ldr	r3, [pc, #232]	; (8000970 <SSD1306_init+0x114>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d101      	bne.n	8000892 <SSD1306_init+0x36>
  {
    return false;
 800088e:	2300      	movs	r3, #0
 8000890:	e06a      	b.n	8000968 <SSD1306_init+0x10c>
  }

  SSD1306_display_clear();
 8000892:	f000 f949 	bl	8000b28 <SSD1306_display_clear>

  // Init sequence
  SSD1306_send_com(SSD1306_DISPLAYOFF);
 8000896:	20ae      	movs	r0, #174	; 0xae
 8000898:	f7ff ffd0 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETDISPLAYCLOCKDIV);
 800089c:	20d5      	movs	r0, #213	; 0xd5
 800089e:	f7ff ffcd 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(0xE0);
 80008a2:	20e0      	movs	r0, #224	; 0xe0
 80008a4:	f7ff ffca 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETMULTIPLEX);
 80008a8:	20a8      	movs	r0, #168	; 0xa8
 80008aa:	f7ff ffc7 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_HEIGHT - 1);
 80008ae:	203f      	movs	r0, #63	; 0x3f
 80008b0:	f7ff ffc4 	bl	800083c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETDISPLAYOFFSET);
 80008b4:	20d3      	movs	r0, #211	; 0xd3
 80008b6:	f7ff ffc1 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(0x00);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f7ff ffbe 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETSTARTLINE | 0x00);
 80008c0:	2040      	movs	r0, #64	; 0x40
 80008c2:	f7ff ffbb 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_CHARGEPUMP);
 80008c6:	208d      	movs	r0, #141	; 0x8d
 80008c8:	f7ff ffb8 	bl	800083c <SSD1306_send_com>

  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 80008cc:	797b      	ldrb	r3, [r7, #5]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d101      	bne.n	80008d6 <SSD1306_init+0x7a>
 80008d2:	2310      	movs	r3, #16
 80008d4:	e000      	b.n	80008d8 <SSD1306_init+0x7c>
 80008d6:	2314      	movs	r3, #20
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ffaf 	bl	800083c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_MEMORYMODE);
 80008de:	2020      	movs	r0, #32
 80008e0:	f7ff ffac 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(0x00);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ffa9 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SEGREMAP | 0x10);
 80008ea:	20b0      	movs	r0, #176	; 0xb0
 80008ec:	f7ff ffa6 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_COMSCANDEC);
 80008f0:	20c8      	movs	r0, #200	; 0xc8
 80008f2:	f7ff ffa3 	bl	800083c <SSD1306_send_com>
    comPins = 0x02;
    contrast = 0x8F;
  }
  else if ((SSD1306_WIDTH == 128) && (SSD1306_HEIGHT == 64))
  {
    comPins = 0x12;
 80008f6:	2312      	movs	r3, #18
 80008f8:	71fb      	strb	r3, [r7, #7]
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 80008fa:	797b      	ldrb	r3, [r7, #5]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d101      	bne.n	8000904 <SSD1306_init+0xa8>
 8000900:	239f      	movs	r3, #159	; 0x9f
 8000902:	e000      	b.n	8000906 <SSD1306_init+0xaa>
 8000904:	23cf      	movs	r3, #207	; 0xcf
 8000906:	71bb      	strb	r3, [r7, #6]
  {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  }

  SSD1306_send_com(SSD1306_SETCOMPINS);
 8000908:	20da      	movs	r0, #218	; 0xda
 800090a:	f7ff ff97 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(comPins);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ff93 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETCONTRAST);
 8000916:	2081      	movs	r0, #129	; 0x81
 8000918:	f7ff ff90 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(contrast);
 800091c:	79bb      	ldrb	r3, [r7, #6]
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ff8c 	bl	800083c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETPRECHARGE);
 8000924:	20d9      	movs	r0, #217	; 0xd9
 8000926:	f7ff ff89 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 800092a:	797b      	ldrb	r3, [r7, #5]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d101      	bne.n	8000934 <SSD1306_init+0xd8>
 8000930:	2322      	movs	r3, #34	; 0x22
 8000932:	e000      	b.n	8000936 <SSD1306_init+0xda>
 8000934:	23f1      	movs	r3, #241	; 0xf1
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff ff80 	bl	800083c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETVCOMDETECT);
 800093c:	20db      	movs	r0, #219	; 0xdb
 800093e:	f7ff ff7d 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(0x40);
 8000942:	2040      	movs	r0, #64	; 0x40
 8000944:	f7ff ff7a 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYALLON_RESUME);
 8000948:	20a4      	movs	r0, #164	; 0xa4
 800094a:	f7ff ff77 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_NORMALDISPLAY);
 800094e:	20a6      	movs	r0, #166	; 0xa6
 8000950:	f7ff ff74 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DEACTIVATE_SCROLL);
 8000954:	202e      	movs	r0, #46	; 0x2e
 8000956:	f7ff ff71 	bl	800083c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYON);
 800095a:	20af      	movs	r0, #175	; 0xaf
 800095c:	f7ff ff6e 	bl	800083c <SSD1306_send_com>

  SSD1306_set_rotation(SSD1306_HORIZONTAL_MODE2);
 8000960:	2002      	movs	r0, #2
 8000962:	f000 fb91 	bl	8001088 <SSD1306_set_rotation>
  return true;
 8000966:	2301      	movs	r3, #1
}
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000128 	.word	0x20000128

08000974 <SSD1306_draw_pixel>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_pixel(int16_t x, int16_t y, uint16_t color)
{
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	80fb      	strh	r3, [r7, #6]
 800097e:	460b      	mov	r3, r1
 8000980:	80bb      	strh	r3, [r7, #4]
 8000982:	4613      	mov	r3, r2
 8000984:	807b      	strh	r3, [r7, #2]
	if ((x >= 0) && (x < SSD1306_WIDTH) && (y >= 0) && (y < SSD1306_HEIGHT))
 8000986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800098a:	2b00      	cmp	r3, #0
 800098c:	f2c0 80c4 	blt.w	8000b18 <SSD1306_draw_pixel+0x1a4>
 8000990:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000994:	2b7f      	cmp	r3, #127	; 0x7f
 8000996:	f300 80bf 	bgt.w	8000b18 <SSD1306_draw_pixel+0x1a4>
 800099a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f2c0 80ba 	blt.w	8000b18 <SSD1306_draw_pixel+0x1a4>
 80009a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009a8:	2b3f      	cmp	r3, #63	; 0x3f
 80009aa:	f300 80b5 	bgt.w	8000b18 <SSD1306_draw_pixel+0x1a4>
	{
		/* Pixel is in-bounds. Rotate coordinates if needed. */
		switch (SSD1306_get_rotation())
 80009ae:	f000 fb7b 	bl	80010a8 <SSD1306_get_rotation>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	d023      	beq.n	8000a00 <SSD1306_draw_pixel+0x8c>
 80009b8:	2b03      	cmp	r3, #3
 80009ba:	dc33      	bgt.n	8000a24 <SSD1306_draw_pixel+0xb0>
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d002      	beq.n	80009c6 <SSD1306_draw_pixel+0x52>
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d012      	beq.n	80009ea <SSD1306_draw_pixel+0x76>
 80009c4:	e02e      	b.n	8000a24 <SSD1306_draw_pixel+0xb0>
		{
			case 1:
				ssd1306_swap(x, y);
 80009c6:	88fa      	ldrh	r2, [r7, #6]
 80009c8:	88bb      	ldrh	r3, [r7, #4]
 80009ca:	4053      	eors	r3, r2
 80009cc:	80fb      	strh	r3, [r7, #6]
 80009ce:	88ba      	ldrh	r2, [r7, #4]
 80009d0:	88fb      	ldrh	r3, [r7, #6]
 80009d2:	4053      	eors	r3, r2
 80009d4:	80bb      	strh	r3, [r7, #4]
 80009d6:	88fa      	ldrh	r2, [r7, #6]
 80009d8:	88bb      	ldrh	r3, [r7, #4]
 80009da:	4053      	eors	r3, r2
 80009dc:	80fb      	strh	r3, [r7, #6]
				x = SSD1306_WIDTH - x - 1;
 80009de:	88fb      	ldrh	r3, [r7, #6]
 80009e0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	80fb      	strh	r3, [r7, #6]
				break;
 80009e8:	e01c      	b.n	8000a24 <SSD1306_draw_pixel+0xb0>
			case 2:
				x = SSD1306_WIDTH - x - 1;
 80009ea:	88fb      	ldrh	r3, [r7, #6]
 80009ec:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 80009f4:	88bb      	ldrh	r3, [r7, #4]
 80009f6:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	80bb      	strh	r3, [r7, #4]
				break;
 80009fe:	e011      	b.n	8000a24 <SSD1306_draw_pixel+0xb0>
			case 3:
				ssd1306_swap(x, y);
 8000a00:	88fa      	ldrh	r2, [r7, #6]
 8000a02:	88bb      	ldrh	r3, [r7, #4]
 8000a04:	4053      	eors	r3, r2
 8000a06:	80fb      	strh	r3, [r7, #6]
 8000a08:	88ba      	ldrh	r2, [r7, #4]
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	4053      	eors	r3, r2
 8000a0e:	80bb      	strh	r3, [r7, #4]
 8000a10:	88fa      	ldrh	r2, [r7, #6]
 8000a12:	88bb      	ldrh	r3, [r7, #4]
 8000a14:	4053      	eors	r3, r2
 8000a16:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 8000a18:	88bb      	ldrh	r3, [r7, #4]
 8000a1a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	80bb      	strh	r3, [r7, #4]
				break;
 8000a22:	bf00      	nop
		}

		switch (color)
 8000a24:	887b      	ldrh	r3, [r7, #2]
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d051      	beq.n	8000ace <SSD1306_draw_pixel+0x15a>
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	dc75      	bgt.n	8000b1a <SSD1306_draw_pixel+0x1a6>
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d026      	beq.n	8000a80 <SSD1306_draw_pixel+0x10c>
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d171      	bne.n	8000b1a <SSD1306_draw_pixel+0x1a6>
		{
			case SSD1306_WHITE:
				buffer[x + (y / 8) * SSD1306_WIDTH] |= (1 << (y & 7));
 8000a36:	4b3b      	ldr	r3, [pc, #236]	; (8000b24 <SSD1306_draw_pixel+0x1b0>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000a3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	da00      	bge.n	8000a48 <SSD1306_draw_pixel+0xd4>
 8000a46:	3307      	adds	r3, #7
 8000a48:	10db      	asrs	r3, r3, #3
 8000a4a:	b218      	sxth	r0, r3
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	01db      	lsls	r3, r3, #7
 8000a50:	440b      	add	r3, r1
 8000a52:	4413      	add	r3, r2
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b25a      	sxtb	r2, r3
 8000a58:	88bb      	ldrh	r3, [r7, #4]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	2101      	movs	r1, #1
 8000a60:	fa01 f303 	lsl.w	r3, r1, r3
 8000a64:	b25b      	sxtb	r3, r3
 8000a66:	4313      	orrs	r3, r2
 8000a68:	b25c      	sxtb	r4, r3
 8000a6a:	4b2e      	ldr	r3, [pc, #184]	; (8000b24 <SSD1306_draw_pixel+0x1b0>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000a72:	4602      	mov	r2, r0
 8000a74:	01d2      	lsls	r2, r2, #7
 8000a76:	440a      	add	r2, r1
 8000a78:	4413      	add	r3, r2
 8000a7a:	b2e2      	uxtb	r2, r4
 8000a7c:	701a      	strb	r2, [r3, #0]
				break;
 8000a7e:	e04c      	b.n	8000b1a <SSD1306_draw_pixel+0x1a6>
			case SSD1306_BLACK:
				buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y & 7));
 8000a80:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <SSD1306_draw_pixel+0x1b0>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000a88:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	da00      	bge.n	8000a92 <SSD1306_draw_pixel+0x11e>
 8000a90:	3307      	adds	r3, #7
 8000a92:	10db      	asrs	r3, r3, #3
 8000a94:	b218      	sxth	r0, r3
 8000a96:	4603      	mov	r3, r0
 8000a98:	01db      	lsls	r3, r3, #7
 8000a9a:	440b      	add	r3, r1
 8000a9c:	4413      	add	r3, r2
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	b25a      	sxtb	r2, r3
 8000aa2:	88bb      	ldrh	r3, [r7, #4]
 8000aa4:	f003 0307 	and.w	r3, r3, #7
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000aae:	b25b      	sxtb	r3, r3
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	b25b      	sxtb	r3, r3
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	b25c      	sxtb	r4, r3
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <SSD1306_draw_pixel+0x1b0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	01d2      	lsls	r2, r2, #7
 8000ac4:	440a      	add	r2, r1
 8000ac6:	4413      	add	r3, r2
 8000ac8:	b2e2      	uxtb	r2, r4
 8000aca:	701a      	strb	r2, [r3, #0]
				break;
 8000acc:	e025      	b.n	8000b1a <SSD1306_draw_pixel+0x1a6>
			case SSD1306_INVERSE:
				buffer[x + (y / 8) * SSD1306_WIDTH] ^= (1 << (y & 7));
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <SSD1306_draw_pixel+0x1b0>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000ad6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	da00      	bge.n	8000ae0 <SSD1306_draw_pixel+0x16c>
 8000ade:	3307      	adds	r3, #7
 8000ae0:	10db      	asrs	r3, r3, #3
 8000ae2:	b218      	sxth	r0, r3
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	01db      	lsls	r3, r3, #7
 8000ae8:	440b      	add	r3, r1
 8000aea:	4413      	add	r3, r2
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	b25a      	sxtb	r2, r3
 8000af0:	88bb      	ldrh	r3, [r7, #4]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	2101      	movs	r1, #1
 8000af8:	fa01 f303 	lsl.w	r3, r1, r3
 8000afc:	b25b      	sxtb	r3, r3
 8000afe:	4053      	eors	r3, r2
 8000b00:	b25c      	sxtb	r4, r3
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <SSD1306_draw_pixel+0x1b0>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	01d2      	lsls	r2, r2, #7
 8000b0e:	440a      	add	r2, r1
 8000b10:	4413      	add	r3, r2
 8000b12:	b2e2      	uxtb	r2, r4
 8000b14:	701a      	strb	r2, [r3, #0]
				break;
 8000b16:	e000      	b.n	8000b1a <SSD1306_draw_pixel+0x1a6>
		}
	}
 8000b18:	bf00      	nop
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd90      	pop	{r4, r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000128 	.word	0x20000128

08000b28 <SSD1306_display_clear>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_display_clear(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	memset(buffer, 0, SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8));
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <SSD1306_display_clear+0x18>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f007 fab2 	bl	80080a0 <memset>
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000128 	.word	0x20000128

08000b44 <SSD1306_draw_fast_hline>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_fast_hline(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8000b44:	b590      	push	{r4, r7, lr}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	4608      	mov	r0, r1
 8000b4e:	4611      	mov	r1, r2
 8000b50:	461a      	mov	r2, r3
 8000b52:	4623      	mov	r3, r4
 8000b54:	80fb      	strh	r3, [r7, #6]
 8000b56:	4603      	mov	r3, r0
 8000b58:	80bb      	strh	r3, [r7, #4]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	807b      	strh	r3, [r7, #2]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	803b      	strh	r3, [r7, #0]
	bool bSwap = false;
 8000b62:	2300      	movs	r3, #0
 8000b64:	73fb      	strb	r3, [r7, #15]

	switch (SSD1306_get_rotation())
 8000b66:	f000 fa9f 	bl	80010a8 <SSD1306_get_rotation>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b03      	cmp	r3, #3
 8000b6e:	d02c      	beq.n	8000bca <SSD1306_draw_fast_hline+0x86>
 8000b70:	2b03      	cmp	r3, #3
 8000b72:	dc45      	bgt.n	8000c00 <SSD1306_draw_fast_hline+0xbc>
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d002      	beq.n	8000b7e <SSD1306_draw_fast_hline+0x3a>
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d014      	beq.n	8000ba6 <SSD1306_draw_fast_hline+0x62>
 8000b7c:	e040      	b.n	8000c00 <SSD1306_draw_fast_hline+0xbc>
	{
		case 1:
			// 90 degree rotation, swap x & y for rotation, then invert x
			bSwap = true;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	73fb      	strb	r3, [r7, #15]
			ssd1306_swap(x, y);
 8000b82:	88fa      	ldrh	r2, [r7, #6]
 8000b84:	88bb      	ldrh	r3, [r7, #4]
 8000b86:	4053      	eors	r3, r2
 8000b88:	80fb      	strh	r3, [r7, #6]
 8000b8a:	88ba      	ldrh	r2, [r7, #4]
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	4053      	eors	r3, r2
 8000b90:	80bb      	strh	r3, [r7, #4]
 8000b92:	88fa      	ldrh	r2, [r7, #6]
 8000b94:	88bb      	ldrh	r3, [r7, #4]
 8000b96:	4053      	eors	r3, r2
 8000b98:	80fb      	strh	r3, [r7, #6]
			x = SSD1306_WIDTH - x - 1;
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	80fb      	strh	r3, [r7, #6]
			break;
 8000ba4:	e02c      	b.n	8000c00 <SSD1306_draw_fast_hline+0xbc>
		case 2:
			// 180 degree rotation, invert x and y, then shift y around for height.
			x = SSD1306_WIDTH - x - 1;
 8000ba6:	88fb      	ldrh	r3, [r7, #6]
 8000ba8:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	80fb      	strh	r3, [r7, #6]
			y = SSD1306_HEIGHT - y - 1;
 8000bb0:	88bb      	ldrh	r3, [r7, #4]
 8000bb2:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	80bb      	strh	r3, [r7, #4]
			x -= (w - 1);
 8000bba:	88fa      	ldrh	r2, [r7, #6]
 8000bbc:	887b      	ldrh	r3, [r7, #2]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	80fb      	strh	r3, [r7, #6]
			break;
 8000bc8:	e01a      	b.n	8000c00 <SSD1306_draw_fast_hline+0xbc>
		case 3:
			// 270 degree rotation, swap x & y for rotation,
			// then invert y and adjust y for w (not to become h)
			bSwap = true;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	73fb      	strb	r3, [r7, #15]
			ssd1306_swap(x, y);
 8000bce:	88fa      	ldrh	r2, [r7, #6]
 8000bd0:	88bb      	ldrh	r3, [r7, #4]
 8000bd2:	4053      	eors	r3, r2
 8000bd4:	80fb      	strh	r3, [r7, #6]
 8000bd6:	88ba      	ldrh	r2, [r7, #4]
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	4053      	eors	r3, r2
 8000bdc:	80bb      	strh	r3, [r7, #4]
 8000bde:	88fa      	ldrh	r2, [r7, #6]
 8000be0:	88bb      	ldrh	r3, [r7, #4]
 8000be2:	4053      	eors	r3, r2
 8000be4:	80fb      	strh	r3, [r7, #6]
			y = SSD1306_HEIGHT - y - 1;
 8000be6:	88bb      	ldrh	r3, [r7, #4]
 8000be8:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	80bb      	strh	r3, [r7, #4]
			y -= (w - 1);
 8000bf0:	88ba      	ldrh	r2, [r7, #4]
 8000bf2:	887b      	ldrh	r3, [r7, #2]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	80bb      	strh	r3, [r7, #4]
			break;
 8000bfe:	bf00      	nop
	}

	if (bSwap)
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d009      	beq.n	8000c1a <SSD1306_draw_fast_hline+0xd6>
	{
		SSD1306_draw_fast_vline_internal(x, y, w, color);
 8000c06:	883b      	ldrh	r3, [r7, #0]
 8000c08:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000c0c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000c10:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000c14:	f000 f918 	bl	8000e48 <SSD1306_draw_fast_vline_internal>
	}
	else
	{
		SSD1306_draw_fast_hline_internal(x, y, w, color);
	}
}
 8000c18:	e008      	b.n	8000c2c <SSD1306_draw_fast_hline+0xe8>
		SSD1306_draw_fast_hline_internal(x, y, w, color);
 8000c1a:	883b      	ldrh	r3, [r7, #0]
 8000c1c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000c20:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000c24:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000c28:	f000 f804 	bl	8000c34 <SSD1306_draw_fast_hline_internal>
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd90      	pop	{r4, r7, pc}

08000c34 <SSD1306_draw_fast_hline_internal>:

void SSD1306_draw_fast_hline_internal(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8000c34:	b490      	push	{r4, r7}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4604      	mov	r4, r0
 8000c3c:	4608      	mov	r0, r1
 8000c3e:	4611      	mov	r1, r2
 8000c40:	461a      	mov	r2, r3
 8000c42:	4623      	mov	r3, r4
 8000c44:	80fb      	strh	r3, [r7, #6]
 8000c46:	4603      	mov	r3, r0
 8000c48:	80bb      	strh	r3, [r7, #4]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	807b      	strh	r3, [r7, #2]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	803b      	strh	r3, [r7, #0]
	if ((y >= 0) && (y < SSD1306_HEIGHT))
 8000c52:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	db75      	blt.n	8000d46 <SSD1306_draw_fast_hline_internal+0x112>
 8000c5a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c5e:	2b3f      	cmp	r3, #63	; 0x3f
 8000c60:	dc71      	bgt.n	8000d46 <SSD1306_draw_fast_hline_internal+0x112>
	{
		// Y coord in bounds?
		if (x < 0)
 8000c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	da06      	bge.n	8000c78 <SSD1306_draw_fast_hline_internal+0x44>
		{
			// Clip left
			w += x;
 8000c6a:	887a      	ldrh	r2, [r7, #2]
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	4413      	add	r3, r2
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	807b      	strh	r3, [r7, #2]
			x = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	80fb      	strh	r3, [r7, #6]
		}
		if ((x + w) > SSD1306_WIDTH)
 8000c78:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c80:	4413      	add	r3, r2
 8000c82:	2b80      	cmp	r3, #128	; 0x80
 8000c84:	dd04      	ble.n	8000c90 <SSD1306_draw_fast_hline_internal+0x5c>
		{
			// Clip right
			w = (SSD1306_WIDTH - x);
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	807b      	strh	r3, [r7, #2]
		}
		if (w > 0)
 8000c90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	dd56      	ble.n	8000d46 <SSD1306_draw_fast_hline_internal+0x112>
		{
			// Proceed only if width is positive
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x], mask = 1 << (y & 7);
 8000c98:	4b2e      	ldr	r3, [pc, #184]	; (8000d54 <SSD1306_draw_fast_hline_internal+0x120>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	da00      	bge.n	8000ca6 <SSD1306_draw_fast_hline_internal+0x72>
 8000ca4:	3307      	adds	r3, #7
 8000ca6:	10db      	asrs	r3, r3, #3
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	01d9      	lsls	r1, r3, #7
 8000cac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cb0:	440b      	add	r3, r1
 8000cb2:	4413      	add	r3, r2
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	88bb      	ldrh	r3, [r7, #4]
 8000cb8:	f003 0307 	and.w	r3, r3, #7
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	72fb      	strb	r3, [r7, #11]
			switch (color)
 8000cc4:	883b      	ldrh	r3, [r7, #0]
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d034      	beq.n	8000d34 <SSD1306_draw_fast_hline_internal+0x100>
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	dc3c      	bgt.n	8000d48 <SSD1306_draw_fast_hline_internal+0x114>
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d013      	beq.n	8000cfa <SSD1306_draw_fast_hline_internal+0xc6>
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d138      	bne.n	8000d48 <SSD1306_draw_fast_hline_internal+0x114>
			{
				case SSD1306_WHITE:
					while (w--)
 8000cd6:	e007      	b.n	8000ce8 <SSD1306_draw_fast_hline_internal+0xb4>
					{
						*pBuf++ |= mask;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	1c5a      	adds	r2, r3, #1
 8000cdc:	60fa      	str	r2, [r7, #12]
 8000cde:	7819      	ldrb	r1, [r3, #0]
 8000ce0:	7afa      	ldrb	r2, [r7, #11]
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000ce8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	3a01      	subs	r2, #1
 8000cf0:	b292      	uxth	r2, r2
 8000cf2:	807a      	strh	r2, [r7, #2]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d1ef      	bne.n	8000cd8 <SSD1306_draw_fast_hline_internal+0xa4>
					};
					break;
 8000cf8:	e026      	b.n	8000d48 <SSD1306_draw_fast_hline_internal+0x114>
				case SSD1306_BLACK:
					mask = ~mask;
 8000cfa:	7afb      	ldrb	r3, [r7, #11]
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	72fb      	strb	r3, [r7, #11]
					while (w--)
 8000d00:	e007      	b.n	8000d12 <SSD1306_draw_fast_hline_internal+0xde>
					{
						*pBuf++ &= mask;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	1c5a      	adds	r2, r3, #1
 8000d06:	60fa      	str	r2, [r7, #12]
 8000d08:	7819      	ldrb	r1, [r3, #0]
 8000d0a:	7afa      	ldrb	r2, [r7, #11]
 8000d0c:	400a      	ands	r2, r1
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000d12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	3a01      	subs	r2, #1
 8000d1a:	b292      	uxth	r2, r2
 8000d1c:	807a      	strh	r2, [r7, #2]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1ef      	bne.n	8000d02 <SSD1306_draw_fast_hline_internal+0xce>
					};
					break;
 8000d22:	e011      	b.n	8000d48 <SSD1306_draw_fast_hline_internal+0x114>
				case SSD1306_INVERSE:
					while (w--)
					{
						*pBuf++ ^= mask;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	60fa      	str	r2, [r7, #12]
 8000d2a:	7819      	ldrb	r1, [r3, #0]
 8000d2c:	7afa      	ldrb	r2, [r7, #11]
 8000d2e:	404a      	eors	r2, r1
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	701a      	strb	r2, [r3, #0]
					while (w--)
 8000d34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	3a01      	subs	r2, #1
 8000d3c:	b292      	uxth	r2, r2
 8000d3e:	807a      	strh	r2, [r7, #2]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1ef      	bne.n	8000d24 <SSD1306_draw_fast_hline_internal+0xf0>
					};
					break;
 8000d44:	e000      	b.n	8000d48 <SSD1306_draw_fast_hline_internal+0x114>
			}
		}
 8000d46:	bf00      	nop
	}
}
 8000d48:	bf00      	nop
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc90      	pop	{r4, r7}
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000128 	.word	0x20000128

08000d58 <SSD1306_draw_fast_vline>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_fast_vline(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	4608      	mov	r0, r1
 8000d62:	4611      	mov	r1, r2
 8000d64:	461a      	mov	r2, r3
 8000d66:	4623      	mov	r3, r4
 8000d68:	80fb      	strh	r3, [r7, #6]
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	80bb      	strh	r3, [r7, #4]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	807b      	strh	r3, [r7, #2]
 8000d72:	4613      	mov	r3, r2
 8000d74:	803b      	strh	r3, [r7, #0]
	bool bSwap = false;
 8000d76:	2300      	movs	r3, #0
 8000d78:	73fb      	strb	r3, [r7, #15]
	switch (SSD1306_get_rotation())
 8000d7a:	f000 f995 	bl	80010a8 <SSD1306_get_rotation>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b03      	cmp	r3, #3
 8000d82:	d033      	beq.n	8000dec <SSD1306_draw_fast_vline+0x94>
 8000d84:	2b03      	cmp	r3, #3
 8000d86:	dc45      	bgt.n	8000e14 <SSD1306_draw_fast_vline+0xbc>
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d002      	beq.n	8000d92 <SSD1306_draw_fast_vline+0x3a>
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d01b      	beq.n	8000dc8 <SSD1306_draw_fast_vline+0x70>
 8000d90:	e040      	b.n	8000e14 <SSD1306_draw_fast_vline+0xbc>
	{
		case 1:
			// 90 degree rotation, swap x & y for rotation,
			// then invert x and adjust x for h (now to become w)
			bSwap = true;
 8000d92:	2301      	movs	r3, #1
 8000d94:	73fb      	strb	r3, [r7, #15]
  			ssd1306_swap(x, y);
 8000d96:	88fa      	ldrh	r2, [r7, #6]
 8000d98:	88bb      	ldrh	r3, [r7, #4]
 8000d9a:	4053      	eors	r3, r2
 8000d9c:	80fb      	strh	r3, [r7, #6]
 8000d9e:	88ba      	ldrh	r2, [r7, #4]
 8000da0:	88fb      	ldrh	r3, [r7, #6]
 8000da2:	4053      	eors	r3, r2
 8000da4:	80bb      	strh	r3, [r7, #4]
 8000da6:	88fa      	ldrh	r2, [r7, #6]
 8000da8:	88bb      	ldrh	r3, [r7, #4]
 8000daa:	4053      	eors	r3, r2
 8000dac:	80fb      	strh	r3, [r7, #6]
  			x = SSD1306_WIDTH - x - 1;
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	80fb      	strh	r3, [r7, #6]
  			x -= (h - 1);
 8000db8:	88fa      	ldrh	r2, [r7, #6]
 8000dba:	887b      	ldrh	r3, [r7, #2]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	80fb      	strh	r3, [r7, #6]
  			break;
 8000dc6:	e025      	b.n	8000e14 <SSD1306_draw_fast_vline+0xbc>
  	    case 2:
  	    	// 180 degree rotation, invert x and y, then shift y around for height.
  	    	x = SSD1306_WIDTH - x - 1;
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 8000dd2:	88bb      	ldrh	r3, [r7, #4]
 8000dd4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	80bb      	strh	r3, [r7, #4]
  	    	y -= (h - 1);
 8000ddc:	88ba      	ldrh	r2, [r7, #4]
 8000dde:	887b      	ldrh	r3, [r7, #2]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	3301      	adds	r3, #1
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8000dea:	e013      	b.n	8000e14 <SSD1306_draw_fast_vline+0xbc>
  	    case 3:
  	    	// 270 degree rotation, swap x & y for rotation, then invert y
  	    	bSwap = true;
 8000dec:	2301      	movs	r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
  	    	ssd1306_swap(x, y);
 8000df0:	88fa      	ldrh	r2, [r7, #6]
 8000df2:	88bb      	ldrh	r3, [r7, #4]
 8000df4:	4053      	eors	r3, r2
 8000df6:	80fb      	strh	r3, [r7, #6]
 8000df8:	88ba      	ldrh	r2, [r7, #4]
 8000dfa:	88fb      	ldrh	r3, [r7, #6]
 8000dfc:	4053      	eors	r3, r2
 8000dfe:	80bb      	strh	r3, [r7, #4]
 8000e00:	88fa      	ldrh	r2, [r7, #6]
 8000e02:	88bb      	ldrh	r3, [r7, #4]
 8000e04:	4053      	eors	r3, r2
 8000e06:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 8000e08:	88bb      	ldrh	r3, [r7, #4]
 8000e0a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8000e12:	bf00      	nop
	}

	if (bSwap)
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d009      	beq.n	8000e2e <SSD1306_draw_fast_vline+0xd6>
	{
		SSD1306_draw_fast_hline_internal(x, y, h, color);
 8000e1a:	883b      	ldrh	r3, [r7, #0]
 8000e1c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000e20:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e24:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e28:	f7ff ff04 	bl	8000c34 <SSD1306_draw_fast_hline_internal>
	}
	else
	{
		SSD1306_draw_fast_vline_internal(x, y, h, color);
	}
}
 8000e2c:	e008      	b.n	8000e40 <SSD1306_draw_fast_vline+0xe8>
		SSD1306_draw_fast_vline_internal(x, y, h, color);
 8000e2e:	883b      	ldrh	r3, [r7, #0]
 8000e30:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000e34:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e38:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e3c:	f000 f804 	bl	8000e48 <SSD1306_draw_fast_vline_internal>
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd90      	pop	{r4, r7, pc}

08000e48 <SSD1306_draw_fast_vline_internal>:

void SSD1306_draw_fast_vline_internal(int16_t x, int16_t __y, int16_t __h, uint16_t color)
{
 8000e48:	b490      	push	{r4, r7}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4604      	mov	r4, r0
 8000e50:	4608      	mov	r0, r1
 8000e52:	4611      	mov	r1, r2
 8000e54:	461a      	mov	r2, r3
 8000e56:	4623      	mov	r3, r4
 8000e58:	80fb      	strh	r3, [r7, #6]
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	80bb      	strh	r3, [r7, #4]
 8000e5e:	460b      	mov	r3, r1
 8000e60:	807b      	strh	r3, [r7, #2]
 8000e62:	4613      	mov	r3, r2
 8000e64:	803b      	strh	r3, [r7, #0]
	if ((x >= 0) && (x < SSD1306_WIDTH))
 8000e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f2c0 80da 	blt.w	8001024 <SSD1306_draw_fast_vline_internal+0x1dc>
 8000e70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e74:	2b7f      	cmp	r3, #127	; 0x7f
 8000e76:	f300 80d5 	bgt.w	8001024 <SSD1306_draw_fast_vline_internal+0x1dc>
	{
		// X coord in bounds?
		if (__y < 0)
 8000e7a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	da06      	bge.n	8000e90 <SSD1306_draw_fast_vline_internal+0x48>
		{
			// Clip top
			__h += __y;
 8000e82:	887a      	ldrh	r2, [r7, #2]
 8000e84:	88bb      	ldrh	r3, [r7, #4]
 8000e86:	4413      	add	r3, r2
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	807b      	strh	r3, [r7, #2]
			__y = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	80bb      	strh	r3, [r7, #4]
		}
		if ((__y + __h) > SSD1306_HEIGHT)
 8000e90:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e98:	4413      	add	r3, r2
 8000e9a:	2b40      	cmp	r3, #64	; 0x40
 8000e9c:	dd04      	ble.n	8000ea8 <SSD1306_draw_fast_vline_internal+0x60>
		{
			// Clip bottom
			__h = (SSD1306_HEIGHT - __y);
 8000e9e:	88bb      	ldrh	r3, [r7, #4]
 8000ea0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	807b      	strh	r3, [r7, #2]
		}
		if (__h > 0)
 8000ea8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f340 80b9 	ble.w	8001024 <SSD1306_draw_fast_vline_internal+0x1dc>
		{
			// Proceed only if height is now positive
			// this display doesn't need ints for coordinates,
			// use local byte registers for faster juggling
			uint8_t y = __y, h = __h;
 8000eb2:	88bb      	ldrh	r3, [r7, #4]
 8000eb4:	737b      	strb	r3, [r7, #13]
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	75fb      	strb	r3, [r7, #23]
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x];
 8000eba:	4b5d      	ldr	r3, [pc, #372]	; (8001030 <SSD1306_draw_fast_vline_internal+0x1e8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	7b7a      	ldrb	r2, [r7, #13]
 8000ec0:	08d2      	lsrs	r2, r2, #3
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	01d1      	lsls	r1, r2, #7
 8000ec6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000eca:	440a      	add	r2, r1
 8000ecc:	4413      	add	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]

			// do the first partial byte, if necessary - this requires some masking
			uint8_t mod = (y & 7);
 8000ed0:	7b7b      	ldrb	r3, [r7, #13]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	73fb      	strb	r3, [r7, #15]
			if (mod)
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d040      	beq.n	8000f60 <SSD1306_draw_fast_vline_internal+0x118>
			{
				// mask off the high n bits we want to set
				mod = 8 - mod;
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	f1c3 0308 	rsb	r3, r3, #8
 8000ee4:	73fb      	strb	r3, [r7, #15]
				// note - lookup table results in a nearly 10% performance
				// improvement in fill* functions
				// uint8_t mask = ~(0xFF >> mod);
				static const uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE};
				uint8_t mask = (*(const unsigned char *)(&premask[mod]));
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	4a52      	ldr	r2, [pc, #328]	; (8001034 <SSD1306_draw_fast_vline_internal+0x1ec>)
 8000eea:	5cd3      	ldrb	r3, [r2, r3]
 8000eec:	73bb      	strb	r3, [r7, #14]
				// adjust the mask if we're not going to reach the end of this byte
				if (h < mod)
 8000eee:	7dfa      	ldrb	r2, [r7, #23]
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d20b      	bcs.n	8000f0e <SSD1306_draw_fast_vline_internal+0xc6>
				{
					mask &= (0XFF >> (mod - h));
 8000ef6:	7bfa      	ldrb	r2, [r7, #15]
 8000ef8:	7dfb      	ldrb	r3, [r7, #23]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	22ff      	movs	r2, #255	; 0xff
 8000efe:	fa42 f303 	asr.w	r3, r2, r3
 8000f02:	b25a      	sxtb	r2, r3
 8000f04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	b25b      	sxtb	r3, r3
 8000f0c:	73bb      	strb	r3, [r7, #14]
				}

				switch (color)
 8000f0e:	883b      	ldrh	r3, [r7, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d01a      	beq.n	8000f4a <SSD1306_draw_fast_vline_internal+0x102>
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	dc20      	bgt.n	8000f5a <SSD1306_draw_fast_vline_internal+0x112>
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d009      	beq.n	8000f30 <SSD1306_draw_fast_vline_internal+0xe8>
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d11c      	bne.n	8000f5a <SSD1306_draw_fast_vline_internal+0x112>
				{
					case SSD1306_WHITE:
						*pBuf |= mask;
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	781a      	ldrb	r2, [r3, #0]
 8000f24:	7bbb      	ldrb	r3, [r7, #14]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	701a      	strb	r2, [r3, #0]
						break;
 8000f2e:	e014      	b.n	8000f5a <SSD1306_draw_fast_vline_internal+0x112>
					case SSD1306_BLACK:
						*pBuf &= ~mask;
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	b25a      	sxtb	r2, r3
 8000f36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	4013      	ands	r3, r2
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	701a      	strb	r2, [r3, #0]
						break;
 8000f48:	e007      	b.n	8000f5a <SSD1306_draw_fast_vline_internal+0x112>
					case SSD1306_INVERSE:
						*pBuf ^= mask;
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	781a      	ldrb	r2, [r3, #0]
 8000f4e:	7bbb      	ldrb	r3, [r7, #14]
 8000f50:	4053      	eors	r3, r2
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	701a      	strb	r2, [r3, #0]
						break;
 8000f58:	bf00      	nop
				}
				pBuf += SSD1306_WIDTH;
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	3380      	adds	r3, #128	; 0x80
 8000f5e:	613b      	str	r3, [r7, #16]
			}

			if (h >= mod)
 8000f60:	7dfa      	ldrb	r2, [r7, #23]
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d35d      	bcc.n	8001024 <SSD1306_draw_fast_vline_internal+0x1dc>
			{
				// More to go?
				h -= mod;
 8000f68:	7dfa      	ldrb	r2, [r7, #23]
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	75fb      	strb	r3, [r7, #23]
				// Write solid bytes while we can - effectively 8 rows at a time
				if (h >= 8)
 8000f70:	7dfb      	ldrb	r3, [r7, #23]
 8000f72:	2b07      	cmp	r3, #7
 8000f74:	d925      	bls.n	8000fc2 <SSD1306_draw_fast_vline_internal+0x17a>
				{
					if (color == SSD1306_INVERSE)
 8000f76:	883b      	ldrh	r3, [r7, #0]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d10f      	bne.n	8000f9c <SSD1306_draw_fast_vline_internal+0x154>
					{
						// separate copy of the code so we don't impact performance of
						// black/white write version with an extra comparison per loop
						do
						{
							*pBuf ^= 0xFF; // Invert byte
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	3380      	adds	r3, #128	; 0x80
 8000f8c:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8000f8e:	7dfb      	ldrb	r3, [r7, #23]
 8000f90:	3b08      	subs	r3, #8
 8000f92:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	2b07      	cmp	r3, #7
 8000f98:	d8f0      	bhi.n	8000f7c <SSD1306_draw_fast_vline_internal+0x134>
 8000f9a:	e012      	b.n	8000fc2 <SSD1306_draw_fast_vline_internal+0x17a>
					}
					else
					{
						// store a local value to work with
						uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
 8000f9c:	883b      	ldrh	r3, [r7, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SSD1306_draw_fast_vline_internal+0x15e>
 8000fa2:	23ff      	movs	r3, #255	; 0xff
 8000fa4:	e000      	b.n	8000fa8 <SSD1306_draw_fast_vline_internal+0x160>
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	733b      	strb	r3, [r7, #12]
						do
						{
							*pBuf = val;   // Set byte
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	7b3a      	ldrb	r2, [r7, #12]
 8000fae:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	3380      	adds	r3, #128	; 0x80
 8000fb4:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8000fb6:	7dfb      	ldrb	r3, [r7, #23]
 8000fb8:	3b08      	subs	r3, #8
 8000fba:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8000fbc:	7dfb      	ldrb	r3, [r7, #23]
 8000fbe:	2b07      	cmp	r3, #7
 8000fc0:	d8f3      	bhi.n	8000faa <SSD1306_draw_fast_vline_internal+0x162>
					}
				}

				if (h)
 8000fc2:	7dfb      	ldrb	r3, [r7, #23]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d02d      	beq.n	8001024 <SSD1306_draw_fast_vline_internal+0x1dc>
				{
					// Do the final partial byte, if necessary
					mod = h & 7;
 8000fc8:	7dfb      	ldrb	r3, [r7, #23]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	73fb      	strb	r3, [r7, #15]
					// uint8_t mask = (1 << mod) - 1;
					// note - lookup table results in a nearly 10% performance
					// improvement in fill* functions
					static const uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
					uint8_t mask = (*(const unsigned char *)(&postmask[mod]));
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	4a19      	ldr	r2, [pc, #100]	; (8001038 <SSD1306_draw_fast_vline_internal+0x1f0>)
 8000fd4:	5cd3      	ldrb	r3, [r2, r3]
 8000fd6:	72fb      	strb	r3, [r7, #11]
					switch (color)
 8000fd8:	883b      	ldrh	r3, [r7, #0]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d01a      	beq.n	8001014 <SSD1306_draw_fast_vline_internal+0x1cc>
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	dc21      	bgt.n	8001026 <SSD1306_draw_fast_vline_internal+0x1de>
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d009      	beq.n	8000ffa <SSD1306_draw_fast_vline_internal+0x1b2>
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d11d      	bne.n	8001026 <SSD1306_draw_fast_vline_internal+0x1de>
					{
						case SSD1306_WHITE:
							*pBuf |= mask;
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	781a      	ldrb	r2, [r3, #0]
 8000fee:	7afb      	ldrb	r3, [r7, #11]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	701a      	strb	r2, [r3, #0]
							break;
 8000ff8:	e015      	b.n	8001026 <SSD1306_draw_fast_vline_internal+0x1de>
						case SSD1306_BLACK:
							*pBuf &= ~mask;
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b25a      	sxtb	r2, r3
 8001000:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001004:	43db      	mvns	r3, r3
 8001006:	b25b      	sxtb	r3, r3
 8001008:	4013      	ands	r3, r2
 800100a:	b25b      	sxtb	r3, r3
 800100c:	b2da      	uxtb	r2, r3
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	701a      	strb	r2, [r3, #0]
							break;
 8001012:	e008      	b.n	8001026 <SSD1306_draw_fast_vline_internal+0x1de>
						case SSD1306_INVERSE:
							*pBuf ^= mask;
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	781a      	ldrb	r2, [r3, #0]
 8001018:	7afb      	ldrb	r3, [r7, #11]
 800101a:	4053      	eors	r3, r2
 800101c:	b2da      	uxtb	r2, r3
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	701a      	strb	r2, [r3, #0]
							break;
 8001022:	e000      	b.n	8001026 <SSD1306_draw_fast_vline_internal+0x1de>
					}
				}
 8001024:	bf00      	nop
			}
		} // endif positive height
	}   // endif x in bounds
}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bc90      	pop	{r4, r7}
 800102e:	4770      	bx	lr
 8001030:	20000128 	.word	0x20000128
 8001034:	08008758 	.word	0x08008758
 8001038:	08008760 	.word	0x08008760

0800103c <SSD1306_display_repaint>:
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void SSD1306_display_repaint(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
	uint16_t buf_len = SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8);
 8001042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001046:	80fb      	strh	r3, [r7, #6]

	SSD1306_send_com(SSD1306_PAGEADDR);
 8001048:	2022      	movs	r0, #34	; 0x22
 800104a:	f7ff fbf7 	bl	800083c <SSD1306_send_com>
	SSD1306_send_com(0x00);
 800104e:	2000      	movs	r0, #0
 8001050:	f7ff fbf4 	bl	800083c <SSD1306_send_com>
	SSD1306_send_com(0xFF);
 8001054:	20ff      	movs	r0, #255	; 0xff
 8001056:	f7ff fbf1 	bl	800083c <SSD1306_send_com>
	SSD1306_send_com(SSD1306_COLUMNADDR);
 800105a:	2021      	movs	r0, #33	; 0x21
 800105c:	f7ff fbee 	bl	800083c <SSD1306_send_com>
	SSD1306_send_com(0x00);
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff fbeb 	bl	800083c <SSD1306_send_com>

	SSD1306_send_com(SSD1306_WIDTH - 1); // Column end address
 8001066:	207f      	movs	r0, #127	; 0x7f
 8001068:	f7ff fbe8 	bl	800083c <SSD1306_send_com>

	platform_write_dma(SSD1306_SETSTARTLINE, buffer, buf_len);
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <SSD1306_display_repaint+0x48>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	88fa      	ldrh	r2, [r7, #6]
 8001072:	4619      	mov	r1, r3
 8001074:	2040      	movs	r0, #64	; 0x40
 8001076:	f7ff fbc7 	bl	8000808 <platform_write_dma>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000128 	.word	0x20000128

08001088 <SSD1306_set_rotation>:
    SSD1306_send_com(SSD1306_SETCONTRAST);
    SSD1306_send_com(contrast);
}

void SSD1306_set_rotation(uint8_t rot)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	rotation = rot;
 8001092:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <SSD1306_set_rotation+0x1c>)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	7013      	strb	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	2000012c 	.word	0x2000012c

080010a8 <SSD1306_get_rotation>:

uint8_t SSD1306_get_rotation(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
	return rotation;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <SSD1306_get_rotation+0x14>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	2000012c 	.word	0x2000012c

080010c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <MX_DMA_Init+0x4c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a0f      	ldr	r2, [pc, #60]	; (800110c <MX_DMA_Init+0x4c>)
 80010d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b0d      	ldr	r3, [pc, #52]	; (800110c <MX_DMA_Init+0x4c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	2010      	movs	r0, #16
 80010e8:	f001 fb0f 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80010ec:	2010      	movs	r0, #16
 80010ee:	f001 fb28 	bl	8002742 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	2011      	movs	r0, #17
 80010f8:	f001 fb07 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80010fc:	2011      	movs	r0, #17
 80010fe:	f001 fb20 	bl	8002742 <HAL_NVIC_EnableIRQ>

}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800

08001110 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	4b44      	ldr	r3, [pc, #272]	; (800123c <MX_GPIO_Init+0x12c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a43      	ldr	r2, [pc, #268]	; (800123c <MX_GPIO_Init+0x12c>)
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b41      	ldr	r3, [pc, #260]	; (800123c <MX_GPIO_Init+0x12c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b3d      	ldr	r3, [pc, #244]	; (800123c <MX_GPIO_Init+0x12c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a3c      	ldr	r2, [pc, #240]	; (800123c <MX_GPIO_Init+0x12c>)
 800114c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b3a      	ldr	r3, [pc, #232]	; (800123c <MX_GPIO_Init+0x12c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	4b36      	ldr	r3, [pc, #216]	; (800123c <MX_GPIO_Init+0x12c>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a35      	ldr	r2, [pc, #212]	; (800123c <MX_GPIO_Init+0x12c>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b33      	ldr	r3, [pc, #204]	; (800123c <MX_GPIO_Init+0x12c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	4b2f      	ldr	r3, [pc, #188]	; (800123c <MX_GPIO_Init+0x12c>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a2e      	ldr	r2, [pc, #184]	; (800123c <MX_GPIO_Init+0x12c>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b2c      	ldr	r3, [pc, #176]	; (800123c <MX_GPIO_Init+0x12c>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	2120      	movs	r1, #32
 800119a:	4829      	ldr	r0, [pc, #164]	; (8001240 <MX_GPIO_Init+0x130>)
 800119c:	f002 f88c 	bl	80032b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80011a6:	4827      	ldr	r0, [pc, #156]	; (8001244 <MX_GPIO_Init+0x134>)
 80011a8:	f002 f886 	bl	80032b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4820      	ldr	r0, [pc, #128]	; (8001244 <MX_GPIO_Init+0x134>)
 80011c4:	f001 fef4 	bl	8002fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011c8:	2320      	movs	r3, #32
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4818      	ldr	r0, [pc, #96]	; (8001240 <MX_GPIO_Init+0x130>)
 80011e0:	f001 fee6 	bl	8002fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011e4:	23f0      	movs	r3, #240	; 0xf0
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <MX_GPIO_Init+0x134>)
 80011f8:	f001 feda 	bl	8002fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	480b      	ldr	r0, [pc, #44]	; (8001244 <MX_GPIO_Init+0x134>)
 8001216:	f001 fecb 	bl	8002fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800121a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800121e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001220:	2300      	movs	r3, #0
 8001222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001224:	2301      	movs	r3, #1
 8001226:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	4804      	ldr	r0, [pc, #16]	; (8001240 <MX_GPIO_Init+0x130>)
 8001230:	f001 febe 	bl	8002fb0 <HAL_GPIO_Init>

}
 8001234:	bf00      	nop
 8001236:	3728      	adds	r7, #40	; 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40023800 	.word	0x40023800
 8001240:	40020000 	.word	0x40020000
 8001244:	40020800 	.word	0x40020800

08001248 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <MX_I2C1_Init+0x50>)
 800124e:	4a13      	ldr	r2, [pc, #76]	; (800129c <MX_I2C1_Init+0x54>)
 8001250:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_I2C1_Init+0x50>)
 8001254:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <MX_I2C1_Init+0x58>)
 8001256:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_I2C1_Init+0x50>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MX_I2C1_Init+0x50>)
 8001260:	2200      	movs	r2, #0
 8001262:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <MX_I2C1_Init+0x50>)
 8001266:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800126a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800126c:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <MX_I2C1_Init+0x50>)
 800126e:	2200      	movs	r2, #0
 8001270:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_I2C1_Init+0x50>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <MX_I2C1_Init+0x50>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <MX_I2C1_Init+0x50>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001284:	4804      	ldr	r0, [pc, #16]	; (8001298 <MX_I2C1_Init+0x50>)
 8001286:	f002 f84b 	bl	8003320 <HAL_I2C_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001290:	f000 fcfc 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200001b0 	.word	0x200001b0
 800129c:	40005400 	.word	0x40005400
 80012a0:	00061a80 	.word	0x00061a80

080012a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a34      	ldr	r2, [pc, #208]	; (8001394 <HAL_I2C_MspInit+0xf0>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d162      	bne.n	800138c <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	4b33      	ldr	r3, [pc, #204]	; (8001398 <HAL_I2C_MspInit+0xf4>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a32      	ldr	r2, [pc, #200]	; (8001398 <HAL_I2C_MspInit+0xf4>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b30      	ldr	r3, [pc, #192]	; (8001398 <HAL_I2C_MspInit+0xf4>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e8:	2312      	movs	r3, #18
 80012ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012f4:	2304      	movs	r3, #4
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4619      	mov	r1, r3
 80012fe:	4827      	ldr	r0, [pc, #156]	; (800139c <HAL_I2C_MspInit+0xf8>)
 8001300:	f001 fe56 	bl	8002fb0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	4b23      	ldr	r3, [pc, #140]	; (8001398 <HAL_I2C_MspInit+0xf4>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	4a22      	ldr	r2, [pc, #136]	; (8001398 <HAL_I2C_MspInit+0xf4>)
 800130e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001312:	6413      	str	r3, [r2, #64]	; 0x40
 8001314:	4b20      	ldr	r3, [pc, #128]	; (8001398 <HAL_I2C_MspInit+0xf4>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001320:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <HAL_I2C_MspInit+0xfc>)
 8001322:	4a20      	ldr	r2, [pc, #128]	; (80013a4 <HAL_I2C_MspInit+0x100>)
 8001324:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001326:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <HAL_I2C_MspInit+0xfc>)
 8001328:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800132c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <HAL_I2C_MspInit+0xfc>)
 8001330:	2240      	movs	r2, #64	; 0x40
 8001332:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <HAL_I2C_MspInit+0xfc>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <HAL_I2C_MspInit+0xfc>)
 800133c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001340:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <HAL_I2C_MspInit+0xfc>)
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_I2C_MspInit+0xfc>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_I2C_MspInit+0xfc>)
 8001350:	2200      	movs	r2, #0
 8001352:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_I2C_MspInit+0xfc>)
 8001356:	2200      	movs	r2, #0
 8001358:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_I2C_MspInit+0xfc>)
 800135c:	2200      	movs	r2, #0
 800135e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001360:	480f      	ldr	r0, [pc, #60]	; (80013a0 <HAL_I2C_MspInit+0xfc>)
 8001362:	f001 fa09 	bl	8002778 <HAL_DMA_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 800136c:	f000 fc8e 	bl	8001c8c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <HAL_I2C_MspInit+0xfc>)
 8001374:	635a      	str	r2, [r3, #52]	; 0x34
 8001376:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <HAL_I2C_MspInit+0xfc>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2100      	movs	r1, #0
 8001380:	201f      	movs	r0, #31
 8001382:	f001 f9c2 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001386:	201f      	movs	r0, #31
 8001388:	f001 f9db 	bl	8002742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	; 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40005400 	.word	0x40005400
 8001398:	40023800 	.word	0x40023800
 800139c:	40020400 	.word	0x40020400
 80013a0:	20000150 	.word	0x20000150
 80013a4:	400260a0 	.word	0x400260a0

080013a8 <frameTransform>:

	}

}
void frameTransform()
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0

	for(int i=0;i<13;i++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	e00d      	b.n	80013d0 <frameTransform+0x28>
	{
		sendFrame[i]=communicationFrame[i]+48;
 80013b4:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <frameTransform+0x3c>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	3330      	adds	r3, #48	; 0x30
 80013be:	b2d9      	uxtb	r1, r3
 80013c0:	4a09      	ldr	r2, [pc, #36]	; (80013e8 <frameTransform+0x40>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	460a      	mov	r2, r1
 80013c8:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<13;i++)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3301      	adds	r3, #1
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b0c      	cmp	r3, #12
 80013d4:	ddee      	ble.n	80013b4 <frameTransform+0xc>
	}




}
 80013d6:	bf00      	nop
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	20000088 	.word	0x20000088
 80013e8:	200002ac 	.word	0x200002ac

080013ec <errorCheck>:

void errorCheck()
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0

	if(communicationFrame[0] != 1 && communicationFrame[13]!=1)
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <errorCheck+0x40>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d013      	beq.n	8001422 <errorCheck+0x36>
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <errorCheck+0x40>)
 80013fc:	7b5b      	ldrb	r3, [r3, #13]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d00f      	beq.n	8001422 <errorCheck+0x36>
	{int i=0;
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
		do{

			HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin );
 8001406:	2120      	movs	r1, #32
 8001408:	4809      	ldr	r0, [pc, #36]	; (8001430 <errorCheck+0x44>)
 800140a:	f001 ff6e 	bl	80032ea <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 800140e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001412:	f001 f87b 	bl	800250c <HAL_Delay>
			i++;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3301      	adds	r3, #1
 800141a:	607b      	str	r3, [r7, #4]
		}while(i<10);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b09      	cmp	r3, #9
 8001420:	ddf1      	ble.n	8001406 <errorCheck+0x1a>


	}
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000088 	.word	0x20000088
 8001430:	40020000 	.word	0x40020000

08001434 <frameToName>:

 void frameToName(){
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
		P = communicationFrame [1];
 800143a:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <frameToName+0xb4>)
 800143c:	785a      	ldrb	r2, [r3, #1]
 800143e:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <frameToName+0xb8>)
 8001440:	701a      	strb	r2, [r3, #0]
		I = communicationFrame [2];
 8001442:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <frameToName+0xb4>)
 8001444:	789a      	ldrb	r2, [r3, #2]
 8001446:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <frameToName+0xbc>)
 8001448:	701a      	strb	r2, [r3, #0]
		D = communicationFrame [3];
 800144a:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <frameToName+0xb4>)
 800144c:	78da      	ldrb	r2, [r3, #3]
 800144e:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <frameToName+0xc0>)
 8001450:	701a      	strb	r2, [r3, #0]
		START = communicationFrame [4];
 8001452:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <frameToName+0xb4>)
 8001454:	791a      	ldrb	r2, [r3, #4]
 8001456:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <frameToName+0xc4>)
 8001458:	701a      	strb	r2, [r3, #0]
		STOP = communicationFrame [5];
 800145a:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <frameToName+0xb4>)
 800145c:	795a      	ldrb	r2, [r3, #5]
 800145e:	4b27      	ldr	r3, [pc, #156]	; (80014fc <frameToName+0xc8>)
 8001460:	701a      	strb	r2, [r3, #0]
		leftButton = communicationFrame [6];
 8001462:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <frameToName+0xb4>)
 8001464:	799a      	ldrb	r2, [r3, #6]
 8001466:	4b26      	ldr	r3, [pc, #152]	; (8001500 <frameToName+0xcc>)
 8001468:	701a      	strb	r2, [r3, #0]
		rightButton = communicationFrame [7];
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <frameToName+0xb4>)
 800146c:	79da      	ldrb	r2, [r3, #7]
 800146e:	4b25      	ldr	r3, [pc, #148]	; (8001504 <frameToName+0xd0>)
 8001470:	701a      	strb	r2, [r3, #0]
		manual = communicationFrame [8];
 8001472:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <frameToName+0xb4>)
 8001474:	7a1a      	ldrb	r2, [r3, #8]
 8001476:	4b24      	ldr	r3, [pc, #144]	; (8001508 <frameToName+0xd4>)
 8001478:	701a      	strb	r2, [r3, #0]
        communicationFrame [9] = (uint8_t)encoderUp/3;
 800147a:	4b24      	ldr	r3, [pc, #144]	; (800150c <frameToName+0xd8>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	4a24      	ldr	r2, [pc, #144]	; (8001510 <frameToName+0xdc>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	085b      	lsrs	r3, r3, #1
 8001486:	b2da      	uxtb	r2, r3
 8001488:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <frameToName+0xb4>)
 800148a:	725a      	strb	r2, [r3, #9]
		communicationFrame [10] =(uint8_t) encoderDown/3;
 800148c:	4b21      	ldr	r3, [pc, #132]	; (8001514 <frameToName+0xe0>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4a1f      	ldr	r2, [pc, #124]	; (8001510 <frameToName+0xdc>)
 8001492:	fba2 2303 	umull	r2, r3, r2, r3
 8001496:	085b      	lsrs	r3, r3, #1
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <frameToName+0xb4>)
 800149c:	729a      	strb	r2, [r3, #10]
		communicationFrame [11] =(uint8_t) PWM/3;
 800149e:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <frameToName+0xe4>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	4a1b      	ldr	r2, [pc, #108]	; (8001510 <frameToName+0xdc>)
 80014a4:	fba2 2303 	umull	r2, r3, r2, r3
 80014a8:	085b      	lsrs	r3, r3, #1
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <frameToName+0xb4>)
 80014ae:	72da      	strb	r2, [r3, #11]





if(counter ==100){
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <frameToName+0xe8>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b64      	cmp	r3, #100	; 0x64
 80014b6:	d10b      	bne.n	80014d0 <frameToName+0x9c>
	for (int i =0 ;i<13;i++){
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	e002      	b.n	80014c4 <frameToName+0x90>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3301      	adds	r3, #1
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b0c      	cmp	r3, #12
 80014c8:	ddf9      	ble.n	80014be <frameToName+0x8a>
	//	uint8_t *temp = &communicationFrame[i];
			//HAL_UART_Transmit(&huart2,temp, 1, 1000);

	}

		counter=0;
 80014ca:	4b14      	ldr	r3, [pc, #80]	; (800151c <frameToName+0xe8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]


		}
counter++;
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <frameToName+0xe8>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	3301      	adds	r3, #1
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	4b10      	ldr	r3, [pc, #64]	; (800151c <frameToName+0xe8>)
 80014da:	701a      	strb	r2, [r3, #0]
   }
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	20000088 	.word	0x20000088
 80014ec:	20000359 	.word	0x20000359
 80014f0:	200002e1 	.word	0x200002e1
 80014f4:	20000204 	.word	0x20000204
 80014f8:	2000035a 	.word	0x2000035a
 80014fc:	200002b9 	.word	0x200002b9
 8001500:	200002c0 	.word	0x200002c0
 8001504:	20000284 	.word	0x20000284
 8001508:	20000358 	.word	0x20000358
 800150c:	2000012d 	.word	0x2000012d
 8001510:	aaaaaaab 	.word	0xaaaaaaab
 8001514:	2000012e 	.word	0x2000012e
 8001518:	20000000 	.word	0x20000000
 800151c:	2000012f 	.word	0x2000012f

08001520 <calculatePID>:
	int error, lasterror,  errorSum=0, Derror;
	int Pout,Iout,Dout;
	int outPWM;


uint8_t calculatePID( int input, int setpoint ,uint8_t P, uint8_t I, uint8_t D ) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	4611      	mov	r1, r2
 800152c:	461a      	mov	r2, r3
 800152e:	460b      	mov	r3, r1
 8001530:	71fb      	strb	r3, [r7, #7]
 8001532:	4613      	mov	r3, r2
 8001534:	71bb      	strb	r3, [r7, #6]



	now = HAL_GetTick ();
 8001536:	f000 ffdd 	bl	80024f4 <HAL_GetTick>
 800153a:	4603      	mov	r3, r0
 800153c:	4a3e      	ldr	r2, [pc, #248]	; (8001638 <calculatePID+0x118>)
 800153e:	6013      	str	r3, [r2, #0]
	timechange = (now - lasttime);
 8001540:	4b3d      	ldr	r3, [pc, #244]	; (8001638 <calculatePID+0x118>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b3d      	ldr	r3, [pc, #244]	; (800163c <calculatePID+0x11c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	4a3d      	ldr	r2, [pc, #244]	; (8001640 <calculatePID+0x120>)
 800154c:	6013      	str	r3, [r2, #0]
	if(timechange >=setTime)
 800154e:	4b3c      	ldr	r3, [pc, #240]	; (8001640 <calculatePID+0x120>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	4b3c      	ldr	r3, [pc, #240]	; (8001644 <calculatePID+0x124>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d35c      	bcc.n	8001614 <calculatePID+0xf4>
	{
		error = setpoint - input;
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	4a39      	ldr	r2, [pc, #228]	; (8001648 <calculatePID+0x128>)
 8001562:	6013      	str	r3, [r2, #0]
		errorSum = errorSum+((error +lasterror)/2);
 8001564:	4b38      	ldr	r3, [pc, #224]	; (8001648 <calculatePID+0x128>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b38      	ldr	r3, [pc, #224]	; (800164c <calculatePID+0x12c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4413      	add	r3, r2
 800156e:	0fda      	lsrs	r2, r3, #31
 8001570:	4413      	add	r3, r2
 8001572:	105b      	asrs	r3, r3, #1
 8001574:	461a      	mov	r2, r3
 8001576:	4b36      	ldr	r3, [pc, #216]	; (8001650 <calculatePID+0x130>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4413      	add	r3, r2
 800157c:	4a34      	ldr	r2, [pc, #208]	; (8001650 <calculatePID+0x130>)
 800157e:	6013      	str	r3, [r2, #0]
		Derror = error-lasterror;
 8001580:	4b31      	ldr	r3, [pc, #196]	; (8001648 <calculatePID+0x128>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b31      	ldr	r3, [pc, #196]	; (800164c <calculatePID+0x12c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	4a32      	ldr	r2, [pc, #200]	; (8001654 <calculatePID+0x134>)
 800158c:	6013      	str	r3, [r2, #0]
		Pout = P *error;
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	4a2d      	ldr	r2, [pc, #180]	; (8001648 <calculatePID+0x128>)
 8001592:	6812      	ldr	r2, [r2, #0]
 8001594:	fb02 f303 	mul.w	r3, r2, r3
 8001598:	4a2f      	ldr	r2, [pc, #188]	; (8001658 <calculatePID+0x138>)
 800159a:	6013      	str	r3, [r2, #0]
		Iout = I*errorSum;
 800159c:	79bb      	ldrb	r3, [r7, #6]
 800159e:	4a2c      	ldr	r2, [pc, #176]	; (8001650 <calculatePID+0x130>)
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	fb02 f303 	mul.w	r3, r2, r3
 80015a6:	4a2d      	ldr	r2, [pc, #180]	; (800165c <calculatePID+0x13c>)
 80015a8:	6013      	str	r3, [r2, #0]
		Dout = D*Derror;
 80015aa:	7e3b      	ldrb	r3, [r7, #24]
 80015ac:	4a29      	ldr	r2, [pc, #164]	; (8001654 <calculatePID+0x134>)
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	fb02 f303 	mul.w	r3, r2, r3
 80015b4:	4a2a      	ldr	r2, [pc, #168]	; (8001660 <calculatePID+0x140>)
 80015b6:	6013      	str	r3, [r2, #0]

		if (Iout >255){Iout = 255;}
 80015b8:	4b28      	ldr	r3, [pc, #160]	; (800165c <calculatePID+0x13c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2bff      	cmp	r3, #255	; 0xff
 80015be:	dd02      	ble.n	80015c6 <calculatePID+0xa6>
 80015c0:	4b26      	ldr	r3, [pc, #152]	; (800165c <calculatePID+0x13c>)
 80015c2:	22ff      	movs	r2, #255	; 0xff
 80015c4:	601a      	str	r2, [r3, #0]
		if(Iout <0){Iout = 0;}
 80015c6:	4b25      	ldr	r3, [pc, #148]	; (800165c <calculatePID+0x13c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da02      	bge.n	80015d4 <calculatePID+0xb4>
 80015ce:	4b23      	ldr	r3, [pc, #140]	; (800165c <calculatePID+0x13c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]

		outPWM = Pout + Iout + Dout;
 80015d4:	4b20      	ldr	r3, [pc, #128]	; (8001658 <calculatePID+0x138>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b20      	ldr	r3, [pc, #128]	; (800165c <calculatePID+0x13c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	441a      	add	r2, r3
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <calculatePID+0x140>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	4a1f      	ldr	r2, [pc, #124]	; (8001664 <calculatePID+0x144>)
 80015e6:	6013      	str	r3, [r2, #0]


		if (outPWM >255){outPWM= 255;}
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <calculatePID+0x144>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2bff      	cmp	r3, #255	; 0xff
 80015ee:	dd02      	ble.n	80015f6 <calculatePID+0xd6>
 80015f0:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <calculatePID+0x144>)
 80015f2:	22ff      	movs	r2, #255	; 0xff
 80015f4:	601a      	str	r2, [r3, #0]
				if(outPWM <0){outPWM = 0;}
 80015f6:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <calculatePID+0x144>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	da02      	bge.n	8001604 <calculatePID+0xe4>
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <calculatePID+0x144>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]


				lasterror = error;
 8001604:	4b10      	ldr	r3, [pc, #64]	; (8001648 <calculatePID+0x128>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a10      	ldr	r2, [pc, #64]	; (800164c <calculatePID+0x12c>)
 800160a:	6013      	str	r3, [r2, #0]
				lasttime = now;
 800160c:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <calculatePID+0x118>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0a      	ldr	r2, [pc, #40]	; (800163c <calculatePID+0x11c>)
 8001612:	6013      	str	r3, [r2, #0]



	}

	if (input >setpoint)
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	429a      	cmp	r2, r3
 800161a:	dd03      	ble.n	8001624 <calculatePID+0x104>
	{

		kierunek = false;
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <calculatePID+0x148>)
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
 8001622:	e002      	b.n	800162a <calculatePID+0x10a>
	}else{


		kierunek = true;
 8001624:	4b10      	ldr	r3, [pc, #64]	; (8001668 <calculatePID+0x148>)
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
	}

			    return outPWM;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <calculatePID+0x144>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	b2db      	uxtb	r3, r3
			}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	2000027c 	.word	0x2000027c
 800163c:	2000013c 	.word	0x2000013c
 8001640:	20000290 	.word	0x20000290
 8001644:	20000098 	.word	0x20000098
 8001648:	200002bc 	.word	0x200002bc
 800164c:	2000028c 	.word	0x2000028c
 8001650:	20000140 	.word	0x20000140
 8001654:	20000354 	.word	0x20000354
 8001658:	20000288 	.word	0x20000288
 800165c:	20000280 	.word	0x20000280
 8001660:	20000208 	.word	0x20000208
 8001664:	20000294 	.word	0x20000294
 8001668:	20000130 	.word	0x20000130

0800166c <initWork>:



void initWork()
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
	int i=0;
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
	do{

		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin );
 8001676:	2120      	movs	r1, #32
 8001678:	4808      	ldr	r0, [pc, #32]	; (800169c <initWork+0x30>)
 800167a:	f001 fe36 	bl	80032ea <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 800167e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001682:	f000 ff43 	bl	800250c <HAL_Delay>
		i++;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3301      	adds	r3, #1
 800168a:	607b      	str	r3, [r7, #4]
	}while(i<10);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b09      	cmp	r3, #9
 8001690:	ddf1      	ble.n	8001676 <initWork+0xa>


}
 8001692:	bf00      	nop
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40020000 	.word	0x40020000

080016a0 <HAL_UARTEx_RxEventCallback>:




void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart , uint16_t Size)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	807b      	strh	r3, [r7, #2]
	if(huart->Instance==USART2)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a08      	ldr	r2, [pc, #32]	; (80016d4 <HAL_UARTEx_RxEventCallback+0x34>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d10a      	bne.n	80016cc <HAL_UARTEx_RxEventCallback+0x2c>
	{

		memcpy( communicationFrame,RxBuf ,Size);
 80016b6:	887b      	ldrh	r3, [r7, #2]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4907      	ldr	r1, [pc, #28]	; (80016d8 <HAL_UARTEx_RxEventCallback+0x38>)
 80016bc:	4807      	ldr	r0, [pc, #28]	; (80016dc <HAL_UARTEx_RxEventCallback+0x3c>)
 80016be:	f006 fce1 	bl	8008084 <memcpy>

		HAL_UARTEx_ReceiveToIdle_DMA(&huart2,RxBuf,RxBuf_SIZE);
 80016c2:	220d      	movs	r2, #13
 80016c4:	4904      	ldr	r1, [pc, #16]	; (80016d8 <HAL_UARTEx_RxEventCallback+0x38>)
 80016c6:	4806      	ldr	r0, [pc, #24]	; (80016e0 <HAL_UARTEx_RxEventCallback+0x40>)
 80016c8:	f005 fc59 	bl	8006f7e <HAL_UARTEx_ReceiveToIdle_DMA>

	}

}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40004400 	.word	0x40004400
 80016d8:	200002c4 	.word	0x200002c4
 80016dc:	20000088 	.word	0x20000088
 80016e0:	200002e4 	.word	0x200002e4

080016e4 <firstScreenOled>:
	HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s), 1000);
}



void firstScreenOled(){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af04      	add	r7, sp, #16

	//  send_string(mesage);


              unsigned char* OledString;
		      OledString =( unsigned char*)sendFrame;
 80016ea:	4b7b      	ldr	r3, [pc, #492]	; (80018d8 <firstScreenOled+0x1f4>)
 80016ec:	607b      	str	r3, [r7, #4]
		     // GFX_draw_string(0, 0, OledString, WHITE,BLACK, 1, 1);
		      GFX_draw_string(25, 25, OledString, WHITE,BLACK, 0, 0);
 80016ee:	2300      	movs	r3, #0
 80016f0:	9302      	str	r3, [sp, #8]
 80016f2:	2300      	movs	r3, #0
 80016f4:	9301      	str	r3, [sp, #4]
 80016f6:	2300      	movs	r3, #0
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2301      	movs	r3, #1
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	2119      	movs	r1, #25
 8001700:	2019      	movs	r0, #25
 8001702:	f7fe fffd 	bl	8000700 <GFX_draw_string>
		      GFX_draw_string(0, 45, OledString, WHITE,BLACK, 1, 1);
 8001706:	2301      	movs	r3, #1
 8001708:	9302      	str	r3, [sp, #8]
 800170a:	2301      	movs	r3, #1
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	2300      	movs	r3, #0
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2301      	movs	r3, #1
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	212d      	movs	r1, #45	; 0x2d
 8001718:	2000      	movs	r0, #0
 800171a:	f7fe fff1 	bl	8000700 <GFX_draw_string>
		      SSD1306_draw_fast_hline(0,43,200,WHITE);
 800171e:	2301      	movs	r3, #1
 8001720:	22c8      	movs	r2, #200	; 0xc8
 8001722:	212b      	movs	r1, #43	; 0x2b
 8001724:	2000      	movs	r0, #0
 8001726:	f7ff fa0d 	bl	8000b44 <SSD1306_draw_fast_hline>
		      GFX_draw_string(0, 33, EncDownMessage , WHITE,BLACK, 1, 1);
 800172a:	2301      	movs	r3, #1
 800172c:	9302      	str	r3, [sp, #8]
 800172e:	2301      	movs	r3, #1
 8001730:	9301      	str	r3, [sp, #4]
 8001732:	2300      	movs	r3, #0
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	2301      	movs	r3, #1
 8001738:	4a68      	ldr	r2, [pc, #416]	; (80018dc <firstScreenOled+0x1f8>)
 800173a:	2121      	movs	r1, #33	; 0x21
 800173c:	2000      	movs	r0, #0
 800173e:	f7fe ffdf 	bl	8000700 <GFX_draw_string>
		      encoderCounterUp = htim4.Instance->CNT;
 8001742:	4b67      	ldr	r3, [pc, #412]	; (80018e0 <firstScreenOled+0x1fc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	461a      	mov	r2, r3
 800174a:	4b66      	ldr	r3, [pc, #408]	; (80018e4 <firstScreenOled+0x200>)
 800174c:	601a      	str	r2, [r3, #0]
		      if (encoderCounterUp >=1000)
 800174e:	4b65      	ldr	r3, [pc, #404]	; (80018e4 <firstScreenOled+0x200>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001756:	db13      	blt.n	8001780 <firstScreenOled+0x9c>
		     		      {
		     		    	  itoa(encoderCounterUp,itoaBuffer,10);
 8001758:	4b62      	ldr	r3, [pc, #392]	; (80018e4 <firstScreenOled+0x200>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	220a      	movs	r2, #10
 800175e:	4962      	ldr	r1, [pc, #392]	; (80018e8 <firstScreenOled+0x204>)
 8001760:	4618      	mov	r0, r3
 8001762:	f006 fc85 	bl	8008070 <itoa>
		     		    	  		      GFX_draw_string(60, 33, ( unsigned char*)itoaBuffer, WHITE,BLACK, 1, 1);
 8001766:	2301      	movs	r3, #1
 8001768:	9302      	str	r3, [sp, #8]
 800176a:	2301      	movs	r3, #1
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	2300      	movs	r3, #0
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2301      	movs	r3, #1
 8001774:	4a5c      	ldr	r2, [pc, #368]	; (80018e8 <firstScreenOled+0x204>)
 8001776:	2121      	movs	r1, #33	; 0x21
 8001778:	203c      	movs	r0, #60	; 0x3c
 800177a:	f7fe ffc1 	bl	8000700 <GFX_draw_string>
 800177e:	e01e      	b.n	80017be <firstScreenOled+0xda>


		     		      }else
		     		      {
		     		    	   GFX_draw_string(60, 33, "                  ", WHITE,BLACK, 1, 1);
 8001780:	2301      	movs	r3, #1
 8001782:	9302      	str	r3, [sp, #8]
 8001784:	2301      	movs	r3, #1
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	2300      	movs	r3, #0
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	2301      	movs	r3, #1
 800178e:	4a57      	ldr	r2, [pc, #348]	; (80018ec <firstScreenOled+0x208>)
 8001790:	2121      	movs	r1, #33	; 0x21
 8001792:	203c      	movs	r0, #60	; 0x3c
 8001794:	f7fe ffb4 	bl	8000700 <GFX_draw_string>
		     		    	  itoa(encoderCounterUp,itoaBuffer,10);
 8001798:	4b52      	ldr	r3, [pc, #328]	; (80018e4 <firstScreenOled+0x200>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	220a      	movs	r2, #10
 800179e:	4952      	ldr	r1, [pc, #328]	; (80018e8 <firstScreenOled+0x204>)
 80017a0:	4618      	mov	r0, r3
 80017a2:	f006 fc65 	bl	8008070 <itoa>
		     		    	   GFX_draw_string(60, 33, ( unsigned char*)itoaBuffer, WHITE,BLACK, 1, 1);
 80017a6:	2301      	movs	r3, #1
 80017a8:	9302      	str	r3, [sp, #8]
 80017aa:	2301      	movs	r3, #1
 80017ac:	9301      	str	r3, [sp, #4]
 80017ae:	2300      	movs	r3, #0
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2301      	movs	r3, #1
 80017b4:	4a4c      	ldr	r2, [pc, #304]	; (80018e8 <firstScreenOled+0x204>)
 80017b6:	2121      	movs	r1, #33	; 0x21
 80017b8:	203c      	movs	r0, #60	; 0x3c
 80017ba:	f7fe ffa1 	bl	8000700 <GFX_draw_string>


		     		      }


		      SSD1306_draw_fast_hline(0,32,200,WHITE);
 80017be:	2301      	movs	r3, #1
 80017c0:	22c8      	movs	r2, #200	; 0xc8
 80017c2:	2120      	movs	r1, #32
 80017c4:	2000      	movs	r0, #0
 80017c6:	f7ff f9bd 	bl	8000b44 <SSD1306_draw_fast_hline>
		      GFX_draw_string(0, 22, EncUpMessage, WHITE,BLACK, 1, 1);
 80017ca:	2301      	movs	r3, #1
 80017cc:	9302      	str	r3, [sp, #8]
 80017ce:	2301      	movs	r3, #1
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	2300      	movs	r3, #0
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	2301      	movs	r3, #1
 80017d8:	4a45      	ldr	r2, [pc, #276]	; (80018f0 <firstScreenOled+0x20c>)
 80017da:	2116      	movs	r1, #22
 80017dc:	2000      	movs	r0, #0
 80017de:	f7fe ff8f 	bl	8000700 <GFX_draw_string>
		      encoderCounterDown = htim3.Instance->CNT;
 80017e2:	4b44      	ldr	r3, [pc, #272]	; (80018f4 <firstScreenOled+0x210>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <firstScreenOled+0x214>)
 80017ec:	601a      	str	r2, [r3, #0]
		      if (encoderCounterDown >=1000)
 80017ee:	4b42      	ldr	r3, [pc, #264]	; (80018f8 <firstScreenOled+0x214>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017f6:	db13      	blt.n	8001820 <firstScreenOled+0x13c>
		  		     		      {
		    	    itoa(encoderCounterDown,itoaBuffer,10);
 80017f8:	4b3f      	ldr	r3, [pc, #252]	; (80018f8 <firstScreenOled+0x214>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	220a      	movs	r2, #10
 80017fe:	493a      	ldr	r1, [pc, #232]	; (80018e8 <firstScreenOled+0x204>)
 8001800:	4618      	mov	r0, r3
 8001802:	f006 fc35 	bl	8008070 <itoa>
		    			      GFX_draw_string(60, 22, ( unsigned char*)itoaBuffer, WHITE,BLACK, 1, 1);
 8001806:	2301      	movs	r3, #1
 8001808:	9302      	str	r3, [sp, #8]
 800180a:	2301      	movs	r3, #1
 800180c:	9301      	str	r3, [sp, #4]
 800180e:	2300      	movs	r3, #0
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2301      	movs	r3, #1
 8001814:	4a34      	ldr	r2, [pc, #208]	; (80018e8 <firstScreenOled+0x204>)
 8001816:	2116      	movs	r1, #22
 8001818:	203c      	movs	r0, #60	; 0x3c
 800181a:	f7fe ff71 	bl	8000700 <GFX_draw_string>
 800181e:	e01e      	b.n	800185e <firstScreenOled+0x17a>


		  		     		      }else
		  		     		      {
		  		     		    	   GFX_draw_string(60, 22, "                  ", WHITE,BLACK, 1, 1);
 8001820:	2301      	movs	r3, #1
 8001822:	9302      	str	r3, [sp, #8]
 8001824:	2301      	movs	r3, #1
 8001826:	9301      	str	r3, [sp, #4]
 8001828:	2300      	movs	r3, #0
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	2301      	movs	r3, #1
 800182e:	4a2f      	ldr	r2, [pc, #188]	; (80018ec <firstScreenOled+0x208>)
 8001830:	2116      	movs	r1, #22
 8001832:	203c      	movs	r0, #60	; 0x3c
 8001834:	f7fe ff64 	bl	8000700 <GFX_draw_string>
		  		     		        itoa(encoderCounterDown,itoaBuffer,10);
 8001838:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <firstScreenOled+0x214>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	220a      	movs	r2, #10
 800183e:	492a      	ldr	r1, [pc, #168]	; (80018e8 <firstScreenOled+0x204>)
 8001840:	4618      	mov	r0, r3
 8001842:	f006 fc15 	bl	8008070 <itoa>
		  		     		    		      GFX_draw_string(60, 22, ( unsigned char*)itoaBuffer, WHITE,BLACK, 1, 1);
 8001846:	2301      	movs	r3, #1
 8001848:	9302      	str	r3, [sp, #8]
 800184a:	2301      	movs	r3, #1
 800184c:	9301      	str	r3, [sp, #4]
 800184e:	2300      	movs	r3, #0
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	2301      	movs	r3, #1
 8001854:	4a24      	ldr	r2, [pc, #144]	; (80018e8 <firstScreenOled+0x204>)
 8001856:	2116      	movs	r1, #22
 8001858:	203c      	movs	r0, #60	; 0x3c
 800185a:	f7fe ff51 	bl	8000700 <GFX_draw_string>


		  		     		      }


		      SSD1306_draw_fast_hline(0,21,200,WHITE);
 800185e:	2301      	movs	r3, #1
 8001860:	22c8      	movs	r2, #200	; 0xc8
 8001862:	2115      	movs	r1, #21
 8001864:	2000      	movs	r0, #0
 8001866:	f7ff f96d 	bl	8000b44 <SSD1306_draw_fast_hline>
		      GFX_draw_string(0, 11,PWMMessage , WHITE,BLACK, 1, 1);
 800186a:	2301      	movs	r3, #1
 800186c:	9302      	str	r3, [sp, #8]
 800186e:	2301      	movs	r3, #1
 8001870:	9301      	str	r3, [sp, #4]
 8001872:	2300      	movs	r3, #0
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	2301      	movs	r3, #1
 8001878:	4a20      	ldr	r2, [pc, #128]	; (80018fc <firstScreenOled+0x218>)
 800187a:	210b      	movs	r1, #11
 800187c:	2000      	movs	r0, #0
 800187e:	f7fe ff3f 	bl	8000700 <GFX_draw_string>
		      itoa(PWM,itoaBuffer,10);
 8001882:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <firstScreenOled+0x21c>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	220a      	movs	r2, #10
 8001888:	4917      	ldr	r1, [pc, #92]	; (80018e8 <firstScreenOled+0x204>)
 800188a:	4618      	mov	r0, r3
 800188c:	f006 fbf0 	bl	8008070 <itoa>
		      GFX_draw_string(60, 11, ( unsigned char*)itoaBuffer, WHITE,BLACK, 1, 1);
 8001890:	2301      	movs	r3, #1
 8001892:	9302      	str	r3, [sp, #8]
 8001894:	2301      	movs	r3, #1
 8001896:	9301      	str	r3, [sp, #4]
 8001898:	2300      	movs	r3, #0
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	2301      	movs	r3, #1
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <firstScreenOled+0x204>)
 80018a0:	210b      	movs	r1, #11
 80018a2:	203c      	movs	r0, #60	; 0x3c
 80018a4:	f7fe ff2c 	bl	8000700 <GFX_draw_string>
		      SSD1306_draw_fast_hline(0,10,200,WHITE);
 80018a8:	2301      	movs	r3, #1
 80018aa:	22c8      	movs	r2, #200	; 0xc8
 80018ac:	210a      	movs	r1, #10
 80018ae:	2000      	movs	r0, #0
 80018b0:	f7ff f948 	bl	8000b44 <SSD1306_draw_fast_hline>
		      GFX_draw_string(0, 0, MODEMessage, WHITE,BLACK, 1, 1);
 80018b4:	2301      	movs	r3, #1
 80018b6:	9302      	str	r3, [sp, #8]
 80018b8:	2301      	movs	r3, #1
 80018ba:	9301      	str	r3, [sp, #4]
 80018bc:	2300      	movs	r3, #0
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	2301      	movs	r3, #1
 80018c2:	4a10      	ldr	r2, [pc, #64]	; (8001904 <firstScreenOled+0x220>)
 80018c4:	2100      	movs	r1, #0
 80018c6:	2000      	movs	r0, #0
 80018c8:	f7fe ff1a 	bl	8000700 <GFX_draw_string>



			  SSD1306_display_repaint();
 80018cc:	f7ff fbb6 	bl	800103c <SSD1306_display_repaint>

}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200002ac 	.word	0x200002ac
 80018dc:	20000060 	.word	0x20000060
 80018e0:	2000035c 	.word	0x2000035c
 80018e4:	20000134 	.word	0x20000134
 80018e8:	20000298 	.word	0x20000298
 80018ec:	08008244 	.word	0x08008244
 80018f0:	2000006c 	.word	0x2000006c
 80018f4:	200003a4 	.word	0x200003a4
 80018f8:	20000138 	.word	0x20000138
 80018fc:	20000078 	.word	0x20000078
 8001900:	20000000 	.word	0x20000000
 8001904:	20000080 	.word	0x20000080

08001908 <engineControl>:




void engineControl()
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af04      	add	r7, sp, #16





	if (START == 1&& STOP == 0 && manual == 0)
 800190e:	4b70      	ldr	r3, [pc, #448]	; (8001ad0 <engineControl+0x1c8>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d156      	bne.n	80019c4 <engineControl+0xbc>
 8001916:	4b6f      	ldr	r3, [pc, #444]	; (8001ad4 <engineControl+0x1cc>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d152      	bne.n	80019c4 <engineControl+0xbc>
 800191e:	4b6e      	ldr	r3, [pc, #440]	; (8001ad8 <engineControl+0x1d0>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d14e      	bne.n	80019c4 <engineControl+0xbc>
		{


		encoderCounterUp = htim4.Instance->CNT;
 8001926:	4b6d      	ldr	r3, [pc, #436]	; (8001adc <engineControl+0x1d4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	461a      	mov	r2, r3
 800192e:	4b6c      	ldr	r3, [pc, #432]	; (8001ae0 <engineControl+0x1d8>)
 8001930:	601a      	str	r2, [r3, #0]

        PWM=calculatePID( encoderCounterDown, 1000 , 2,  3,  2 );
 8001932:	4b6c      	ldr	r3, [pc, #432]	; (8001ae4 <engineControl+0x1dc>)
 8001934:	6818      	ldr	r0, [r3, #0]
 8001936:	2302      	movs	r3, #2
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2303      	movs	r3, #3
 800193c:	2202      	movs	r2, #2
 800193e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001942:	f7ff fded 	bl	8001520 <calculatePID>
 8001946:	4603      	mov	r3, r0
 8001948:	461a      	mov	r2, r3
 800194a:	4b67      	ldr	r3, [pc, #412]	; (8001ae8 <engineControl+0x1e0>)
 800194c:	701a      	strb	r2, [r3, #0]

		      GFX_draw_string(0, 0,messageStart, WHITE,BLACK, 1, 1);
 800194e:	2301      	movs	r3, #1
 8001950:	9302      	str	r3, [sp, #8]
 8001952:	2301      	movs	r3, #1
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	2300      	movs	r3, #0
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2301      	movs	r3, #1
 800195c:	4a63      	ldr	r2, [pc, #396]	; (8001aec <engineControl+0x1e4>)
 800195e:	2100      	movs	r1, #0
 8001960:	2000      	movs	r0, #0
 8001962:	f7fe fecd 	bl	8000700 <GFX_draw_string>
		      SSD1306_display_repaint();
 8001966:	f7ff fb69 	bl	800103c <SSD1306_display_repaint>
			//PWM =calculatePID(0,encoderCounterUp);
			 if(kierunek)
 800196a:	4b61      	ldr	r3, [pc, #388]	; (8001af0 <engineControl+0x1e8>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d014      	beq.n	800199c <engineControl+0x94>
						            {


						             HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  GPIO_PIN_SET);//podlaczenie sterowania silnikiem
 8001972:	2201      	movs	r2, #1
 8001974:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001978:	485e      	ldr	r0, [pc, #376]	; (8001af4 <engineControl+0x1ec>)
 800197a:	f001 fc9d 	bl	80032b8 <HAL_GPIO_WritePin>
						             HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,  GPIO_PIN_RESET);//podlaczenie sterowania silnikiem
 800197e:	2200      	movs	r2, #0
 8001980:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001984:	485b      	ldr	r0, [pc, #364]	; (8001af4 <engineControl+0x1ec>)
 8001986:	f001 fc97 	bl	80032b8 <HAL_GPIO_WritePin>
						             HAL_Delay(10);
 800198a:	200a      	movs	r0, #10
 800198c:	f000 fdbe 	bl	800250c <HAL_Delay>
						             __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM);
 8001990:	4b55      	ldr	r3, [pc, #340]	; (8001ae8 <engineControl+0x1e0>)
 8001992:	781a      	ldrb	r2, [r3, #0]
 8001994:	4b58      	ldr	r3, [pc, #352]	; (8001af8 <engineControl+0x1f0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	635a      	str	r2, [r3, #52]	; 0x34
 800199a:	e013      	b.n	80019c4 <engineControl+0xbc>
						            }else{



						            	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019a2:	4854      	ldr	r0, [pc, #336]	; (8001af4 <engineControl+0x1ec>)
 80019a4:	f001 fc88 	bl	80032b8 <HAL_GPIO_WritePin>
						            	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,  GPIO_PIN_SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ae:	4851      	ldr	r0, [pc, #324]	; (8001af4 <engineControl+0x1ec>)
 80019b0:	f001 fc82 	bl	80032b8 <HAL_GPIO_WritePin>
						            	HAL_Delay(10);
 80019b4:	200a      	movs	r0, #10
 80019b6:	f000 fda9 	bl	800250c <HAL_Delay>
						            	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM);
 80019ba:	4b4b      	ldr	r3, [pc, #300]	; (8001ae8 <engineControl+0x1e0>)
 80019bc:	781a      	ldrb	r2, [r3, #0]
 80019be:	4b4e      	ldr	r3, [pc, #312]	; (8001af8 <engineControl+0x1f0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	635a      	str	r2, [r3, #52]	; 0x34
						            }
		}
		if (START == 0 && STOP == 1 && manual == 0)
 80019c4:	4b42      	ldr	r3, [pc, #264]	; (8001ad0 <engineControl+0x1c8>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d124      	bne.n	8001a16 <engineControl+0x10e>
 80019cc:	4b41      	ldr	r3, [pc, #260]	; (8001ad4 <engineControl+0x1cc>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d120      	bne.n	8001a16 <engineControl+0x10e>
 80019d4:	4b40      	ldr	r3, [pc, #256]	; (8001ad8 <engineControl+0x1d0>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d11c      	bne.n	8001a16 <engineControl+0x10e>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  GPIO_PIN_RESET);
 80019dc:	2200      	movs	r2, #0
 80019de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019e2:	4844      	ldr	r0, [pc, #272]	; (8001af4 <engineControl+0x1ec>)
 80019e4:	f001 fc68 	bl	80032b8 <HAL_GPIO_WritePin>
									            	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80019e8:	2200      	movs	r2, #0
 80019ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ee:	4841      	ldr	r0, [pc, #260]	; (8001af4 <engineControl+0x1ec>)
 80019f0:	f001 fc62 	bl	80032b8 <HAL_GPIO_WritePin>
									            	HAL_Delay(10);
 80019f4:	200a      	movs	r0, #10
 80019f6:	f000 fd89 	bl	800250c <HAL_Delay>

			 GFX_draw_string(0, 0, stopMessage, WHITE,BLACK, 1, 1);
 80019fa:	2301      	movs	r3, #1
 80019fc:	9302      	str	r3, [sp, #8]
 80019fe:	2301      	movs	r3, #1
 8001a00:	9301      	str	r3, [sp, #4]
 8001a02:	2300      	movs	r3, #0
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	2301      	movs	r3, #1
 8001a08:	4a3c      	ldr	r2, [pc, #240]	; (8001afc <engineControl+0x1f4>)
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f7fe fe77 	bl	8000700 <GFX_draw_string>

			         SSD1306_display_repaint();
 8001a12:	f7ff fb13 	bl	800103c <SSD1306_display_repaint>
		}
		if (manual == 1 && leftButton==1 && rightButton == 0)
 8001a16:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <engineControl+0x1d0>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d128      	bne.n	8001a70 <engineControl+0x168>
 8001a1e:	4b38      	ldr	r3, [pc, #224]	; (8001b00 <engineControl+0x1f8>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d124      	bne.n	8001a70 <engineControl+0x168>
 8001a26:	4b37      	ldr	r3, [pc, #220]	; (8001b04 <engineControl+0x1fc>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d120      	bne.n	8001a70 <engineControl+0x168>
				{

			 GFX_draw_string(0, 0, messageManualLeft, WHITE,BLACK, 1, 1);
 8001a2e:	2301      	movs	r3, #1
 8001a30:	9302      	str	r3, [sp, #8]
 8001a32:	2301      	movs	r3, #1
 8001a34:	9301      	str	r3, [sp, #4]
 8001a36:	2300      	movs	r3, #0
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	4a32      	ldr	r2, [pc, #200]	; (8001b08 <engineControl+0x200>)
 8001a3e:	2100      	movs	r1, #0
 8001a40:	2000      	movs	r0, #0
 8001a42:	f7fe fe5d 	bl	8000700 <GFX_draw_string>
					      SSD1306_display_repaint();
 8001a46:	f7ff faf9 	bl	800103c <SSD1306_display_repaint>

					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  GPIO_PIN_RESET);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a50:	4828      	ldr	r0, [pc, #160]	; (8001af4 <engineControl+0x1ec>)
 8001a52:	f001 fc31 	bl	80032b8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,  GPIO_PIN_SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a5c:	4825      	ldr	r0, [pc, #148]	; (8001af4 <engineControl+0x1ec>)
 8001a5e:	f001 fc2b 	bl	80032b8 <HAL_GPIO_WritePin>
					HAL_Delay(10);
 8001a62:	200a      	movs	r0, #10
 8001a64:	f000 fd52 	bl	800250c <HAL_Delay>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 200);
 8001a68:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <engineControl+0x1f0>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	22c8      	movs	r2, #200	; 0xc8
 8001a6e:	635a      	str	r2, [r3, #52]	; 0x34
				}
		if (manual == 1 && leftButton==0 && rightButton == 1)
 8001a70:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <engineControl+0x1d0>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d128      	bne.n	8001aca <engineControl+0x1c2>
 8001a78:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <engineControl+0x1f8>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d124      	bne.n	8001aca <engineControl+0x1c2>
 8001a80:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <engineControl+0x1fc>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d120      	bne.n	8001aca <engineControl+0x1c2>
						{


			GFX_draw_string(0, 0, messageManualRight, WHITE,BLACK, 1, 1);
 8001a88:	2301      	movs	r3, #1
 8001a8a:	9302      	str	r3, [sp, #8]
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	2300      	movs	r3, #0
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	2301      	movs	r3, #1
 8001a96:	4a1d      	ldr	r2, [pc, #116]	; (8001b0c <engineControl+0x204>)
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7fe fe30 	bl	8000700 <GFX_draw_string>
								      SSD1306_display_repaint();
 8001aa0:	f7ff facc 	bl	800103c <SSD1306_display_repaint>

					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  GPIO_PIN_SET);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aaa:	4812      	ldr	r0, [pc, #72]	; (8001af4 <engineControl+0x1ec>)
 8001aac:	f001 fc04 	bl	80032b8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,  GPIO_PIN_RESET);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ab6:	480f      	ldr	r0, [pc, #60]	; (8001af4 <engineControl+0x1ec>)
 8001ab8:	f001 fbfe 	bl	80032b8 <HAL_GPIO_WritePin>
					HAL_Delay(10);
 8001abc:	200a      	movs	r0, #10
 8001abe:	f000 fd25 	bl	800250c <HAL_Delay>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 200);
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <engineControl+0x1f0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	22c8      	movs	r2, #200	; 0xc8
 8001ac8:	635a      	str	r2, [r3, #52]	; 0x34





}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	2000035a 	.word	0x2000035a
 8001ad4:	200002b9 	.word	0x200002b9
 8001ad8:	20000358 	.word	0x20000358
 8001adc:	2000035c 	.word	0x2000035c
 8001ae0:	20000134 	.word	0x20000134
 8001ae4:	20000138 	.word	0x20000138
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	2000004c 	.word	0x2000004c
 8001af0:	20000130 	.word	0x20000130
 8001af4:	40020800 	.word	0x40020800
 8001af8:	200003ec 	.word	0x200003ec
 8001afc:	20000004 	.word	0x20000004
 8001b00:	200002c0 	.word	0x200002c0
 8001b04:	20000284 	.word	0x20000284
 8001b08:	20000034 	.word	0x20000034
 8001b0c:	20000018 	.word	0x20000018

08001b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b14:	f000 fc88 	bl	8002428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b18:	f000 f84c 	bl	8001bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b1c:	f7ff faf8 	bl	8001110 <MX_GPIO_Init>
    MX_DMA_Init();
 8001b20:	f7ff face 	bl	80010c0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001b24:	f000 fbaa 	bl	800227c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001b28:	f000 f98c 	bl	8001e44 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b2c:	f000 f9f8 	bl	8001f20 <MX_TIM3_Init>

  MX_TIM4_Init();
 8001b30:	f000 fa4a 	bl	8001fc8 <MX_TIM4_Init>
  MX_I2C1_Init();
 8001b34:	f7ff fb88 	bl	8001248 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
 //SSD1306_init();
  SSD1306_init();
 8001b38:	f7fe fe90 	bl	800085c <SSD1306_init>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2,RxBuf,RxBuf_SIZE);
 8001b3c:	220d      	movs	r2, #13
 8001b3e:	4917      	ldr	r1, [pc, #92]	; (8001b9c <main+0x8c>)
 8001b40:	4817      	ldr	r0, [pc, #92]	; (8001ba0 <main+0x90>)
 8001b42:	f005 fa1c 	bl	8006f7e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 8001b46:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <main+0x94>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <main+0x94>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0208 	bic.w	r2, r2, #8
 8001b54:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // enkoder dol
 8001b56:	213c      	movs	r1, #60	; 0x3c
 8001b58:	4813      	ldr	r0, [pc, #76]	; (8001ba8 <main+0x98>)
 8001b5a:	f004 fc85 	bl	8006468 <HAL_TIM_Encoder_Start>
  	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // enkoder gora
 8001b5e:	213c      	movs	r1, #60	; 0x3c
 8001b60:	4812      	ldr	r0, [pc, #72]	; (8001bac <main+0x9c>)
 8001b62:	f004 fc81 	bl	8006468 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // wysterowanie silnika
 8001b66:	2100      	movs	r1, #0
 8001b68:	4811      	ldr	r0, [pc, #68]	; (8001bb0 <main+0xa0>)
 8001b6a:	f004 fb27 	bl	80061bc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001b6e:	2104      	movs	r1, #4
 8001b70:	480f      	ldr	r0, [pc, #60]	; (8001bb0 <main+0xa0>)
 8001b72:	f004 fb23 	bl	80061bc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001b76:	2108      	movs	r1, #8
 8001b78:	480d      	ldr	r0, [pc, #52]	; (8001bb0 <main+0xa0>)
 8001b7a:	f004 fb1f 	bl	80061bc <HAL_TIM_PWM_Start>
    initWork();
 8001b7e:	f7ff fd75 	bl	800166c <initWork>
    firstScreenOled();
 8001b82:	f7ff fdaf 	bl	80016e4 <firstScreenOled>
  while (1)
  {



	  frameToName();
 8001b86:	f7ff fc55 	bl	8001434 <frameToName>
	  errorCheck();
 8001b8a:	f7ff fc2f 	bl	80013ec <errorCheck>
	  frameTransform();
 8001b8e:	f7ff fc0b 	bl	80013a8 <frameTransform>
	  firstScreenOled();
 8001b92:	f7ff fda7 	bl	80016e4 <firstScreenOled>


	    engineControl();
 8001b96:	f7ff feb7 	bl	8001908 <engineControl>
	  frameToName();
 8001b9a:	e7f4      	b.n	8001b86 <main+0x76>
 8001b9c:	200002c4 	.word	0x200002c4
 8001ba0:	200002e4 	.word	0x200002e4
 8001ba4:	2000021c 	.word	0x2000021c
 8001ba8:	200003a4 	.word	0x200003a4
 8001bac:	2000035c 	.word	0x2000035c
 8001bb0:	200003ec 	.word	0x200003ec

08001bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b094      	sub	sp, #80	; 0x50
 8001bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bba:	f107 0320 	add.w	r3, r7, #32
 8001bbe:	2230      	movs	r2, #48	; 0x30
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f006 fa6c 	bl	80080a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc8:	f107 030c 	add.w	r3, r7, #12
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60bb      	str	r3, [r7, #8]
 8001bdc:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <SystemClock_Config+0xd0>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	4a28      	ldr	r2, [pc, #160]	; (8001c84 <SystemClock_Config+0xd0>)
 8001be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be6:	6413      	str	r3, [r2, #64]	; 0x40
 8001be8:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <SystemClock_Config+0xd0>)
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <SystemClock_Config+0xd4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c00:	4a21      	ldr	r2, [pc, #132]	; (8001c88 <SystemClock_Config+0xd4>)
 8001c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4b1f      	ldr	r3, [pc, #124]	; (8001c88 <SystemClock_Config+0xd4>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c10:	607b      	str	r3, [r7, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c14:	2302      	movs	r3, #2
 8001c16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c1c:	2310      	movs	r3, #16
 8001c1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c20:	2302      	movs	r3, #2
 8001c22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c24:	2300      	movs	r3, #0
 8001c26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001c28:	2310      	movs	r3, #16
 8001c2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001c2c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001c30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c32:	2304      	movs	r3, #4
 8001c34:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c36:	2307      	movs	r3, #7
 8001c38:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c3a:	f107 0320 	add.w	r3, r7, #32
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f003 fdf8 	bl	8005834 <HAL_RCC_OscConfig>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001c4a:	f000 f81f 	bl	8001c8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c4e:	230f      	movs	r3, #15
 8001c50:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c52:	2302      	movs	r3, #2
 8001c54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8001c56:	23a0      	movs	r3, #160	; 0xa0
 8001c58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f004 f85a 	bl	8005d24 <HAL_RCC_ClockConfig>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001c76:	f000 f809 	bl	8001c8c <Error_Handler>
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	3750      	adds	r7, #80	; 0x50
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40007000 	.word	0x40007000

08001c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c90:	b672      	cpsid	i
}
 8001c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <Error_Handler+0x8>
	...

08001c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	4a0f      	ldr	r2, [pc, #60]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cac:	6453      	str	r3, [r2, #68]	; 0x44
 8001cae:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	4a08      	ldr	r2, [pc, #32]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cd6:	2007      	movs	r0, #7
 8001cd8:	f000 fd0c 	bl	80026f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800

08001ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <NMI_Handler+0x4>

08001cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <HardFault_Handler+0x4>

08001cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <MemManage_Handler+0x4>

08001cfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cfe:	e7fe      	b.n	8001cfe <BusFault_Handler+0x4>

08001d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <UsageFault_Handler+0x4>

08001d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d34:	f000 fbca 	bl	80024cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001d40:	4802      	ldr	r0, [pc, #8]	; (8001d4c <DMA1_Stream5_IRQHandler+0x10>)
 8001d42:	f000 feb1 	bl	8002aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	2000021c 	.word	0x2000021c

08001d50 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <DMA1_Stream6_IRQHandler+0x10>)
 8001d56:	f000 fea7 	bl	8002aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000150 	.word	0x20000150

08001d64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d68:	4802      	ldr	r0, [pc, #8]	; (8001d74 <TIM3_IRQHandler+0x10>)
 8001d6a:	f004 fc0b 	bl	8006584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200003a4 	.word	0x200003a4

08001d78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d7c:	4802      	ldr	r0, [pc, #8]	; (8001d88 <TIM4_IRQHandler+0x10>)
 8001d7e:	f004 fc01 	bl	8006584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2000035c 	.word	0x2000035c

08001d8c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d90:	4802      	ldr	r0, [pc, #8]	; (8001d9c <I2C1_EV_IRQHandler+0x10>)
 8001d92:	f001 fe65 	bl	8003a60 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200001b0 	.word	0x200001b0

08001da0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001da4:	4802      	ldr	r0, [pc, #8]	; (8001db0 <USART2_IRQHandler+0x10>)
 8001da6:	f005 f94f 	bl	8007048 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200002e4 	.word	0x200002e4

08001db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dbc:	4a14      	ldr	r2, [pc, #80]	; (8001e10 <_sbrk+0x5c>)
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <_sbrk+0x60>)
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc8:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <_sbrk+0x64>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d102      	bne.n	8001dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <_sbrk+0x64>)
 8001dd2:	4a12      	ldr	r2, [pc, #72]	; (8001e1c <_sbrk+0x68>)
 8001dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <_sbrk+0x64>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d207      	bcs.n	8001df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001de4:	f006 f902 	bl	8007fec <__errno>
 8001de8:	4603      	mov	r3, r0
 8001dea:	220c      	movs	r2, #12
 8001dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dee:	f04f 33ff 	mov.w	r3, #4294967295
 8001df2:	e009      	b.n	8001e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <_sbrk+0x64>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dfa:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <_sbrk+0x64>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <_sbrk+0x64>)
 8001e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e06:	68fb      	ldr	r3, [r7, #12]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20018000 	.word	0x20018000
 8001e14:	00000400 	.word	0x00000400
 8001e18:	20000144 	.word	0x20000144
 8001e1c:	20000448 	.word	0x20000448

08001e20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <SystemInit+0x20>)
 8001e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2a:	4a05      	ldr	r2, [pc, #20]	; (8001e40 <SystemInit+0x20>)
 8001e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	; 0x28
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e4a:	f107 0320 	add.w	r3, r7, #32
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
 8001e60:	611a      	str	r2, [r3, #16]
 8001e62:	615a      	str	r2, [r3, #20]
 8001e64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e66:	4b2d      	ldr	r3, [pc, #180]	; (8001f1c <MX_TIM2_Init+0xd8>)
 8001e68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e6e:	4b2b      	ldr	r3, [pc, #172]	; (8001f1c <MX_TIM2_Init+0xd8>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e74:	4b29      	ldr	r3, [pc, #164]	; (8001f1c <MX_TIM2_Init+0xd8>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8001e7a:	4b28      	ldr	r3, [pc, #160]	; (8001f1c <MX_TIM2_Init+0xd8>)
 8001e7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e82:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <MX_TIM2_Init+0xd8>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e88:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <MX_TIM2_Init+0xd8>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e8e:	4823      	ldr	r0, [pc, #140]	; (8001f1c <MX_TIM2_Init+0xd8>)
 8001e90:	f004 f944 	bl	800611c <HAL_TIM_PWM_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001e9a:	f7ff fef7 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ea6:	f107 0320 	add.w	r3, r7, #32
 8001eaa:	4619      	mov	r1, r3
 8001eac:	481b      	ldr	r0, [pc, #108]	; (8001f1c <MX_TIM2_Init+0xd8>)
 8001eae:	f004 ff97 	bl	8006de0 <HAL_TIMEx_MasterConfigSynchronization>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001eb8:	f7ff fee8 	bl	8001c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ebc:	2360      	movs	r3, #96	; 0x60
 8001ebe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	2200      	movs	r2, #0
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4812      	ldr	r0, [pc, #72]	; (8001f1c <MX_TIM2_Init+0xd8>)
 8001ed4:	f004 fc5e 	bl	8006794 <HAL_TIM_PWM_ConfigChannel>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001ede:	f7ff fed5 	bl	8001c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ee2:	1d3b      	adds	r3, r7, #4
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	480c      	ldr	r0, [pc, #48]	; (8001f1c <MX_TIM2_Init+0xd8>)
 8001eea:	f004 fc53 	bl	8006794 <HAL_TIM_PWM_ConfigChannel>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001ef4:	f7ff feca 	bl	8001c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	2208      	movs	r2, #8
 8001efc:	4619      	mov	r1, r3
 8001efe:	4807      	ldr	r0, [pc, #28]	; (8001f1c <MX_TIM2_Init+0xd8>)
 8001f00:	f004 fc48 	bl	8006794 <HAL_TIM_PWM_ConfigChannel>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001f0a:	f7ff febf 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f0e:	4803      	ldr	r0, [pc, #12]	; (8001f1c <MX_TIM2_Init+0xd8>)
 8001f10:	f000 f95c 	bl	80021cc <HAL_TIM_MspPostInit>

}
 8001f14:	bf00      	nop
 8001f16:	3728      	adds	r7, #40	; 0x28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	200003ec 	.word	0x200003ec

08001f20 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08c      	sub	sp, #48	; 0x30
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f26:	f107 030c 	add.w	r3, r7, #12
 8001f2a:	2224      	movs	r2, #36	; 0x24
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f006 f8b6 	bl	80080a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f3c:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <MX_TIM3_Init+0xa0>)
 8001f3e:	4a21      	ldr	r2, [pc, #132]	; (8001fc4 <MX_TIM3_Init+0xa4>)
 8001f40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f42:	4b1f      	ldr	r3, [pc, #124]	; (8001fc0 <MX_TIM3_Init+0xa0>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f48:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <MX_TIM3_Init+0xa0>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 511;
 8001f4e:	4b1c      	ldr	r3, [pc, #112]	; (8001fc0 <MX_TIM3_Init+0xa0>)
 8001f50:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001f54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f56:	4b1a      	ldr	r3, [pc, #104]	; (8001fc0 <MX_TIM3_Init+0xa0>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f5c:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <MX_TIM3_Init+0xa0>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f62:	2301      	movs	r3, #1
 8001f64:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8001f72:	2301      	movs	r3, #1
 8001f74:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f76:	2300      	movs	r3, #0
 8001f78:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 8001f82:	2301      	movs	r3, #1
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f86:	f107 030c 	add.w	r3, r7, #12
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <MX_TIM3_Init+0xa0>)
 8001f8e:	f004 f9c5 	bl	800631c <HAL_TIM_Encoder_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001f98:	f7ff fe78 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4805      	ldr	r0, [pc, #20]	; (8001fc0 <MX_TIM3_Init+0xa0>)
 8001faa:	f004 ff19 	bl	8006de0 <HAL_TIMEx_MasterConfigSynchronization>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001fb4:	f7ff fe6a 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001fb8:	bf00      	nop
 8001fba:	3730      	adds	r7, #48	; 0x30
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	200003a4 	.word	0x200003a4
 8001fc4:	40000400 	.word	0x40000400

08001fc8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08c      	sub	sp, #48	; 0x30
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fce:	f107 030c 	add.w	r3, r7, #12
 8001fd2:	2224      	movs	r2, #36	; 0x24
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f006 f862 	bl	80080a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fe4:	4b20      	ldr	r3, [pc, #128]	; (8002068 <MX_TIM4_Init+0xa0>)
 8001fe6:	4a21      	ldr	r2, [pc, #132]	; (800206c <MX_TIM4_Init+0xa4>)
 8001fe8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001fea:	4b1f      	ldr	r3, [pc, #124]	; (8002068 <MX_TIM4_Init+0xa0>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff0:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <MX_TIM4_Init+0xa0>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <MX_TIM4_Init+0xa0>)
 8001ff8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001ffc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <MX_TIM4_Init+0xa0>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002004:	4b18      	ldr	r3, [pc, #96]	; (8002068 <MX_TIM4_Init+0xa0>)
 8002006:	2200      	movs	r2, #0
 8002008:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800200a:	2301      	movs	r3, #1
 800200c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002012:	2301      	movs	r3, #1
 8002014:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002016:	2300      	movs	r3, #0
 8002018:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 800201a:	2301      	movs	r3, #1
 800201c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002022:	2301      	movs	r3, #1
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002026:	2300      	movs	r3, #0
 8002028:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 800202a:	2301      	movs	r3, #1
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800202e:	f107 030c 	add.w	r3, r7, #12
 8002032:	4619      	mov	r1, r3
 8002034:	480c      	ldr	r0, [pc, #48]	; (8002068 <MX_TIM4_Init+0xa0>)
 8002036:	f004 f971 	bl	800631c <HAL_TIM_Encoder_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002040:	f7ff fe24 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002044:	2300      	movs	r3, #0
 8002046:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002048:	2300      	movs	r3, #0
 800204a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	4619      	mov	r1, r3
 8002050:	4805      	ldr	r0, [pc, #20]	; (8002068 <MX_TIM4_Init+0xa0>)
 8002052:	f004 fec5 	bl	8006de0 <HAL_TIMEx_MasterConfigSynchronization>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800205c:	f7ff fe16 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002060:	bf00      	nop
 8002062:	3730      	adds	r7, #48	; 0x30
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	2000035c 	.word	0x2000035c
 800206c:	40000800 	.word	0x40000800

08002070 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002080:	d10d      	bne.n	800209e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	4b09      	ldr	r3, [pc, #36]	; (80020ac <HAL_TIM_PWM_MspInit+0x3c>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	4a08      	ldr	r2, [pc, #32]	; (80020ac <HAL_TIM_PWM_MspInit+0x3c>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6413      	str	r3, [r2, #64]	; 0x40
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_TIM_PWM_MspInit+0x3c>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40023800 	.word	0x40023800

080020b0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08c      	sub	sp, #48	; 0x30
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 031c 	add.w	r3, r7, #28
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a3a      	ldr	r2, [pc, #232]	; (80021b8 <HAL_TIM_Encoder_MspInit+0x108>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d134      	bne.n	800213c <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	61bb      	str	r3, [r7, #24]
 80020d6:	4b39      	ldr	r3, [pc, #228]	; (80021bc <HAL_TIM_Encoder_MspInit+0x10c>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	4a38      	ldr	r2, [pc, #224]	; (80021bc <HAL_TIM_Encoder_MspInit+0x10c>)
 80020dc:	f043 0302 	orr.w	r3, r3, #2
 80020e0:	6413      	str	r3, [r2, #64]	; 0x40
 80020e2:	4b36      	ldr	r3, [pc, #216]	; (80021bc <HAL_TIM_Encoder_MspInit+0x10c>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	61bb      	str	r3, [r7, #24]
 80020ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	4b32      	ldr	r3, [pc, #200]	; (80021bc <HAL_TIM_Encoder_MspInit+0x10c>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a31      	ldr	r2, [pc, #196]	; (80021bc <HAL_TIM_Encoder_MspInit+0x10c>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b2f      	ldr	r3, [pc, #188]	; (80021bc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800210a:	23c0      	movs	r3, #192	; 0xc0
 800210c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002116:	2300      	movs	r3, #0
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800211a:	2302      	movs	r3, #2
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211e:	f107 031c 	add.w	r3, r7, #28
 8002122:	4619      	mov	r1, r3
 8002124:	4826      	ldr	r0, [pc, #152]	; (80021c0 <HAL_TIM_Encoder_MspInit+0x110>)
 8002126:	f000 ff43 	bl	8002fb0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2100      	movs	r1, #0
 800212e:	201d      	movs	r0, #29
 8002130:	f000 faeb 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002134:	201d      	movs	r0, #29
 8002136:	f000 fb04 	bl	8002742 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800213a:	e038      	b.n	80021ae <HAL_TIM_Encoder_MspInit+0xfe>
  else if(tim_encoderHandle->Instance==TIM4)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a20      	ldr	r2, [pc, #128]	; (80021c4 <HAL_TIM_Encoder_MspInit+0x114>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d133      	bne.n	80021ae <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <HAL_TIM_Encoder_MspInit+0x10c>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	4a1b      	ldr	r2, [pc, #108]	; (80021bc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002150:	f043 0304 	orr.w	r3, r3, #4
 8002154:	6413      	str	r3, [r2, #64]	; 0x40
 8002156:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4a14      	ldr	r2, [pc, #80]	; (80021bc <HAL_TIM_Encoder_MspInit+0x10c>)
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800217e:	23c0      	movs	r3, #192	; 0xc0
 8002180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218a:	2300      	movs	r3, #0
 800218c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800218e:	2302      	movs	r3, #2
 8002190:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002192:	f107 031c 	add.w	r3, r7, #28
 8002196:	4619      	mov	r1, r3
 8002198:	480b      	ldr	r0, [pc, #44]	; (80021c8 <HAL_TIM_Encoder_MspInit+0x118>)
 800219a:	f000 ff09 	bl	8002fb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	2100      	movs	r1, #0
 80021a2:	201e      	movs	r0, #30
 80021a4:	f000 fab1 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80021a8:	201e      	movs	r0, #30
 80021aa:	f000 faca 	bl	8002742 <HAL_NVIC_EnableIRQ>
}
 80021ae:	bf00      	nop
 80021b0:	3730      	adds	r7, #48	; 0x30
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40000400 	.word	0x40000400
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40020000 	.word	0x40020000
 80021c4:	40000800 	.word	0x40000800
 80021c8:	40020400 	.word	0x40020400

080021cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	; 0x28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ec:	d13c      	bne.n	8002268 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	4b1f      	ldr	r3, [pc, #124]	; (8002270 <HAL_TIM_MspPostInit+0xa4>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a1e      	ldr	r2, [pc, #120]	; (8002270 <HAL_TIM_MspPostInit+0xa4>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b1c      	ldr	r3, [pc, #112]	; (8002270 <HAL_TIM_MspPostInit+0xa4>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	4b18      	ldr	r3, [pc, #96]	; (8002270 <HAL_TIM_MspPostInit+0xa4>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	4a17      	ldr	r2, [pc, #92]	; (8002270 <HAL_TIM_MspPostInit+0xa4>)
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	6313      	str	r3, [r2, #48]	; 0x30
 800221a:	4b15      	ldr	r3, [pc, #84]	; (8002270 <HAL_TIM_MspPostInit+0xa4>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002226:	2303      	movs	r3, #3
 8002228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	2302      	movs	r3, #2
 800222c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002236:	2301      	movs	r3, #1
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223a:	f107 0314 	add.w	r3, r7, #20
 800223e:	4619      	mov	r1, r3
 8002240:	480c      	ldr	r0, [pc, #48]	; (8002274 <HAL_TIM_MspPostInit+0xa8>)
 8002242:	f000 feb5 	bl	8002fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800224a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224c:	2302      	movs	r3, #2
 800224e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002254:	2300      	movs	r3, #0
 8002256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002258:	2301      	movs	r3, #1
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	4619      	mov	r1, r3
 8002262:	4805      	ldr	r0, [pc, #20]	; (8002278 <HAL_TIM_MspPostInit+0xac>)
 8002264:	f000 fea4 	bl	8002fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002268:	bf00      	nop
 800226a:	3728      	adds	r7, #40	; 0x28
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40023800 	.word	0x40023800
 8002274:	40020000 	.word	0x40020000
 8002278:	40020400 	.word	0x40020400

0800227c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002280:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 8002282:	4a12      	ldr	r2, [pc, #72]	; (80022cc <MX_USART2_UART_Init+0x50>)
 8002284:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 8002288:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800228c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 8002296:	2200      	movs	r2, #0
 8002298:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 800229c:	2200      	movs	r2, #0
 800229e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 80022a2:	220c      	movs	r2, #12
 80022a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022b2:	4805      	ldr	r0, [pc, #20]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 80022b4:	f004 fe16 	bl	8006ee4 <HAL_UART_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022be:	f7ff fce5 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200002e4 	.word	0x200002e4
 80022cc:	40004400 	.word	0x40004400

080022d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08a      	sub	sp, #40	; 0x28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a34      	ldr	r2, [pc, #208]	; (80023c0 <HAL_UART_MspInit+0xf0>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d161      	bne.n	80023b6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	4b33      	ldr	r3, [pc, #204]	; (80023c4 <HAL_UART_MspInit+0xf4>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	4a32      	ldr	r2, [pc, #200]	; (80023c4 <HAL_UART_MspInit+0xf4>)
 80022fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002300:	6413      	str	r3, [r2, #64]	; 0x40
 8002302:	4b30      	ldr	r3, [pc, #192]	; (80023c4 <HAL_UART_MspInit+0xf4>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <HAL_UART_MspInit+0xf4>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a2b      	ldr	r2, [pc, #172]	; (80023c4 <HAL_UART_MspInit+0xf4>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <HAL_UART_MspInit+0xf4>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800232a:	230c      	movs	r3, #12
 800232c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	2302      	movs	r3, #2
 8002330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002336:	2300      	movs	r3, #0
 8002338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800233a:	2307      	movs	r3, #7
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233e:	f107 0314 	add.w	r3, r7, #20
 8002342:	4619      	mov	r1, r3
 8002344:	4820      	ldr	r0, [pc, #128]	; (80023c8 <HAL_UART_MspInit+0xf8>)
 8002346:	f000 fe33 	bl	8002fb0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800234a:	4b20      	ldr	r3, [pc, #128]	; (80023cc <HAL_UART_MspInit+0xfc>)
 800234c:	4a20      	ldr	r2, [pc, #128]	; (80023d0 <HAL_UART_MspInit+0x100>)
 800234e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002350:	4b1e      	ldr	r3, [pc, #120]	; (80023cc <HAL_UART_MspInit+0xfc>)
 8002352:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002356:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002358:	4b1c      	ldr	r3, [pc, #112]	; (80023cc <HAL_UART_MspInit+0xfc>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800235e:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <HAL_UART_MspInit+0xfc>)
 8002360:	2200      	movs	r2, #0
 8002362:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002364:	4b19      	ldr	r3, [pc, #100]	; (80023cc <HAL_UART_MspInit+0xfc>)
 8002366:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800236a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800236c:	4b17      	ldr	r3, [pc, #92]	; (80023cc <HAL_UART_MspInit+0xfc>)
 800236e:	2200      	movs	r2, #0
 8002370:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002372:	4b16      	ldr	r3, [pc, #88]	; (80023cc <HAL_UART_MspInit+0xfc>)
 8002374:	2200      	movs	r2, #0
 8002376:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002378:	4b14      	ldr	r3, [pc, #80]	; (80023cc <HAL_UART_MspInit+0xfc>)
 800237a:	2200      	movs	r2, #0
 800237c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800237e:	4b13      	ldr	r3, [pc, #76]	; (80023cc <HAL_UART_MspInit+0xfc>)
 8002380:	2200      	movs	r2, #0
 8002382:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <HAL_UART_MspInit+0xfc>)
 8002386:	2200      	movs	r2, #0
 8002388:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800238a:	4810      	ldr	r0, [pc, #64]	; (80023cc <HAL_UART_MspInit+0xfc>)
 800238c:	f000 f9f4 	bl	8002778 <HAL_DMA_Init>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002396:	f7ff fc79 	bl	8001c8c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a0b      	ldr	r2, [pc, #44]	; (80023cc <HAL_UART_MspInit+0xfc>)
 800239e:	639a      	str	r2, [r3, #56]	; 0x38
 80023a0:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <HAL_UART_MspInit+0xfc>)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2100      	movs	r1, #0
 80023aa:	2026      	movs	r0, #38	; 0x26
 80023ac:	f000 f9ad 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023b0:	2026      	movs	r0, #38	; 0x26
 80023b2:	f000 f9c6 	bl	8002742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023b6:	bf00      	nop
 80023b8:	3728      	adds	r7, #40	; 0x28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40004400 	.word	0x40004400
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40020000 	.word	0x40020000
 80023cc:	2000021c 	.word	0x2000021c
 80023d0:	40026088 	.word	0x40026088

080023d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800240c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023d8:	480d      	ldr	r0, [pc, #52]	; (8002410 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023da:	490e      	ldr	r1, [pc, #56]	; (8002414 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023dc:	4a0e      	ldr	r2, [pc, #56]	; (8002418 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e0:	e002      	b.n	80023e8 <LoopCopyDataInit>

080023e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e6:	3304      	adds	r3, #4

080023e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023ec:	d3f9      	bcc.n	80023e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ee:	4a0b      	ldr	r2, [pc, #44]	; (800241c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023f0:	4c0b      	ldr	r4, [pc, #44]	; (8002420 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f4:	e001      	b.n	80023fa <LoopFillZerobss>

080023f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f8:	3204      	adds	r2, #4

080023fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023fc:	d3fb      	bcc.n	80023f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023fe:	f7ff fd0f 	bl	8001e20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002402:	f005 fdf9 	bl	8007ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002406:	f7ff fb83 	bl	8001b10 <main>
  bx  lr    
 800240a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800240c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002414:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8002418:	080087c0 	.word	0x080087c0
  ldr r2, =_sbss
 800241c:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8002420:	20000448 	.word	0x20000448

08002424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002424:	e7fe      	b.n	8002424 <ADC_IRQHandler>
	...

08002428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800242c:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <HAL_Init+0x40>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a0d      	ldr	r2, [pc, #52]	; (8002468 <HAL_Init+0x40>)
 8002432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002436:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_Init+0x40>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <HAL_Init+0x40>)
 800243e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002442:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <HAL_Init+0x40>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a07      	ldr	r2, [pc, #28]	; (8002468 <HAL_Init+0x40>)
 800244a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002450:	2003      	movs	r0, #3
 8002452:	f000 f94f 	bl	80026f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002456:	2000      	movs	r0, #0
 8002458:	f000 f808 	bl	800246c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800245c:	f7ff fc1c 	bl	8001c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40023c00 	.word	0x40023c00

0800246c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002474:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_InitTick+0x54>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_InitTick+0x58>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	4619      	mov	r1, r3
 800247e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002482:	fbb3 f3f1 	udiv	r3, r3, r1
 8002486:	fbb2 f3f3 	udiv	r3, r2, r3
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f967 	bl	800275e <HAL_SYSTICK_Config>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e00e      	b.n	80024b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b0f      	cmp	r3, #15
 800249e:	d80a      	bhi.n	80024b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a0:	2200      	movs	r2, #0
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	f04f 30ff 	mov.w	r0, #4294967295
 80024a8:	f000 f92f 	bl	800270a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024ac:	4a06      	ldr	r2, [pc, #24]	; (80024c8 <HAL_InitTick+0x5c>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	e000      	b.n	80024b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	2000009c 	.word	0x2000009c
 80024c4:	200000a4 	.word	0x200000a4
 80024c8:	200000a0 	.word	0x200000a0

080024cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_IncTick+0x20>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_IncTick+0x24>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <HAL_IncTick+0x24>)
 80024de:	6013      	str	r3, [r2, #0]
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	200000a4 	.word	0x200000a4
 80024f0:	20000434 	.word	0x20000434

080024f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return uwTick;
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <HAL_GetTick+0x14>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000434 	.word	0x20000434

0800250c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002514:	f7ff ffee 	bl	80024f4 <HAL_GetTick>
 8002518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002524:	d005      	beq.n	8002532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002526:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <HAL_Delay+0x44>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4413      	add	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002532:	bf00      	nop
 8002534:	f7ff ffde 	bl	80024f4 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	429a      	cmp	r2, r3
 8002542:	d8f7      	bhi.n	8002534 <HAL_Delay+0x28>
  {
  }
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	200000a4 	.word	0x200000a4

08002554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002570:	4013      	ands	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800257c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002586:	4a04      	ldr	r2, [pc, #16]	; (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	60d3      	str	r3, [r2, #12]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <__NVIC_GetPriorityGrouping+0x18>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	f003 0307 	and.w	r3, r3, #7
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	db0b      	blt.n	80025e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	4907      	ldr	r1, [pc, #28]	; (80025f0 <__NVIC_EnableIRQ+0x38>)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	2001      	movs	r0, #1
 80025da:	fa00 f202 	lsl.w	r2, r0, r2
 80025de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000e100 	.word	0xe000e100

080025f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	2b00      	cmp	r3, #0
 8002606:	db0a      	blt.n	800261e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	490c      	ldr	r1, [pc, #48]	; (8002640 <__NVIC_SetPriority+0x4c>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	0112      	lsls	r2, r2, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	440b      	add	r3, r1
 8002618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800261c:	e00a      	b.n	8002634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4908      	ldr	r1, [pc, #32]	; (8002644 <__NVIC_SetPriority+0x50>)
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	3b04      	subs	r3, #4
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	440b      	add	r3, r1
 8002632:	761a      	strb	r2, [r3, #24]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000e100 	.word	0xe000e100
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	; 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f1c3 0307 	rsb	r3, r3, #7
 8002662:	2b04      	cmp	r3, #4
 8002664:	bf28      	it	cs
 8002666:	2304      	movcs	r3, #4
 8002668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3304      	adds	r3, #4
 800266e:	2b06      	cmp	r3, #6
 8002670:	d902      	bls.n	8002678 <NVIC_EncodePriority+0x30>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3b03      	subs	r3, #3
 8002676:	e000      	b.n	800267a <NVIC_EncodePriority+0x32>
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	f04f 32ff 	mov.w	r2, #4294967295
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	401a      	ands	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002690:	f04f 31ff 	mov.w	r1, #4294967295
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43d9      	mvns	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	4313      	orrs	r3, r2
         );
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3724      	adds	r7, #36	; 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026c0:	d301      	bcc.n	80026c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00f      	b.n	80026e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c6:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <SysTick_Config+0x40>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ce:	210f      	movs	r1, #15
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295
 80026d4:	f7ff ff8e 	bl	80025f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <SysTick_Config+0x40>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026de:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <SysTick_Config+0x40>)
 80026e0:	2207      	movs	r2, #7
 80026e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	e000e010 	.word	0xe000e010

080026f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff29 	bl	8002554 <__NVIC_SetPriorityGrouping>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800271c:	f7ff ff3e 	bl	800259c <__NVIC_GetPriorityGrouping>
 8002720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	6978      	ldr	r0, [r7, #20]
 8002728:	f7ff ff8e 	bl	8002648 <NVIC_EncodePriority>
 800272c:	4602      	mov	r2, r0
 800272e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff5d 	bl	80025f4 <__NVIC_SetPriority>
}
 800273a:	bf00      	nop
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	4603      	mov	r3, r0
 800274a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800274c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff31 	bl	80025b8 <__NVIC_EnableIRQ>
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ffa2 	bl	80026b0 <SysTick_Config>
 800276c:	4603      	mov	r3, r0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002784:	f7ff feb6 	bl	80024f4 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e099      	b.n	80028c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0201 	bic.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027b4:	e00f      	b.n	80027d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027b6:	f7ff fe9d 	bl	80024f4 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b05      	cmp	r3, #5
 80027c2:	d908      	bls.n	80027d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2203      	movs	r2, #3
 80027ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e078      	b.n	80028c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1e8      	bne.n	80027b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	4b38      	ldr	r3, [pc, #224]	; (80028d0 <HAL_DMA_Init+0x158>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002802:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800280e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800281a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	4313      	orrs	r3, r2
 8002826:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	2b04      	cmp	r3, #4
 800282e:	d107      	bne.n	8002840 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	4313      	orrs	r3, r2
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f023 0307 	bic.w	r3, r3, #7
 8002856:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	4313      	orrs	r3, r2
 8002860:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	2b04      	cmp	r3, #4
 8002868:	d117      	bne.n	800289a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	4313      	orrs	r3, r2
 8002872:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00e      	beq.n	800289a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 fb1b 	bl	8002eb8 <DMA_CheckFifoParam>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2240      	movs	r2, #64	; 0x40
 800288c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002896:	2301      	movs	r3, #1
 8002898:	e016      	b.n	80028c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fad2 	bl	8002e4c <DMA_CalcBaseAndBitshift>
 80028a8:	4603      	mov	r3, r0
 80028aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b0:	223f      	movs	r2, #63	; 0x3f
 80028b2:	409a      	lsls	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	f010803f 	.word	0xf010803f

080028d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_DMA_Start_IT+0x26>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e040      	b.n	800297c <HAL_DMA_Start_IT+0xa8>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b01      	cmp	r3, #1
 800290c:	d12f      	bne.n	800296e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2202      	movs	r2, #2
 8002912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 fa64 	bl	8002df0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292c:	223f      	movs	r2, #63	; 0x3f
 800292e:	409a      	lsls	r2, r3
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0216 	orr.w	r2, r2, #22
 8002942:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	2b00      	cmp	r3, #0
 800294a:	d007      	beq.n	800295c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0208 	orr.w	r2, r2, #8
 800295a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	e005      	b.n	800297a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002976:	2302      	movs	r3, #2
 8002978:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800297a:	7dfb      	ldrb	r3, [r7, #23]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002990:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002992:	f7ff fdaf 	bl	80024f4 <HAL_GetTick>
 8002996:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d008      	beq.n	80029b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2280      	movs	r2, #128	; 0x80
 80029a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e052      	b.n	8002a5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0216 	bic.w	r2, r2, #22
 80029c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695a      	ldr	r2, [r3, #20]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d103      	bne.n	80029e6 <HAL_DMA_Abort+0x62>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0208 	bic.w	r2, r2, #8
 80029f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a06:	e013      	b.n	8002a30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a08:	f7ff fd74 	bl	80024f4 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b05      	cmp	r3, #5
 8002a14:	d90c      	bls.n	8002a30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2203      	movs	r2, #3
 8002a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e015      	b.n	8002a5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1e4      	bne.n	8002a08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a42:	223f      	movs	r2, #63	; 0x3f
 8002a44:	409a      	lsls	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d004      	beq.n	8002a82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2280      	movs	r2, #128	; 0x80
 8002a7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e00c      	b.n	8002a9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2205      	movs	r2, #5
 8002a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0201 	bic.w	r2, r2, #1
 8002a98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ab4:	4b92      	ldr	r3, [pc, #584]	; (8002d00 <HAL_DMA_IRQHandler+0x258>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a92      	ldr	r2, [pc, #584]	; (8002d04 <HAL_DMA_IRQHandler+0x25c>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	0a9b      	lsrs	r3, r3, #10
 8002ac0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad2:	2208      	movs	r2, #8
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d01a      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d013      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0204 	bic.w	r2, r2, #4
 8002afa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b00:	2208      	movs	r2, #8
 8002b02:	409a      	lsls	r2, r3
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0c:	f043 0201 	orr.w	r2, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b18:	2201      	movs	r2, #1
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d012      	beq.n	8002b4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00b      	beq.n	8002b4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b36:	2201      	movs	r2, #1
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b42:	f043 0202 	orr.w	r2, r3, #2
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4e:	2204      	movs	r2, #4
 8002b50:	409a      	lsls	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d012      	beq.n	8002b80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00b      	beq.n	8002b80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b78:	f043 0204 	orr.w	r2, r3, #4
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b84:	2210      	movs	r2, #16
 8002b86:	409a      	lsls	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d043      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d03c      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba2:	2210      	movs	r2, #16
 8002ba4:	409a      	lsls	r2, r3
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d018      	beq.n	8002bea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d108      	bne.n	8002bd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d024      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	4798      	blx	r3
 8002bd6:	e01f      	b.n	8002c18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d01b      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	4798      	blx	r3
 8002be8:	e016      	b.n	8002c18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d107      	bne.n	8002c08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0208 	bic.w	r2, r2, #8
 8002c06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 808e 	beq.w	8002d46 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 8086 	beq.w	8002d46 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3e:	2220      	movs	r2, #32
 8002c40:	409a      	lsls	r2, r3
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b05      	cmp	r3, #5
 8002c50:	d136      	bne.n	8002cc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0216 	bic.w	r2, r2, #22
 8002c60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d103      	bne.n	8002c82 <HAL_DMA_IRQHandler+0x1da>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0208 	bic.w	r2, r2, #8
 8002c90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c96:	223f      	movs	r2, #63	; 0x3f
 8002c98:	409a      	lsls	r2, r3
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d07d      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	4798      	blx	r3
        }
        return;
 8002cbe:	e078      	b.n	8002db2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d01c      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d108      	bne.n	8002cee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d030      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	4798      	blx	r3
 8002cec:	e02b      	b.n	8002d46 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d027      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	4798      	blx	r3
 8002cfe:	e022      	b.n	8002d46 <HAL_DMA_IRQHandler+0x29e>
 8002d00:	2000009c 	.word	0x2000009c
 8002d04:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10f      	bne.n	8002d36 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0210 	bic.w	r2, r2, #16
 8002d24:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d032      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d022      	beq.n	8002da0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2205      	movs	r2, #5
 8002d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0201 	bic.w	r2, r2, #1
 8002d70:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	3301      	adds	r3, #1
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d307      	bcc.n	8002d8e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f2      	bne.n	8002d72 <HAL_DMA_IRQHandler+0x2ca>
 8002d8c:	e000      	b.n	8002d90 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d8e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	4798      	blx	r3
 8002db0:	e000      	b.n	8002db4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002db2:	bf00      	nop
    }
  }
}
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop

08002dbc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dca:	b2db      	uxtb	r3, r3
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
 8002dfc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b40      	cmp	r3, #64	; 0x40
 8002e1c:	d108      	bne.n	8002e30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e2e:	e007      	b.n	8002e40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	60da      	str	r2, [r3, #12]
}
 8002e40:	bf00      	nop
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	3b10      	subs	r3, #16
 8002e5c:	4a14      	ldr	r2, [pc, #80]	; (8002eb0 <DMA_CalcBaseAndBitshift+0x64>)
 8002e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e62:	091b      	lsrs	r3, r3, #4
 8002e64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e66:	4a13      	ldr	r2, [pc, #76]	; (8002eb4 <DMA_CalcBaseAndBitshift+0x68>)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d909      	bls.n	8002e8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e82:	f023 0303 	bic.w	r3, r3, #3
 8002e86:	1d1a      	adds	r2, r3, #4
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	659a      	str	r2, [r3, #88]	; 0x58
 8002e8c:	e007      	b.n	8002e9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e96:	f023 0303 	bic.w	r3, r3, #3
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	aaaaaaab 	.word	0xaaaaaaab
 8002eb4:	08008780 	.word	0x08008780

08002eb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d11f      	bne.n	8002f12 <DMA_CheckFifoParam+0x5a>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d856      	bhi.n	8002f86 <DMA_CheckFifoParam+0xce>
 8002ed8:	a201      	add	r2, pc, #4	; (adr r2, 8002ee0 <DMA_CheckFifoParam+0x28>)
 8002eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ede:	bf00      	nop
 8002ee0:	08002ef1 	.word	0x08002ef1
 8002ee4:	08002f03 	.word	0x08002f03
 8002ee8:	08002ef1 	.word	0x08002ef1
 8002eec:	08002f87 	.word	0x08002f87
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d046      	beq.n	8002f8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f00:	e043      	b.n	8002f8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f0a:	d140      	bne.n	8002f8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f10:	e03d      	b.n	8002f8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f1a:	d121      	bne.n	8002f60 <DMA_CheckFifoParam+0xa8>
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	d837      	bhi.n	8002f92 <DMA_CheckFifoParam+0xda>
 8002f22:	a201      	add	r2, pc, #4	; (adr r2, 8002f28 <DMA_CheckFifoParam+0x70>)
 8002f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f28:	08002f39 	.word	0x08002f39
 8002f2c:	08002f3f 	.word	0x08002f3f
 8002f30:	08002f39 	.word	0x08002f39
 8002f34:	08002f51 	.word	0x08002f51
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f3c:	e030      	b.n	8002fa0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d025      	beq.n	8002f96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f4e:	e022      	b.n	8002f96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f58:	d11f      	bne.n	8002f9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f5e:	e01c      	b.n	8002f9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d903      	bls.n	8002f6e <DMA_CheckFifoParam+0xb6>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d003      	beq.n	8002f74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f6c:	e018      	b.n	8002fa0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	73fb      	strb	r3, [r7, #15]
      break;
 8002f72:	e015      	b.n	8002fa0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00e      	beq.n	8002f9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
      break;
 8002f84:	e00b      	b.n	8002f9e <DMA_CheckFifoParam+0xe6>
      break;
 8002f86:	bf00      	nop
 8002f88:	e00a      	b.n	8002fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8002f8a:	bf00      	nop
 8002f8c:	e008      	b.n	8002fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8002f8e:	bf00      	nop
 8002f90:	e006      	b.n	8002fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8002f92:	bf00      	nop
 8002f94:	e004      	b.n	8002fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8002f96:	bf00      	nop
 8002f98:	e002      	b.n	8002fa0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f9a:	bf00      	nop
 8002f9c:	e000      	b.n	8002fa0 <DMA_CheckFifoParam+0xe8>
      break;
 8002f9e:	bf00      	nop
    }
  } 
  
  return status; 
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop

08002fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b089      	sub	sp, #36	; 0x24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	e159      	b.n	8003280 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fcc:	2201      	movs	r2, #1
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	f040 8148 	bne.w	800327a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d005      	beq.n	8003002 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d130      	bne.n	8003064 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	2203      	movs	r2, #3
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4013      	ands	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003038:	2201      	movs	r2, #1
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	091b      	lsrs	r3, r3, #4
 800304e:	f003 0201 	and.w	r2, r3, #1
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	2b03      	cmp	r3, #3
 800306e:	d017      	beq.n	80030a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	2203      	movs	r2, #3
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d123      	bne.n	80030f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	08da      	lsrs	r2, r3, #3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3208      	adds	r2, #8
 80030b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	220f      	movs	r2, #15
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	08da      	lsrs	r2, r3, #3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3208      	adds	r2, #8
 80030ee:	69b9      	ldr	r1, [r7, #24]
 80030f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	2203      	movs	r2, #3
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4013      	ands	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 0203 	and.w	r2, r3, #3
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 80a2 	beq.w	800327a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	4b57      	ldr	r3, [pc, #348]	; (8003298 <HAL_GPIO_Init+0x2e8>)
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	4a56      	ldr	r2, [pc, #344]	; (8003298 <HAL_GPIO_Init+0x2e8>)
 8003140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003144:	6453      	str	r3, [r2, #68]	; 0x44
 8003146:	4b54      	ldr	r3, [pc, #336]	; (8003298 <HAL_GPIO_Init+0x2e8>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003152:	4a52      	ldr	r2, [pc, #328]	; (800329c <HAL_GPIO_Init+0x2ec>)
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	089b      	lsrs	r3, r3, #2
 8003158:	3302      	adds	r3, #2
 800315a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800315e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	220f      	movs	r2, #15
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43db      	mvns	r3, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4013      	ands	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a49      	ldr	r2, [pc, #292]	; (80032a0 <HAL_GPIO_Init+0x2f0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d019      	beq.n	80031b2 <HAL_GPIO_Init+0x202>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a48      	ldr	r2, [pc, #288]	; (80032a4 <HAL_GPIO_Init+0x2f4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d013      	beq.n	80031ae <HAL_GPIO_Init+0x1fe>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a47      	ldr	r2, [pc, #284]	; (80032a8 <HAL_GPIO_Init+0x2f8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00d      	beq.n	80031aa <HAL_GPIO_Init+0x1fa>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a46      	ldr	r2, [pc, #280]	; (80032ac <HAL_GPIO_Init+0x2fc>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d007      	beq.n	80031a6 <HAL_GPIO_Init+0x1f6>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a45      	ldr	r2, [pc, #276]	; (80032b0 <HAL_GPIO_Init+0x300>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d101      	bne.n	80031a2 <HAL_GPIO_Init+0x1f2>
 800319e:	2304      	movs	r3, #4
 80031a0:	e008      	b.n	80031b4 <HAL_GPIO_Init+0x204>
 80031a2:	2307      	movs	r3, #7
 80031a4:	e006      	b.n	80031b4 <HAL_GPIO_Init+0x204>
 80031a6:	2303      	movs	r3, #3
 80031a8:	e004      	b.n	80031b4 <HAL_GPIO_Init+0x204>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e002      	b.n	80031b4 <HAL_GPIO_Init+0x204>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <HAL_GPIO_Init+0x204>
 80031b2:	2300      	movs	r3, #0
 80031b4:	69fa      	ldr	r2, [r7, #28]
 80031b6:	f002 0203 	and.w	r2, r2, #3
 80031ba:	0092      	lsls	r2, r2, #2
 80031bc:	4093      	lsls	r3, r2
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031c4:	4935      	ldr	r1, [pc, #212]	; (800329c <HAL_GPIO_Init+0x2ec>)
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	089b      	lsrs	r3, r3, #2
 80031ca:	3302      	adds	r3, #2
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031d2:	4b38      	ldr	r3, [pc, #224]	; (80032b4 <HAL_GPIO_Init+0x304>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	43db      	mvns	r3, r3
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4013      	ands	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031f6:	4a2f      	ldr	r2, [pc, #188]	; (80032b4 <HAL_GPIO_Init+0x304>)
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031fc:	4b2d      	ldr	r3, [pc, #180]	; (80032b4 <HAL_GPIO_Init+0x304>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003220:	4a24      	ldr	r2, [pc, #144]	; (80032b4 <HAL_GPIO_Init+0x304>)
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003226:	4b23      	ldr	r3, [pc, #140]	; (80032b4 <HAL_GPIO_Init+0x304>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	43db      	mvns	r3, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4013      	ands	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800324a:	4a1a      	ldr	r2, [pc, #104]	; (80032b4 <HAL_GPIO_Init+0x304>)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003250:	4b18      	ldr	r3, [pc, #96]	; (80032b4 <HAL_GPIO_Init+0x304>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	43db      	mvns	r3, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4013      	ands	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003274:	4a0f      	ldr	r2, [pc, #60]	; (80032b4 <HAL_GPIO_Init+0x304>)
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	3301      	adds	r3, #1
 800327e:	61fb      	str	r3, [r7, #28]
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	2b0f      	cmp	r3, #15
 8003284:	f67f aea2 	bls.w	8002fcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003288:	bf00      	nop
 800328a:	bf00      	nop
 800328c:	3724      	adds	r7, #36	; 0x24
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40023800 	.word	0x40023800
 800329c:	40013800 	.word	0x40013800
 80032a0:	40020000 	.word	0x40020000
 80032a4:	40020400 	.word	0x40020400
 80032a8:	40020800 	.word	0x40020800
 80032ac:	40020c00 	.word	0x40020c00
 80032b0:	40021000 	.word	0x40021000
 80032b4:	40013c00 	.word	0x40013c00

080032b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	807b      	strh	r3, [r7, #2]
 80032c4:	4613      	mov	r3, r2
 80032c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032c8:	787b      	ldrb	r3, [r7, #1]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ce:	887a      	ldrh	r2, [r7, #2]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032d4:	e003      	b.n	80032de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032d6:	887b      	ldrh	r3, [r7, #2]
 80032d8:	041a      	lsls	r2, r3, #16
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	619a      	str	r2, [r3, #24]
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b085      	sub	sp, #20
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	460b      	mov	r3, r1
 80032f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032fc:	887a      	ldrh	r2, [r7, #2]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4013      	ands	r3, r2
 8003302:	041a      	lsls	r2, r3, #16
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	43d9      	mvns	r1, r3
 8003308:	887b      	ldrh	r3, [r7, #2]
 800330a:	400b      	ands	r3, r1
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	619a      	str	r2, [r3, #24]
}
 8003312:	bf00      	nop
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e12b      	b.n	800358a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fd ffac 	bl	80012a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2224      	movs	r2, #36	; 0x24
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0201 	bic.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003372:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003382:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003384:	f002 fea2 	bl	80060cc <HAL_RCC_GetPCLK1Freq>
 8003388:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	4a81      	ldr	r2, [pc, #516]	; (8003594 <HAL_I2C_Init+0x274>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d807      	bhi.n	80033a4 <HAL_I2C_Init+0x84>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4a80      	ldr	r2, [pc, #512]	; (8003598 <HAL_I2C_Init+0x278>)
 8003398:	4293      	cmp	r3, r2
 800339a:	bf94      	ite	ls
 800339c:	2301      	movls	r3, #1
 800339e:	2300      	movhi	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	e006      	b.n	80033b2 <HAL_I2C_Init+0x92>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4a7d      	ldr	r2, [pc, #500]	; (800359c <HAL_I2C_Init+0x27c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	bf94      	ite	ls
 80033ac:	2301      	movls	r3, #1
 80033ae:	2300      	movhi	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e0e7      	b.n	800358a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4a78      	ldr	r2, [pc, #480]	; (80035a0 <HAL_I2C_Init+0x280>)
 80033be:	fba2 2303 	umull	r2, r3, r2, r3
 80033c2:	0c9b      	lsrs	r3, r3, #18
 80033c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	4a6a      	ldr	r2, [pc, #424]	; (8003594 <HAL_I2C_Init+0x274>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d802      	bhi.n	80033f4 <HAL_I2C_Init+0xd4>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	3301      	adds	r3, #1
 80033f2:	e009      	b.n	8003408 <HAL_I2C_Init+0xe8>
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033fa:	fb02 f303 	mul.w	r3, r2, r3
 80033fe:	4a69      	ldr	r2, [pc, #420]	; (80035a4 <HAL_I2C_Init+0x284>)
 8003400:	fba2 2303 	umull	r2, r3, r2, r3
 8003404:	099b      	lsrs	r3, r3, #6
 8003406:	3301      	adds	r3, #1
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6812      	ldr	r2, [r2, #0]
 800340c:	430b      	orrs	r3, r1
 800340e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800341a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	495c      	ldr	r1, [pc, #368]	; (8003594 <HAL_I2C_Init+0x274>)
 8003424:	428b      	cmp	r3, r1
 8003426:	d819      	bhi.n	800345c <HAL_I2C_Init+0x13c>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	1e59      	subs	r1, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	fbb1 f3f3 	udiv	r3, r1, r3
 8003436:	1c59      	adds	r1, r3, #1
 8003438:	f640 73fc 	movw	r3, #4092	; 0xffc
 800343c:	400b      	ands	r3, r1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <HAL_I2C_Init+0x138>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	1e59      	subs	r1, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003450:	3301      	adds	r3, #1
 8003452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003456:	e051      	b.n	80034fc <HAL_I2C_Init+0x1dc>
 8003458:	2304      	movs	r3, #4
 800345a:	e04f      	b.n	80034fc <HAL_I2C_Init+0x1dc>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d111      	bne.n	8003488 <HAL_I2C_Init+0x168>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	1e58      	subs	r0, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6859      	ldr	r1, [r3, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	440b      	add	r3, r1
 8003472:	fbb0 f3f3 	udiv	r3, r0, r3
 8003476:	3301      	adds	r3, #1
 8003478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	e012      	b.n	80034ae <HAL_I2C_Init+0x18e>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	1e58      	subs	r0, r3, #1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6859      	ldr	r1, [r3, #4]
 8003490:	460b      	mov	r3, r1
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	0099      	lsls	r1, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	fbb0 f3f3 	udiv	r3, r0, r3
 800349e:	3301      	adds	r3, #1
 80034a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	bf0c      	ite	eq
 80034a8:	2301      	moveq	r3, #1
 80034aa:	2300      	movne	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <HAL_I2C_Init+0x196>
 80034b2:	2301      	movs	r3, #1
 80034b4:	e022      	b.n	80034fc <HAL_I2C_Init+0x1dc>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10e      	bne.n	80034dc <HAL_I2C_Init+0x1bc>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1e58      	subs	r0, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6859      	ldr	r1, [r3, #4]
 80034c6:	460b      	mov	r3, r1
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	440b      	add	r3, r1
 80034cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80034d0:	3301      	adds	r3, #1
 80034d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034da:	e00f      	b.n	80034fc <HAL_I2C_Init+0x1dc>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1e58      	subs	r0, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6859      	ldr	r1, [r3, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	0099      	lsls	r1, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f2:	3301      	adds	r3, #1
 80034f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	6809      	ldr	r1, [r1, #0]
 8003500:	4313      	orrs	r3, r2
 8003502:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69da      	ldr	r2, [r3, #28]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800352a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6911      	ldr	r1, [r2, #16]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	68d2      	ldr	r2, [r2, #12]
 8003536:	4311      	orrs	r1, r2
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6812      	ldr	r2, [r2, #0]
 800353c:	430b      	orrs	r3, r1
 800353e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695a      	ldr	r2, [r3, #20]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	000186a0 	.word	0x000186a0
 8003598:	001e847f 	.word	0x001e847f
 800359c:	003d08ff 	.word	0x003d08ff
 80035a0:	431bde83 	.word	0x431bde83
 80035a4:	10624dd3 	.word	0x10624dd3

080035a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	4608      	mov	r0, r1
 80035b2:	4611      	mov	r1, r2
 80035b4:	461a      	mov	r2, r3
 80035b6:	4603      	mov	r3, r0
 80035b8:	817b      	strh	r3, [r7, #10]
 80035ba:	460b      	mov	r3, r1
 80035bc:	813b      	strh	r3, [r7, #8]
 80035be:	4613      	mov	r3, r2
 80035c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035c2:	f7fe ff97 	bl	80024f4 <HAL_GetTick>
 80035c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b20      	cmp	r3, #32
 80035d2:	f040 80d9 	bne.w	8003788 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	2319      	movs	r3, #25
 80035dc:	2201      	movs	r2, #1
 80035de:	496d      	ldr	r1, [pc, #436]	; (8003794 <HAL_I2C_Mem_Write+0x1ec>)
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f001 ff53 	bl	800548c <I2C_WaitOnFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035ec:	2302      	movs	r3, #2
 80035ee:	e0cc      	b.n	800378a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d101      	bne.n	80035fe <HAL_I2C_Mem_Write+0x56>
 80035fa:	2302      	movs	r3, #2
 80035fc:	e0c5      	b.n	800378a <HAL_I2C_Mem_Write+0x1e2>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b01      	cmp	r3, #1
 8003612:	d007      	beq.n	8003624 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003632:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2221      	movs	r2, #33	; 0x21
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2240      	movs	r2, #64	; 0x40
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a3a      	ldr	r2, [r7, #32]
 800364e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003654:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4a4d      	ldr	r2, [pc, #308]	; (8003798 <HAL_I2C_Mem_Write+0x1f0>)
 8003664:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003666:	88f8      	ldrh	r0, [r7, #6]
 8003668:	893a      	ldrh	r2, [r7, #8]
 800366a:	8979      	ldrh	r1, [r7, #10]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	9301      	str	r3, [sp, #4]
 8003670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	4603      	mov	r3, r0
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f001 fcb8 	bl	8004fec <I2C_RequestMemoryWrite>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d052      	beq.n	8003728 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e081      	b.n	800378a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f001 ffd4 	bl	8005638 <I2C_WaitOnTXEFlagUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00d      	beq.n	80036b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	2b04      	cmp	r3, #4
 800369c:	d107      	bne.n	80036ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e06b      	b.n	800378a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	781a      	ldrb	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d11b      	bne.n	8003728 <HAL_I2C_Mem_Write+0x180>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d017      	beq.n	8003728 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	781a      	ldrb	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1aa      	bne.n	8003686 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f001 ffc0 	bl	80056ba <I2C_WaitOnBTFFlagUntilTimeout>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00d      	beq.n	800375c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	2b04      	cmp	r3, #4
 8003746:	d107      	bne.n	8003758 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003756:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e016      	b.n	800378a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	e000      	b.n	800378a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003788:	2302      	movs	r3, #2
  }
}
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	00100002 	.word	0x00100002
 8003798:	ffff0000 	.word	0xffff0000

0800379c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08a      	sub	sp, #40	; 0x28
 80037a0:	af02      	add	r7, sp, #8
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	4608      	mov	r0, r1
 80037a6:	4611      	mov	r1, r2
 80037a8:	461a      	mov	r2, r3
 80037aa:	4603      	mov	r3, r0
 80037ac:	817b      	strh	r3, [r7, #10]
 80037ae:	460b      	mov	r3, r1
 80037b0:	813b      	strh	r3, [r7, #8]
 80037b2:	4613      	mov	r3, r2
 80037b4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037ba:	f7fe fe9b 	bl	80024f4 <HAL_GetTick>
 80037be:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	f040 813a 	bne.w	8003a42 <HAL_I2C_Mem_Write_DMA+0x2a6>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80037ce:	4b9f      	ldr	r3, [pc, #636]	; (8003a4c <HAL_I2C_Mem_Write_DMA+0x2b0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	08db      	lsrs	r3, r3, #3
 80037d4:	4a9e      	ldr	r2, [pc, #632]	; (8003a50 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	0a1a      	lsrs	r2, r3, #8
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	009a      	lsls	r2, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d116      	bne.n	8003822 <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f043 0220 	orr.w	r2, r3, #32
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e110      	b.n	8003a44 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b02      	cmp	r3, #2
 800382e:	d0db      	beq.n	80037e8 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_I2C_Mem_Write_DMA+0xa2>
 800383a:	2302      	movs	r3, #2
 800383c:	e102      	b.n	8003a44 <HAL_I2C_Mem_Write_DMA+0x2a8>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b01      	cmp	r3, #1
 8003852:	d007      	beq.n	8003864 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0201 	orr.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003872:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2221      	movs	r2, #33	; 0x21
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2240      	movs	r2, #64	; 0x40
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800388e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003894:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4a6c      	ldr	r2, [pc, #432]	; (8003a54 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 80038a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80038a6:	897a      	ldrh	r2, [r7, #10]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80038ac:	893a      	ldrh	r2, [r7, #8]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80038b2:	88fa      	ldrh	r2, [r7, #6]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 80a9 	beq.w	8003a1a <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d02a      	beq.n	8003926 <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d4:	4a60      	ldr	r2, [pc, #384]	; (8003a58 <HAL_I2C_Mem_Write_DMA+0x2bc>)
 80038d6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038dc:	4a5f      	ldr	r2, [pc, #380]	; (8003a5c <HAL_I2C_Mem_Write_DMA+0x2c0>)
 80038de:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e4:	2200      	movs	r2, #0
 80038e6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ec:	2200      	movs	r2, #0
 80038ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f4:	2200      	movs	r2, #0
 80038f6:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fc:	2200      	movs	r2, #0
 80038fe:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	4619      	mov	r1, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3310      	adds	r3, #16
 8003910:	461a      	mov	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003916:	f7fe ffdd 	bl	80028d4 <HAL_DMA_Start_IT>
 800391a:	4603      	mov	r3, r0
 800391c:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800391e:	7efb      	ldrb	r3, [r7, #27]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d166      	bne.n	80039f2 <HAL_I2C_Mem_Write_DMA+0x256>
 8003924:	e013      	b.n	800394e <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2220      	movs	r2, #32
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e07a      	b.n	8003a44 <HAL_I2C_Mem_Write_DMA+0x2a8>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800394e:	88f8      	ldrh	r0, [r7, #6]
 8003950:	893a      	ldrh	r2, [r7, #8]
 8003952:	8979      	ldrh	r1, [r7, #10]
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	9301      	str	r3, [sp, #4]
 8003958:	2323      	movs	r3, #35	; 0x23
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	4603      	mov	r3, r0
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f001 fb44 	bl	8004fec <I2C_RequestMemoryWrite>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d022      	beq.n	80039b0 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff f878 	bl	8002a64 <HAL_DMA_Abort_IT>
 8003974:	4603      	mov	r3, r0
 8003976:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397c:	2200      	movs	r2, #0
 800397e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800398e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0201 	bic.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e049      	b.n	8003a44 <HAL_I2C_Mem_Write_DMA+0x2a8>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b0:	2300      	movs	r3, #0
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	613b      	str	r3, [r7, #16]
 80039c4:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039dc:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039ec:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	e028      	b.n	8003a44 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2220      	movs	r2, #32
 80039f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f043 0210 	orr.w	r2, r3, #16
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e014      	b.n	8003a44 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_I2C_Mem_Write_DMA+0x2a8>
    }
  }
  else
  {
    return HAL_BUSY;
 8003a42:	2302      	movs	r3, #2
  }
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3720      	adds	r7, #32
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	2000009c 	.word	0x2000009c
 8003a50:	14f8b589 	.word	0x14f8b589
 8003a54:	ffff0000 	.word	0xffff0000
 8003a58:	08005119 	.word	0x08005119
 8003a5c:	080052c3 	.word	0x080052c3

08003a60 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a80:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a88:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	2b10      	cmp	r3, #16
 8003a8e:	d003      	beq.n	8003a98 <HAL_I2C_EV_IRQHandler+0x38>
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	2b40      	cmp	r3, #64	; 0x40
 8003a94:	f040 80c1 	bne.w	8003c1a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10d      	bne.n	8003ace <HAL_I2C_EV_IRQHandler+0x6e>
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003ab8:	d003      	beq.n	8003ac2 <HAL_I2C_EV_IRQHandler+0x62>
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003ac0:	d101      	bne.n	8003ac6 <HAL_I2C_EV_IRQHandler+0x66>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <HAL_I2C_EV_IRQHandler+0x68>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	f000 8132 	beq.w	8003d32 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00c      	beq.n	8003af2 <HAL_I2C_EV_IRQHandler+0x92>
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	0a5b      	lsrs	r3, r3, #9
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d006      	beq.n	8003af2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f001 fe8a 	bl	80057fe <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 fcd2 	bl	8004494 <I2C_Master_SB>
 8003af0:	e092      	b.n	8003c18 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	08db      	lsrs	r3, r3, #3
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <HAL_I2C_EV_IRQHandler+0xb2>
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	0a5b      	lsrs	r3, r3, #9
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fd48 	bl	80045a0 <I2C_Master_ADD10>
 8003b10:	e082      	b.n	8003c18 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	085b      	lsrs	r3, r3, #1
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d009      	beq.n	8003b32 <HAL_I2C_EV_IRQHandler+0xd2>
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	0a5b      	lsrs	r3, r3, #9
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fd62 	bl	80045f4 <I2C_Master_ADDR>
 8003b30:	e072      	b.n	8003c18 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	089b      	lsrs	r3, r3, #2
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d03b      	beq.n	8003bb6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b4c:	f000 80f3 	beq.w	8003d36 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	09db      	lsrs	r3, r3, #7
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00f      	beq.n	8003b7c <HAL_I2C_EV_IRQHandler+0x11c>
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	0a9b      	lsrs	r3, r3, #10
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d009      	beq.n	8003b7c <HAL_I2C_EV_IRQHandler+0x11c>
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	089b      	lsrs	r3, r3, #2
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d103      	bne.n	8003b7c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f94c 	bl	8003e12 <I2C_MasterTransmit_TXE>
 8003b7a:	e04d      	b.n	8003c18 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	089b      	lsrs	r3, r3, #2
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80d6 	beq.w	8003d36 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	0a5b      	lsrs	r3, r3, #9
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 80cf 	beq.w	8003d36 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003b98:	7bbb      	ldrb	r3, [r7, #14]
 8003b9a:	2b21      	cmp	r3, #33	; 0x21
 8003b9c:	d103      	bne.n	8003ba6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f9d3 	bl	8003f4a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ba4:	e0c7      	b.n	8003d36 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
 8003ba8:	2b40      	cmp	r3, #64	; 0x40
 8003baa:	f040 80c4 	bne.w	8003d36 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fa41 	bl	8004036 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bb4:	e0bf      	b.n	8003d36 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bc4:	f000 80b7 	beq.w	8003d36 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	099b      	lsrs	r3, r3, #6
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00f      	beq.n	8003bf4 <HAL_I2C_EV_IRQHandler+0x194>
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	0a9b      	lsrs	r3, r3, #10
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d009      	beq.n	8003bf4 <HAL_I2C_EV_IRQHandler+0x194>
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	089b      	lsrs	r3, r3, #2
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d103      	bne.n	8003bf4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fab6 	bl	800415e <I2C_MasterReceive_RXNE>
 8003bf2:	e011      	b.n	8003c18 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	089b      	lsrs	r3, r3, #2
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 809a 	beq.w	8003d36 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	0a5b      	lsrs	r3, r3, #9
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 8093 	beq.w	8003d36 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 fb55 	bl	80042c0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c16:	e08e      	b.n	8003d36 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003c18:	e08d      	b.n	8003d36 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d004      	beq.n	8003c2c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	61fb      	str	r3, [r7, #28]
 8003c2a:	e007      	b.n	8003c3c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	085b      	lsrs	r3, r3, #1
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d012      	beq.n	8003c6e <HAL_I2C_EV_IRQHandler+0x20e>
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	0a5b      	lsrs	r3, r3, #9
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00c      	beq.n	8003c6e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003c64:	69b9      	ldr	r1, [r7, #24]
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 ff13 	bl	8004a92 <I2C_Slave_ADDR>
 8003c6c:	e066      	b.n	8003d3c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	091b      	lsrs	r3, r3, #4
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d009      	beq.n	8003c8e <HAL_I2C_EV_IRQHandler+0x22e>
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	0a5b      	lsrs	r3, r3, #9
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 ff4e 	bl	8004b28 <I2C_Slave_STOPF>
 8003c8c:	e056      	b.n	8003d3c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c8e:	7bbb      	ldrb	r3, [r7, #14]
 8003c90:	2b21      	cmp	r3, #33	; 0x21
 8003c92:	d002      	beq.n	8003c9a <HAL_I2C_EV_IRQHandler+0x23a>
 8003c94:	7bbb      	ldrb	r3, [r7, #14]
 8003c96:	2b29      	cmp	r3, #41	; 0x29
 8003c98:	d125      	bne.n	8003ce6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	09db      	lsrs	r3, r3, #7
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00f      	beq.n	8003cc6 <HAL_I2C_EV_IRQHandler+0x266>
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	0a9b      	lsrs	r3, r3, #10
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d009      	beq.n	8003cc6 <HAL_I2C_EV_IRQHandler+0x266>
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	089b      	lsrs	r3, r3, #2
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d103      	bne.n	8003cc6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fe29 	bl	8004916 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cc4:	e039      	b.n	8003d3a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	089b      	lsrs	r3, r3, #2
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d033      	beq.n	8003d3a <HAL_I2C_EV_IRQHandler+0x2da>
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	0a5b      	lsrs	r3, r3, #9
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d02d      	beq.n	8003d3a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fe56 	bl	8004990 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ce4:	e029      	b.n	8003d3a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	099b      	lsrs	r3, r3, #6
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00f      	beq.n	8003d12 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	0a9b      	lsrs	r3, r3, #10
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d009      	beq.n	8003d12 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	089b      	lsrs	r3, r3, #2
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d103      	bne.n	8003d12 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 fe61 	bl	80049d2 <I2C_SlaveReceive_RXNE>
 8003d10:	e014      	b.n	8003d3c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	089b      	lsrs	r3, r3, #2
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00e      	beq.n	8003d3c <HAL_I2C_EV_IRQHandler+0x2dc>
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	0a5b      	lsrs	r3, r3, #9
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d008      	beq.n	8003d3c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 fe8f 	bl	8004a4e <I2C_SlaveReceive_BTF>
 8003d30:	e004      	b.n	8003d3c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003d32:	bf00      	nop
 8003d34:	e002      	b.n	8003d3c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d36:	bf00      	nop
 8003d38:	e000      	b.n	8003d3c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d3a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003d3c:	3720      	adds	r7, #32
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	70fb      	strb	r3, [r7, #3]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b084      	sub	sp, #16
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e20:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e28:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d150      	bne.n	8003eda <I2C_MasterTransmit_TXE+0xc8>
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	2b21      	cmp	r3, #33	; 0x21
 8003e3c:	d14d      	bne.n	8003eda <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d01d      	beq.n	8003e80 <I2C_MasterTransmit_TXE+0x6e>
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2b20      	cmp	r3, #32
 8003e48:	d01a      	beq.n	8003e80 <I2C_MasterTransmit_TXE+0x6e>
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e50:	d016      	beq.n	8003e80 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e60:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2211      	movs	r2, #17
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff ff62 	bl	8003d42 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e7e:	e060      	b.n	8003f42 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e8e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e9e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b40      	cmp	r3, #64	; 0x40
 8003eb8:	d107      	bne.n	8003eca <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff ff7d 	bl	8003dc2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ec8:	e03b      	b.n	8003f42 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff ff35 	bl	8003d42 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ed8:	e033      	b.n	8003f42 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	2b21      	cmp	r3, #33	; 0x21
 8003ede:	d005      	beq.n	8003eec <I2C_MasterTransmit_TXE+0xda>
 8003ee0:	7bbb      	ldrb	r3, [r7, #14]
 8003ee2:	2b40      	cmp	r3, #64	; 0x40
 8003ee4:	d12d      	bne.n	8003f42 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
 8003ee8:	2b22      	cmp	r3, #34	; 0x22
 8003eea:	d12a      	bne.n	8003f42 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d108      	bne.n	8003f08 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f04:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003f06:	e01c      	b.n	8003f42 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b40      	cmp	r3, #64	; 0x40
 8003f12:	d103      	bne.n	8003f1c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f88e 	bl	8004036 <I2C_MemoryTransmit_TXE_BTF>
}
 8003f1a:	e012      	b.n	8003f42 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	781a      	ldrb	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f40:	e7ff      	b.n	8003f42 <I2C_MasterTransmit_TXE+0x130>
 8003f42:	bf00      	nop
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b084      	sub	sp, #16
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b21      	cmp	r3, #33	; 0x21
 8003f62:	d164      	bne.n	800402e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d012      	beq.n	8003f94 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	781a      	ldrb	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003f92:	e04c      	b.n	800402e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d01d      	beq.n	8003fd6 <I2C_MasterTransmit_BTF+0x8c>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d01a      	beq.n	8003fd6 <I2C_MasterTransmit_BTF+0x8c>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fa6:	d016      	beq.n	8003fd6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fb6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2211      	movs	r2, #17
 8003fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff feb7 	bl	8003d42 <HAL_I2C_MasterTxCpltCallback>
}
 8003fd4:	e02b      	b.n	800402e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fe4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b40      	cmp	r3, #64	; 0x40
 800400e:	d107      	bne.n	8004020 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff fed2 	bl	8003dc2 <HAL_I2C_MemTxCpltCallback>
}
 800401e:	e006      	b.n	800402e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff fe8a 	bl	8003d42 <HAL_I2C_MasterTxCpltCallback>
}
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004044:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404a:	2b00      	cmp	r3, #0
 800404c:	d11d      	bne.n	800408a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004052:	2b01      	cmp	r3, #1
 8004054:	d10b      	bne.n	800406e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800405a:	b2da      	uxtb	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004066:	1c9a      	adds	r2, r3, #2
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800406c:	e073      	b.n	8004156 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004072:	b29b      	uxth	r3, r3
 8004074:	121b      	asrs	r3, r3, #8
 8004076:	b2da      	uxtb	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004088:	e065      	b.n	8004156 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408e:	2b01      	cmp	r3, #1
 8004090:	d10b      	bne.n	80040aa <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004096:	b2da      	uxtb	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80040a8:	e055      	b.n	8004156 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d151      	bne.n	8004156 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	2b22      	cmp	r3, #34	; 0x22
 80040b6:	d10d      	bne.n	80040d4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040c6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80040d2:	e040      	b.n	8004156 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d015      	beq.n	800410a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80040de:	7bfb      	ldrb	r3, [r7, #15]
 80040e0:	2b21      	cmp	r3, #33	; 0x21
 80040e2:	d112      	bne.n	800410a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	781a      	ldrb	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004108:	e025      	b.n	8004156 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d120      	bne.n	8004156 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004114:	7bfb      	ldrb	r3, [r7, #15]
 8004116:	2b21      	cmp	r3, #33	; 0x21
 8004118:	d11d      	bne.n	8004156 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004128:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004138:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7ff fe36 	bl	8003dc2 <HAL_I2C_MemTxCpltCallback>
}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b084      	sub	sp, #16
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b22      	cmp	r3, #34	; 0x22
 8004170:	f040 80a2 	bne.w	80042b8 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004178:	b29b      	uxth	r3, r3
 800417a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2b03      	cmp	r3, #3
 8004180:	d921      	bls.n	80041c6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	691a      	ldr	r2, [r3, #16]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	b2d2      	uxtb	r2, r2
 800418e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	f040 8082 	bne.w	80042b8 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c2:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80041c4:	e078      	b.n	80042b8 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d074      	beq.n	80042b8 <I2C_MasterReceive_RXNE+0x15a>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d002      	beq.n	80041da <I2C_MasterReceive_RXNE+0x7c>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d16e      	bne.n	80042b8 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f001 faae 	bl	800573c <I2C_WaitOnSTOPRequestThroughIT>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d142      	bne.n	800426c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004204:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004222:	b29b      	uxth	r3, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b40      	cmp	r3, #64	; 0x40
 800423e:	d10a      	bne.n	8004256 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff fdc1 	bl	8003dd6 <HAL_I2C_MemRxCpltCallback>
}
 8004254:	e030      	b.n	80042b8 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2212      	movs	r2, #18
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7ff fd76 	bl	8003d56 <HAL_I2C_MasterRxCpltCallback>
}
 800426a:	e025      	b.n	80042b8 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800427a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	691a      	ldr	r2, [r3, #16]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004298:	b29b      	uxth	r3, r3
 800429a:	3b01      	subs	r3, #1
 800429c:	b29a      	uxth	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff fd99 	bl	8003dea <HAL_I2C_ErrorCallback>
}
 80042b8:	bf00      	nop
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042cc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b04      	cmp	r3, #4
 80042d6:	d11b      	bne.n	8004310 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004304:	b29b      	uxth	r3, r3
 8004306:	3b01      	subs	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800430e:	e0bd      	b.n	800448c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b03      	cmp	r3, #3
 8004318:	d129      	bne.n	800436e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004328:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b04      	cmp	r3, #4
 800432e:	d00a      	beq.n	8004346 <I2C_MasterReceive_BTF+0x86>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d007      	beq.n	8004346 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004344:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800436c:	e08e      	b.n	800448c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004372:	b29b      	uxth	r3, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d176      	bne.n	8004466 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d002      	beq.n	8004384 <I2C_MasterReceive_BTF+0xc4>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b10      	cmp	r3, #16
 8004382:	d108      	bne.n	8004396 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	e019      	b.n	80043ca <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b04      	cmp	r3, #4
 800439a:	d002      	beq.n	80043a2 <I2C_MasterReceive_BTF+0xe2>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d108      	bne.n	80043b4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	e00a      	b.n	80043ca <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b10      	cmp	r3, #16
 80043b8:	d007      	beq.n	80043ca <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691a      	ldr	r2, [r3, #16]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004424:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b40      	cmp	r3, #64	; 0x40
 8004438:	d10a      	bne.n	8004450 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7ff fcc4 	bl	8003dd6 <HAL_I2C_MemRxCpltCallback>
}
 800444e:	e01d      	b.n	800448c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2212      	movs	r2, #18
 800445c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7ff fc79 	bl	8003d56 <HAL_I2C_MasterRxCpltCallback>
}
 8004464:	e012      	b.n	800448c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800448c:	bf00      	nop
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b40      	cmp	r3, #64	; 0x40
 80044a6:	d117      	bne.n	80044d8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d109      	bne.n	80044c4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	461a      	mov	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044c0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80044c2:	e067      	b.n	8004594 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	611a      	str	r2, [r3, #16]
}
 80044d6:	e05d      	b.n	8004594 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044e0:	d133      	bne.n	800454a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b21      	cmp	r3, #33	; 0x21
 80044ec:	d109      	bne.n	8004502 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	461a      	mov	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044fe:	611a      	str	r2, [r3, #16]
 8004500:	e008      	b.n	8004514 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004506:	b2db      	uxtb	r3, r3
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	b2da      	uxtb	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004518:	2b00      	cmp	r3, #0
 800451a:	d004      	beq.n	8004526 <I2C_Master_SB+0x92>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004522:	2b00      	cmp	r3, #0
 8004524:	d108      	bne.n	8004538 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	2b00      	cmp	r3, #0
 800452c:	d032      	beq.n	8004594 <I2C_Master_SB+0x100>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004534:	2b00      	cmp	r3, #0
 8004536:	d02d      	beq.n	8004594 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004546:	605a      	str	r2, [r3, #4]
}
 8004548:	e024      	b.n	8004594 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10e      	bne.n	8004570 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004556:	b29b      	uxth	r3, r3
 8004558:	11db      	asrs	r3, r3, #7
 800455a:	b2db      	uxtb	r3, r3
 800455c:	f003 0306 	and.w	r3, r3, #6
 8004560:	b2db      	uxtb	r3, r3
 8004562:	f063 030f 	orn	r3, r3, #15
 8004566:	b2da      	uxtb	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	611a      	str	r2, [r3, #16]
}
 800456e:	e011      	b.n	8004594 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004574:	2b01      	cmp	r3, #1
 8004576:	d10d      	bne.n	8004594 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457c:	b29b      	uxth	r3, r3
 800457e:	11db      	asrs	r3, r3, #7
 8004580:	b2db      	uxtb	r3, r3
 8004582:	f003 0306 	and.w	r3, r3, #6
 8004586:	b2db      	uxtb	r3, r3
 8004588:	f063 030e 	orn	r3, r3, #14
 800458c:	b2da      	uxtb	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	611a      	str	r2, [r3, #16]
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d004      	beq.n	80045c6 <I2C_Master_ADD10+0x26>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d108      	bne.n	80045d8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00c      	beq.n	80045e8 <I2C_Master_ADD10+0x48>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d007      	beq.n	80045e8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045e6:	605a      	str	r2, [r3, #4]
  }
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b091      	sub	sp, #68	; 0x44
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004602:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004610:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b22      	cmp	r3, #34	; 0x22
 800461c:	f040 8169 	bne.w	80048f2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10f      	bne.n	8004648 <I2C_Master_ADDR+0x54>
 8004628:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800462c:	2b40      	cmp	r3, #64	; 0x40
 800462e:	d10b      	bne.n	8004648 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004630:	2300      	movs	r3, #0
 8004632:	633b      	str	r3, [r7, #48]	; 0x30
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	633b      	str	r3, [r7, #48]	; 0x30
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	633b      	str	r3, [r7, #48]	; 0x30
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	e160      	b.n	800490a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800464c:	2b00      	cmp	r3, #0
 800464e:	d11d      	bne.n	800468c <I2C_Master_ADDR+0x98>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004658:	d118      	bne.n	800468c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800465a:	2300      	movs	r3, #0
 800465c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800466e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800467e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	651a      	str	r2, [r3, #80]	; 0x50
 800468a:	e13e      	b.n	800490a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d113      	bne.n	80046be <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004696:	2300      	movs	r3, #0
 8004698:	62bb      	str	r3, [r7, #40]	; 0x28
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80046aa:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	e115      	b.n	80048ea <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	f040 808a 	bne.w	80047de <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80046ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046d0:	d137      	bne.n	8004742 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046f0:	d113      	bne.n	800471a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004700:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004702:	2300      	movs	r3, #0
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	627b      	str	r3, [r7, #36]	; 0x24
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	e0e7      	b.n	80048ea <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800471a:	2300      	movs	r3, #0
 800471c:	623b      	str	r3, [r7, #32]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	623b      	str	r3, [r7, #32]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	623b      	str	r3, [r7, #32]
 800472e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	e0d3      	b.n	80048ea <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004744:	2b08      	cmp	r3, #8
 8004746:	d02e      	beq.n	80047a6 <I2C_Master_ADDR+0x1b2>
 8004748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474a:	2b20      	cmp	r3, #32
 800474c:	d02b      	beq.n	80047a6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800474e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004750:	2b12      	cmp	r3, #18
 8004752:	d102      	bne.n	800475a <I2C_Master_ADDR+0x166>
 8004754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004756:	2b01      	cmp	r3, #1
 8004758:	d125      	bne.n	80047a6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475c:	2b04      	cmp	r3, #4
 800475e:	d00e      	beq.n	800477e <I2C_Master_ADDR+0x18a>
 8004760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004762:	2b02      	cmp	r3, #2
 8004764:	d00b      	beq.n	800477e <I2C_Master_ADDR+0x18a>
 8004766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004768:	2b10      	cmp	r3, #16
 800476a:	d008      	beq.n	800477e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	e007      	b.n	800478e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800478c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	61fb      	str	r3, [r7, #28]
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	e0a1      	b.n	80048ea <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047b4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b6:	2300      	movs	r3, #0
 80047b8:	61bb      	str	r3, [r7, #24]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	61bb      	str	r3, [r7, #24]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	61bb      	str	r3, [r7, #24]
 80047ca:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	e085      	b.n	80048ea <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d14d      	bne.n	8004884 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80047e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d016      	beq.n	800481c <I2C_Master_ADDR+0x228>
 80047ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d013      	beq.n	800481c <I2C_Master_ADDR+0x228>
 80047f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f6:	2b10      	cmp	r3, #16
 80047f8:	d010      	beq.n	800481c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004808:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	e007      	b.n	800482c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800482a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800483a:	d117      	bne.n	800486c <I2C_Master_ADDR+0x278>
 800483c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004842:	d00b      	beq.n	800485c <I2C_Master_ADDR+0x268>
 8004844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004846:	2b01      	cmp	r3, #1
 8004848:	d008      	beq.n	800485c <I2C_Master_ADDR+0x268>
 800484a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484c:	2b08      	cmp	r3, #8
 800484e:	d005      	beq.n	800485c <I2C_Master_ADDR+0x268>
 8004850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004852:	2b10      	cmp	r3, #16
 8004854:	d002      	beq.n	800485c <I2C_Master_ADDR+0x268>
 8004856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004858:	2b20      	cmp	r3, #32
 800485a:	d107      	bne.n	800486c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800486a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	e032      	b.n	80048ea <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004892:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800489e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048a2:	d117      	bne.n	80048d4 <I2C_Master_ADDR+0x2e0>
 80048a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048aa:	d00b      	beq.n	80048c4 <I2C_Master_ADDR+0x2d0>
 80048ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d008      	beq.n	80048c4 <I2C_Master_ADDR+0x2d0>
 80048b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d005      	beq.n	80048c4 <I2C_Master_ADDR+0x2d0>
 80048b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ba:	2b10      	cmp	r3, #16
 80048bc:	d002      	beq.n	80048c4 <I2C_Master_ADDR+0x2d0>
 80048be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c0:	2b20      	cmp	r3, #32
 80048c2:	d107      	bne.n	80048d4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048d2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048d4:	2300      	movs	r3, #0
 80048d6:	613b      	str	r3, [r7, #16]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	613b      	str	r3, [r7, #16]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	613b      	str	r3, [r7, #16]
 80048e8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80048f0:	e00b      	b.n	800490a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	68fb      	ldr	r3, [r7, #12]
}
 8004908:	e7ff      	b.n	800490a <I2C_Master_ADDR+0x316>
 800490a:	bf00      	nop
 800490c:	3744      	adds	r7, #68	; 0x44
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b084      	sub	sp, #16
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004924:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492a:	b29b      	uxth	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d02b      	beq.n	8004988 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	781a      	ldrb	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d114      	bne.n	8004988 <I2C_SlaveTransmit_TXE+0x72>
 800495e:	7bfb      	ldrb	r3, [r7, #15]
 8004960:	2b29      	cmp	r3, #41	; 0x29
 8004962:	d111      	bne.n	8004988 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004972:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2221      	movs	r2, #33	; 0x21
 8004978:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2228      	movs	r2, #40	; 0x28
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7ff f9f1 	bl	8003d6a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004988:	bf00      	nop
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499c:	b29b      	uxth	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d011      	beq.n	80049c6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	781a      	ldrb	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	1c5a      	adds	r2, r3, #1
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049bc:	b29b      	uxth	r3, r3
 80049be:	3b01      	subs	r3, #1
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d02c      	beq.n	8004a46 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	691a      	ldr	r2, [r3, #16]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d114      	bne.n	8004a46 <I2C_SlaveReceive_RXNE+0x74>
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	2b2a      	cmp	r3, #42	; 0x2a
 8004a20:	d111      	bne.n	8004a46 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a30:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2222      	movs	r2, #34	; 0x22
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2228      	movs	r2, #40	; 0x28
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7ff f99c 	bl	8003d7e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004a46:	bf00      	nop
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d012      	beq.n	8004a86 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	691a      	ldr	r2, [r3, #16]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b084      	sub	sp, #16
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004aac:	2b28      	cmp	r3, #40	; 0x28
 8004aae:	d127      	bne.n	8004b00 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004abe:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	089b      	lsrs	r3, r3, #2
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004acc:	2301      	movs	r3, #1
 8004ace:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	09db      	lsrs	r3, r3, #7
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d103      	bne.n	8004ae4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	81bb      	strh	r3, [r7, #12]
 8004ae2:	e002      	b.n	8004aea <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004af2:	89ba      	ldrh	r2, [r7, #12]
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	4619      	mov	r1, r3
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff f94a 	bl	8003d92 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004afe:	e00e      	b.n	8004b1e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b00:	2300      	movs	r3, #0
 8004b02:	60bb      	str	r3, [r7, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	60bb      	str	r3, [r7, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	60bb      	str	r3, [r7, #8]
 8004b14:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004b1e:	bf00      	nop
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b36:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b46:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60bb      	str	r3, [r7, #8]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	60bb      	str	r3, [r7, #8]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0201 	orr.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b74:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b84:	d172      	bne.n	8004c6c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b86:	7bfb      	ldrb	r3, [r7, #15]
 8004b88:	2b22      	cmp	r3, #34	; 0x22
 8004b8a:	d002      	beq.n	8004b92 <I2C_Slave_STOPF+0x6a>
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8004b90:	d135      	bne.n	8004bfe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d005      	beq.n	8004bb6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	f043 0204 	orr.w	r2, r3, #4
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bc4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fe f8f6 	bl	8002dbc <HAL_DMA_GetState>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d049      	beq.n	8004c6a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bda:	4a69      	ldr	r2, [pc, #420]	; (8004d80 <I2C_Slave_STOPF+0x258>)
 8004bdc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fd ff3e 	bl	8002a64 <HAL_DMA_Abort_IT>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d03d      	beq.n	8004c6a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bf8:	4610      	mov	r0, r2
 8004bfa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bfc:	e035      	b.n	8004c6a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d005      	beq.n	8004c22 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	f043 0204 	orr.w	r2, r3, #4
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c30:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fe f8c0 	bl	8002dbc <HAL_DMA_GetState>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d014      	beq.n	8004c6c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c46:	4a4e      	ldr	r2, [pc, #312]	; (8004d80 <I2C_Slave_STOPF+0x258>)
 8004c48:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fd ff08 	bl	8002a64 <HAL_DMA_Abort_IT>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d008      	beq.n	8004c6c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c64:	4610      	mov	r0, r2
 8004c66:	4798      	blx	r3
 8004c68:	e000      	b.n	8004c6c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c6a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d03e      	beq.n	8004cf4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d112      	bne.n	8004caa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb4:	2b40      	cmp	r3, #64	; 0x40
 8004cb6:	d112      	bne.n	8004cde <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691a      	ldr	r2, [r3, #16]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cec:	f043 0204 	orr.w	r2, r3, #4
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f843 	bl	8004d88 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004d02:	e039      	b.n	8004d78 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	2b2a      	cmp	r3, #42	; 0x2a
 8004d08:	d109      	bne.n	8004d1e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2228      	movs	r2, #40	; 0x28
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff f830 	bl	8003d7e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b28      	cmp	r3, #40	; 0x28
 8004d28:	d111      	bne.n	8004d4e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a15      	ldr	r2, [pc, #84]	; (8004d84 <I2C_Slave_STOPF+0x25c>)
 8004d2e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7ff f831 	bl	8003dae <HAL_I2C_ListenCpltCallback>
}
 8004d4c:	e014      	b.n	8004d78 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d52:	2b22      	cmp	r3, #34	; 0x22
 8004d54:	d002      	beq.n	8004d5c <I2C_Slave_STOPF+0x234>
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
 8004d58:	2b22      	cmp	r3, #34	; 0x22
 8004d5a:	d10d      	bne.n	8004d78 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7ff f803 	bl	8003d7e <HAL_I2C_SlaveRxCpltCallback>
}
 8004d78:	bf00      	nop
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	0800533d 	.word	0x0800533d
 8004d84:	ffff0000 	.word	0xffff0000

08004d88 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d96:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d9e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004da0:	7bbb      	ldrb	r3, [r7, #14]
 8004da2:	2b10      	cmp	r3, #16
 8004da4:	d002      	beq.n	8004dac <I2C_ITError+0x24>
 8004da6:	7bbb      	ldrb	r3, [r7, #14]
 8004da8:	2b40      	cmp	r3, #64	; 0x40
 8004daa:	d10a      	bne.n	8004dc2 <I2C_ITError+0x3a>
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	2b22      	cmp	r3, #34	; 0x22
 8004db0:	d107      	bne.n	8004dc2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dc0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
 8004dc4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004dc8:	2b28      	cmp	r3, #40	; 0x28
 8004dca:	d107      	bne.n	8004ddc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2228      	movs	r2, #40	; 0x28
 8004dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004dda:	e015      	b.n	8004e08 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dea:	d00a      	beq.n	8004e02 <I2C_ITError+0x7a>
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
 8004dee:	2b60      	cmp	r3, #96	; 0x60
 8004df0:	d007      	beq.n	8004e02 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2220      	movs	r2, #32
 8004df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e16:	d162      	bne.n	8004ede <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e26:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d020      	beq.n	8004e78 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3a:	4a6a      	ldr	r2, [pc, #424]	; (8004fe4 <I2C_ITError+0x25c>)
 8004e3c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7fd fe0e 	bl	8002a64 <HAL_DMA_Abort_IT>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 8089 	beq.w	8004f62 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0201 	bic.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e72:	4610      	mov	r0, r2
 8004e74:	4798      	blx	r3
 8004e76:	e074      	b.n	8004f62 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7c:	4a59      	ldr	r2, [pc, #356]	; (8004fe4 <I2C_ITError+0x25c>)
 8004e7e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fd fded 	bl	8002a64 <HAL_DMA_Abort_IT>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d068      	beq.n	8004f62 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9a:	2b40      	cmp	r3, #64	; 0x40
 8004e9c:	d10b      	bne.n	8004eb6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0201 	bic.w	r2, r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ed8:	4610      	mov	r0, r2
 8004eda:	4798      	blx	r3
 8004edc:	e041      	b.n	8004f62 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b60      	cmp	r3, #96	; 0x60
 8004ee8:	d125      	bne.n	8004f36 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f02:	2b40      	cmp	r3, #64	; 0x40
 8004f04:	d10b      	bne.n	8004f1e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0201 	bic.w	r2, r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fe ff65 	bl	8003dfe <HAL_I2C_AbortCpltCallback>
 8004f34:	e015      	b.n	8004f62 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f40:	2b40      	cmp	r3, #64	; 0x40
 8004f42:	d10b      	bne.n	8004f5c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691a      	ldr	r2, [r3, #16]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7fe ff44 	bl	8003dea <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10e      	bne.n	8004f90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d109      	bne.n	8004f90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d104      	bne.n	8004f90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d007      	beq.n	8004fa0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f9e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d113      	bne.n	8004fdc <I2C_ITError+0x254>
 8004fb4:	7bfb      	ldrb	r3, [r7, #15]
 8004fb6:	2b28      	cmp	r3, #40	; 0x28
 8004fb8:	d110      	bne.n	8004fdc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a0a      	ldr	r2, [pc, #40]	; (8004fe8 <I2C_ITError+0x260>)
 8004fbe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7fe fee9 	bl	8003dae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fdc:	bf00      	nop
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	0800533d 	.word	0x0800533d
 8004fe8:	ffff0000 	.word	0xffff0000

08004fec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b088      	sub	sp, #32
 8004ff0:	af02      	add	r7, sp, #8
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	4608      	mov	r0, r1
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	817b      	strh	r3, [r7, #10]
 8004ffe:	460b      	mov	r3, r1
 8005000:	813b      	strh	r3, [r7, #8]
 8005002:	4613      	mov	r3, r2
 8005004:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005014:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	2200      	movs	r2, #0
 800501e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 fa32 	bl	800548c <I2C_WaitOnFlagUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00d      	beq.n	800504a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800503c:	d103      	bne.n	8005046 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005044:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e05f      	b.n	800510a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800504a:	897b      	ldrh	r3, [r7, #10]
 800504c:	b2db      	uxtb	r3, r3
 800504e:	461a      	mov	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005058:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	6a3a      	ldr	r2, [r7, #32]
 800505e:	492d      	ldr	r1, [pc, #180]	; (8005114 <I2C_RequestMemoryWrite+0x128>)
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 fa6a 	bl	800553a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e04c      	b.n	800510a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005070:	2300      	movs	r3, #0
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	617b      	str	r3, [r7, #20]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005088:	6a39      	ldr	r1, [r7, #32]
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 fad4 	bl	8005638 <I2C_WaitOnTXEFlagUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00d      	beq.n	80050b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	2b04      	cmp	r3, #4
 800509c:	d107      	bne.n	80050ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e02b      	b.n	800510a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050b2:	88fb      	ldrh	r3, [r7, #6]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d105      	bne.n	80050c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050b8:	893b      	ldrh	r3, [r7, #8]
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	611a      	str	r2, [r3, #16]
 80050c2:	e021      	b.n	8005108 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050c4:	893b      	ldrh	r3, [r7, #8]
 80050c6:	0a1b      	lsrs	r3, r3, #8
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d4:	6a39      	ldr	r1, [r7, #32]
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 faae 	bl	8005638 <I2C_WaitOnTXEFlagUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00d      	beq.n	80050fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d107      	bne.n	80050fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e005      	b.n	800510a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050fe:	893b      	ldrh	r3, [r7, #8]
 8005100:	b2da      	uxtb	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	00010002 	.word	0x00010002

08005118 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005124:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005134:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800514a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005158:	2200      	movs	r2, #0
 800515a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005168:	2200      	movs	r2, #0
 800516a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800516c:	7cfb      	ldrb	r3, [r7, #19]
 800516e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005172:	2b21      	cmp	r3, #33	; 0x21
 8005174:	d007      	beq.n	8005186 <I2C_DMAXferCplt+0x6e>
 8005176:	7cfb      	ldrb	r3, [r7, #19]
 8005178:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800517c:	2b22      	cmp	r3, #34	; 0x22
 800517e:	d131      	bne.n	80051e4 <I2C_DMAXferCplt+0xcc>
 8005180:	7cbb      	ldrb	r3, [r7, #18]
 8005182:	2b20      	cmp	r3, #32
 8005184:	d12e      	bne.n	80051e4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005194:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2200      	movs	r2, #0
 800519a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800519c:	7cfb      	ldrb	r3, [r7, #19]
 800519e:	2b29      	cmp	r3, #41	; 0x29
 80051a0:	d10a      	bne.n	80051b8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2221      	movs	r2, #33	; 0x21
 80051a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2228      	movs	r2, #40	; 0x28
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80051b0:	6978      	ldr	r0, [r7, #20]
 80051b2:	f7fe fdda 	bl	8003d6a <HAL_I2C_SlaveTxCpltCallback>
 80051b6:	e00c      	b.n	80051d2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80051b8:	7cfb      	ldrb	r3, [r7, #19]
 80051ba:	2b2a      	cmp	r3, #42	; 0x2a
 80051bc:	d109      	bne.n	80051d2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2222      	movs	r2, #34	; 0x22
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	2228      	movs	r2, #40	; 0x28
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051cc:	6978      	ldr	r0, [r7, #20]
 80051ce:	f7fe fdd6 	bl	8003d7e <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80051e0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80051e2:	e06a      	b.n	80052ba <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d064      	beq.n	80052ba <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d107      	bne.n	800520a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005208:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005218:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005220:	d009      	beq.n	8005236 <I2C_DMAXferCplt+0x11e>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b08      	cmp	r3, #8
 8005226:	d006      	beq.n	8005236 <I2C_DMAXferCplt+0x11e>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800522e:	d002      	beq.n	8005236 <I2C_DMAXferCplt+0x11e>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b20      	cmp	r3, #32
 8005234:	d107      	bne.n	8005246 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005244:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005254:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005264:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2200      	movs	r2, #0
 800526a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005274:	6978      	ldr	r0, [r7, #20]
 8005276:	f7fe fdb8 	bl	8003dea <HAL_I2C_ErrorCallback>
}
 800527a:	e01e      	b.n	80052ba <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b40      	cmp	r3, #64	; 0x40
 800528e:	d10a      	bne.n	80052a6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2200      	movs	r2, #0
 800529c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800529e:	6978      	ldr	r0, [r7, #20]
 80052a0:	f7fe fd99 	bl	8003dd6 <HAL_I2C_MemRxCpltCallback>
}
 80052a4:	e009      	b.n	80052ba <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	2212      	movs	r2, #18
 80052b2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80052b4:	6978      	ldr	r0, [r7, #20]
 80052b6:	f7fe fd4e 	bl	8003d56 <HAL_I2C_MasterRxCpltCallback>
}
 80052ba:	bf00      	nop
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052dc:	2200      	movs	r2, #0
 80052de:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	2200      	movs	r2, #0
 80052ee:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7fd fd71 	bl	8002dd8 <HAL_DMA_GetError>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d01b      	beq.n	8005334 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800530a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2220      	movs	r2, #32
 8005316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	f043 0210 	orr.w	r2, r3, #16
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f7fe fd5b 	bl	8003dea <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005334:	bf00      	nop
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005354:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005356:	4b4b      	ldr	r3, [pc, #300]	; (8005484 <I2C_DMAAbort+0x148>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	08db      	lsrs	r3, r3, #3
 800535c:	4a4a      	ldr	r2, [pc, #296]	; (8005488 <I2C_DMAAbort+0x14c>)
 800535e:	fba2 2303 	umull	r2, r3, r2, r3
 8005362:	0a1a      	lsrs	r2, r3, #8
 8005364:	4613      	mov	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	00da      	lsls	r2, r3, #3
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d106      	bne.n	8005384 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	f043 0220 	orr.w	r2, r3, #32
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005382:	e00a      	b.n	800539a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	3b01      	subs	r3, #1
 8005388:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005398:	d0ea      	beq.n	8005370 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a6:	2200      	movs	r2, #0
 80053a8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b6:	2200      	movs	r2, #0
 80053b8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2200      	movs	r2, #0
 80053ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053dc:	2200      	movs	r2, #0
 80053de:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	2200      	movs	r2, #0
 80053ee:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0201 	bic.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b60      	cmp	r3, #96	; 0x60
 800540a:	d10e      	bne.n	800542a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	2200      	movs	r2, #0
 8005420:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005422:	6978      	ldr	r0, [r7, #20]
 8005424:	f7fe fceb 	bl	8003dfe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005428:	e027      	b.n	800547a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800542a:	7cfb      	ldrb	r3, [r7, #19]
 800542c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005430:	2b28      	cmp	r3, #40	; 0x28
 8005432:	d117      	bne.n	8005464 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0201 	orr.w	r2, r2, #1
 8005442:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005452:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	2200      	movs	r2, #0
 8005458:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2228      	movs	r2, #40	; 0x28
 800545e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005462:	e007      	b.n	8005474 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2220      	movs	r2, #32
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005474:	6978      	ldr	r0, [r7, #20]
 8005476:	f7fe fcb8 	bl	8003dea <HAL_I2C_ErrorCallback>
}
 800547a:	bf00      	nop
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	2000009c 	.word	0x2000009c
 8005488:	14f8b589 	.word	0x14f8b589

0800548c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	4613      	mov	r3, r2
 800549a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800549c:	e025      	b.n	80054ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a4:	d021      	beq.n	80054ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054a6:	f7fd f825 	bl	80024f4 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d302      	bcc.n	80054bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d116      	bne.n	80054ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	f043 0220 	orr.w	r2, r3, #32
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e023      	b.n	8005532 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	0c1b      	lsrs	r3, r3, #16
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d10d      	bne.n	8005510 <I2C_WaitOnFlagUntilTimeout+0x84>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	43da      	mvns	r2, r3
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	4013      	ands	r3, r2
 8005500:	b29b      	uxth	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	bf0c      	ite	eq
 8005506:	2301      	moveq	r3, #1
 8005508:	2300      	movne	r3, #0
 800550a:	b2db      	uxtb	r3, r3
 800550c:	461a      	mov	r2, r3
 800550e:	e00c      	b.n	800552a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	43da      	mvns	r2, r3
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	4013      	ands	r3, r2
 800551c:	b29b      	uxth	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	bf0c      	ite	eq
 8005522:	2301      	moveq	r3, #1
 8005524:	2300      	movne	r3, #0
 8005526:	b2db      	uxtb	r3, r3
 8005528:	461a      	mov	r2, r3
 800552a:	79fb      	ldrb	r3, [r7, #7]
 800552c:	429a      	cmp	r2, r3
 800552e:	d0b6      	beq.n	800549e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b084      	sub	sp, #16
 800553e:	af00      	add	r7, sp, #0
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	607a      	str	r2, [r7, #4]
 8005546:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005548:	e051      	b.n	80055ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005558:	d123      	bne.n	80055a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005568:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005572:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2220      	movs	r2, #32
 800557e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	f043 0204 	orr.w	r2, r3, #4
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e046      	b.n	8005630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d021      	beq.n	80055ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055aa:	f7fc ffa3 	bl	80024f4 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d302      	bcc.n	80055c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d116      	bne.n	80055ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	f043 0220 	orr.w	r2, r3, #32
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e020      	b.n	8005630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	0c1b      	lsrs	r3, r3, #16
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d10c      	bne.n	8005612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	43da      	mvns	r2, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4013      	ands	r3, r2
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	bf14      	ite	ne
 800560a:	2301      	movne	r3, #1
 800560c:	2300      	moveq	r3, #0
 800560e:	b2db      	uxtb	r3, r3
 8005610:	e00b      	b.n	800562a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	43da      	mvns	r2, r3
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	4013      	ands	r3, r2
 800561e:	b29b      	uxth	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	bf14      	ite	ne
 8005624:	2301      	movne	r3, #1
 8005626:	2300      	moveq	r3, #0
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d18d      	bne.n	800554a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005644:	e02d      	b.n	80056a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 f8aa 	bl	80057a0 <I2C_IsAcknowledgeFailed>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e02d      	b.n	80056b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565c:	d021      	beq.n	80056a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800565e:	f7fc ff49 	bl	80024f4 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	429a      	cmp	r2, r3
 800566c:	d302      	bcc.n	8005674 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d116      	bne.n	80056a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2220      	movs	r2, #32
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	f043 0220 	orr.w	r2, r3, #32
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e007      	b.n	80056b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ac:	2b80      	cmp	r3, #128	; 0x80
 80056ae:	d1ca      	bne.n	8005646 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b084      	sub	sp, #16
 80056be:	af00      	add	r7, sp, #0
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056c6:	e02d      	b.n	8005724 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 f869 	bl	80057a0 <I2C_IsAcknowledgeFailed>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e02d      	b.n	8005734 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056de:	d021      	beq.n	8005724 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e0:	f7fc ff08 	bl	80024f4 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d302      	bcc.n	80056f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d116      	bne.n	8005724 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2220      	movs	r2, #32
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005710:	f043 0220 	orr.w	r2, r3, #32
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e007      	b.n	8005734 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	f003 0304 	and.w	r3, r3, #4
 800572e:	2b04      	cmp	r3, #4
 8005730:	d1ca      	bne.n	80056c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005748:	4b13      	ldr	r3, [pc, #76]	; (8005798 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	08db      	lsrs	r3, r3, #3
 800574e:	4a13      	ldr	r2, [pc, #76]	; (800579c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005750:	fba2 2303 	umull	r2, r3, r2, r3
 8005754:	0a1a      	lsrs	r2, r3, #8
 8005756:	4613      	mov	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	3b01      	subs	r3, #1
 8005762:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d107      	bne.n	800577a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	f043 0220 	orr.w	r2, r3, #32
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e008      	b.n	800578c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005788:	d0e9      	beq.n	800575e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	2000009c 	.word	0x2000009c
 800579c:	14f8b589 	.word	0x14f8b589

080057a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b6:	d11b      	bne.n	80057f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057dc:	f043 0204 	orr.w	r2, r3, #4
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e000      	b.n	80057f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800580e:	d103      	bne.n	8005818 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005816:	e007      	b.n	8005828 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005820:	d102      	bne.n	8005828 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2208      	movs	r2, #8
 8005826:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e264      	b.n	8005d10 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d075      	beq.n	800593e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005852:	4ba3      	ldr	r3, [pc, #652]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f003 030c 	and.w	r3, r3, #12
 800585a:	2b04      	cmp	r3, #4
 800585c:	d00c      	beq.n	8005878 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800585e:	4ba0      	ldr	r3, [pc, #640]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005866:	2b08      	cmp	r3, #8
 8005868:	d112      	bne.n	8005890 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800586a:	4b9d      	ldr	r3, [pc, #628]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005872:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005876:	d10b      	bne.n	8005890 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005878:	4b99      	ldr	r3, [pc, #612]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d05b      	beq.n	800593c <HAL_RCC_OscConfig+0x108>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d157      	bne.n	800593c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e23f      	b.n	8005d10 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005898:	d106      	bne.n	80058a8 <HAL_RCC_OscConfig+0x74>
 800589a:	4b91      	ldr	r3, [pc, #580]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a90      	ldr	r2, [pc, #576]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 80058a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	e01d      	b.n	80058e4 <HAL_RCC_OscConfig+0xb0>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058b0:	d10c      	bne.n	80058cc <HAL_RCC_OscConfig+0x98>
 80058b2:	4b8b      	ldr	r3, [pc, #556]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a8a      	ldr	r2, [pc, #552]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 80058b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058bc:	6013      	str	r3, [r2, #0]
 80058be:	4b88      	ldr	r3, [pc, #544]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a87      	ldr	r2, [pc, #540]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 80058c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058c8:	6013      	str	r3, [r2, #0]
 80058ca:	e00b      	b.n	80058e4 <HAL_RCC_OscConfig+0xb0>
 80058cc:	4b84      	ldr	r3, [pc, #528]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a83      	ldr	r2, [pc, #524]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 80058d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058d6:	6013      	str	r3, [r2, #0]
 80058d8:	4b81      	ldr	r3, [pc, #516]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a80      	ldr	r2, [pc, #512]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 80058de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d013      	beq.n	8005914 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ec:	f7fc fe02 	bl	80024f4 <HAL_GetTick>
 80058f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058f2:	e008      	b.n	8005906 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058f4:	f7fc fdfe 	bl	80024f4 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b64      	cmp	r3, #100	; 0x64
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e204      	b.n	8005d10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005906:	4b76      	ldr	r3, [pc, #472]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0f0      	beq.n	80058f4 <HAL_RCC_OscConfig+0xc0>
 8005912:	e014      	b.n	800593e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005914:	f7fc fdee 	bl	80024f4 <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800591a:	e008      	b.n	800592e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800591c:	f7fc fdea 	bl	80024f4 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b64      	cmp	r3, #100	; 0x64
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e1f0      	b.n	8005d10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800592e:	4b6c      	ldr	r3, [pc, #432]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1f0      	bne.n	800591c <HAL_RCC_OscConfig+0xe8>
 800593a:	e000      	b.n	800593e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800593c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d063      	beq.n	8005a12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800594a:	4b65      	ldr	r3, [pc, #404]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f003 030c 	and.w	r3, r3, #12
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00b      	beq.n	800596e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005956:	4b62      	ldr	r3, [pc, #392]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800595e:	2b08      	cmp	r3, #8
 8005960:	d11c      	bne.n	800599c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005962:	4b5f      	ldr	r3, [pc, #380]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d116      	bne.n	800599c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800596e:	4b5c      	ldr	r3, [pc, #368]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d005      	beq.n	8005986 <HAL_RCC_OscConfig+0x152>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d001      	beq.n	8005986 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e1c4      	b.n	8005d10 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005986:	4b56      	ldr	r3, [pc, #344]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	4952      	ldr	r1, [pc, #328]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 8005996:	4313      	orrs	r3, r2
 8005998:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800599a:	e03a      	b.n	8005a12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d020      	beq.n	80059e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059a4:	4b4f      	ldr	r3, [pc, #316]	; (8005ae4 <HAL_RCC_OscConfig+0x2b0>)
 80059a6:	2201      	movs	r2, #1
 80059a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059aa:	f7fc fda3 	bl	80024f4 <HAL_GetTick>
 80059ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059b0:	e008      	b.n	80059c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059b2:	f7fc fd9f 	bl	80024f4 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d901      	bls.n	80059c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e1a5      	b.n	8005d10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059c4:	4b46      	ldr	r3, [pc, #280]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0f0      	beq.n	80059b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059d0:	4b43      	ldr	r3, [pc, #268]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	4940      	ldr	r1, [pc, #256]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	600b      	str	r3, [r1, #0]
 80059e4:	e015      	b.n	8005a12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059e6:	4b3f      	ldr	r3, [pc, #252]	; (8005ae4 <HAL_RCC_OscConfig+0x2b0>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ec:	f7fc fd82 	bl	80024f4 <HAL_GetTick>
 80059f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059f2:	e008      	b.n	8005a06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059f4:	f7fc fd7e 	bl	80024f4 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e184      	b.n	8005d10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a06:	4b36      	ldr	r3, [pc, #216]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1f0      	bne.n	80059f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d030      	beq.n	8005a80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d016      	beq.n	8005a54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a26:	4b30      	ldr	r3, [pc, #192]	; (8005ae8 <HAL_RCC_OscConfig+0x2b4>)
 8005a28:	2201      	movs	r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a2c:	f7fc fd62 	bl	80024f4 <HAL_GetTick>
 8005a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a32:	e008      	b.n	8005a46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a34:	f7fc fd5e 	bl	80024f4 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e164      	b.n	8005d10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a46:	4b26      	ldr	r3, [pc, #152]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 8005a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d0f0      	beq.n	8005a34 <HAL_RCC_OscConfig+0x200>
 8005a52:	e015      	b.n	8005a80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a54:	4b24      	ldr	r3, [pc, #144]	; (8005ae8 <HAL_RCC_OscConfig+0x2b4>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a5a:	f7fc fd4b 	bl	80024f4 <HAL_GetTick>
 8005a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a60:	e008      	b.n	8005a74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a62:	f7fc fd47 	bl	80024f4 <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d901      	bls.n	8005a74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e14d      	b.n	8005d10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a74:	4b1a      	ldr	r3, [pc, #104]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 8005a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a78:	f003 0302 	and.w	r3, r3, #2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1f0      	bne.n	8005a62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 80a0 	beq.w	8005bce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a92:	4b13      	ldr	r3, [pc, #76]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10f      	bne.n	8005abe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60bb      	str	r3, [r7, #8]
 8005aa2:	4b0f      	ldr	r3, [pc, #60]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	4a0e      	ldr	r2, [pc, #56]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 8005aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aac:	6413      	str	r3, [r2, #64]	; 0x40
 8005aae:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <HAL_RCC_OscConfig+0x2ac>)
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ab6:	60bb      	str	r3, [r7, #8]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aba:	2301      	movs	r3, #1
 8005abc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005abe:	4b0b      	ldr	r3, [pc, #44]	; (8005aec <HAL_RCC_OscConfig+0x2b8>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d121      	bne.n	8005b0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005aca:	4b08      	ldr	r3, [pc, #32]	; (8005aec <HAL_RCC_OscConfig+0x2b8>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a07      	ldr	r2, [pc, #28]	; (8005aec <HAL_RCC_OscConfig+0x2b8>)
 8005ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ad6:	f7fc fd0d 	bl	80024f4 <HAL_GetTick>
 8005ada:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005adc:	e011      	b.n	8005b02 <HAL_RCC_OscConfig+0x2ce>
 8005ade:	bf00      	nop
 8005ae0:	40023800 	.word	0x40023800
 8005ae4:	42470000 	.word	0x42470000
 8005ae8:	42470e80 	.word	0x42470e80
 8005aec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005af0:	f7fc fd00 	bl	80024f4 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e106      	b.n	8005d10 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b02:	4b85      	ldr	r3, [pc, #532]	; (8005d18 <HAL_RCC_OscConfig+0x4e4>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d0f0      	beq.n	8005af0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d106      	bne.n	8005b24 <HAL_RCC_OscConfig+0x2f0>
 8005b16:	4b81      	ldr	r3, [pc, #516]	; (8005d1c <HAL_RCC_OscConfig+0x4e8>)
 8005b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1a:	4a80      	ldr	r2, [pc, #512]	; (8005d1c <HAL_RCC_OscConfig+0x4e8>)
 8005b1c:	f043 0301 	orr.w	r3, r3, #1
 8005b20:	6713      	str	r3, [r2, #112]	; 0x70
 8005b22:	e01c      	b.n	8005b5e <HAL_RCC_OscConfig+0x32a>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	2b05      	cmp	r3, #5
 8005b2a:	d10c      	bne.n	8005b46 <HAL_RCC_OscConfig+0x312>
 8005b2c:	4b7b      	ldr	r3, [pc, #492]	; (8005d1c <HAL_RCC_OscConfig+0x4e8>)
 8005b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b30:	4a7a      	ldr	r2, [pc, #488]	; (8005d1c <HAL_RCC_OscConfig+0x4e8>)
 8005b32:	f043 0304 	orr.w	r3, r3, #4
 8005b36:	6713      	str	r3, [r2, #112]	; 0x70
 8005b38:	4b78      	ldr	r3, [pc, #480]	; (8005d1c <HAL_RCC_OscConfig+0x4e8>)
 8005b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3c:	4a77      	ldr	r2, [pc, #476]	; (8005d1c <HAL_RCC_OscConfig+0x4e8>)
 8005b3e:	f043 0301 	orr.w	r3, r3, #1
 8005b42:	6713      	str	r3, [r2, #112]	; 0x70
 8005b44:	e00b      	b.n	8005b5e <HAL_RCC_OscConfig+0x32a>
 8005b46:	4b75      	ldr	r3, [pc, #468]	; (8005d1c <HAL_RCC_OscConfig+0x4e8>)
 8005b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4a:	4a74      	ldr	r2, [pc, #464]	; (8005d1c <HAL_RCC_OscConfig+0x4e8>)
 8005b4c:	f023 0301 	bic.w	r3, r3, #1
 8005b50:	6713      	str	r3, [r2, #112]	; 0x70
 8005b52:	4b72      	ldr	r3, [pc, #456]	; (8005d1c <HAL_RCC_OscConfig+0x4e8>)
 8005b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b56:	4a71      	ldr	r2, [pc, #452]	; (8005d1c <HAL_RCC_OscConfig+0x4e8>)
 8005b58:	f023 0304 	bic.w	r3, r3, #4
 8005b5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d015      	beq.n	8005b92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b66:	f7fc fcc5 	bl	80024f4 <HAL_GetTick>
 8005b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b6c:	e00a      	b.n	8005b84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b6e:	f7fc fcc1 	bl	80024f4 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e0c5      	b.n	8005d10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b84:	4b65      	ldr	r3, [pc, #404]	; (8005d1c <HAL_RCC_OscConfig+0x4e8>)
 8005b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0ee      	beq.n	8005b6e <HAL_RCC_OscConfig+0x33a>
 8005b90:	e014      	b.n	8005bbc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b92:	f7fc fcaf 	bl	80024f4 <HAL_GetTick>
 8005b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b98:	e00a      	b.n	8005bb0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b9a:	f7fc fcab 	bl	80024f4 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d901      	bls.n	8005bb0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e0af      	b.n	8005d10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bb0:	4b5a      	ldr	r3, [pc, #360]	; (8005d1c <HAL_RCC_OscConfig+0x4e8>)
 8005bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1ee      	bne.n	8005b9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bbc:	7dfb      	ldrb	r3, [r7, #23]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d105      	bne.n	8005bce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bc2:	4b56      	ldr	r3, [pc, #344]	; (8005d1c <HAL_RCC_OscConfig+0x4e8>)
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	4a55      	ldr	r2, [pc, #340]	; (8005d1c <HAL_RCC_OscConfig+0x4e8>)
 8005bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bcc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 809b 	beq.w	8005d0e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bd8:	4b50      	ldr	r3, [pc, #320]	; (8005d1c <HAL_RCC_OscConfig+0x4e8>)
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f003 030c 	and.w	r3, r3, #12
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d05c      	beq.n	8005c9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d141      	bne.n	8005c70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bec:	4b4c      	ldr	r3, [pc, #304]	; (8005d20 <HAL_RCC_OscConfig+0x4ec>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf2:	f7fc fc7f 	bl	80024f4 <HAL_GetTick>
 8005bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bf8:	e008      	b.n	8005c0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bfa:	f7fc fc7b 	bl	80024f4 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d901      	bls.n	8005c0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e081      	b.n	8005d10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c0c:	4b43      	ldr	r3, [pc, #268]	; (8005d1c <HAL_RCC_OscConfig+0x4e8>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1f0      	bne.n	8005bfa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	69da      	ldr	r2, [r3, #28]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	431a      	orrs	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	019b      	lsls	r3, r3, #6
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2e:	085b      	lsrs	r3, r3, #1
 8005c30:	3b01      	subs	r3, #1
 8005c32:	041b      	lsls	r3, r3, #16
 8005c34:	431a      	orrs	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3a:	061b      	lsls	r3, r3, #24
 8005c3c:	4937      	ldr	r1, [pc, #220]	; (8005d1c <HAL_RCC_OscConfig+0x4e8>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c42:	4b37      	ldr	r3, [pc, #220]	; (8005d20 <HAL_RCC_OscConfig+0x4ec>)
 8005c44:	2201      	movs	r2, #1
 8005c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c48:	f7fc fc54 	bl	80024f4 <HAL_GetTick>
 8005c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c4e:	e008      	b.n	8005c62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c50:	f7fc fc50 	bl	80024f4 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e056      	b.n	8005d10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c62:	4b2e      	ldr	r3, [pc, #184]	; (8005d1c <HAL_RCC_OscConfig+0x4e8>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0f0      	beq.n	8005c50 <HAL_RCC_OscConfig+0x41c>
 8005c6e:	e04e      	b.n	8005d0e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c70:	4b2b      	ldr	r3, [pc, #172]	; (8005d20 <HAL_RCC_OscConfig+0x4ec>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c76:	f7fc fc3d 	bl	80024f4 <HAL_GetTick>
 8005c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c7c:	e008      	b.n	8005c90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c7e:	f7fc fc39 	bl	80024f4 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d901      	bls.n	8005c90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e03f      	b.n	8005d10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c90:	4b22      	ldr	r3, [pc, #136]	; (8005d1c <HAL_RCC_OscConfig+0x4e8>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1f0      	bne.n	8005c7e <HAL_RCC_OscConfig+0x44a>
 8005c9c:	e037      	b.n	8005d0e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d101      	bne.n	8005caa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e032      	b.n	8005d10 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005caa:	4b1c      	ldr	r3, [pc, #112]	; (8005d1c <HAL_RCC_OscConfig+0x4e8>)
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d028      	beq.n	8005d0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d121      	bne.n	8005d0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d11a      	bne.n	8005d0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005cda:	4013      	ands	r3, r2
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ce0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d111      	bne.n	8005d0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf0:	085b      	lsrs	r3, r3, #1
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d107      	bne.n	8005d0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d04:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d001      	beq.n	8005d0e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40007000 	.word	0x40007000
 8005d1c:	40023800 	.word	0x40023800
 8005d20:	42470060 	.word	0x42470060

08005d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e0cc      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d38:	4b68      	ldr	r3, [pc, #416]	; (8005edc <HAL_RCC_ClockConfig+0x1b8>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0307 	and.w	r3, r3, #7
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d90c      	bls.n	8005d60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d46:	4b65      	ldr	r3, [pc, #404]	; (8005edc <HAL_RCC_ClockConfig+0x1b8>)
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d4e:	4b63      	ldr	r3, [pc, #396]	; (8005edc <HAL_RCC_ClockConfig+0x1b8>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d001      	beq.n	8005d60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e0b8      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d020      	beq.n	8005dae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d005      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d78:	4b59      	ldr	r3, [pc, #356]	; (8005ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	4a58      	ldr	r2, [pc, #352]	; (8005ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0308 	and.w	r3, r3, #8
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d005      	beq.n	8005d9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d90:	4b53      	ldr	r3, [pc, #332]	; (8005ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	4a52      	ldr	r2, [pc, #328]	; (8005ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d9c:	4b50      	ldr	r3, [pc, #320]	; (8005ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	494d      	ldr	r1, [pc, #308]	; (8005ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d044      	beq.n	8005e44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d107      	bne.n	8005dd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dc2:	4b47      	ldr	r3, [pc, #284]	; (8005ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d119      	bne.n	8005e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e07f      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d003      	beq.n	8005de2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d107      	bne.n	8005df2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005de2:	4b3f      	ldr	r3, [pc, #252]	; (8005ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d109      	bne.n	8005e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e06f      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005df2:	4b3b      	ldr	r3, [pc, #236]	; (8005ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e067      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e02:	4b37      	ldr	r3, [pc, #220]	; (8005ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f023 0203 	bic.w	r2, r3, #3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	4934      	ldr	r1, [pc, #208]	; (8005ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e14:	f7fc fb6e 	bl	80024f4 <HAL_GetTick>
 8005e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e1a:	e00a      	b.n	8005e32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e1c:	f7fc fb6a 	bl	80024f4 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e04f      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e32:	4b2b      	ldr	r3, [pc, #172]	; (8005ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f003 020c 	and.w	r2, r3, #12
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d1eb      	bne.n	8005e1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e44:	4b25      	ldr	r3, [pc, #148]	; (8005edc <HAL_RCC_ClockConfig+0x1b8>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d20c      	bcs.n	8005e6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e52:	4b22      	ldr	r3, [pc, #136]	; (8005edc <HAL_RCC_ClockConfig+0x1b8>)
 8005e54:	683a      	ldr	r2, [r7, #0]
 8005e56:	b2d2      	uxtb	r2, r2
 8005e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e5a:	4b20      	ldr	r3, [pc, #128]	; (8005edc <HAL_RCC_ClockConfig+0x1b8>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d001      	beq.n	8005e6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e032      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d008      	beq.n	8005e8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e78:	4b19      	ldr	r3, [pc, #100]	; (8005ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	4916      	ldr	r1, [pc, #88]	; (8005ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d009      	beq.n	8005eaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e96:	4b12      	ldr	r3, [pc, #72]	; (8005ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	490e      	ldr	r1, [pc, #56]	; (8005ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005eaa:	f000 f821 	bl	8005ef0 <HAL_RCC_GetSysClockFreq>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	091b      	lsrs	r3, r3, #4
 8005eb6:	f003 030f 	and.w	r3, r3, #15
 8005eba:	490a      	ldr	r1, [pc, #40]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8005ebc:	5ccb      	ldrb	r3, [r1, r3]
 8005ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec2:	4a09      	ldr	r2, [pc, #36]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ec6:	4b09      	ldr	r3, [pc, #36]	; (8005eec <HAL_RCC_ClockConfig+0x1c8>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fc face 	bl	800246c <HAL_InitTick>

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	40023c00 	.word	0x40023c00
 8005ee0:	40023800 	.word	0x40023800
 8005ee4:	08008768 	.word	0x08008768
 8005ee8:	2000009c 	.word	0x2000009c
 8005eec:	200000a0 	.word	0x200000a0

08005ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ef0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005ef4:	b084      	sub	sp, #16
 8005ef6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	607b      	str	r3, [r7, #4]
 8005efc:	2300      	movs	r3, #0
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	2300      	movs	r3, #0
 8005f02:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005f04:	2300      	movs	r3, #0
 8005f06:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f08:	4b67      	ldr	r3, [pc, #412]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f003 030c 	and.w	r3, r3, #12
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	d00d      	beq.n	8005f30 <HAL_RCC_GetSysClockFreq+0x40>
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	f200 80bd 	bhi.w	8006094 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d002      	beq.n	8005f24 <HAL_RCC_GetSysClockFreq+0x34>
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d003      	beq.n	8005f2a <HAL_RCC_GetSysClockFreq+0x3a>
 8005f22:	e0b7      	b.n	8006094 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f24:	4b61      	ldr	r3, [pc, #388]	; (80060ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005f26:	60bb      	str	r3, [r7, #8]
       break;
 8005f28:	e0b7      	b.n	800609a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f2a:	4b61      	ldr	r3, [pc, #388]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005f2c:	60bb      	str	r3, [r7, #8]
      break;
 8005f2e:	e0b4      	b.n	800609a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f30:	4b5d      	ldr	r3, [pc, #372]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f38:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f3a:	4b5b      	ldr	r3, [pc, #364]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d04d      	beq.n	8005fe2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f46:	4b58      	ldr	r3, [pc, #352]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	099b      	lsrs	r3, r3, #6
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f04f 0300 	mov.w	r3, #0
 8005f52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f56:	f04f 0100 	mov.w	r1, #0
 8005f5a:	ea02 0800 	and.w	r8, r2, r0
 8005f5e:	ea03 0901 	and.w	r9, r3, r1
 8005f62:	4640      	mov	r0, r8
 8005f64:	4649      	mov	r1, r9
 8005f66:	f04f 0200 	mov.w	r2, #0
 8005f6a:	f04f 0300 	mov.w	r3, #0
 8005f6e:	014b      	lsls	r3, r1, #5
 8005f70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f74:	0142      	lsls	r2, r0, #5
 8005f76:	4610      	mov	r0, r2
 8005f78:	4619      	mov	r1, r3
 8005f7a:	ebb0 0008 	subs.w	r0, r0, r8
 8005f7e:	eb61 0109 	sbc.w	r1, r1, r9
 8005f82:	f04f 0200 	mov.w	r2, #0
 8005f86:	f04f 0300 	mov.w	r3, #0
 8005f8a:	018b      	lsls	r3, r1, #6
 8005f8c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f90:	0182      	lsls	r2, r0, #6
 8005f92:	1a12      	subs	r2, r2, r0
 8005f94:	eb63 0301 	sbc.w	r3, r3, r1
 8005f98:	f04f 0000 	mov.w	r0, #0
 8005f9c:	f04f 0100 	mov.w	r1, #0
 8005fa0:	00d9      	lsls	r1, r3, #3
 8005fa2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fa6:	00d0      	lsls	r0, r2, #3
 8005fa8:	4602      	mov	r2, r0
 8005faa:	460b      	mov	r3, r1
 8005fac:	eb12 0208 	adds.w	r2, r2, r8
 8005fb0:	eb43 0309 	adc.w	r3, r3, r9
 8005fb4:	f04f 0000 	mov.w	r0, #0
 8005fb8:	f04f 0100 	mov.w	r1, #0
 8005fbc:	0259      	lsls	r1, r3, #9
 8005fbe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005fc2:	0250      	lsls	r0, r2, #9
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4610      	mov	r0, r2
 8005fca:	4619      	mov	r1, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	f04f 0300 	mov.w	r3, #0
 8005fd4:	f7fa f8fe 	bl	80001d4 <__aeabi_uldivmod>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4613      	mov	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
 8005fe0:	e04a      	b.n	8006078 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fe2:	4b31      	ldr	r3, [pc, #196]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	099b      	lsrs	r3, r3, #6
 8005fe8:	461a      	mov	r2, r3
 8005fea:	f04f 0300 	mov.w	r3, #0
 8005fee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ff2:	f04f 0100 	mov.w	r1, #0
 8005ff6:	ea02 0400 	and.w	r4, r2, r0
 8005ffa:	ea03 0501 	and.w	r5, r3, r1
 8005ffe:	4620      	mov	r0, r4
 8006000:	4629      	mov	r1, r5
 8006002:	f04f 0200 	mov.w	r2, #0
 8006006:	f04f 0300 	mov.w	r3, #0
 800600a:	014b      	lsls	r3, r1, #5
 800600c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006010:	0142      	lsls	r2, r0, #5
 8006012:	4610      	mov	r0, r2
 8006014:	4619      	mov	r1, r3
 8006016:	1b00      	subs	r0, r0, r4
 8006018:	eb61 0105 	sbc.w	r1, r1, r5
 800601c:	f04f 0200 	mov.w	r2, #0
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	018b      	lsls	r3, r1, #6
 8006026:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800602a:	0182      	lsls	r2, r0, #6
 800602c:	1a12      	subs	r2, r2, r0
 800602e:	eb63 0301 	sbc.w	r3, r3, r1
 8006032:	f04f 0000 	mov.w	r0, #0
 8006036:	f04f 0100 	mov.w	r1, #0
 800603a:	00d9      	lsls	r1, r3, #3
 800603c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006040:	00d0      	lsls	r0, r2, #3
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	1912      	adds	r2, r2, r4
 8006048:	eb45 0303 	adc.w	r3, r5, r3
 800604c:	f04f 0000 	mov.w	r0, #0
 8006050:	f04f 0100 	mov.w	r1, #0
 8006054:	0299      	lsls	r1, r3, #10
 8006056:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800605a:	0290      	lsls	r0, r2, #10
 800605c:	4602      	mov	r2, r0
 800605e:	460b      	mov	r3, r1
 8006060:	4610      	mov	r0, r2
 8006062:	4619      	mov	r1, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	461a      	mov	r2, r3
 8006068:	f04f 0300 	mov.w	r3, #0
 800606c:	f7fa f8b2 	bl	80001d4 <__aeabi_uldivmod>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4613      	mov	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006078:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	0c1b      	lsrs	r3, r3, #16
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	3301      	adds	r3, #1
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006090:	60bb      	str	r3, [r7, #8]
      break;
 8006092:	e002      	b.n	800609a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006094:	4b05      	ldr	r3, [pc, #20]	; (80060ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006096:	60bb      	str	r3, [r7, #8]
      break;
 8006098:	bf00      	nop
    }
  }
  return sysclockfreq;
 800609a:	68bb      	ldr	r3, [r7, #8]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80060a6:	bf00      	nop
 80060a8:	40023800 	.word	0x40023800
 80060ac:	00f42400 	.word	0x00f42400
 80060b0:	007a1200 	.word	0x007a1200

080060b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060b4:	b480      	push	{r7}
 80060b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060b8:	4b03      	ldr	r3, [pc, #12]	; (80060c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80060ba:	681b      	ldr	r3, [r3, #0]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	2000009c 	.word	0x2000009c

080060cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80060d0:	f7ff fff0 	bl	80060b4 <HAL_RCC_GetHCLKFreq>
 80060d4:	4602      	mov	r2, r0
 80060d6:	4b05      	ldr	r3, [pc, #20]	; (80060ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	0a9b      	lsrs	r3, r3, #10
 80060dc:	f003 0307 	and.w	r3, r3, #7
 80060e0:	4903      	ldr	r1, [pc, #12]	; (80060f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060e2:	5ccb      	ldrb	r3, [r1, r3]
 80060e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	40023800 	.word	0x40023800
 80060f0:	08008778 	.word	0x08008778

080060f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060f8:	f7ff ffdc 	bl	80060b4 <HAL_RCC_GetHCLKFreq>
 80060fc:	4602      	mov	r2, r0
 80060fe:	4b05      	ldr	r3, [pc, #20]	; (8006114 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	0b5b      	lsrs	r3, r3, #13
 8006104:	f003 0307 	and.w	r3, r3, #7
 8006108:	4903      	ldr	r1, [pc, #12]	; (8006118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800610a:	5ccb      	ldrb	r3, [r1, r3]
 800610c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006110:	4618      	mov	r0, r3
 8006112:	bd80      	pop	{r7, pc}
 8006114:	40023800 	.word	0x40023800
 8006118:	08008778 	.word	0x08008778

0800611c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e041      	b.n	80061b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d106      	bne.n	8006148 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7fb ff94 	bl	8002070 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3304      	adds	r3, #4
 8006158:	4619      	mov	r1, r3
 800615a:	4610      	mov	r0, r2
 800615c:	f000 fc0e 	bl	800697c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d109      	bne.n	80061e0 <HAL_TIM_PWM_Start+0x24>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	bf14      	ite	ne
 80061d8:	2301      	movne	r3, #1
 80061da:	2300      	moveq	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	e022      	b.n	8006226 <HAL_TIM_PWM_Start+0x6a>
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d109      	bne.n	80061fa <HAL_TIM_PWM_Start+0x3e>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	bf14      	ite	ne
 80061f2:	2301      	movne	r3, #1
 80061f4:	2300      	moveq	r3, #0
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	e015      	b.n	8006226 <HAL_TIM_PWM_Start+0x6a>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d109      	bne.n	8006214 <HAL_TIM_PWM_Start+0x58>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b01      	cmp	r3, #1
 800620a:	bf14      	ite	ne
 800620c:	2301      	movne	r3, #1
 800620e:	2300      	moveq	r3, #0
 8006210:	b2db      	uxtb	r3, r3
 8006212:	e008      	b.n	8006226 <HAL_TIM_PWM_Start+0x6a>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b01      	cmp	r3, #1
 800621e:	bf14      	ite	ne
 8006220:	2301      	movne	r3, #1
 8006222:	2300      	moveq	r3, #0
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e068      	b.n	8006300 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d104      	bne.n	800623e <HAL_TIM_PWM_Start+0x82>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800623c:	e013      	b.n	8006266 <HAL_TIM_PWM_Start+0xaa>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b04      	cmp	r3, #4
 8006242:	d104      	bne.n	800624e <HAL_TIM_PWM_Start+0x92>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800624c:	e00b      	b.n	8006266 <HAL_TIM_PWM_Start+0xaa>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b08      	cmp	r3, #8
 8006252:	d104      	bne.n	800625e <HAL_TIM_PWM_Start+0xa2>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800625c:	e003      	b.n	8006266 <HAL_TIM_PWM_Start+0xaa>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2202      	movs	r2, #2
 8006262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2201      	movs	r2, #1
 800626c:	6839      	ldr	r1, [r7, #0]
 800626e:	4618      	mov	r0, r3
 8006270:	f000 fd90 	bl	8006d94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a23      	ldr	r2, [pc, #140]	; (8006308 <HAL_TIM_PWM_Start+0x14c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d107      	bne.n	800628e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800628c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a1d      	ldr	r2, [pc, #116]	; (8006308 <HAL_TIM_PWM_Start+0x14c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d018      	beq.n	80062ca <HAL_TIM_PWM_Start+0x10e>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a0:	d013      	beq.n	80062ca <HAL_TIM_PWM_Start+0x10e>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a19      	ldr	r2, [pc, #100]	; (800630c <HAL_TIM_PWM_Start+0x150>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d00e      	beq.n	80062ca <HAL_TIM_PWM_Start+0x10e>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a17      	ldr	r2, [pc, #92]	; (8006310 <HAL_TIM_PWM_Start+0x154>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d009      	beq.n	80062ca <HAL_TIM_PWM_Start+0x10e>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a16      	ldr	r2, [pc, #88]	; (8006314 <HAL_TIM_PWM_Start+0x158>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d004      	beq.n	80062ca <HAL_TIM_PWM_Start+0x10e>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a14      	ldr	r2, [pc, #80]	; (8006318 <HAL_TIM_PWM_Start+0x15c>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d111      	bne.n	80062ee <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2b06      	cmp	r3, #6
 80062da:	d010      	beq.n	80062fe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 0201 	orr.w	r2, r2, #1
 80062ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ec:	e007      	b.n	80062fe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f042 0201 	orr.w	r2, r2, #1
 80062fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	40010000 	.word	0x40010000
 800630c:	40000400 	.word	0x40000400
 8006310:	40000800 	.word	0x40000800
 8006314:	40000c00 	.word	0x40000c00
 8006318:	40014000 	.word	0x40014000

0800631c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d101      	bne.n	8006330 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e097      	b.n	8006460 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b00      	cmp	r3, #0
 800633a:	d106      	bne.n	800634a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f7fb feb3 	bl	80020b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2202      	movs	r2, #2
 800634e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6812      	ldr	r2, [r2, #0]
 800635c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006360:	f023 0307 	bic.w	r3, r3, #7
 8006364:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3304      	adds	r3, #4
 800636e:	4619      	mov	r1, r3
 8006370:	4610      	mov	r0, r2
 8006372:	f000 fb03 	bl	800697c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800639e:	f023 0303 	bic.w	r3, r3, #3
 80063a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	021b      	lsls	r3, r3, #8
 80063ae:	4313      	orrs	r3, r2
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80063bc:	f023 030c 	bic.w	r3, r3, #12
 80063c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68da      	ldr	r2, [r3, #12]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	021b      	lsls	r3, r3, #8
 80063d8:	4313      	orrs	r3, r2
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	4313      	orrs	r3, r2
 80063de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	011a      	lsls	r2, r3, #4
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	031b      	lsls	r3, r3, #12
 80063ec:	4313      	orrs	r3, r2
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80063fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006402:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	011b      	lsls	r3, r3, #4
 800640e:	4313      	orrs	r3, r2
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006478:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006480:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006488:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006490:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d110      	bne.n	80064ba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006498:	7bfb      	ldrb	r3, [r7, #15]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d102      	bne.n	80064a4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800649e:	7b7b      	ldrb	r3, [r7, #13]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d001      	beq.n	80064a8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e069      	b.n	800657c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064b8:	e031      	b.n	800651e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b04      	cmp	r3, #4
 80064be:	d110      	bne.n	80064e2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80064c0:	7bbb      	ldrb	r3, [r7, #14]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d102      	bne.n	80064cc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80064c6:	7b3b      	ldrb	r3, [r7, #12]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d001      	beq.n	80064d0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e055      	b.n	800657c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064e0:	e01d      	b.n	800651e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064e2:	7bfb      	ldrb	r3, [r7, #15]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d108      	bne.n	80064fa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80064e8:	7bbb      	ldrb	r3, [r7, #14]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d105      	bne.n	80064fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064ee:	7b7b      	ldrb	r3, [r7, #13]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d102      	bne.n	80064fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80064f4:	7b3b      	ldrb	r3, [r7, #12]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d001      	beq.n	80064fe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e03e      	b.n	800657c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2202      	movs	r2, #2
 8006502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2202      	movs	r2, #2
 800650a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2202      	movs	r2, #2
 8006512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2202      	movs	r2, #2
 800651a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d003      	beq.n	800652c <HAL_TIM_Encoder_Start+0xc4>
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2b04      	cmp	r3, #4
 8006528:	d008      	beq.n	800653c <HAL_TIM_Encoder_Start+0xd4>
 800652a:	e00f      	b.n	800654c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2201      	movs	r2, #1
 8006532:	2100      	movs	r1, #0
 8006534:	4618      	mov	r0, r3
 8006536:	f000 fc2d 	bl	8006d94 <TIM_CCxChannelCmd>
      break;
 800653a:	e016      	b.n	800656a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2201      	movs	r2, #1
 8006542:	2104      	movs	r1, #4
 8006544:	4618      	mov	r0, r3
 8006546:	f000 fc25 	bl	8006d94 <TIM_CCxChannelCmd>
      break;
 800654a:	e00e      	b.n	800656a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2201      	movs	r2, #1
 8006552:	2100      	movs	r1, #0
 8006554:	4618      	mov	r0, r3
 8006556:	f000 fc1d 	bl	8006d94 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2201      	movs	r2, #1
 8006560:	2104      	movs	r1, #4
 8006562:	4618      	mov	r0, r3
 8006564:	f000 fc16 	bl	8006d94 <TIM_CCxChannelCmd>
      break;
 8006568:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f042 0201 	orr.w	r2, r2, #1
 8006578:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	2b02      	cmp	r3, #2
 8006598:	d122      	bne.n	80065e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d11b      	bne.n	80065e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f06f 0202 	mvn.w	r2, #2
 80065b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	f003 0303 	and.w	r3, r3, #3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f9ba 	bl	8006940 <HAL_TIM_IC_CaptureCallback>
 80065cc:	e005      	b.n	80065da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f9ac 	bl	800692c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 f9bd 	bl	8006954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	f003 0304 	and.w	r3, r3, #4
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	d122      	bne.n	8006634 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f003 0304 	and.w	r3, r3, #4
 80065f8:	2b04      	cmp	r3, #4
 80065fa:	d11b      	bne.n	8006634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f06f 0204 	mvn.w	r2, #4
 8006604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2202      	movs	r2, #2
 800660a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f990 	bl	8006940 <HAL_TIM_IC_CaptureCallback>
 8006620:	e005      	b.n	800662e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f982 	bl	800692c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f993 	bl	8006954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	f003 0308 	and.w	r3, r3, #8
 800663e:	2b08      	cmp	r3, #8
 8006640:	d122      	bne.n	8006688 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	f003 0308 	and.w	r3, r3, #8
 800664c:	2b08      	cmp	r3, #8
 800664e:	d11b      	bne.n	8006688 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f06f 0208 	mvn.w	r2, #8
 8006658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2204      	movs	r2, #4
 800665e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	f003 0303 	and.w	r3, r3, #3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f966 	bl	8006940 <HAL_TIM_IC_CaptureCallback>
 8006674:	e005      	b.n	8006682 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f958 	bl	800692c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f969 	bl	8006954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	f003 0310 	and.w	r3, r3, #16
 8006692:	2b10      	cmp	r3, #16
 8006694:	d122      	bne.n	80066dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f003 0310 	and.w	r3, r3, #16
 80066a0:	2b10      	cmp	r3, #16
 80066a2:	d11b      	bne.n	80066dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f06f 0210 	mvn.w	r2, #16
 80066ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2208      	movs	r2, #8
 80066b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d003      	beq.n	80066ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f93c 	bl	8006940 <HAL_TIM_IC_CaptureCallback>
 80066c8:	e005      	b.n	80066d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f92e 	bl	800692c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f93f 	bl	8006954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d10e      	bne.n	8006708 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d107      	bne.n	8006708 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f06f 0201 	mvn.w	r2, #1
 8006700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f908 	bl	8006918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006712:	2b80      	cmp	r3, #128	; 0x80
 8006714:	d10e      	bne.n	8006734 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006720:	2b80      	cmp	r3, #128	; 0x80
 8006722:	d107      	bne.n	8006734 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800672c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fbce 	bl	8006ed0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673e:	2b40      	cmp	r3, #64	; 0x40
 8006740:	d10e      	bne.n	8006760 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674c:	2b40      	cmp	r3, #64	; 0x40
 800674e:	d107      	bne.n	8006760 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f904 	bl	8006968 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	f003 0320 	and.w	r3, r3, #32
 800676a:	2b20      	cmp	r3, #32
 800676c:	d10e      	bne.n	800678c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f003 0320 	and.w	r3, r3, #32
 8006778:	2b20      	cmp	r3, #32
 800677a:	d107      	bne.n	800678c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f06f 0220 	mvn.w	r2, #32
 8006784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fb98 	bl	8006ebc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800678c:	bf00      	nop
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067a0:	2300      	movs	r3, #0
 80067a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d101      	bne.n	80067b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067ae:	2302      	movs	r3, #2
 80067b0:	e0ae      	b.n	8006910 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b0c      	cmp	r3, #12
 80067be:	f200 809f 	bhi.w	8006900 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80067c2:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c8:	080067fd 	.word	0x080067fd
 80067cc:	08006901 	.word	0x08006901
 80067d0:	08006901 	.word	0x08006901
 80067d4:	08006901 	.word	0x08006901
 80067d8:	0800683d 	.word	0x0800683d
 80067dc:	08006901 	.word	0x08006901
 80067e0:	08006901 	.word	0x08006901
 80067e4:	08006901 	.word	0x08006901
 80067e8:	0800687f 	.word	0x0800687f
 80067ec:	08006901 	.word	0x08006901
 80067f0:	08006901 	.word	0x08006901
 80067f4:	08006901 	.word	0x08006901
 80067f8:	080068bf 	.word	0x080068bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68b9      	ldr	r1, [r7, #8]
 8006802:	4618      	mov	r0, r3
 8006804:	f000 f93a 	bl	8006a7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	699a      	ldr	r2, [r3, #24]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0208 	orr.w	r2, r2, #8
 8006816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	699a      	ldr	r2, [r3, #24]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 0204 	bic.w	r2, r2, #4
 8006826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6999      	ldr	r1, [r3, #24]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	691a      	ldr	r2, [r3, #16]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	619a      	str	r2, [r3, #24]
      break;
 800683a:	e064      	b.n	8006906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68b9      	ldr	r1, [r7, #8]
 8006842:	4618      	mov	r0, r3
 8006844:	f000 f980 	bl	8006b48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	699a      	ldr	r2, [r3, #24]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	699a      	ldr	r2, [r3, #24]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6999      	ldr	r1, [r3, #24]
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	021a      	lsls	r2, r3, #8
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	430a      	orrs	r2, r1
 800687a:	619a      	str	r2, [r3, #24]
      break;
 800687c:	e043      	b.n	8006906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68b9      	ldr	r1, [r7, #8]
 8006884:	4618      	mov	r0, r3
 8006886:	f000 f9cb 	bl	8006c20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	69da      	ldr	r2, [r3, #28]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f042 0208 	orr.w	r2, r2, #8
 8006898:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	69da      	ldr	r2, [r3, #28]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0204 	bic.w	r2, r2, #4
 80068a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	69d9      	ldr	r1, [r3, #28]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	691a      	ldr	r2, [r3, #16]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	61da      	str	r2, [r3, #28]
      break;
 80068bc:	e023      	b.n	8006906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68b9      	ldr	r1, [r7, #8]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 fa15 	bl	8006cf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69da      	ldr	r2, [r3, #28]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	69da      	ldr	r2, [r3, #28]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69d9      	ldr	r1, [r3, #28]
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	021a      	lsls	r2, r3, #8
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	61da      	str	r2, [r3, #28]
      break;
 80068fe:	e002      	b.n	8006906 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	75fb      	strb	r3, [r7, #23]
      break;
 8006904:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800690e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006910:	4618      	mov	r0, r3
 8006912:	3718      	adds	r7, #24
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a34      	ldr	r2, [pc, #208]	; (8006a60 <TIM_Base_SetConfig+0xe4>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d00f      	beq.n	80069b4 <TIM_Base_SetConfig+0x38>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800699a:	d00b      	beq.n	80069b4 <TIM_Base_SetConfig+0x38>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a31      	ldr	r2, [pc, #196]	; (8006a64 <TIM_Base_SetConfig+0xe8>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d007      	beq.n	80069b4 <TIM_Base_SetConfig+0x38>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a30      	ldr	r2, [pc, #192]	; (8006a68 <TIM_Base_SetConfig+0xec>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d003      	beq.n	80069b4 <TIM_Base_SetConfig+0x38>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a2f      	ldr	r2, [pc, #188]	; (8006a6c <TIM_Base_SetConfig+0xf0>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d108      	bne.n	80069c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a25      	ldr	r2, [pc, #148]	; (8006a60 <TIM_Base_SetConfig+0xe4>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d01b      	beq.n	8006a06 <TIM_Base_SetConfig+0x8a>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069d4:	d017      	beq.n	8006a06 <TIM_Base_SetConfig+0x8a>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a22      	ldr	r2, [pc, #136]	; (8006a64 <TIM_Base_SetConfig+0xe8>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d013      	beq.n	8006a06 <TIM_Base_SetConfig+0x8a>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a21      	ldr	r2, [pc, #132]	; (8006a68 <TIM_Base_SetConfig+0xec>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d00f      	beq.n	8006a06 <TIM_Base_SetConfig+0x8a>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a20      	ldr	r2, [pc, #128]	; (8006a6c <TIM_Base_SetConfig+0xf0>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d00b      	beq.n	8006a06 <TIM_Base_SetConfig+0x8a>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a1f      	ldr	r2, [pc, #124]	; (8006a70 <TIM_Base_SetConfig+0xf4>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d007      	beq.n	8006a06 <TIM_Base_SetConfig+0x8a>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a1e      	ldr	r2, [pc, #120]	; (8006a74 <TIM_Base_SetConfig+0xf8>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d003      	beq.n	8006a06 <TIM_Base_SetConfig+0x8a>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a1d      	ldr	r2, [pc, #116]	; (8006a78 <TIM_Base_SetConfig+0xfc>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d108      	bne.n	8006a18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	689a      	ldr	r2, [r3, #8]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a08      	ldr	r2, [pc, #32]	; (8006a60 <TIM_Base_SetConfig+0xe4>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d103      	bne.n	8006a4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	691a      	ldr	r2, [r3, #16]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	615a      	str	r2, [r3, #20]
}
 8006a52:	bf00      	nop
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	40010000 	.word	0x40010000
 8006a64:	40000400 	.word	0x40000400
 8006a68:	40000800 	.word	0x40000800
 8006a6c:	40000c00 	.word	0x40000c00
 8006a70:	40014000 	.word	0x40014000
 8006a74:	40014400 	.word	0x40014400
 8006a78:	40014800 	.word	0x40014800

08006a7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	f023 0201 	bic.w	r2, r3, #1
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 0303 	bic.w	r3, r3, #3
 8006ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f023 0302 	bic.w	r3, r3, #2
 8006ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a1c      	ldr	r2, [pc, #112]	; (8006b44 <TIM_OC1_SetConfig+0xc8>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d10c      	bne.n	8006af2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	f023 0308 	bic.w	r3, r3, #8
 8006ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f023 0304 	bic.w	r3, r3, #4
 8006af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a13      	ldr	r2, [pc, #76]	; (8006b44 <TIM_OC1_SetConfig+0xc8>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d111      	bne.n	8006b1e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	685a      	ldr	r2, [r3, #4]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	621a      	str	r2, [r3, #32]
}
 8006b38:	bf00      	nop
 8006b3a:	371c      	adds	r7, #28
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	40010000 	.word	0x40010000

08006b48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b087      	sub	sp, #28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	f023 0210 	bic.w	r2, r3, #16
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	021b      	lsls	r3, r3, #8
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	f023 0320 	bic.w	r3, r3, #32
 8006b92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	011b      	lsls	r3, r3, #4
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a1e      	ldr	r2, [pc, #120]	; (8006c1c <TIM_OC2_SetConfig+0xd4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d10d      	bne.n	8006bc4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	011b      	lsls	r3, r3, #4
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a15      	ldr	r2, [pc, #84]	; (8006c1c <TIM_OC2_SetConfig+0xd4>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d113      	bne.n	8006bf4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	621a      	str	r2, [r3, #32]
}
 8006c0e:	bf00      	nop
 8006c10:	371c      	adds	r7, #28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	40010000 	.word	0x40010000

08006c20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b087      	sub	sp, #28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f023 0303 	bic.w	r3, r3, #3
 8006c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	021b      	lsls	r3, r3, #8
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a1d      	ldr	r2, [pc, #116]	; (8006cf0 <TIM_OC3_SetConfig+0xd0>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d10d      	bne.n	8006c9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	021b      	lsls	r3, r3, #8
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a14      	ldr	r2, [pc, #80]	; (8006cf0 <TIM_OC3_SetConfig+0xd0>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d113      	bne.n	8006cca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	011b      	lsls	r3, r3, #4
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	011b      	lsls	r3, r3, #4
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	621a      	str	r2, [r3, #32]
}
 8006ce4:	bf00      	nop
 8006ce6:	371c      	adds	r7, #28
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	40010000 	.word	0x40010000

08006cf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	021b      	lsls	r3, r3, #8
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	031b      	lsls	r3, r3, #12
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a10      	ldr	r2, [pc, #64]	; (8006d90 <TIM_OC4_SetConfig+0x9c>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d109      	bne.n	8006d68 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	019b      	lsls	r3, r3, #6
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	621a      	str	r2, [r3, #32]
}
 8006d82:	bf00      	nop
 8006d84:	371c      	adds	r7, #28
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	40010000 	.word	0x40010000

08006d94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	f003 031f 	and.w	r3, r3, #31
 8006da6:	2201      	movs	r2, #1
 8006da8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6a1a      	ldr	r2, [r3, #32]
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	43db      	mvns	r3, r3
 8006db6:	401a      	ands	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6a1a      	ldr	r2, [r3, #32]
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	f003 031f 	and.w	r3, r3, #31
 8006dc6:	6879      	ldr	r1, [r7, #4]
 8006dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dcc:	431a      	orrs	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	621a      	str	r2, [r3, #32]
}
 8006dd2:	bf00      	nop
 8006dd4:	371c      	adds	r7, #28
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
	...

08006de0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d101      	bne.n	8006df8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006df4:	2302      	movs	r3, #2
 8006df6:	e050      	b.n	8006e9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2202      	movs	r2, #2
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a1c      	ldr	r2, [pc, #112]	; (8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d018      	beq.n	8006e6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e44:	d013      	beq.n	8006e6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a18      	ldr	r2, [pc, #96]	; (8006eac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d00e      	beq.n	8006e6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a16      	ldr	r2, [pc, #88]	; (8006eb0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d009      	beq.n	8006e6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a15      	ldr	r2, [pc, #84]	; (8006eb4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d004      	beq.n	8006e6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a13      	ldr	r2, [pc, #76]	; (8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d10c      	bne.n	8006e88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	40010000 	.word	0x40010000
 8006eac:	40000400 	.word	0x40000400
 8006eb0:	40000800 	.word	0x40000800
 8006eb4:	40000c00 	.word	0x40000c00
 8006eb8:	40014000 	.word	0x40014000

08006ebc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e03f      	b.n	8006f76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d106      	bne.n	8006f10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7fb f9e0 	bl	80022d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2224      	movs	r2, #36	; 0x24
 8006f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68da      	ldr	r2, [r3, #12]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fe97 	bl	8007c5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	691a      	ldr	r2, [r3, #16]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	695a      	ldr	r2, [r3, #20]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68da      	ldr	r2, [r3, #12]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2220      	movs	r2, #32
 8006f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b08c      	sub	sp, #48	; 0x30
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	60f8      	str	r0, [r7, #12]
 8006f86:	60b9      	str	r1, [r7, #8]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b20      	cmp	r3, #32
 8006f96:	d152      	bne.n	800703e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d002      	beq.n	8006fa4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006f9e:	88fb      	ldrh	r3, [r7, #6]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e04b      	b.n	8007040 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d101      	bne.n	8006fb6 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	e044      	b.n	8007040 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006fc4:	88fb      	ldrh	r3, [r7, #6]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	68b9      	ldr	r1, [r7, #8]
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f000 fbea 	bl	80077a4 <UART_Start_Receive_DMA>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006fd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d12c      	bne.n	8007038 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d125      	bne.n	8007032 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	613b      	str	r3, [r7, #16]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	613b      	str	r3, [r7, #16]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	613b      	str	r3, [r7, #16]
 8006ffa:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	330c      	adds	r3, #12
 8007002:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	e853 3f00 	ldrex	r3, [r3]
 800700a:	617b      	str	r3, [r7, #20]
   return(result);
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f043 0310 	orr.w	r3, r3, #16
 8007012:	62bb      	str	r3, [r7, #40]	; 0x28
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	330c      	adds	r3, #12
 800701a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800701c:	627a      	str	r2, [r7, #36]	; 0x24
 800701e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007020:	6a39      	ldr	r1, [r7, #32]
 8007022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007024:	e841 2300 	strex	r3, r2, [r1]
 8007028:	61fb      	str	r3, [r7, #28]
   return(result);
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1e5      	bne.n	8006ffc <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8007030:	e002      	b.n	8007038 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8007038:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800703c:	e000      	b.n	8007040 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800703e:	2302      	movs	r3, #2
  }
}
 8007040:	4618      	mov	r0, r3
 8007042:	3730      	adds	r7, #48	; 0x30
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b0ba      	sub	sp, #232	; 0xe8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800706e:	2300      	movs	r3, #0
 8007070:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007074:	2300      	movs	r3, #0
 8007076:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800707a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800707e:	f003 030f 	and.w	r3, r3, #15
 8007082:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007086:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10f      	bne.n	80070ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800708e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007092:	f003 0320 	and.w	r3, r3, #32
 8007096:	2b00      	cmp	r3, #0
 8007098:	d009      	beq.n	80070ae <HAL_UART_IRQHandler+0x66>
 800709a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800709e:	f003 0320 	and.w	r3, r3, #32
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fd1d 	bl	8007ae6 <UART_Receive_IT>
      return;
 80070ac:	e256      	b.n	800755c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80070ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f000 80de 	beq.w	8007274 <HAL_UART_IRQHandler+0x22c>
 80070b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d106      	bne.n	80070d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 80d1 	beq.w	8007274 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00b      	beq.n	80070f6 <HAL_UART_IRQHandler+0xae>
 80070de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d005      	beq.n	80070f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ee:	f043 0201 	orr.w	r2, r3, #1
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070fa:	f003 0304 	and.w	r3, r3, #4
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00b      	beq.n	800711a <HAL_UART_IRQHandler+0xd2>
 8007102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d005      	beq.n	800711a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007112:	f043 0202 	orr.w	r2, r3, #2
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800711a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800711e:	f003 0302 	and.w	r3, r3, #2
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00b      	beq.n	800713e <HAL_UART_IRQHandler+0xf6>
 8007126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	d005      	beq.n	800713e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007136:	f043 0204 	orr.w	r2, r3, #4
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800713e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007142:	f003 0308 	and.w	r3, r3, #8
 8007146:	2b00      	cmp	r3, #0
 8007148:	d011      	beq.n	800716e <HAL_UART_IRQHandler+0x126>
 800714a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800714e:	f003 0320 	and.w	r3, r3, #32
 8007152:	2b00      	cmp	r3, #0
 8007154:	d105      	bne.n	8007162 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b00      	cmp	r3, #0
 8007160:	d005      	beq.n	800716e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007166:	f043 0208 	orr.w	r2, r3, #8
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 81ed 	beq.w	8007552 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800717c:	f003 0320 	and.w	r3, r3, #32
 8007180:	2b00      	cmp	r3, #0
 8007182:	d008      	beq.n	8007196 <HAL_UART_IRQHandler+0x14e>
 8007184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007188:	f003 0320 	and.w	r3, r3, #32
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fca8 	bl	8007ae6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a0:	2b40      	cmp	r3, #64	; 0x40
 80071a2:	bf0c      	ite	eq
 80071a4:	2301      	moveq	r3, #1
 80071a6:	2300      	movne	r3, #0
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	f003 0308 	and.w	r3, r3, #8
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d103      	bne.n	80071c2 <HAL_UART_IRQHandler+0x17a>
 80071ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d04f      	beq.n	8007262 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fbb0 	bl	8007928 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d2:	2b40      	cmp	r3, #64	; 0x40
 80071d4:	d141      	bne.n	800725a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3314      	adds	r3, #20
 80071dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80071ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3314      	adds	r3, #20
 80071fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007202:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007206:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800720e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800721a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1d9      	bne.n	80071d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007226:	2b00      	cmp	r3, #0
 8007228:	d013      	beq.n	8007252 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722e:	4a7d      	ldr	r2, [pc, #500]	; (8007424 <HAL_UART_IRQHandler+0x3dc>)
 8007230:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007236:	4618      	mov	r0, r3
 8007238:	f7fb fc14 	bl	8002a64 <HAL_DMA_Abort_IT>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d016      	beq.n	8007270 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800724c:	4610      	mov	r0, r2
 800724e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007250:	e00e      	b.n	8007270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f9a4 	bl	80075a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007258:	e00a      	b.n	8007270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f9a0 	bl	80075a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007260:	e006      	b.n	8007270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f99c 	bl	80075a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800726e:	e170      	b.n	8007552 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007270:	bf00      	nop
    return;
 8007272:	e16e      	b.n	8007552 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007278:	2b01      	cmp	r3, #1
 800727a:	f040 814a 	bne.w	8007512 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800727e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007282:	f003 0310 	and.w	r3, r3, #16
 8007286:	2b00      	cmp	r3, #0
 8007288:	f000 8143 	beq.w	8007512 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800728c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007290:	f003 0310 	and.w	r3, r3, #16
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 813c 	beq.w	8007512 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800729a:	2300      	movs	r3, #0
 800729c:	60bb      	str	r3, [r7, #8]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	60bb      	str	r3, [r7, #8]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	60bb      	str	r3, [r7, #8]
 80072ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ba:	2b40      	cmp	r3, #64	; 0x40
 80072bc:	f040 80b4 	bne.w	8007428 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 8140 	beq.w	8007556 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072de:	429a      	cmp	r2, r3
 80072e0:	f080 8139 	bcs.w	8007556 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f0:	69db      	ldr	r3, [r3, #28]
 80072f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072f6:	f000 8088 	beq.w	800740a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	330c      	adds	r3, #12
 8007300:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007304:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007308:	e853 3f00 	ldrex	r3, [r3]
 800730c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007310:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007318:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	330c      	adds	r3, #12
 8007322:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007326:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800732a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007332:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800733e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1d9      	bne.n	80072fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3314      	adds	r3, #20
 800734c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007356:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007358:	f023 0301 	bic.w	r3, r3, #1
 800735c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3314      	adds	r3, #20
 8007366:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800736a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800736e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007370:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007372:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007376:	e841 2300 	strex	r3, r2, [r1]
 800737a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800737c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1e1      	bne.n	8007346 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3314      	adds	r3, #20
 8007388:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800738c:	e853 3f00 	ldrex	r3, [r3]
 8007390:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007398:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	3314      	adds	r3, #20
 80073a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073ae:	e841 2300 	strex	r3, r2, [r1]
 80073b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1e3      	bne.n	8007382 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2220      	movs	r2, #32
 80073be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	330c      	adds	r3, #12
 80073ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073d2:	e853 3f00 	ldrex	r3, [r3]
 80073d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073da:	f023 0310 	bic.w	r3, r3, #16
 80073de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	330c      	adds	r3, #12
 80073e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80073ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80073ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073f4:	e841 2300 	strex	r3, r2, [r1]
 80073f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80073fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1e3      	bne.n	80073c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007404:	4618      	mov	r0, r3
 8007406:	f7fb fabd 	bl	8002984 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007412:	b29b      	uxth	r3, r3
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	b29b      	uxth	r3, r3
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7fa f940 	bl	80016a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007420:	e099      	b.n	8007556 <HAL_UART_IRQHandler+0x50e>
 8007422:	bf00      	nop
 8007424:	080079ef 	.word	0x080079ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007430:	b29b      	uxth	r3, r3
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800743c:	b29b      	uxth	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 808b 	beq.w	800755a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007444:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 8086 	beq.w	800755a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	330c      	adds	r3, #12
 8007454:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007458:	e853 3f00 	ldrex	r3, [r3]
 800745c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800745e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007460:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007464:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	330c      	adds	r3, #12
 800746e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007472:	647a      	str	r2, [r7, #68]	; 0x44
 8007474:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007476:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007478:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800747a:	e841 2300 	strex	r3, r2, [r1]
 800747e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1e3      	bne.n	800744e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3314      	adds	r3, #20
 800748c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007490:	e853 3f00 	ldrex	r3, [r3]
 8007494:	623b      	str	r3, [r7, #32]
   return(result);
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	f023 0301 	bic.w	r3, r3, #1
 800749c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3314      	adds	r3, #20
 80074a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074aa:	633a      	str	r2, [r7, #48]	; 0x30
 80074ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074b2:	e841 2300 	strex	r3, r2, [r1]
 80074b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1e3      	bne.n	8007486 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2220      	movs	r2, #32
 80074c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	330c      	adds	r3, #12
 80074d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	e853 3f00 	ldrex	r3, [r3]
 80074da:	60fb      	str	r3, [r7, #12]
   return(result);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f023 0310 	bic.w	r3, r3, #16
 80074e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	330c      	adds	r3, #12
 80074ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80074f0:	61fa      	str	r2, [r7, #28]
 80074f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f4:	69b9      	ldr	r1, [r7, #24]
 80074f6:	69fa      	ldr	r2, [r7, #28]
 80074f8:	e841 2300 	strex	r3, r2, [r1]
 80074fc:	617b      	str	r3, [r7, #20]
   return(result);
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1e3      	bne.n	80074cc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007504:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007508:	4619      	mov	r1, r3
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7fa f8c8 	bl	80016a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007510:	e023      	b.n	800755a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800751a:	2b00      	cmp	r3, #0
 800751c:	d009      	beq.n	8007532 <HAL_UART_IRQHandler+0x4ea>
 800751e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fa73 	bl	8007a16 <UART_Transmit_IT>
    return;
 8007530:	e014      	b.n	800755c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00e      	beq.n	800755c <HAL_UART_IRQHandler+0x514>
 800753e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007546:	2b00      	cmp	r3, #0
 8007548:	d008      	beq.n	800755c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fab3 	bl	8007ab6 <UART_EndTransmit_IT>
    return;
 8007550:	e004      	b.n	800755c <HAL_UART_IRQHandler+0x514>
    return;
 8007552:	bf00      	nop
 8007554:	e002      	b.n	800755c <HAL_UART_IRQHandler+0x514>
      return;
 8007556:	bf00      	nop
 8007558:	e000      	b.n	800755c <HAL_UART_IRQHandler+0x514>
      return;
 800755a:	bf00      	nop
  }
}
 800755c:	37e8      	adds	r7, #232	; 0xe8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop

08007564 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b09c      	sub	sp, #112	; 0x70
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d172      	bne.n	80076b6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80075d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075d2:	2200      	movs	r2, #0
 80075d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	330c      	adds	r3, #12
 80075dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075e0:	e853 3f00 	ldrex	r3, [r3]
 80075e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80075e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80075ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	330c      	adds	r3, #12
 80075f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80075f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80075f8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075fe:	e841 2300 	strex	r3, r2, [r1]
 8007602:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1e5      	bne.n	80075d6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800760a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3314      	adds	r3, #20
 8007610:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007614:	e853 3f00 	ldrex	r3, [r3]
 8007618:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800761a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800761c:	f023 0301 	bic.w	r3, r3, #1
 8007620:	667b      	str	r3, [r7, #100]	; 0x64
 8007622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3314      	adds	r3, #20
 8007628:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800762a:	647a      	str	r2, [r7, #68]	; 0x44
 800762c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007630:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007632:	e841 2300 	strex	r3, r2, [r1]
 8007636:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1e5      	bne.n	800760a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800763e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	3314      	adds	r3, #20
 8007644:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007648:	e853 3f00 	ldrex	r3, [r3]
 800764c:	623b      	str	r3, [r7, #32]
   return(result);
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007654:	663b      	str	r3, [r7, #96]	; 0x60
 8007656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3314      	adds	r3, #20
 800765c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800765e:	633a      	str	r2, [r7, #48]	; 0x30
 8007660:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007666:	e841 2300 	strex	r3, r2, [r1]
 800766a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800766c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1e5      	bne.n	800763e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007674:	2220      	movs	r2, #32
 8007676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800767a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800767c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767e:	2b01      	cmp	r3, #1
 8007680:	d119      	bne.n	80076b6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	330c      	adds	r3, #12
 8007688:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	e853 3f00 	ldrex	r3, [r3]
 8007690:	60fb      	str	r3, [r7, #12]
   return(result);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f023 0310 	bic.w	r3, r3, #16
 8007698:	65fb      	str	r3, [r7, #92]	; 0x5c
 800769a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	330c      	adds	r3, #12
 80076a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076a2:	61fa      	str	r2, [r7, #28]
 80076a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a6:	69b9      	ldr	r1, [r7, #24]
 80076a8:	69fa      	ldr	r2, [r7, #28]
 80076aa:	e841 2300 	strex	r3, r2, [r1]
 80076ae:	617b      	str	r3, [r7, #20]
   return(result);
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1e5      	bne.n	8007682 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d106      	bne.n	80076cc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076c2:	4619      	mov	r1, r3
 80076c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80076c6:	f7f9 ffeb 	bl	80016a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076ca:	e002      	b.n	80076d2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80076cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80076ce:	f7ff ff53 	bl	8007578 <HAL_UART_RxCpltCallback>
}
 80076d2:	bf00      	nop
 80076d4:	3770      	adds	r7, #112	; 0x70
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b084      	sub	sp, #16
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d108      	bne.n	8007702 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076f4:	085b      	lsrs	r3, r3, #1
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	4619      	mov	r1, r3
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f7f9 ffd0 	bl	80016a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007700:	e002      	b.n	8007708 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f7ff ff42 	bl	800758c <HAL_UART_RxHalfCpltCallback>
}
 8007708:	bf00      	nop
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007718:	2300      	movs	r3, #0
 800771a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007720:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	695b      	ldr	r3, [r3, #20]
 8007728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800772c:	2b80      	cmp	r3, #128	; 0x80
 800772e:	bf0c      	ite	eq
 8007730:	2301      	moveq	r3, #1
 8007732:	2300      	movne	r3, #0
 8007734:	b2db      	uxtb	r3, r3
 8007736:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2b21      	cmp	r3, #33	; 0x21
 8007742:	d108      	bne.n	8007756 <UART_DMAError+0x46>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d005      	beq.n	8007756 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	2200      	movs	r2, #0
 800774e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007750:	68b8      	ldr	r0, [r7, #8]
 8007752:	f000 f8c1 	bl	80078d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007760:	2b40      	cmp	r3, #64	; 0x40
 8007762:	bf0c      	ite	eq
 8007764:	2301      	moveq	r3, #1
 8007766:	2300      	movne	r3, #0
 8007768:	b2db      	uxtb	r3, r3
 800776a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b22      	cmp	r3, #34	; 0x22
 8007776:	d108      	bne.n	800778a <UART_DMAError+0x7a>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d005      	beq.n	800778a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	2200      	movs	r2, #0
 8007782:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007784:	68b8      	ldr	r0, [r7, #8]
 8007786:	f000 f8cf 	bl	8007928 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778e:	f043 0210 	orr.w	r2, r3, #16
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007796:	68b8      	ldr	r0, [r7, #8]
 8007798:	f7ff ff02 	bl	80075a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800779c:	bf00      	nop
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b098      	sub	sp, #96	; 0x60
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	4613      	mov	r3, r2
 80077b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	88fa      	ldrh	r2, [r7, #6]
 80077bc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2222      	movs	r2, #34	; 0x22
 80077c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d0:	4a3e      	ldr	r2, [pc, #248]	; (80078cc <UART_Start_Receive_DMA+0x128>)
 80077d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d8:	4a3d      	ldr	r2, [pc, #244]	; (80078d0 <UART_Start_Receive_DMA+0x12c>)
 80077da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e0:	4a3c      	ldr	r2, [pc, #240]	; (80078d4 <UART_Start_Receive_DMA+0x130>)
 80077e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e8:	2200      	movs	r2, #0
 80077ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80077ec:	f107 0308 	add.w	r3, r7, #8
 80077f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3304      	adds	r3, #4
 80077fc:	4619      	mov	r1, r3
 80077fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	88fb      	ldrh	r3, [r7, #6]
 8007804:	f7fb f866 	bl	80028d4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007808:	2300      	movs	r3, #0
 800780a:	613b      	str	r3, [r7, #16]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	613b      	str	r3, [r7, #16]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	613b      	str	r3, [r7, #16]
 800781c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	330c      	adds	r3, #12
 800782c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800783c:	65bb      	str	r3, [r7, #88]	; 0x58
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	330c      	adds	r3, #12
 8007844:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007846:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007848:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800784c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800784e:	e841 2300 	strex	r3, r2, [r1]
 8007852:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1e5      	bne.n	8007826 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3314      	adds	r3, #20
 8007860:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007864:	e853 3f00 	ldrex	r3, [r3]
 8007868:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800786a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786c:	f043 0301 	orr.w	r3, r3, #1
 8007870:	657b      	str	r3, [r7, #84]	; 0x54
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3314      	adds	r3, #20
 8007878:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800787a:	63ba      	str	r2, [r7, #56]	; 0x38
 800787c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007880:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007882:	e841 2300 	strex	r3, r2, [r1]
 8007886:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1e5      	bne.n	800785a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3314      	adds	r3, #20
 8007894:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	e853 3f00 	ldrex	r3, [r3]
 800789c:	617b      	str	r3, [r7, #20]
   return(result);
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078a4:	653b      	str	r3, [r7, #80]	; 0x50
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	3314      	adds	r3, #20
 80078ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80078ae:	627a      	str	r2, [r7, #36]	; 0x24
 80078b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b2:	6a39      	ldr	r1, [r7, #32]
 80078b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b6:	e841 2300 	strex	r3, r2, [r1]
 80078ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1e5      	bne.n	800788e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3760      	adds	r7, #96	; 0x60
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	080075b5 	.word	0x080075b5
 80078d0:	080076db 	.word	0x080076db
 80078d4:	08007711 	.word	0x08007711

080078d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80078d8:	b480      	push	{r7}
 80078da:	b089      	sub	sp, #36	; 0x24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	330c      	adds	r3, #12
 80078e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	e853 3f00 	ldrex	r3, [r3]
 80078ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80078f6:	61fb      	str	r3, [r7, #28]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	330c      	adds	r3, #12
 80078fe:	69fa      	ldr	r2, [r7, #28]
 8007900:	61ba      	str	r2, [r7, #24]
 8007902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007904:	6979      	ldr	r1, [r7, #20]
 8007906:	69ba      	ldr	r2, [r7, #24]
 8007908:	e841 2300 	strex	r3, r2, [r1]
 800790c:	613b      	str	r3, [r7, #16]
   return(result);
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1e5      	bne.n	80078e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2220      	movs	r2, #32
 8007918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800791c:	bf00      	nop
 800791e:	3724      	adds	r7, #36	; 0x24
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007928:	b480      	push	{r7}
 800792a:	b095      	sub	sp, #84	; 0x54
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	330c      	adds	r3, #12
 8007936:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800793a:	e853 3f00 	ldrex	r3, [r3]
 800793e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007942:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	330c      	adds	r3, #12
 800794e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007950:	643a      	str	r2, [r7, #64]	; 0x40
 8007952:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007954:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007956:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007958:	e841 2300 	strex	r3, r2, [r1]
 800795c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800795e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1e5      	bne.n	8007930 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	3314      	adds	r3, #20
 800796a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796c:	6a3b      	ldr	r3, [r7, #32]
 800796e:	e853 3f00 	ldrex	r3, [r3]
 8007972:	61fb      	str	r3, [r7, #28]
   return(result);
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	f023 0301 	bic.w	r3, r3, #1
 800797a:	64bb      	str	r3, [r7, #72]	; 0x48
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	3314      	adds	r3, #20
 8007982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007984:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800798a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800798c:	e841 2300 	strex	r3, r2, [r1]
 8007990:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1e5      	bne.n	8007964 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799c:	2b01      	cmp	r3, #1
 800799e:	d119      	bne.n	80079d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	330c      	adds	r3, #12
 80079a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	e853 3f00 	ldrex	r3, [r3]
 80079ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	f023 0310 	bic.w	r3, r3, #16
 80079b6:	647b      	str	r3, [r7, #68]	; 0x44
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	330c      	adds	r3, #12
 80079be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079c0:	61ba      	str	r2, [r7, #24]
 80079c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c4:	6979      	ldr	r1, [r7, #20]
 80079c6:	69ba      	ldr	r2, [r7, #24]
 80079c8:	e841 2300 	strex	r3, r2, [r1]
 80079cc:	613b      	str	r3, [r7, #16]
   return(result);
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1e5      	bne.n	80079a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2220      	movs	r2, #32
 80079d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80079e2:	bf00      	nop
 80079e4:	3754      	adds	r7, #84	; 0x54
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b084      	sub	sp, #16
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f7ff fdc9 	bl	80075a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a0e:	bf00      	nop
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b085      	sub	sp, #20
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b21      	cmp	r3, #33	; 0x21
 8007a28:	d13e      	bne.n	8007aa8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a32:	d114      	bne.n	8007a5e <UART_Transmit_IT+0x48>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d110      	bne.n	8007a5e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a1b      	ldr	r3, [r3, #32]
 8007a40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	461a      	mov	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	1c9a      	adds	r2, r3, #2
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	621a      	str	r2, [r3, #32]
 8007a5c:	e008      	b.n	8007a70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	1c59      	adds	r1, r3, #1
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	6211      	str	r1, [r2, #32]
 8007a68:	781a      	ldrb	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	3b01      	subs	r3, #1
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10f      	bne.n	8007aa4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68da      	ldr	r2, [r3, #12]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68da      	ldr	r2, [r3, #12]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aa2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	e000      	b.n	8007aaa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007aa8:	2302      	movs	r3, #2
  }
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b082      	sub	sp, #8
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68da      	ldr	r2, [r3, #12]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007acc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7ff fd44 	bl	8007564 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b08c      	sub	sp, #48	; 0x30
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b22      	cmp	r3, #34	; 0x22
 8007af8:	f040 80ab 	bne.w	8007c52 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b04:	d117      	bne.n	8007b36 <UART_Receive_IT+0x50>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d113      	bne.n	8007b36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b16:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2e:	1c9a      	adds	r2, r3, #2
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	629a      	str	r2, [r3, #40]	; 0x28
 8007b34:	e026      	b.n	8007b84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b48:	d007      	beq.n	8007b5a <UART_Receive_IT+0x74>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10a      	bne.n	8007b68 <UART_Receive_IT+0x82>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d106      	bne.n	8007b68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b64:	701a      	strb	r2, [r3, #0]
 8007b66:	e008      	b.n	8007b7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b74:	b2da      	uxtb	r2, r3
 8007b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7e:	1c5a      	adds	r2, r3, #1
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	4619      	mov	r1, r3
 8007b92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d15a      	bne.n	8007c4e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68da      	ldr	r2, [r3, #12]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f022 0220 	bic.w	r2, r2, #32
 8007ba6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68da      	ldr	r2, [r3, #12]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	695a      	ldr	r2, [r3, #20]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f022 0201 	bic.w	r2, r2, #1
 8007bc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2220      	movs	r2, #32
 8007bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d135      	bne.n	8007c44 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	330c      	adds	r3, #12
 8007be4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	e853 3f00 	ldrex	r3, [r3]
 8007bec:	613b      	str	r3, [r7, #16]
   return(result);
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	f023 0310 	bic.w	r3, r3, #16
 8007bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	330c      	adds	r3, #12
 8007bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bfe:	623a      	str	r2, [r7, #32]
 8007c00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c02:	69f9      	ldr	r1, [r7, #28]
 8007c04:	6a3a      	ldr	r2, [r7, #32]
 8007c06:	e841 2300 	strex	r3, r2, [r1]
 8007c0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1e5      	bne.n	8007bde <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 0310 	and.w	r3, r3, #16
 8007c1c:	2b10      	cmp	r3, #16
 8007c1e:	d10a      	bne.n	8007c36 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c20:	2300      	movs	r3, #0
 8007c22:	60fb      	str	r3, [r7, #12]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	60fb      	str	r3, [r7, #12]
 8007c34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f7f9 fd2f 	bl	80016a0 <HAL_UARTEx_RxEventCallback>
 8007c42:	e002      	b.n	8007c4a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f7ff fc97 	bl	8007578 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	e002      	b.n	8007c54 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	e000      	b.n	8007c54 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007c52:	2302      	movs	r3, #2
  }
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3730      	adds	r7, #48	; 0x30
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c60:	b09f      	sub	sp, #124	; 0x7c
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c72:	68d9      	ldr	r1, [r3, #12]
 8007c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	ea40 0301 	orr.w	r3, r0, r1
 8007c7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c80:	689a      	ldr	r2, [r3, #8]
 8007c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	431a      	orrs	r2, r3
 8007c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c8a:	695b      	ldr	r3, [r3, #20]
 8007c8c:	431a      	orrs	r2, r3
 8007c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c90:	69db      	ldr	r3, [r3, #28]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007ca0:	f021 010c 	bic.w	r1, r1, #12
 8007ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007caa:	430b      	orrs	r3, r1
 8007cac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cba:	6999      	ldr	r1, [r3, #24]
 8007cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	ea40 0301 	orr.w	r3, r0, r1
 8007cc4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	4bc5      	ldr	r3, [pc, #788]	; (8007fe0 <UART_SetConfig+0x384>)
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d004      	beq.n	8007cda <UART_SetConfig+0x7e>
 8007cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	4bc3      	ldr	r3, [pc, #780]	; (8007fe4 <UART_SetConfig+0x388>)
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d103      	bne.n	8007ce2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007cda:	f7fe fa0b 	bl	80060f4 <HAL_RCC_GetPCLK2Freq>
 8007cde:	6778      	str	r0, [r7, #116]	; 0x74
 8007ce0:	e002      	b.n	8007ce8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ce2:	f7fe f9f3 	bl	80060cc <HAL_RCC_GetPCLK1Freq>
 8007ce6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cea:	69db      	ldr	r3, [r3, #28]
 8007cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cf0:	f040 80b6 	bne.w	8007e60 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cf6:	461c      	mov	r4, r3
 8007cf8:	f04f 0500 	mov.w	r5, #0
 8007cfc:	4622      	mov	r2, r4
 8007cfe:	462b      	mov	r3, r5
 8007d00:	1891      	adds	r1, r2, r2
 8007d02:	6439      	str	r1, [r7, #64]	; 0x40
 8007d04:	415b      	adcs	r3, r3
 8007d06:	647b      	str	r3, [r7, #68]	; 0x44
 8007d08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d0c:	1912      	adds	r2, r2, r4
 8007d0e:	eb45 0303 	adc.w	r3, r5, r3
 8007d12:	f04f 0000 	mov.w	r0, #0
 8007d16:	f04f 0100 	mov.w	r1, #0
 8007d1a:	00d9      	lsls	r1, r3, #3
 8007d1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d20:	00d0      	lsls	r0, r2, #3
 8007d22:	4602      	mov	r2, r0
 8007d24:	460b      	mov	r3, r1
 8007d26:	1911      	adds	r1, r2, r4
 8007d28:	6639      	str	r1, [r7, #96]	; 0x60
 8007d2a:	416b      	adcs	r3, r5
 8007d2c:	667b      	str	r3, [r7, #100]	; 0x64
 8007d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	461a      	mov	r2, r3
 8007d34:	f04f 0300 	mov.w	r3, #0
 8007d38:	1891      	adds	r1, r2, r2
 8007d3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d3c:	415b      	adcs	r3, r3
 8007d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d44:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007d48:	f7f8 fa44 	bl	80001d4 <__aeabi_uldivmod>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	460b      	mov	r3, r1
 8007d50:	4ba5      	ldr	r3, [pc, #660]	; (8007fe8 <UART_SetConfig+0x38c>)
 8007d52:	fba3 2302 	umull	r2, r3, r3, r2
 8007d56:	095b      	lsrs	r3, r3, #5
 8007d58:	011e      	lsls	r6, r3, #4
 8007d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d5c:	461c      	mov	r4, r3
 8007d5e:	f04f 0500 	mov.w	r5, #0
 8007d62:	4622      	mov	r2, r4
 8007d64:	462b      	mov	r3, r5
 8007d66:	1891      	adds	r1, r2, r2
 8007d68:	6339      	str	r1, [r7, #48]	; 0x30
 8007d6a:	415b      	adcs	r3, r3
 8007d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d6e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007d72:	1912      	adds	r2, r2, r4
 8007d74:	eb45 0303 	adc.w	r3, r5, r3
 8007d78:	f04f 0000 	mov.w	r0, #0
 8007d7c:	f04f 0100 	mov.w	r1, #0
 8007d80:	00d9      	lsls	r1, r3, #3
 8007d82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d86:	00d0      	lsls	r0, r2, #3
 8007d88:	4602      	mov	r2, r0
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	1911      	adds	r1, r2, r4
 8007d8e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007d90:	416b      	adcs	r3, r5
 8007d92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	f04f 0300 	mov.w	r3, #0
 8007d9e:	1891      	adds	r1, r2, r2
 8007da0:	62b9      	str	r1, [r7, #40]	; 0x28
 8007da2:	415b      	adcs	r3, r3
 8007da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007da6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007daa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007dae:	f7f8 fa11 	bl	80001d4 <__aeabi_uldivmod>
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	4b8c      	ldr	r3, [pc, #560]	; (8007fe8 <UART_SetConfig+0x38c>)
 8007db8:	fba3 1302 	umull	r1, r3, r3, r2
 8007dbc:	095b      	lsrs	r3, r3, #5
 8007dbe:	2164      	movs	r1, #100	; 0x64
 8007dc0:	fb01 f303 	mul.w	r3, r1, r3
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	00db      	lsls	r3, r3, #3
 8007dc8:	3332      	adds	r3, #50	; 0x32
 8007dca:	4a87      	ldr	r2, [pc, #540]	; (8007fe8 <UART_SetConfig+0x38c>)
 8007dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd0:	095b      	lsrs	r3, r3, #5
 8007dd2:	005b      	lsls	r3, r3, #1
 8007dd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007dd8:	441e      	add	r6, r3
 8007dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f04f 0100 	mov.w	r1, #0
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	1894      	adds	r4, r2, r2
 8007de8:	623c      	str	r4, [r7, #32]
 8007dea:	415b      	adcs	r3, r3
 8007dec:	627b      	str	r3, [r7, #36]	; 0x24
 8007dee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007df2:	1812      	adds	r2, r2, r0
 8007df4:	eb41 0303 	adc.w	r3, r1, r3
 8007df8:	f04f 0400 	mov.w	r4, #0
 8007dfc:	f04f 0500 	mov.w	r5, #0
 8007e00:	00dd      	lsls	r5, r3, #3
 8007e02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e06:	00d4      	lsls	r4, r2, #3
 8007e08:	4622      	mov	r2, r4
 8007e0a:	462b      	mov	r3, r5
 8007e0c:	1814      	adds	r4, r2, r0
 8007e0e:	653c      	str	r4, [r7, #80]	; 0x50
 8007e10:	414b      	adcs	r3, r1
 8007e12:	657b      	str	r3, [r7, #84]	; 0x54
 8007e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	f04f 0300 	mov.w	r3, #0
 8007e1e:	1891      	adds	r1, r2, r2
 8007e20:	61b9      	str	r1, [r7, #24]
 8007e22:	415b      	adcs	r3, r3
 8007e24:	61fb      	str	r3, [r7, #28]
 8007e26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e2a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007e2e:	f7f8 f9d1 	bl	80001d4 <__aeabi_uldivmod>
 8007e32:	4602      	mov	r2, r0
 8007e34:	460b      	mov	r3, r1
 8007e36:	4b6c      	ldr	r3, [pc, #432]	; (8007fe8 <UART_SetConfig+0x38c>)
 8007e38:	fba3 1302 	umull	r1, r3, r3, r2
 8007e3c:	095b      	lsrs	r3, r3, #5
 8007e3e:	2164      	movs	r1, #100	; 0x64
 8007e40:	fb01 f303 	mul.w	r3, r1, r3
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	00db      	lsls	r3, r3, #3
 8007e48:	3332      	adds	r3, #50	; 0x32
 8007e4a:	4a67      	ldr	r2, [pc, #412]	; (8007fe8 <UART_SetConfig+0x38c>)
 8007e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e50:	095b      	lsrs	r3, r3, #5
 8007e52:	f003 0207 	and.w	r2, r3, #7
 8007e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4432      	add	r2, r6
 8007e5c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e5e:	e0b9      	b.n	8007fd4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e62:	461c      	mov	r4, r3
 8007e64:	f04f 0500 	mov.w	r5, #0
 8007e68:	4622      	mov	r2, r4
 8007e6a:	462b      	mov	r3, r5
 8007e6c:	1891      	adds	r1, r2, r2
 8007e6e:	6139      	str	r1, [r7, #16]
 8007e70:	415b      	adcs	r3, r3
 8007e72:	617b      	str	r3, [r7, #20]
 8007e74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007e78:	1912      	adds	r2, r2, r4
 8007e7a:	eb45 0303 	adc.w	r3, r5, r3
 8007e7e:	f04f 0000 	mov.w	r0, #0
 8007e82:	f04f 0100 	mov.w	r1, #0
 8007e86:	00d9      	lsls	r1, r3, #3
 8007e88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e8c:	00d0      	lsls	r0, r2, #3
 8007e8e:	4602      	mov	r2, r0
 8007e90:	460b      	mov	r3, r1
 8007e92:	eb12 0804 	adds.w	r8, r2, r4
 8007e96:	eb43 0905 	adc.w	r9, r3, r5
 8007e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f04f 0100 	mov.w	r1, #0
 8007ea4:	f04f 0200 	mov.w	r2, #0
 8007ea8:	f04f 0300 	mov.w	r3, #0
 8007eac:	008b      	lsls	r3, r1, #2
 8007eae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007eb2:	0082      	lsls	r2, r0, #2
 8007eb4:	4640      	mov	r0, r8
 8007eb6:	4649      	mov	r1, r9
 8007eb8:	f7f8 f98c 	bl	80001d4 <__aeabi_uldivmod>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	4b49      	ldr	r3, [pc, #292]	; (8007fe8 <UART_SetConfig+0x38c>)
 8007ec2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ec6:	095b      	lsrs	r3, r3, #5
 8007ec8:	011e      	lsls	r6, r3, #4
 8007eca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f04f 0100 	mov.w	r1, #0
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	1894      	adds	r4, r2, r2
 8007ed8:	60bc      	str	r4, [r7, #8]
 8007eda:	415b      	adcs	r3, r3
 8007edc:	60fb      	str	r3, [r7, #12]
 8007ede:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ee2:	1812      	adds	r2, r2, r0
 8007ee4:	eb41 0303 	adc.w	r3, r1, r3
 8007ee8:	f04f 0400 	mov.w	r4, #0
 8007eec:	f04f 0500 	mov.w	r5, #0
 8007ef0:	00dd      	lsls	r5, r3, #3
 8007ef2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ef6:	00d4      	lsls	r4, r2, #3
 8007ef8:	4622      	mov	r2, r4
 8007efa:	462b      	mov	r3, r5
 8007efc:	1814      	adds	r4, r2, r0
 8007efe:	64bc      	str	r4, [r7, #72]	; 0x48
 8007f00:	414b      	adcs	r3, r1
 8007f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f04f 0100 	mov.w	r1, #0
 8007f0e:	f04f 0200 	mov.w	r2, #0
 8007f12:	f04f 0300 	mov.w	r3, #0
 8007f16:	008b      	lsls	r3, r1, #2
 8007f18:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007f1c:	0082      	lsls	r2, r0, #2
 8007f1e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007f22:	f7f8 f957 	bl	80001d4 <__aeabi_uldivmod>
 8007f26:	4602      	mov	r2, r0
 8007f28:	460b      	mov	r3, r1
 8007f2a:	4b2f      	ldr	r3, [pc, #188]	; (8007fe8 <UART_SetConfig+0x38c>)
 8007f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8007f30:	095b      	lsrs	r3, r3, #5
 8007f32:	2164      	movs	r1, #100	; 0x64
 8007f34:	fb01 f303 	mul.w	r3, r1, r3
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	011b      	lsls	r3, r3, #4
 8007f3c:	3332      	adds	r3, #50	; 0x32
 8007f3e:	4a2a      	ldr	r2, [pc, #168]	; (8007fe8 <UART_SetConfig+0x38c>)
 8007f40:	fba2 2303 	umull	r2, r3, r2, r3
 8007f44:	095b      	lsrs	r3, r3, #5
 8007f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f4a:	441e      	add	r6, r3
 8007f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f04f 0100 	mov.w	r1, #0
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	1894      	adds	r4, r2, r2
 8007f5a:	603c      	str	r4, [r7, #0]
 8007f5c:	415b      	adcs	r3, r3
 8007f5e:	607b      	str	r3, [r7, #4]
 8007f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f64:	1812      	adds	r2, r2, r0
 8007f66:	eb41 0303 	adc.w	r3, r1, r3
 8007f6a:	f04f 0400 	mov.w	r4, #0
 8007f6e:	f04f 0500 	mov.w	r5, #0
 8007f72:	00dd      	lsls	r5, r3, #3
 8007f74:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007f78:	00d4      	lsls	r4, r2, #3
 8007f7a:	4622      	mov	r2, r4
 8007f7c:	462b      	mov	r3, r5
 8007f7e:	eb12 0a00 	adds.w	sl, r2, r0
 8007f82:	eb43 0b01 	adc.w	fp, r3, r1
 8007f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f04f 0100 	mov.w	r1, #0
 8007f90:	f04f 0200 	mov.w	r2, #0
 8007f94:	f04f 0300 	mov.w	r3, #0
 8007f98:	008b      	lsls	r3, r1, #2
 8007f9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007f9e:	0082      	lsls	r2, r0, #2
 8007fa0:	4650      	mov	r0, sl
 8007fa2:	4659      	mov	r1, fp
 8007fa4:	f7f8 f916 	bl	80001d4 <__aeabi_uldivmod>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4b0e      	ldr	r3, [pc, #56]	; (8007fe8 <UART_SetConfig+0x38c>)
 8007fae:	fba3 1302 	umull	r1, r3, r3, r2
 8007fb2:	095b      	lsrs	r3, r3, #5
 8007fb4:	2164      	movs	r1, #100	; 0x64
 8007fb6:	fb01 f303 	mul.w	r3, r1, r3
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	011b      	lsls	r3, r3, #4
 8007fbe:	3332      	adds	r3, #50	; 0x32
 8007fc0:	4a09      	ldr	r2, [pc, #36]	; (8007fe8 <UART_SetConfig+0x38c>)
 8007fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc6:	095b      	lsrs	r3, r3, #5
 8007fc8:	f003 020f 	and.w	r2, r3, #15
 8007fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4432      	add	r2, r6
 8007fd2:	609a      	str	r2, [r3, #8]
}
 8007fd4:	bf00      	nop
 8007fd6:	377c      	adds	r7, #124	; 0x7c
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fde:	bf00      	nop
 8007fe0:	40011000 	.word	0x40011000
 8007fe4:	40011400 	.word	0x40011400
 8007fe8:	51eb851f 	.word	0x51eb851f

08007fec <__errno>:
 8007fec:	4b01      	ldr	r3, [pc, #4]	; (8007ff4 <__errno+0x8>)
 8007fee:	6818      	ldr	r0, [r3, #0]
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	200000a8 	.word	0x200000a8

08007ff8 <__libc_init_array>:
 8007ff8:	b570      	push	{r4, r5, r6, lr}
 8007ffa:	4d0d      	ldr	r5, [pc, #52]	; (8008030 <__libc_init_array+0x38>)
 8007ffc:	4c0d      	ldr	r4, [pc, #52]	; (8008034 <__libc_init_array+0x3c>)
 8007ffe:	1b64      	subs	r4, r4, r5
 8008000:	10a4      	asrs	r4, r4, #2
 8008002:	2600      	movs	r6, #0
 8008004:	42a6      	cmp	r6, r4
 8008006:	d109      	bne.n	800801c <__libc_init_array+0x24>
 8008008:	4d0b      	ldr	r5, [pc, #44]	; (8008038 <__libc_init_array+0x40>)
 800800a:	4c0c      	ldr	r4, [pc, #48]	; (800803c <__libc_init_array+0x44>)
 800800c:	f000 f90a 	bl	8008224 <_init>
 8008010:	1b64      	subs	r4, r4, r5
 8008012:	10a4      	asrs	r4, r4, #2
 8008014:	2600      	movs	r6, #0
 8008016:	42a6      	cmp	r6, r4
 8008018:	d105      	bne.n	8008026 <__libc_init_array+0x2e>
 800801a:	bd70      	pop	{r4, r5, r6, pc}
 800801c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008020:	4798      	blx	r3
 8008022:	3601      	adds	r6, #1
 8008024:	e7ee      	b.n	8008004 <__libc_init_array+0xc>
 8008026:	f855 3b04 	ldr.w	r3, [r5], #4
 800802a:	4798      	blx	r3
 800802c:	3601      	adds	r6, #1
 800802e:	e7f2      	b.n	8008016 <__libc_init_array+0x1e>
 8008030:	080087b8 	.word	0x080087b8
 8008034:	080087b8 	.word	0x080087b8
 8008038:	080087b8 	.word	0x080087b8
 800803c:	080087bc 	.word	0x080087bc

08008040 <__itoa>:
 8008040:	1e93      	subs	r3, r2, #2
 8008042:	2b22      	cmp	r3, #34	; 0x22
 8008044:	b510      	push	{r4, lr}
 8008046:	460c      	mov	r4, r1
 8008048:	d904      	bls.n	8008054 <__itoa+0x14>
 800804a:	2300      	movs	r3, #0
 800804c:	700b      	strb	r3, [r1, #0]
 800804e:	461c      	mov	r4, r3
 8008050:	4620      	mov	r0, r4
 8008052:	bd10      	pop	{r4, pc}
 8008054:	2a0a      	cmp	r2, #10
 8008056:	d109      	bne.n	800806c <__itoa+0x2c>
 8008058:	2800      	cmp	r0, #0
 800805a:	da07      	bge.n	800806c <__itoa+0x2c>
 800805c:	232d      	movs	r3, #45	; 0x2d
 800805e:	700b      	strb	r3, [r1, #0]
 8008060:	4240      	negs	r0, r0
 8008062:	2101      	movs	r1, #1
 8008064:	4421      	add	r1, r4
 8008066:	f000 f88d 	bl	8008184 <__utoa>
 800806a:	e7f1      	b.n	8008050 <__itoa+0x10>
 800806c:	2100      	movs	r1, #0
 800806e:	e7f9      	b.n	8008064 <__itoa+0x24>

08008070 <itoa>:
 8008070:	f7ff bfe6 	b.w	8008040 <__itoa>

08008074 <malloc>:
 8008074:	4b02      	ldr	r3, [pc, #8]	; (8008080 <malloc+0xc>)
 8008076:	4601      	mov	r1, r0
 8008078:	6818      	ldr	r0, [r3, #0]
 800807a:	f000 b819 	b.w	80080b0 <_malloc_r>
 800807e:	bf00      	nop
 8008080:	200000a8 	.word	0x200000a8

08008084 <memcpy>:
 8008084:	440a      	add	r2, r1
 8008086:	4291      	cmp	r1, r2
 8008088:	f100 33ff 	add.w	r3, r0, #4294967295
 800808c:	d100      	bne.n	8008090 <memcpy+0xc>
 800808e:	4770      	bx	lr
 8008090:	b510      	push	{r4, lr}
 8008092:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008096:	f803 4f01 	strb.w	r4, [r3, #1]!
 800809a:	4291      	cmp	r1, r2
 800809c:	d1f9      	bne.n	8008092 <memcpy+0xe>
 800809e:	bd10      	pop	{r4, pc}

080080a0 <memset>:
 80080a0:	4402      	add	r2, r0
 80080a2:	4603      	mov	r3, r0
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d100      	bne.n	80080aa <memset+0xa>
 80080a8:	4770      	bx	lr
 80080aa:	f803 1b01 	strb.w	r1, [r3], #1
 80080ae:	e7f9      	b.n	80080a4 <memset+0x4>

080080b0 <_malloc_r>:
 80080b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080b2:	1ccd      	adds	r5, r1, #3
 80080b4:	f025 0503 	bic.w	r5, r5, #3
 80080b8:	3508      	adds	r5, #8
 80080ba:	2d0c      	cmp	r5, #12
 80080bc:	bf38      	it	cc
 80080be:	250c      	movcc	r5, #12
 80080c0:	2d00      	cmp	r5, #0
 80080c2:	4606      	mov	r6, r0
 80080c4:	db01      	blt.n	80080ca <_malloc_r+0x1a>
 80080c6:	42a9      	cmp	r1, r5
 80080c8:	d903      	bls.n	80080d2 <_malloc_r+0x22>
 80080ca:	230c      	movs	r3, #12
 80080cc:	6033      	str	r3, [r6, #0]
 80080ce:	2000      	movs	r0, #0
 80080d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080d2:	f000 f899 	bl	8008208 <__malloc_lock>
 80080d6:	4921      	ldr	r1, [pc, #132]	; (800815c <_malloc_r+0xac>)
 80080d8:	680a      	ldr	r2, [r1, #0]
 80080da:	4614      	mov	r4, r2
 80080dc:	b99c      	cbnz	r4, 8008106 <_malloc_r+0x56>
 80080de:	4f20      	ldr	r7, [pc, #128]	; (8008160 <_malloc_r+0xb0>)
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	b923      	cbnz	r3, 80080ee <_malloc_r+0x3e>
 80080e4:	4621      	mov	r1, r4
 80080e6:	4630      	mov	r0, r6
 80080e8:	f000 f83c 	bl	8008164 <_sbrk_r>
 80080ec:	6038      	str	r0, [r7, #0]
 80080ee:	4629      	mov	r1, r5
 80080f0:	4630      	mov	r0, r6
 80080f2:	f000 f837 	bl	8008164 <_sbrk_r>
 80080f6:	1c43      	adds	r3, r0, #1
 80080f8:	d123      	bne.n	8008142 <_malloc_r+0x92>
 80080fa:	230c      	movs	r3, #12
 80080fc:	6033      	str	r3, [r6, #0]
 80080fe:	4630      	mov	r0, r6
 8008100:	f000 f888 	bl	8008214 <__malloc_unlock>
 8008104:	e7e3      	b.n	80080ce <_malloc_r+0x1e>
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	1b5b      	subs	r3, r3, r5
 800810a:	d417      	bmi.n	800813c <_malloc_r+0x8c>
 800810c:	2b0b      	cmp	r3, #11
 800810e:	d903      	bls.n	8008118 <_malloc_r+0x68>
 8008110:	6023      	str	r3, [r4, #0]
 8008112:	441c      	add	r4, r3
 8008114:	6025      	str	r5, [r4, #0]
 8008116:	e004      	b.n	8008122 <_malloc_r+0x72>
 8008118:	6863      	ldr	r3, [r4, #4]
 800811a:	42a2      	cmp	r2, r4
 800811c:	bf0c      	ite	eq
 800811e:	600b      	streq	r3, [r1, #0]
 8008120:	6053      	strne	r3, [r2, #4]
 8008122:	4630      	mov	r0, r6
 8008124:	f000 f876 	bl	8008214 <__malloc_unlock>
 8008128:	f104 000b 	add.w	r0, r4, #11
 800812c:	1d23      	adds	r3, r4, #4
 800812e:	f020 0007 	bic.w	r0, r0, #7
 8008132:	1ac2      	subs	r2, r0, r3
 8008134:	d0cc      	beq.n	80080d0 <_malloc_r+0x20>
 8008136:	1a1b      	subs	r3, r3, r0
 8008138:	50a3      	str	r3, [r4, r2]
 800813a:	e7c9      	b.n	80080d0 <_malloc_r+0x20>
 800813c:	4622      	mov	r2, r4
 800813e:	6864      	ldr	r4, [r4, #4]
 8008140:	e7cc      	b.n	80080dc <_malloc_r+0x2c>
 8008142:	1cc4      	adds	r4, r0, #3
 8008144:	f024 0403 	bic.w	r4, r4, #3
 8008148:	42a0      	cmp	r0, r4
 800814a:	d0e3      	beq.n	8008114 <_malloc_r+0x64>
 800814c:	1a21      	subs	r1, r4, r0
 800814e:	4630      	mov	r0, r6
 8008150:	f000 f808 	bl	8008164 <_sbrk_r>
 8008154:	3001      	adds	r0, #1
 8008156:	d1dd      	bne.n	8008114 <_malloc_r+0x64>
 8008158:	e7cf      	b.n	80080fa <_malloc_r+0x4a>
 800815a:	bf00      	nop
 800815c:	20000148 	.word	0x20000148
 8008160:	2000014c 	.word	0x2000014c

08008164 <_sbrk_r>:
 8008164:	b538      	push	{r3, r4, r5, lr}
 8008166:	4d06      	ldr	r5, [pc, #24]	; (8008180 <_sbrk_r+0x1c>)
 8008168:	2300      	movs	r3, #0
 800816a:	4604      	mov	r4, r0
 800816c:	4608      	mov	r0, r1
 800816e:	602b      	str	r3, [r5, #0]
 8008170:	f7f9 fe20 	bl	8001db4 <_sbrk>
 8008174:	1c43      	adds	r3, r0, #1
 8008176:	d102      	bne.n	800817e <_sbrk_r+0x1a>
 8008178:	682b      	ldr	r3, [r5, #0]
 800817a:	b103      	cbz	r3, 800817e <_sbrk_r+0x1a>
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	bd38      	pop	{r3, r4, r5, pc}
 8008180:	20000438 	.word	0x20000438

08008184 <__utoa>:
 8008184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008186:	4c1f      	ldr	r4, [pc, #124]	; (8008204 <__utoa+0x80>)
 8008188:	b08b      	sub	sp, #44	; 0x2c
 800818a:	4605      	mov	r5, r0
 800818c:	460b      	mov	r3, r1
 800818e:	466e      	mov	r6, sp
 8008190:	f104 0c20 	add.w	ip, r4, #32
 8008194:	6820      	ldr	r0, [r4, #0]
 8008196:	6861      	ldr	r1, [r4, #4]
 8008198:	4637      	mov	r7, r6
 800819a:	c703      	stmia	r7!, {r0, r1}
 800819c:	3408      	adds	r4, #8
 800819e:	4564      	cmp	r4, ip
 80081a0:	463e      	mov	r6, r7
 80081a2:	d1f7      	bne.n	8008194 <__utoa+0x10>
 80081a4:	7921      	ldrb	r1, [r4, #4]
 80081a6:	7139      	strb	r1, [r7, #4]
 80081a8:	1e91      	subs	r1, r2, #2
 80081aa:	6820      	ldr	r0, [r4, #0]
 80081ac:	6038      	str	r0, [r7, #0]
 80081ae:	2922      	cmp	r1, #34	; 0x22
 80081b0:	f04f 0100 	mov.w	r1, #0
 80081b4:	d904      	bls.n	80081c0 <__utoa+0x3c>
 80081b6:	7019      	strb	r1, [r3, #0]
 80081b8:	460b      	mov	r3, r1
 80081ba:	4618      	mov	r0, r3
 80081bc:	b00b      	add	sp, #44	; 0x2c
 80081be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081c0:	1e58      	subs	r0, r3, #1
 80081c2:	4684      	mov	ip, r0
 80081c4:	fbb5 f7f2 	udiv	r7, r5, r2
 80081c8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80081cc:	fb02 5617 	mls	r6, r2, r7, r5
 80081d0:	4476      	add	r6, lr
 80081d2:	460c      	mov	r4, r1
 80081d4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80081d8:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80081dc:	462e      	mov	r6, r5
 80081de:	42b2      	cmp	r2, r6
 80081e0:	f101 0101 	add.w	r1, r1, #1
 80081e4:	463d      	mov	r5, r7
 80081e6:	d9ed      	bls.n	80081c4 <__utoa+0x40>
 80081e8:	2200      	movs	r2, #0
 80081ea:	545a      	strb	r2, [r3, r1]
 80081ec:	1919      	adds	r1, r3, r4
 80081ee:	1aa5      	subs	r5, r4, r2
 80081f0:	42aa      	cmp	r2, r5
 80081f2:	dae2      	bge.n	80081ba <__utoa+0x36>
 80081f4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80081f8:	780e      	ldrb	r6, [r1, #0]
 80081fa:	7006      	strb	r6, [r0, #0]
 80081fc:	3201      	adds	r2, #1
 80081fe:	f801 5901 	strb.w	r5, [r1], #-1
 8008202:	e7f4      	b.n	80081ee <__utoa+0x6a>
 8008204:	08008788 	.word	0x08008788

08008208 <__malloc_lock>:
 8008208:	4801      	ldr	r0, [pc, #4]	; (8008210 <__malloc_lock+0x8>)
 800820a:	f000 b809 	b.w	8008220 <__retarget_lock_acquire_recursive>
 800820e:	bf00      	nop
 8008210:	20000440 	.word	0x20000440

08008214 <__malloc_unlock>:
 8008214:	4801      	ldr	r0, [pc, #4]	; (800821c <__malloc_unlock+0x8>)
 8008216:	f000 b804 	b.w	8008222 <__retarget_lock_release_recursive>
 800821a:	bf00      	nop
 800821c:	20000440 	.word	0x20000440

08008220 <__retarget_lock_acquire_recursive>:
 8008220:	4770      	bx	lr

08008222 <__retarget_lock_release_recursive>:
 8008222:	4770      	bx	lr

08008224 <_init>:
 8008224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008226:	bf00      	nop
 8008228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800822a:	bc08      	pop	{r3}
 800822c:	469e      	mov	lr, r3
 800822e:	4770      	bx	lr

08008230 <_fini>:
 8008230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008232:	bf00      	nop
 8008234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008236:	bc08      	pop	{r3}
 8008238:	469e      	mov	lr, r3
 800823a:	4770      	bx	lr

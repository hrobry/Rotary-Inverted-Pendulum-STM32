
KomunikacjaJavaSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c220  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a24  0800c3c0  0800c3c0  0001c3c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cde4  0800cde4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800cde4  0800cde4  0001cde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdec  0800cdec  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdec  0800cdec  0001cdec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cdf0  0800cdf0  0001cdf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800cdf4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  200001f0  0800cfe0  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  0800cfe0  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019da3  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033e2  00000000  00000000  00039fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  0003d3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e0  00000000  00000000  0003e5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019292  00000000  00000000  0003f698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019696  00000000  00000000  0005892a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000921ff  00000000  00000000  00071fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001041bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d0c  00000000  00000000  00104214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c3a8 	.word	0x0800c3a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800c3a8 	.word	0x0800c3a8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b9a4 	b.w	8000edc <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f83c 	bl	8000c18 <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2lz>:
 8000bac:	b538      	push	{r3, r4, r5, lr}
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	460d      	mov	r5, r1
 8000bb6:	f7ff ff99 	bl	8000aec <__aeabi_dcmplt>
 8000bba:	b928      	cbnz	r0, 8000bc8 <__aeabi_d2lz+0x1c>
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	4629      	mov	r1, r5
 8000bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bc4:	f000 b80a 	b.w	8000bdc <__aeabi_d2ulz>
 8000bc8:	4620      	mov	r0, r4
 8000bca:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000bce:	f000 f805 	bl	8000bdc <__aeabi_d2ulz>
 8000bd2:	4240      	negs	r0, r0
 8000bd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd8:	bd38      	pop	{r3, r4, r5, pc}
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2ulz>:
 8000bdc:	b5d0      	push	{r4, r6, r7, lr}
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <__aeabi_d2ulz+0x34>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	4606      	mov	r6, r0
 8000be4:	460f      	mov	r7, r1
 8000be6:	f7ff fd0f 	bl	8000608 <__aeabi_dmul>
 8000bea:	f7ff ffa7 	bl	8000b3c <__aeabi_d2uiz>
 8000bee:	4604      	mov	r4, r0
 8000bf0:	f7ff fc90 	bl	8000514 <__aeabi_ui2d>
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <__aeabi_d2ulz+0x38>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f7ff fd06 	bl	8000608 <__aeabi_dmul>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	460b      	mov	r3, r1
 8000c00:	4630      	mov	r0, r6
 8000c02:	4639      	mov	r1, r7
 8000c04:	f7ff fb48 	bl	8000298 <__aeabi_dsub>
 8000c08:	f7ff ff98 	bl	8000b3c <__aeabi_d2uiz>
 8000c0c:	4621      	mov	r1, r4
 8000c0e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c10:	3df00000 	.word	0x3df00000
 8000c14:	41f00000 	.word	0x41f00000

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <GFX_draw_char>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	4608      	mov	r0, r1
 8000eea:	4611      	mov	r1, r2
 8000eec:	461a      	mov	r2, r3
 8000eee:	4623      	mov	r3, r4
 8000ef0:	80fb      	strh	r3, [r7, #6]
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80bb      	strh	r3, [r7, #4]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	70fb      	strb	r3, [r7, #3]
 8000efa:	4613      	mov	r3, r2
 8000efc:	803b      	strh	r3, [r7, #0]
	int8_t i, j;
	uint8_t line;

	if((x >= WIDTH) || (y >= HEIGHT) || ((x + 6 * size_x - 1) < 0) || ((y + 8 * size_y - 1) < 0))
 8000efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f02:	2b7f      	cmp	r3, #127	; 0x7f
 8000f04:	f300 8100 	bgt.w	8001108 <GFX_draw_char+0x228>
 8000f08:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f0c:	2b3f      	cmp	r3, #63	; 0x3f
 8000f0e:	f300 80fb 	bgt.w	8001108 <GFX_draw_char+0x228>
 8000f12:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000f16:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	4413      	add	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	440b      	add	r3, r1
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f340 80ef 	ble.w	8001108 <GFX_draw_char+0x228>
 8000f2a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000f2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	4413      	add	r3, r2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f340 80e6 	ble.w	8001108 <GFX_draw_char+0x228>
	{
		return;
	}

	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	e0aa      	b.n	8001098 <GFX_draw_char+0x1b8>
	{
		line = (*(const unsigned char *)(&font[c * 5 + i]));
 8000f42:	78fa      	ldrb	r2, [r7, #3]
 8000f44:	4613      	mov	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	441a      	add	r2, r3
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a6f      	ldr	r2, [pc, #444]	; (8001110 <GFX_draw_char+0x230>)
 8000f52:	5cd3      	ldrb	r3, [r2, r3]
 8000f54:	737b      	strb	r3, [r7, #13]
		for(j = 7; j >= 0; j--, line >>= 1)
 8000f56:	2307      	movs	r3, #7
 8000f58:	73bb      	strb	r3, [r7, #14]
 8000f5a:	e092      	b.n	8001082 <GFX_draw_char+0x1a2>
		{
			if(line & 1)
 8000f5c:	7b7b      	ldrb	r3, [r7, #13]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d040      	beq.n	8000fe8 <GFX_draw_char+0x108>
			{
				if(size_x == 1 && size_y == 1)
 8000f66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d116      	bne.n	8000f9c <GFX_draw_char+0xbc>
 8000f6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d112      	bne.n	8000f9c <GFX_draw_char+0xbc>
				{
					SSD1306_draw_pixel(x + i, y + j, color);
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	4413      	add	r3, r2
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	b218      	sxth	r0, r3
 8000f84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	88bb      	ldrh	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	883a      	ldrh	r2, [r7, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	f000 f9f7 	bl	8001388 <SSD1306_draw_pixel>
 8000f9a:	e069      	b.n	8001070 <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, color);
 8000f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	fb12 f303 	smulbb	r3, r2, r3
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	b218      	sxth	r0, r3
 8000fb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	fb12 f303 	smulbb	r3, r2, r3
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	88bb      	ldrh	r3, [r7, #4]
 8000fca:	4413      	add	r3, r2
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	b219      	sxth	r1, r3
 8000fd0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000fd4:	b21a      	sxth	r2, r3
 8000fd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fda:	b21c      	sxth	r4, r3
 8000fdc:	883b      	ldrh	r3, [r7, #0]
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	4623      	mov	r3, r4
 8000fe2:	f000 f8d0 	bl	8001186 <GFX_draw_fill_rect>
 8000fe6:	e043      	b.n	8001070 <GFX_draw_char+0x190>
				}
			}
			else if(bg != color)
 8000fe8:	8c3a      	ldrh	r2, [r7, #32]
 8000fea:	883b      	ldrh	r3, [r7, #0]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d03f      	beq.n	8001070 <GFX_draw_char+0x190>
			{
				if(size_x == 1 && size_y == 1)
 8000ff0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d116      	bne.n	8001026 <GFX_draw_char+0x146>
 8000ff8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d112      	bne.n	8001026 <GFX_draw_char+0x146>
				{
					SSD1306_draw_pixel(x + i, y + j, bg);
 8001000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001004:	b29a      	uxth	r2, r3
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	4413      	add	r3, r2
 800100a:	b29b      	uxth	r3, r3
 800100c:	b218      	sxth	r0, r3
 800100e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001012:	b29a      	uxth	r2, r3
 8001014:	88bb      	ldrh	r3, [r7, #4]
 8001016:	4413      	add	r3, r2
 8001018:	b29b      	uxth	r3, r3
 800101a:	b21b      	sxth	r3, r3
 800101c:	8c3a      	ldrh	r2, [r7, #32]
 800101e:	4619      	mov	r1, r3
 8001020:	f000 f9b2 	bl	8001388 <SSD1306_draw_pixel>
 8001024:	e024      	b.n	8001070 <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8001026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102a:	b29a      	uxth	r2, r3
 800102c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001030:	b29b      	uxth	r3, r3
 8001032:	fb12 f303 	smulbb	r3, r2, r3
 8001036:	b29a      	uxth	r2, r3
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	4413      	add	r3, r2
 800103c:	b29b      	uxth	r3, r3
 800103e:	b218      	sxth	r0, r3
 8001040:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001044:	b29a      	uxth	r2, r3
 8001046:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800104a:	b29b      	uxth	r3, r3
 800104c:	fb12 f303 	smulbb	r3, r2, r3
 8001050:	b29a      	uxth	r2, r3
 8001052:	88bb      	ldrh	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	b29b      	uxth	r3, r3
 8001058:	b219      	sxth	r1, r3
 800105a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800105e:	b21a      	sxth	r2, r3
 8001060:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001064:	b21c      	sxth	r4, r3
 8001066:	8c3b      	ldrh	r3, [r7, #32]
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	4623      	mov	r3, r4
 800106c:	f000 f88b 	bl	8001186 <GFX_draw_fill_rect>
		for(j = 7; j >= 0; j--, line >>= 1)
 8001070:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	3b01      	subs	r3, #1
 8001078:	b2db      	uxtb	r3, r3
 800107a:	73bb      	strb	r3, [r7, #14]
 800107c:	7b7b      	ldrb	r3, [r7, #13]
 800107e:	085b      	lsrs	r3, r3, #1
 8001080:	737b      	strb	r3, [r7, #13]
 8001082:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001086:	2b00      	cmp	r3, #0
 8001088:	f6bf af68 	bge.w	8000f5c <GFX_draw_char+0x7c>
	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 800108c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	3301      	adds	r3, #1
 8001094:	b2db      	uxtb	r3, r3
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109c:	2b04      	cmp	r3, #4
 800109e:	f77f af50 	ble.w	8000f42 <GFX_draw_char+0x62>
				}
			}
		}
	}

	if(bg != color) // If opaque, draw vertical line for last column
 80010a2:	8c3a      	ldrh	r2, [r7, #32]
 80010a4:	883b      	ldrh	r3, [r7, #0]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d02f      	beq.n	800110a <GFX_draw_char+0x22a>
	{
		if(size_x == 1 && size_y == 1)
 80010aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d10e      	bne.n	80010d0 <GFX_draw_char+0x1f0>
 80010b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d10a      	bne.n	80010d0 <GFX_draw_char+0x1f0>
		{
			SSD1306_draw_fast_vline(x + 5, y, 8, bg);
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	3305      	adds	r3, #5
 80010be:	b29b      	uxth	r3, r3
 80010c0:	b218      	sxth	r0, r3
 80010c2:	8c3b      	ldrh	r3, [r7, #32]
 80010c4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80010c8:	2208      	movs	r2, #8
 80010ca:	f000 fb4f 	bl	800176c <SSD1306_draw_fast_vline>
 80010ce:	e01c      	b.n	800110a <GFX_draw_char+0x22a>
		}
		else
		{
			GFX_draw_fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 80010d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	0092      	lsls	r2, r2, #2
 80010da:	4413      	add	r3, r2
 80010dc:	b29a      	uxth	r2, r3
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	4413      	add	r3, r2
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	b218      	sxth	r0, r3
 80010e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	b21c      	sxth	r4, r3
 80010f8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80010fc:	8c3b      	ldrh	r3, [r7, #32]
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	4623      	mov	r3, r4
 8001102:	f000 f840 	bl	8001186 <GFX_draw_fill_rect>
 8001106:	e000      	b.n	800110a <GFX_draw_char+0x22a>
		return;
 8001108:	bf00      	nop
		}
	}
}
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	bd90      	pop	{r4, r7, pc}
 8001110:	0800c458 	.word	0x0800c458

08001114 <GFX_draw_string>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_string(int16_t x, int16_t y, unsigned char * c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 8001114:	b590      	push	{r4, r7, lr}
 8001116:	b08b      	sub	sp, #44	; 0x2c
 8001118:	af04      	add	r7, sp, #16
 800111a:	60ba      	str	r2, [r7, #8]
 800111c:	461a      	mov	r2, r3
 800111e:	4603      	mov	r3, r0
 8001120:	81fb      	strh	r3, [r7, #14]
 8001122:	460b      	mov	r3, r1
 8001124:	81bb      	strh	r3, [r7, #12]
 8001126:	4613      	mov	r3, r2
 8001128:	80fb      	strh	r3, [r7, #6]
	uint8_t offset = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	75fb      	strb	r3, [r7, #23]
	while(*c)
 800112e:	e021      	b.n	8001174 <GFX_draw_string+0x60>
	{
		GFX_draw_char(x+offset, y, *c, color, bg, size_x, size_y);
 8001130:	7dfb      	ldrb	r3, [r7, #23]
 8001132:	b29a      	uxth	r2, r3
 8001134:	89fb      	ldrh	r3, [r7, #14]
 8001136:	4413      	add	r3, r2
 8001138:	b29b      	uxth	r3, r3
 800113a:	b218      	sxth	r0, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	781a      	ldrb	r2, [r3, #0]
 8001140:	88fc      	ldrh	r4, [r7, #6]
 8001142:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001146:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800114a:	9302      	str	r3, [sp, #8]
 800114c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	4623      	mov	r3, r4
 8001158:	f7ff fec2 	bl	8000ee0 <GFX_draw_char>
		offset += (5 + 2) * size_x;
 800115c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001160:	461a      	mov	r2, r3
 8001162:	00d2      	lsls	r2, r2, #3
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	b2da      	uxtb	r2, r3
 8001168:	7dfb      	ldrb	r3, [r7, #23]
 800116a:	4413      	add	r3, r2
 800116c:	75fb      	strb	r3, [r7, #23]
		c++;
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	3301      	adds	r3, #1
 8001172:	60bb      	str	r3, [r7, #8]
	while(*c)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1d9      	bne.n	8001130 <GFX_draw_string+0x1c>
	}
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	371c      	adds	r7, #28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd90      	pop	{r4, r7, pc}

08001186 <GFX_draw_fill_rect>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void GFX_draw_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8001186:	b590      	push	{r4, r7, lr}
 8001188:	b085      	sub	sp, #20
 800118a:	af00      	add	r7, sp, #0
 800118c:	4604      	mov	r4, r0
 800118e:	4608      	mov	r0, r1
 8001190:	4611      	mov	r1, r2
 8001192:	461a      	mov	r2, r3
 8001194:	4623      	mov	r3, r4
 8001196:	80fb      	strh	r3, [r7, #6]
 8001198:	4603      	mov	r3, r0
 800119a:	80bb      	strh	r3, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	807b      	strh	r3, [r7, #2]
 80011a0:	4613      	mov	r3, r2
 80011a2:	803b      	strh	r3, [r7, #0]
	for(int16_t i = x; i < x + w; i++)
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	81fb      	strh	r3, [r7, #14]
 80011a8:	e00e      	b.n	80011c8 <GFX_draw_fill_rect+0x42>
	{
		SSD1306_draw_fast_vline(i, y, h, color);
 80011aa:	8c3b      	ldrh	r3, [r7, #32]
 80011ac:	f9b7 2000 	ldrsh.w	r2, [r7]
 80011b0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80011b4:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80011b8:	f000 fad8 	bl	800176c <SSD1306_draw_fast_vline>
	for(int16_t i = x; i < x + w; i++)
 80011bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	3301      	adds	r3, #1
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	81fb      	strh	r3, [r7, #14]
 80011c8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80011cc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80011d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011d4:	440b      	add	r3, r1
 80011d6:	429a      	cmp	r2, r3
 80011d8:	dbe7      	blt.n	80011aa <GFX_draw_fill_rect+0x24>
	}
}
 80011da:	bf00      	nop
 80011dc:	bf00      	nop
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd90      	pop	{r4, r7, pc}

080011e4 <platform_write>:

static uint8_t * buffer;
static uint8_t rotation;

static uint8_t platform_write(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af04      	add	r7, sp, #16
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
 80011f0:	4613      	mov	r3, r2
 80011f2:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len, 100);
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	2364      	movs	r3, #100	; 0x64
 80011fa:	9302      	str	r3, [sp, #8]
 80011fc:	88bb      	ldrh	r3, [r7, #4]
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2301      	movs	r3, #1
 8001206:	2178      	movs	r1, #120	; 0x78
 8001208:	4803      	ldr	r0, [pc, #12]	; (8001218 <platform_write+0x34>)
 800120a:	f003 f9c1 	bl	8004590 <HAL_I2C_Mem_Write>
	return 0;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000338 	.word	0x20000338

0800121c <platform_write_dma>:

static uint8_t platform_write_dma(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af02      	add	r7, sp, #8
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	4613      	mov	r3, r2
 800122a:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len);
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	b29a      	uxth	r2, r3
 8001230:	88bb      	ldrh	r3, [r7, #4]
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2301      	movs	r3, #1
 800123a:	2178      	movs	r1, #120	; 0x78
 800123c:	4803      	ldr	r0, [pc, #12]	; (800124c <platform_write_dma+0x30>)
 800123e:	f003 faa1 	bl	8004784 <HAL_I2C_Mem_Write_DMA>
	return 0;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000338 	.word	0x20000338

08001250 <SSD1306_send_com>:

static void SSD1306_send_com(uint8_t c)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
	platform_write(0x00, &c, 1);
 800125a:	1dfb      	adds	r3, r7, #7
 800125c:	2201      	movs	r2, #1
 800125e:	4619      	mov	r1, r3
 8001260:	2000      	movs	r0, #0
 8001262:	f7ff ffbf 	bl	80011e4 <platform_write>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <SSD1306_init>:

bool SSD1306_init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
  uint8_t comPins = 0x02, contrast = 0x8F, vccstate = SSD1306_SWITCHCAPVCC;
 8001276:	2302      	movs	r3, #2
 8001278:	71fb      	strb	r3, [r7, #7]
 800127a:	238f      	movs	r3, #143	; 0x8f
 800127c:	71bb      	strb	r3, [r7, #6]
 800127e:	2302      	movs	r3, #2
 8001280:	717b      	strb	r3, [r7, #5]

  if ((!buffer) && !(buffer = (uint8_t *)malloc(SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8))))
 8001282:	4b40      	ldr	r3, [pc, #256]	; (8001384 <SSD1306_init+0x114>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10d      	bne.n	80012a6 <SSD1306_init+0x36>
 800128a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800128e:	f008 f99f 	bl	80095d0 <malloc>
 8001292:	4603      	mov	r3, r0
 8001294:	461a      	mov	r2, r3
 8001296:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <SSD1306_init+0x114>)
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	4b3a      	ldr	r3, [pc, #232]	; (8001384 <SSD1306_init+0x114>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <SSD1306_init+0x36>
  {
    return false;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e06a      	b.n	800137c <SSD1306_init+0x10c>
  }

  SSD1306_display_clear();
 80012a6:	f000 f949 	bl	800153c <SSD1306_display_clear>

  // Init sequence
  SSD1306_send_com(SSD1306_DISPLAYOFF);
 80012aa:	20ae      	movs	r0, #174	; 0xae
 80012ac:	f7ff ffd0 	bl	8001250 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETDISPLAYCLOCKDIV);
 80012b0:	20d5      	movs	r0, #213	; 0xd5
 80012b2:	f7ff ffcd 	bl	8001250 <SSD1306_send_com>
  SSD1306_send_com(0xE0);
 80012b6:	20e0      	movs	r0, #224	; 0xe0
 80012b8:	f7ff ffca 	bl	8001250 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETMULTIPLEX);
 80012bc:	20a8      	movs	r0, #168	; 0xa8
 80012be:	f7ff ffc7 	bl	8001250 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_HEIGHT - 1);
 80012c2:	203f      	movs	r0, #63	; 0x3f
 80012c4:	f7ff ffc4 	bl	8001250 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETDISPLAYOFFSET);
 80012c8:	20d3      	movs	r0, #211	; 0xd3
 80012ca:	f7ff ffc1 	bl	8001250 <SSD1306_send_com>
  SSD1306_send_com(0x00);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff ffbe 	bl	8001250 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETSTARTLINE | 0x00);
 80012d4:	2040      	movs	r0, #64	; 0x40
 80012d6:	f7ff ffbb 	bl	8001250 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_CHARGEPUMP);
 80012da:	208d      	movs	r0, #141	; 0x8d
 80012dc:	f7ff ffb8 	bl	8001250 <SSD1306_send_com>

  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 80012e0:	797b      	ldrb	r3, [r7, #5]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d101      	bne.n	80012ea <SSD1306_init+0x7a>
 80012e6:	2310      	movs	r3, #16
 80012e8:	e000      	b.n	80012ec <SSD1306_init+0x7c>
 80012ea:	2314      	movs	r3, #20
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ffaf 	bl	8001250 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_MEMORYMODE);
 80012f2:	2020      	movs	r0, #32
 80012f4:	f7ff ffac 	bl	8001250 <SSD1306_send_com>
  SSD1306_send_com(0x00);
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff ffa9 	bl	8001250 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SEGREMAP | 0x10);
 80012fe:	20b0      	movs	r0, #176	; 0xb0
 8001300:	f7ff ffa6 	bl	8001250 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_COMSCANDEC);
 8001304:	20c8      	movs	r0, #200	; 0xc8
 8001306:	f7ff ffa3 	bl	8001250 <SSD1306_send_com>
    comPins = 0x02;
    contrast = 0x8F;
  }
  else if ((SSD1306_WIDTH == 128) && (SSD1306_HEIGHT == 64))
  {
    comPins = 0x12;
 800130a:	2312      	movs	r3, #18
 800130c:	71fb      	strb	r3, [r7, #7]
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 800130e:	797b      	ldrb	r3, [r7, #5]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <SSD1306_init+0xa8>
 8001314:	239f      	movs	r3, #159	; 0x9f
 8001316:	e000      	b.n	800131a <SSD1306_init+0xaa>
 8001318:	23cf      	movs	r3, #207	; 0xcf
 800131a:	71bb      	strb	r3, [r7, #6]
  {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  }

  SSD1306_send_com(SSD1306_SETCOMPINS);
 800131c:	20da      	movs	r0, #218	; 0xda
 800131e:	f7ff ff97 	bl	8001250 <SSD1306_send_com>
  SSD1306_send_com(comPins);
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff93 	bl	8001250 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETCONTRAST);
 800132a:	2081      	movs	r0, #129	; 0x81
 800132c:	f7ff ff90 	bl	8001250 <SSD1306_send_com>
  SSD1306_send_com(contrast);
 8001330:	79bb      	ldrb	r3, [r7, #6]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ff8c 	bl	8001250 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETPRECHARGE);
 8001338:	20d9      	movs	r0, #217	; 0xd9
 800133a:	f7ff ff89 	bl	8001250 <SSD1306_send_com>
  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 800133e:	797b      	ldrb	r3, [r7, #5]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d101      	bne.n	8001348 <SSD1306_init+0xd8>
 8001344:	2322      	movs	r3, #34	; 0x22
 8001346:	e000      	b.n	800134a <SSD1306_init+0xda>
 8001348:	23f1      	movs	r3, #241	; 0xf1
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff80 	bl	8001250 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETVCOMDETECT);
 8001350:	20db      	movs	r0, #219	; 0xdb
 8001352:	f7ff ff7d 	bl	8001250 <SSD1306_send_com>
  SSD1306_send_com(0x40);
 8001356:	2040      	movs	r0, #64	; 0x40
 8001358:	f7ff ff7a 	bl	8001250 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYALLON_RESUME);
 800135c:	20a4      	movs	r0, #164	; 0xa4
 800135e:	f7ff ff77 	bl	8001250 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_NORMALDISPLAY);
 8001362:	20a6      	movs	r0, #166	; 0xa6
 8001364:	f7ff ff74 	bl	8001250 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DEACTIVATE_SCROLL);
 8001368:	202e      	movs	r0, #46	; 0x2e
 800136a:	f7ff ff71 	bl	8001250 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYON);
 800136e:	20af      	movs	r0, #175	; 0xaf
 8001370:	f7ff ff6e 	bl	8001250 <SSD1306_send_com>

  SSD1306_set_rotation(SSD1306_HORIZONTAL_MODE2);
 8001374:	2002      	movs	r0, #2
 8001376:	f000 fb91 	bl	8001a9c <SSD1306_set_rotation>
  return true;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	2000020c 	.word	0x2000020c

08001388 <SSD1306_draw_pixel>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_pixel(int16_t x, int16_t y, uint16_t color)
{
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	80fb      	strh	r3, [r7, #6]
 8001392:	460b      	mov	r3, r1
 8001394:	80bb      	strh	r3, [r7, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	807b      	strh	r3, [r7, #2]
	if ((x >= 0) && (x < SSD1306_WIDTH) && (y >= 0) && (y < SSD1306_HEIGHT))
 800139a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f2c0 80c4 	blt.w	800152c <SSD1306_draw_pixel+0x1a4>
 80013a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a8:	2b7f      	cmp	r3, #127	; 0x7f
 80013aa:	f300 80bf 	bgt.w	800152c <SSD1306_draw_pixel+0x1a4>
 80013ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f2c0 80ba 	blt.w	800152c <SSD1306_draw_pixel+0x1a4>
 80013b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013bc:	2b3f      	cmp	r3, #63	; 0x3f
 80013be:	f300 80b5 	bgt.w	800152c <SSD1306_draw_pixel+0x1a4>
	{
		/* Pixel is in-bounds. Rotate coordinates if needed. */
		switch (SSD1306_get_rotation())
 80013c2:	f000 fb7b 	bl	8001abc <SSD1306_get_rotation>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d023      	beq.n	8001414 <SSD1306_draw_pixel+0x8c>
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	dc33      	bgt.n	8001438 <SSD1306_draw_pixel+0xb0>
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d002      	beq.n	80013da <SSD1306_draw_pixel+0x52>
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d012      	beq.n	80013fe <SSD1306_draw_pixel+0x76>
 80013d8:	e02e      	b.n	8001438 <SSD1306_draw_pixel+0xb0>
		{
			case 1:
				ssd1306_swap(x, y);
 80013da:	88fa      	ldrh	r2, [r7, #6]
 80013dc:	88bb      	ldrh	r3, [r7, #4]
 80013de:	4053      	eors	r3, r2
 80013e0:	80fb      	strh	r3, [r7, #6]
 80013e2:	88ba      	ldrh	r2, [r7, #4]
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	4053      	eors	r3, r2
 80013e8:	80bb      	strh	r3, [r7, #4]
 80013ea:	88fa      	ldrh	r2, [r7, #6]
 80013ec:	88bb      	ldrh	r3, [r7, #4]
 80013ee:	4053      	eors	r3, r2
 80013f0:	80fb      	strh	r3, [r7, #6]
				x = SSD1306_WIDTH - x - 1;
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	80fb      	strh	r3, [r7, #6]
				break;
 80013fc:	e01c      	b.n	8001438 <SSD1306_draw_pixel+0xb0>
			case 2:
				x = SSD1306_WIDTH - x - 1;
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001404:	b29b      	uxth	r3, r3
 8001406:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 8001408:	88bb      	ldrh	r3, [r7, #4]
 800140a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800140e:	b29b      	uxth	r3, r3
 8001410:	80bb      	strh	r3, [r7, #4]
				break;
 8001412:	e011      	b.n	8001438 <SSD1306_draw_pixel+0xb0>
			case 3:
				ssd1306_swap(x, y);
 8001414:	88fa      	ldrh	r2, [r7, #6]
 8001416:	88bb      	ldrh	r3, [r7, #4]
 8001418:	4053      	eors	r3, r2
 800141a:	80fb      	strh	r3, [r7, #6]
 800141c:	88ba      	ldrh	r2, [r7, #4]
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	4053      	eors	r3, r2
 8001422:	80bb      	strh	r3, [r7, #4]
 8001424:	88fa      	ldrh	r2, [r7, #6]
 8001426:	88bb      	ldrh	r3, [r7, #4]
 8001428:	4053      	eors	r3, r2
 800142a:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 800142c:	88bb      	ldrh	r3, [r7, #4]
 800142e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001432:	b29b      	uxth	r3, r3
 8001434:	80bb      	strh	r3, [r7, #4]
				break;
 8001436:	bf00      	nop
		}

		switch (color)
 8001438:	887b      	ldrh	r3, [r7, #2]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d051      	beq.n	80014e2 <SSD1306_draw_pixel+0x15a>
 800143e:	2b02      	cmp	r3, #2
 8001440:	dc75      	bgt.n	800152e <SSD1306_draw_pixel+0x1a6>
 8001442:	2b00      	cmp	r3, #0
 8001444:	d026      	beq.n	8001494 <SSD1306_draw_pixel+0x10c>
 8001446:	2b01      	cmp	r3, #1
 8001448:	d171      	bne.n	800152e <SSD1306_draw_pixel+0x1a6>
		{
			case SSD1306_WHITE:
				buffer[x + (y / 8) * SSD1306_WIDTH] |= (1 << (y & 7));
 800144a:	4b3b      	ldr	r3, [pc, #236]	; (8001538 <SSD1306_draw_pixel+0x1b0>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001452:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	da00      	bge.n	800145c <SSD1306_draw_pixel+0xd4>
 800145a:	3307      	adds	r3, #7
 800145c:	10db      	asrs	r3, r3, #3
 800145e:	b218      	sxth	r0, r3
 8001460:	4603      	mov	r3, r0
 8001462:	01db      	lsls	r3, r3, #7
 8001464:	440b      	add	r3, r1
 8001466:	4413      	add	r3, r2
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b25a      	sxtb	r2, r3
 800146c:	88bb      	ldrh	r3, [r7, #4]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	2101      	movs	r1, #1
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	b25b      	sxtb	r3, r3
 800147a:	4313      	orrs	r3, r2
 800147c:	b25c      	sxtb	r4, r3
 800147e:	4b2e      	ldr	r3, [pc, #184]	; (8001538 <SSD1306_draw_pixel+0x1b0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001486:	4602      	mov	r2, r0
 8001488:	01d2      	lsls	r2, r2, #7
 800148a:	440a      	add	r2, r1
 800148c:	4413      	add	r3, r2
 800148e:	b2e2      	uxtb	r2, r4
 8001490:	701a      	strb	r2, [r3, #0]
				break;
 8001492:	e04c      	b.n	800152e <SSD1306_draw_pixel+0x1a6>
			case SSD1306_BLACK:
				buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y & 7));
 8001494:	4b28      	ldr	r3, [pc, #160]	; (8001538 <SSD1306_draw_pixel+0x1b0>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800149c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	da00      	bge.n	80014a6 <SSD1306_draw_pixel+0x11e>
 80014a4:	3307      	adds	r3, #7
 80014a6:	10db      	asrs	r3, r3, #3
 80014a8:	b218      	sxth	r0, r3
 80014aa:	4603      	mov	r3, r0
 80014ac:	01db      	lsls	r3, r3, #7
 80014ae:	440b      	add	r3, r1
 80014b0:	4413      	add	r3, r2
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b25a      	sxtb	r2, r3
 80014b6:	88bb      	ldrh	r3, [r7, #4]
 80014b8:	f003 0307 	and.w	r3, r3, #7
 80014bc:	2101      	movs	r1, #1
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	b25b      	sxtb	r3, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	b25b      	sxtb	r3, r3
 80014c8:	4013      	ands	r3, r2
 80014ca:	b25c      	sxtb	r4, r3
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <SSD1306_draw_pixel+0x1b0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80014d4:	4602      	mov	r2, r0
 80014d6:	01d2      	lsls	r2, r2, #7
 80014d8:	440a      	add	r2, r1
 80014da:	4413      	add	r3, r2
 80014dc:	b2e2      	uxtb	r2, r4
 80014de:	701a      	strb	r2, [r3, #0]
				break;
 80014e0:	e025      	b.n	800152e <SSD1306_draw_pixel+0x1a6>
			case SSD1306_INVERSE:
				buffer[x + (y / 8) * SSD1306_WIDTH] ^= (1 << (y & 7));
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <SSD1306_draw_pixel+0x1b0>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80014ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	da00      	bge.n	80014f4 <SSD1306_draw_pixel+0x16c>
 80014f2:	3307      	adds	r3, #7
 80014f4:	10db      	asrs	r3, r3, #3
 80014f6:	b218      	sxth	r0, r3
 80014f8:	4603      	mov	r3, r0
 80014fa:	01db      	lsls	r3, r3, #7
 80014fc:	440b      	add	r3, r1
 80014fe:	4413      	add	r3, r2
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	b25a      	sxtb	r2, r3
 8001504:	88bb      	ldrh	r3, [r7, #4]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	2101      	movs	r1, #1
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	b25b      	sxtb	r3, r3
 8001512:	4053      	eors	r3, r2
 8001514:	b25c      	sxtb	r4, r3
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <SSD1306_draw_pixel+0x1b0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800151e:	4602      	mov	r2, r0
 8001520:	01d2      	lsls	r2, r2, #7
 8001522:	440a      	add	r2, r1
 8001524:	4413      	add	r3, r2
 8001526:	b2e2      	uxtb	r2, r4
 8001528:	701a      	strb	r2, [r3, #0]
				break;
 800152a:	e000      	b.n	800152e <SSD1306_draw_pixel+0x1a6>
		}
	}
 800152c:	bf00      	nop
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}
 8001536:	bf00      	nop
 8001538:	2000020c 	.word	0x2000020c

0800153c <SSD1306_display_clear>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_display_clear(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	memset(buffer, 0, SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8));
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <SSD1306_display_clear+0x18>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f008 f856 	bl	80095fc <memset>
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	2000020c 	.word	0x2000020c

08001558 <SSD1306_draw_fast_hline>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_fast_hline(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	4604      	mov	r4, r0
 8001560:	4608      	mov	r0, r1
 8001562:	4611      	mov	r1, r2
 8001564:	461a      	mov	r2, r3
 8001566:	4623      	mov	r3, r4
 8001568:	80fb      	strh	r3, [r7, #6]
 800156a:	4603      	mov	r3, r0
 800156c:	80bb      	strh	r3, [r7, #4]
 800156e:	460b      	mov	r3, r1
 8001570:	807b      	strh	r3, [r7, #2]
 8001572:	4613      	mov	r3, r2
 8001574:	803b      	strh	r3, [r7, #0]
	bool bSwap = false;
 8001576:	2300      	movs	r3, #0
 8001578:	73fb      	strb	r3, [r7, #15]

	switch (SSD1306_get_rotation())
 800157a:	f000 fa9f 	bl	8001abc <SSD1306_get_rotation>
 800157e:	4603      	mov	r3, r0
 8001580:	2b03      	cmp	r3, #3
 8001582:	d02c      	beq.n	80015de <SSD1306_draw_fast_hline+0x86>
 8001584:	2b03      	cmp	r3, #3
 8001586:	dc45      	bgt.n	8001614 <SSD1306_draw_fast_hline+0xbc>
 8001588:	2b01      	cmp	r3, #1
 800158a:	d002      	beq.n	8001592 <SSD1306_draw_fast_hline+0x3a>
 800158c:	2b02      	cmp	r3, #2
 800158e:	d014      	beq.n	80015ba <SSD1306_draw_fast_hline+0x62>
 8001590:	e040      	b.n	8001614 <SSD1306_draw_fast_hline+0xbc>
	{
		case 1:
			// 90 degree rotation, swap x & y for rotation, then invert x
			bSwap = true;
 8001592:	2301      	movs	r3, #1
 8001594:	73fb      	strb	r3, [r7, #15]
			ssd1306_swap(x, y);
 8001596:	88fa      	ldrh	r2, [r7, #6]
 8001598:	88bb      	ldrh	r3, [r7, #4]
 800159a:	4053      	eors	r3, r2
 800159c:	80fb      	strh	r3, [r7, #6]
 800159e:	88ba      	ldrh	r2, [r7, #4]
 80015a0:	88fb      	ldrh	r3, [r7, #6]
 80015a2:	4053      	eors	r3, r2
 80015a4:	80bb      	strh	r3, [r7, #4]
 80015a6:	88fa      	ldrh	r2, [r7, #6]
 80015a8:	88bb      	ldrh	r3, [r7, #4]
 80015aa:	4053      	eors	r3, r2
 80015ac:	80fb      	strh	r3, [r7, #6]
			x = SSD1306_WIDTH - x - 1;
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	80fb      	strh	r3, [r7, #6]
			break;
 80015b8:	e02c      	b.n	8001614 <SSD1306_draw_fast_hline+0xbc>
		case 2:
			// 180 degree rotation, invert x and y, then shift y around for height.
			x = SSD1306_WIDTH - x - 1;
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	80fb      	strh	r3, [r7, #6]
			y = SSD1306_HEIGHT - y - 1;
 80015c4:	88bb      	ldrh	r3, [r7, #4]
 80015c6:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	80bb      	strh	r3, [r7, #4]
			x -= (w - 1);
 80015ce:	88fa      	ldrh	r2, [r7, #6]
 80015d0:	887b      	ldrh	r3, [r7, #2]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	3301      	adds	r3, #1
 80015d8:	b29b      	uxth	r3, r3
 80015da:	80fb      	strh	r3, [r7, #6]
			break;
 80015dc:	e01a      	b.n	8001614 <SSD1306_draw_fast_hline+0xbc>
		case 3:
			// 270 degree rotation, swap x & y for rotation,
			// then invert y and adjust y for w (not to become h)
			bSwap = true;
 80015de:	2301      	movs	r3, #1
 80015e0:	73fb      	strb	r3, [r7, #15]
			ssd1306_swap(x, y);
 80015e2:	88fa      	ldrh	r2, [r7, #6]
 80015e4:	88bb      	ldrh	r3, [r7, #4]
 80015e6:	4053      	eors	r3, r2
 80015e8:	80fb      	strh	r3, [r7, #6]
 80015ea:	88ba      	ldrh	r2, [r7, #4]
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	4053      	eors	r3, r2
 80015f0:	80bb      	strh	r3, [r7, #4]
 80015f2:	88fa      	ldrh	r2, [r7, #6]
 80015f4:	88bb      	ldrh	r3, [r7, #4]
 80015f6:	4053      	eors	r3, r2
 80015f8:	80fb      	strh	r3, [r7, #6]
			y = SSD1306_HEIGHT - y - 1;
 80015fa:	88bb      	ldrh	r3, [r7, #4]
 80015fc:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001600:	b29b      	uxth	r3, r3
 8001602:	80bb      	strh	r3, [r7, #4]
			y -= (w - 1);
 8001604:	88ba      	ldrh	r2, [r7, #4]
 8001606:	887b      	ldrh	r3, [r7, #2]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	b29b      	uxth	r3, r3
 800160c:	3301      	adds	r3, #1
 800160e:	b29b      	uxth	r3, r3
 8001610:	80bb      	strh	r3, [r7, #4]
			break;
 8001612:	bf00      	nop
	}

	if (bSwap)
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d009      	beq.n	800162e <SSD1306_draw_fast_hline+0xd6>
	{
		SSD1306_draw_fast_vline_internal(x, y, w, color);
 800161a:	883b      	ldrh	r3, [r7, #0]
 800161c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001620:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001624:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001628:	f000 f918 	bl	800185c <SSD1306_draw_fast_vline_internal>
	}
	else
	{
		SSD1306_draw_fast_hline_internal(x, y, w, color);
	}
}
 800162c:	e008      	b.n	8001640 <SSD1306_draw_fast_hline+0xe8>
		SSD1306_draw_fast_hline_internal(x, y, w, color);
 800162e:	883b      	ldrh	r3, [r7, #0]
 8001630:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001634:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001638:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800163c:	f000 f804 	bl	8001648 <SSD1306_draw_fast_hline_internal>
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	bd90      	pop	{r4, r7, pc}

08001648 <SSD1306_draw_fast_hline_internal>:

void SSD1306_draw_fast_hline_internal(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8001648:	b490      	push	{r4, r7}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	4604      	mov	r4, r0
 8001650:	4608      	mov	r0, r1
 8001652:	4611      	mov	r1, r2
 8001654:	461a      	mov	r2, r3
 8001656:	4623      	mov	r3, r4
 8001658:	80fb      	strh	r3, [r7, #6]
 800165a:	4603      	mov	r3, r0
 800165c:	80bb      	strh	r3, [r7, #4]
 800165e:	460b      	mov	r3, r1
 8001660:	807b      	strh	r3, [r7, #2]
 8001662:	4613      	mov	r3, r2
 8001664:	803b      	strh	r3, [r7, #0]
	if ((y >= 0) && (y < SSD1306_HEIGHT))
 8001666:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	db75      	blt.n	800175a <SSD1306_draw_fast_hline_internal+0x112>
 800166e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001672:	2b3f      	cmp	r3, #63	; 0x3f
 8001674:	dc71      	bgt.n	800175a <SSD1306_draw_fast_hline_internal+0x112>
	{
		// Y coord in bounds?
		if (x < 0)
 8001676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800167a:	2b00      	cmp	r3, #0
 800167c:	da06      	bge.n	800168c <SSD1306_draw_fast_hline_internal+0x44>
		{
			// Clip left
			w += x;
 800167e:	887a      	ldrh	r2, [r7, #2]
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	4413      	add	r3, r2
 8001684:	b29b      	uxth	r3, r3
 8001686:	807b      	strh	r3, [r7, #2]
			x = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	80fb      	strh	r3, [r7, #6]
		}
		if ((x + w) > SSD1306_WIDTH)
 800168c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001690:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001694:	4413      	add	r3, r2
 8001696:	2b80      	cmp	r3, #128	; 0x80
 8001698:	dd04      	ble.n	80016a4 <SSD1306_draw_fast_hline_internal+0x5c>
		{
			// Clip right
			w = (SSD1306_WIDTH - x);
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	807b      	strh	r3, [r7, #2]
		}
		if (w > 0)
 80016a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	dd56      	ble.n	800175a <SSD1306_draw_fast_hline_internal+0x112>
		{
			// Proceed only if width is positive
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x], mask = 1 << (y & 7);
 80016ac:	4b2e      	ldr	r3, [pc, #184]	; (8001768 <SSD1306_draw_fast_hline_internal+0x120>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	da00      	bge.n	80016ba <SSD1306_draw_fast_hline_internal+0x72>
 80016b8:	3307      	adds	r3, #7
 80016ba:	10db      	asrs	r3, r3, #3
 80016bc:	b21b      	sxth	r3, r3
 80016be:	01d9      	lsls	r1, r3, #7
 80016c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c4:	440b      	add	r3, r1
 80016c6:	4413      	add	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	88bb      	ldrh	r3, [r7, #4]
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	2201      	movs	r2, #1
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	72fb      	strb	r3, [r7, #11]
			switch (color)
 80016d8:	883b      	ldrh	r3, [r7, #0]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d034      	beq.n	8001748 <SSD1306_draw_fast_hline_internal+0x100>
 80016de:	2b02      	cmp	r3, #2
 80016e0:	dc3c      	bgt.n	800175c <SSD1306_draw_fast_hline_internal+0x114>
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d013      	beq.n	800170e <SSD1306_draw_fast_hline_internal+0xc6>
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d138      	bne.n	800175c <SSD1306_draw_fast_hline_internal+0x114>
			{
				case SSD1306_WHITE:
					while (w--)
 80016ea:	e007      	b.n	80016fc <SSD1306_draw_fast_hline_internal+0xb4>
					{
						*pBuf++ |= mask;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	60fa      	str	r2, [r7, #12]
 80016f2:	7819      	ldrb	r1, [r3, #0]
 80016f4:	7afa      	ldrb	r2, [r7, #11]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	701a      	strb	r2, [r3, #0]
					while (w--)
 80016fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001700:	b29a      	uxth	r2, r3
 8001702:	3a01      	subs	r2, #1
 8001704:	b292      	uxth	r2, r2
 8001706:	807a      	strh	r2, [r7, #2]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1ef      	bne.n	80016ec <SSD1306_draw_fast_hline_internal+0xa4>
					};
					break;
 800170c:	e026      	b.n	800175c <SSD1306_draw_fast_hline_internal+0x114>
				case SSD1306_BLACK:
					mask = ~mask;
 800170e:	7afb      	ldrb	r3, [r7, #11]
 8001710:	43db      	mvns	r3, r3
 8001712:	72fb      	strb	r3, [r7, #11]
					while (w--)
 8001714:	e007      	b.n	8001726 <SSD1306_draw_fast_hline_internal+0xde>
					{
						*pBuf++ &= mask;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	1c5a      	adds	r2, r3, #1
 800171a:	60fa      	str	r2, [r7, #12]
 800171c:	7819      	ldrb	r1, [r3, #0]
 800171e:	7afa      	ldrb	r2, [r7, #11]
 8001720:	400a      	ands	r2, r1
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	701a      	strb	r2, [r3, #0]
					while (w--)
 8001726:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800172a:	b29a      	uxth	r2, r3
 800172c:	3a01      	subs	r2, #1
 800172e:	b292      	uxth	r2, r2
 8001730:	807a      	strh	r2, [r7, #2]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1ef      	bne.n	8001716 <SSD1306_draw_fast_hline_internal+0xce>
					};
					break;
 8001736:	e011      	b.n	800175c <SSD1306_draw_fast_hline_internal+0x114>
				case SSD1306_INVERSE:
					while (w--)
					{
						*pBuf++ ^= mask;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	60fa      	str	r2, [r7, #12]
 800173e:	7819      	ldrb	r1, [r3, #0]
 8001740:	7afa      	ldrb	r2, [r7, #11]
 8001742:	404a      	eors	r2, r1
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	701a      	strb	r2, [r3, #0]
					while (w--)
 8001748:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800174c:	b29a      	uxth	r2, r3
 800174e:	3a01      	subs	r2, #1
 8001750:	b292      	uxth	r2, r2
 8001752:	807a      	strh	r2, [r7, #2]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1ef      	bne.n	8001738 <SSD1306_draw_fast_hline_internal+0xf0>
					};
					break;
 8001758:	e000      	b.n	800175c <SSD1306_draw_fast_hline_internal+0x114>
			}
		}
 800175a:	bf00      	nop
	}
}
 800175c:	bf00      	nop
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bc90      	pop	{r4, r7}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	2000020c 	.word	0x2000020c

0800176c <SSD1306_draw_fast_vline>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_fast_vline(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	4604      	mov	r4, r0
 8001774:	4608      	mov	r0, r1
 8001776:	4611      	mov	r1, r2
 8001778:	461a      	mov	r2, r3
 800177a:	4623      	mov	r3, r4
 800177c:	80fb      	strh	r3, [r7, #6]
 800177e:	4603      	mov	r3, r0
 8001780:	80bb      	strh	r3, [r7, #4]
 8001782:	460b      	mov	r3, r1
 8001784:	807b      	strh	r3, [r7, #2]
 8001786:	4613      	mov	r3, r2
 8001788:	803b      	strh	r3, [r7, #0]
	bool bSwap = false;
 800178a:	2300      	movs	r3, #0
 800178c:	73fb      	strb	r3, [r7, #15]
	switch (SSD1306_get_rotation())
 800178e:	f000 f995 	bl	8001abc <SSD1306_get_rotation>
 8001792:	4603      	mov	r3, r0
 8001794:	2b03      	cmp	r3, #3
 8001796:	d033      	beq.n	8001800 <SSD1306_draw_fast_vline+0x94>
 8001798:	2b03      	cmp	r3, #3
 800179a:	dc45      	bgt.n	8001828 <SSD1306_draw_fast_vline+0xbc>
 800179c:	2b01      	cmp	r3, #1
 800179e:	d002      	beq.n	80017a6 <SSD1306_draw_fast_vline+0x3a>
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d01b      	beq.n	80017dc <SSD1306_draw_fast_vline+0x70>
 80017a4:	e040      	b.n	8001828 <SSD1306_draw_fast_vline+0xbc>
	{
		case 1:
			// 90 degree rotation, swap x & y for rotation,
			// then invert x and adjust x for h (now to become w)
			bSwap = true;
 80017a6:	2301      	movs	r3, #1
 80017a8:	73fb      	strb	r3, [r7, #15]
  			ssd1306_swap(x, y);
 80017aa:	88fa      	ldrh	r2, [r7, #6]
 80017ac:	88bb      	ldrh	r3, [r7, #4]
 80017ae:	4053      	eors	r3, r2
 80017b0:	80fb      	strh	r3, [r7, #6]
 80017b2:	88ba      	ldrh	r2, [r7, #4]
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	4053      	eors	r3, r2
 80017b8:	80bb      	strh	r3, [r7, #4]
 80017ba:	88fa      	ldrh	r2, [r7, #6]
 80017bc:	88bb      	ldrh	r3, [r7, #4]
 80017be:	4053      	eors	r3, r2
 80017c0:	80fb      	strh	r3, [r7, #6]
  			x = SSD1306_WIDTH - x - 1;
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	80fb      	strh	r3, [r7, #6]
  			x -= (h - 1);
 80017cc:	88fa      	ldrh	r2, [r7, #6]
 80017ce:	887b      	ldrh	r3, [r7, #2]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	3301      	adds	r3, #1
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	80fb      	strh	r3, [r7, #6]
  			break;
 80017da:	e025      	b.n	8001828 <SSD1306_draw_fast_vline+0xbc>
  	    case 2:
  	    	// 180 degree rotation, invert x and y, then shift y around for height.
  	    	x = SSD1306_WIDTH - x - 1;
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 80017e6:	88bb      	ldrh	r3, [r7, #4]
 80017e8:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	80bb      	strh	r3, [r7, #4]
  	    	y -= (h - 1);
 80017f0:	88ba      	ldrh	r2, [r7, #4]
 80017f2:	887b      	ldrh	r3, [r7, #2]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	3301      	adds	r3, #1
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	80bb      	strh	r3, [r7, #4]
  	    	break;
 80017fe:	e013      	b.n	8001828 <SSD1306_draw_fast_vline+0xbc>
  	    case 3:
  	    	// 270 degree rotation, swap x & y for rotation, then invert y
  	    	bSwap = true;
 8001800:	2301      	movs	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
  	    	ssd1306_swap(x, y);
 8001804:	88fa      	ldrh	r2, [r7, #6]
 8001806:	88bb      	ldrh	r3, [r7, #4]
 8001808:	4053      	eors	r3, r2
 800180a:	80fb      	strh	r3, [r7, #6]
 800180c:	88ba      	ldrh	r2, [r7, #4]
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	4053      	eors	r3, r2
 8001812:	80bb      	strh	r3, [r7, #4]
 8001814:	88fa      	ldrh	r2, [r7, #6]
 8001816:	88bb      	ldrh	r3, [r7, #4]
 8001818:	4053      	eors	r3, r2
 800181a:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 800181c:	88bb      	ldrh	r3, [r7, #4]
 800181e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001822:	b29b      	uxth	r3, r3
 8001824:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8001826:	bf00      	nop
	}

	if (bSwap)
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d009      	beq.n	8001842 <SSD1306_draw_fast_vline+0xd6>
	{
		SSD1306_draw_fast_hline_internal(x, y, h, color);
 800182e:	883b      	ldrh	r3, [r7, #0]
 8001830:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001834:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001838:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800183c:	f7ff ff04 	bl	8001648 <SSD1306_draw_fast_hline_internal>
	}
	else
	{
		SSD1306_draw_fast_vline_internal(x, y, h, color);
	}
}
 8001840:	e008      	b.n	8001854 <SSD1306_draw_fast_vline+0xe8>
		SSD1306_draw_fast_vline_internal(x, y, h, color);
 8001842:	883b      	ldrh	r3, [r7, #0]
 8001844:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001848:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800184c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001850:	f000 f804 	bl	800185c <SSD1306_draw_fast_vline_internal>
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	bd90      	pop	{r4, r7, pc}

0800185c <SSD1306_draw_fast_vline_internal>:

void SSD1306_draw_fast_vline_internal(int16_t x, int16_t __y, int16_t __h, uint16_t color)
{
 800185c:	b490      	push	{r4, r7}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	4604      	mov	r4, r0
 8001864:	4608      	mov	r0, r1
 8001866:	4611      	mov	r1, r2
 8001868:	461a      	mov	r2, r3
 800186a:	4623      	mov	r3, r4
 800186c:	80fb      	strh	r3, [r7, #6]
 800186e:	4603      	mov	r3, r0
 8001870:	80bb      	strh	r3, [r7, #4]
 8001872:	460b      	mov	r3, r1
 8001874:	807b      	strh	r3, [r7, #2]
 8001876:	4613      	mov	r3, r2
 8001878:	803b      	strh	r3, [r7, #0]
	if ((x >= 0) && (x < SSD1306_WIDTH))
 800187a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800187e:	2b00      	cmp	r3, #0
 8001880:	f2c0 80da 	blt.w	8001a38 <SSD1306_draw_fast_vline_internal+0x1dc>
 8001884:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001888:	2b7f      	cmp	r3, #127	; 0x7f
 800188a:	f300 80d5 	bgt.w	8001a38 <SSD1306_draw_fast_vline_internal+0x1dc>
	{
		// X coord in bounds?
		if (__y < 0)
 800188e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	da06      	bge.n	80018a4 <SSD1306_draw_fast_vline_internal+0x48>
		{
			// Clip top
			__h += __y;
 8001896:	887a      	ldrh	r2, [r7, #2]
 8001898:	88bb      	ldrh	r3, [r7, #4]
 800189a:	4413      	add	r3, r2
 800189c:	b29b      	uxth	r3, r3
 800189e:	807b      	strh	r3, [r7, #2]
			__y = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	80bb      	strh	r3, [r7, #4]
		}
		if ((__y + __h) > SSD1306_HEIGHT)
 80018a4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80018a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018ac:	4413      	add	r3, r2
 80018ae:	2b40      	cmp	r3, #64	; 0x40
 80018b0:	dd04      	ble.n	80018bc <SSD1306_draw_fast_vline_internal+0x60>
		{
			// Clip bottom
			__h = (SSD1306_HEIGHT - __y);
 80018b2:	88bb      	ldrh	r3, [r7, #4]
 80018b4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	807b      	strh	r3, [r7, #2]
		}
		if (__h > 0)
 80018bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f340 80b9 	ble.w	8001a38 <SSD1306_draw_fast_vline_internal+0x1dc>
		{
			// Proceed only if height is now positive
			// this display doesn't need ints for coordinates,
			// use local byte registers for faster juggling
			uint8_t y = __y, h = __h;
 80018c6:	88bb      	ldrh	r3, [r7, #4]
 80018c8:	737b      	strb	r3, [r7, #13]
 80018ca:	887b      	ldrh	r3, [r7, #2]
 80018cc:	75fb      	strb	r3, [r7, #23]
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x];
 80018ce:	4b5d      	ldr	r3, [pc, #372]	; (8001a44 <SSD1306_draw_fast_vline_internal+0x1e8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	7b7a      	ldrb	r2, [r7, #13]
 80018d4:	08d2      	lsrs	r2, r2, #3
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	01d1      	lsls	r1, r2, #7
 80018da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018de:	440a      	add	r2, r1
 80018e0:	4413      	add	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]

			// do the first partial byte, if necessary - this requires some masking
			uint8_t mod = (y & 7);
 80018e4:	7b7b      	ldrb	r3, [r7, #13]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	73fb      	strb	r3, [r7, #15]
			if (mod)
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d040      	beq.n	8001974 <SSD1306_draw_fast_vline_internal+0x118>
			{
				// mask off the high n bits we want to set
				mod = 8 - mod;
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	f1c3 0308 	rsb	r3, r3, #8
 80018f8:	73fb      	strb	r3, [r7, #15]
				// note - lookup table results in a nearly 10% performance
				// improvement in fill* functions
				// uint8_t mask = ~(0xFF >> mod);
				static const uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE};
				uint8_t mask = (*(const unsigned char *)(&premask[mod]));
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	4a52      	ldr	r2, [pc, #328]	; (8001a48 <SSD1306_draw_fast_vline_internal+0x1ec>)
 80018fe:	5cd3      	ldrb	r3, [r2, r3]
 8001900:	73bb      	strb	r3, [r7, #14]
				// adjust the mask if we're not going to reach the end of this byte
				if (h < mod)
 8001902:	7dfa      	ldrb	r2, [r7, #23]
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	429a      	cmp	r2, r3
 8001908:	d20b      	bcs.n	8001922 <SSD1306_draw_fast_vline_internal+0xc6>
				{
					mask &= (0XFF >> (mod - h));
 800190a:	7bfa      	ldrb	r2, [r7, #15]
 800190c:	7dfb      	ldrb	r3, [r7, #23]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	22ff      	movs	r2, #255	; 0xff
 8001912:	fa42 f303 	asr.w	r3, r2, r3
 8001916:	b25a      	sxtb	r2, r3
 8001918:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800191c:	4013      	ands	r3, r2
 800191e:	b25b      	sxtb	r3, r3
 8001920:	73bb      	strb	r3, [r7, #14]
				}

				switch (color)
 8001922:	883b      	ldrh	r3, [r7, #0]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d01a      	beq.n	800195e <SSD1306_draw_fast_vline_internal+0x102>
 8001928:	2b02      	cmp	r3, #2
 800192a:	dc20      	bgt.n	800196e <SSD1306_draw_fast_vline_internal+0x112>
 800192c:	2b00      	cmp	r3, #0
 800192e:	d009      	beq.n	8001944 <SSD1306_draw_fast_vline_internal+0xe8>
 8001930:	2b01      	cmp	r3, #1
 8001932:	d11c      	bne.n	800196e <SSD1306_draw_fast_vline_internal+0x112>
				{
					case SSD1306_WHITE:
						*pBuf |= mask;
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	781a      	ldrb	r2, [r3, #0]
 8001938:	7bbb      	ldrb	r3, [r7, #14]
 800193a:	4313      	orrs	r3, r2
 800193c:	b2da      	uxtb	r2, r3
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	701a      	strb	r2, [r3, #0]
						break;
 8001942:	e014      	b.n	800196e <SSD1306_draw_fast_vline_internal+0x112>
					case SSD1306_BLACK:
						*pBuf &= ~mask;
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	b25a      	sxtb	r2, r3
 800194a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800194e:	43db      	mvns	r3, r3
 8001950:	b25b      	sxtb	r3, r3
 8001952:	4013      	ands	r3, r2
 8001954:	b25b      	sxtb	r3, r3
 8001956:	b2da      	uxtb	r2, r3
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	701a      	strb	r2, [r3, #0]
						break;
 800195c:	e007      	b.n	800196e <SSD1306_draw_fast_vline_internal+0x112>
					case SSD1306_INVERSE:
						*pBuf ^= mask;
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	781a      	ldrb	r2, [r3, #0]
 8001962:	7bbb      	ldrb	r3, [r7, #14]
 8001964:	4053      	eors	r3, r2
 8001966:	b2da      	uxtb	r2, r3
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	701a      	strb	r2, [r3, #0]
						break;
 800196c:	bf00      	nop
				}
				pBuf += SSD1306_WIDTH;
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	3380      	adds	r3, #128	; 0x80
 8001972:	613b      	str	r3, [r7, #16]
			}

			if (h >= mod)
 8001974:	7dfa      	ldrb	r2, [r7, #23]
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	429a      	cmp	r2, r3
 800197a:	d35d      	bcc.n	8001a38 <SSD1306_draw_fast_vline_internal+0x1dc>
			{
				// More to go?
				h -= mod;
 800197c:	7dfa      	ldrb	r2, [r7, #23]
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	75fb      	strb	r3, [r7, #23]
				// Write solid bytes while we can - effectively 8 rows at a time
				if (h >= 8)
 8001984:	7dfb      	ldrb	r3, [r7, #23]
 8001986:	2b07      	cmp	r3, #7
 8001988:	d925      	bls.n	80019d6 <SSD1306_draw_fast_vline_internal+0x17a>
				{
					if (color == SSD1306_INVERSE)
 800198a:	883b      	ldrh	r3, [r7, #0]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d10f      	bne.n	80019b0 <SSD1306_draw_fast_vline_internal+0x154>
					{
						// separate copy of the code so we don't impact performance of
						// black/white write version with an extra comparison per loop
						do
						{
							*pBuf ^= 0xFF; // Invert byte
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	43db      	mvns	r3, r3
 8001996:	b2da      	uxtb	r2, r3
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	3380      	adds	r3, #128	; 0x80
 80019a0:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 80019a2:	7dfb      	ldrb	r3, [r7, #23]
 80019a4:	3b08      	subs	r3, #8
 80019a6:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 80019a8:	7dfb      	ldrb	r3, [r7, #23]
 80019aa:	2b07      	cmp	r3, #7
 80019ac:	d8f0      	bhi.n	8001990 <SSD1306_draw_fast_vline_internal+0x134>
 80019ae:	e012      	b.n	80019d6 <SSD1306_draw_fast_vline_internal+0x17a>
					}
					else
					{
						// store a local value to work with
						uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
 80019b0:	883b      	ldrh	r3, [r7, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <SSD1306_draw_fast_vline_internal+0x15e>
 80019b6:	23ff      	movs	r3, #255	; 0xff
 80019b8:	e000      	b.n	80019bc <SSD1306_draw_fast_vline_internal+0x160>
 80019ba:	2300      	movs	r3, #0
 80019bc:	733b      	strb	r3, [r7, #12]
						do
						{
							*pBuf = val;   // Set byte
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	7b3a      	ldrb	r2, [r7, #12]
 80019c2:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	3380      	adds	r3, #128	; 0x80
 80019c8:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 80019ca:	7dfb      	ldrb	r3, [r7, #23]
 80019cc:	3b08      	subs	r3, #8
 80019ce:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
 80019d2:	2b07      	cmp	r3, #7
 80019d4:	d8f3      	bhi.n	80019be <SSD1306_draw_fast_vline_internal+0x162>
					}
				}

				if (h)
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d02d      	beq.n	8001a38 <SSD1306_draw_fast_vline_internal+0x1dc>
				{
					// Do the final partial byte, if necessary
					mod = h & 7;
 80019dc:	7dfb      	ldrb	r3, [r7, #23]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	73fb      	strb	r3, [r7, #15]
					// uint8_t mask = (1 << mod) - 1;
					// note - lookup table results in a nearly 10% performance
					// improvement in fill* functions
					static const uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
					uint8_t mask = (*(const unsigned char *)(&postmask[mod]));
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	4a19      	ldr	r2, [pc, #100]	; (8001a4c <SSD1306_draw_fast_vline_internal+0x1f0>)
 80019e8:	5cd3      	ldrb	r3, [r2, r3]
 80019ea:	72fb      	strb	r3, [r7, #11]
					switch (color)
 80019ec:	883b      	ldrh	r3, [r7, #0]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d01a      	beq.n	8001a28 <SSD1306_draw_fast_vline_internal+0x1cc>
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	dc21      	bgt.n	8001a3a <SSD1306_draw_fast_vline_internal+0x1de>
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d009      	beq.n	8001a0e <SSD1306_draw_fast_vline_internal+0x1b2>
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d11d      	bne.n	8001a3a <SSD1306_draw_fast_vline_internal+0x1de>
					{
						case SSD1306_WHITE:
							*pBuf |= mask;
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	781a      	ldrb	r2, [r3, #0]
 8001a02:	7afb      	ldrb	r3, [r7, #11]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	701a      	strb	r2, [r3, #0]
							break;
 8001a0c:	e015      	b.n	8001a3a <SSD1306_draw_fast_vline_internal+0x1de>
						case SSD1306_BLACK:
							*pBuf &= ~mask;
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	b25a      	sxtb	r2, r3
 8001a14:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	b25b      	sxtb	r3, r3
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	701a      	strb	r2, [r3, #0]
							break;
 8001a26:	e008      	b.n	8001a3a <SSD1306_draw_fast_vline_internal+0x1de>
						case SSD1306_INVERSE:
							*pBuf ^= mask;
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	781a      	ldrb	r2, [r3, #0]
 8001a2c:	7afb      	ldrb	r3, [r7, #11]
 8001a2e:	4053      	eors	r3, r2
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	701a      	strb	r2, [r3, #0]
							break;
 8001a36:	e000      	b.n	8001a3a <SSD1306_draw_fast_vline_internal+0x1de>
					}
				}
 8001a38:	bf00      	nop
			}
		} // endif positive height
	}   // endif x in bounds
}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc90      	pop	{r4, r7}
 8001a42:	4770      	bx	lr
 8001a44:	2000020c 	.word	0x2000020c
 8001a48:	0800c958 	.word	0x0800c958
 8001a4c:	0800c960 	.word	0x0800c960

08001a50 <SSD1306_display_repaint>:
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void SSD1306_display_repaint(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
	uint16_t buf_len = SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8);
 8001a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a5a:	80fb      	strh	r3, [r7, #6]

	SSD1306_send_com(SSD1306_PAGEADDR);
 8001a5c:	2022      	movs	r0, #34	; 0x22
 8001a5e:	f7ff fbf7 	bl	8001250 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 8001a62:	2000      	movs	r0, #0
 8001a64:	f7ff fbf4 	bl	8001250 <SSD1306_send_com>
	SSD1306_send_com(0xFF);
 8001a68:	20ff      	movs	r0, #255	; 0xff
 8001a6a:	f7ff fbf1 	bl	8001250 <SSD1306_send_com>
	SSD1306_send_com(SSD1306_COLUMNADDR);
 8001a6e:	2021      	movs	r0, #33	; 0x21
 8001a70:	f7ff fbee 	bl	8001250 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 8001a74:	2000      	movs	r0, #0
 8001a76:	f7ff fbeb 	bl	8001250 <SSD1306_send_com>

	SSD1306_send_com(SSD1306_WIDTH - 1); // Column end address
 8001a7a:	207f      	movs	r0, #127	; 0x7f
 8001a7c:	f7ff fbe8 	bl	8001250 <SSD1306_send_com>

	platform_write_dma(SSD1306_SETSTARTLINE, buffer, buf_len);
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <SSD1306_display_repaint+0x48>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	88fa      	ldrh	r2, [r7, #6]
 8001a86:	4619      	mov	r1, r3
 8001a88:	2040      	movs	r0, #64	; 0x40
 8001a8a:	f7ff fbc7 	bl	800121c <platform_write_dma>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	2000020c 	.word	0x2000020c

08001a9c <SSD1306_set_rotation>:
    SSD1306_send_com(SSD1306_SETCONTRAST);
    SSD1306_send_com(contrast);
}

void SSD1306_set_rotation(uint8_t rot)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
	rotation = rot;
 8001aa6:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <SSD1306_set_rotation+0x1c>)
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	7013      	strb	r3, [r2, #0]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	20000210 	.word	0x20000210

08001abc <SSD1306_get_rotation>:

uint8_t SSD1306_get_rotation(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
	return rotation;
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <SSD1306_get_rotation+0x14>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000210 	.word	0x20000210

08001ad4 <sending>:

};



void  sending(uint32_t torque){ // sending informarion to PC about encoder UP position and Torque
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

		                        char itoaBuffer[6];
				            	char F[]={"F"};
 8001adc:	2346      	movs	r3, #70	; 0x46
 8001ade:	823b      	strh	r3, [r7, #16]
				            	char P[]={"P"};
 8001ae0:	2350      	movs	r3, #80	; 0x50
 8001ae2:	81bb      	strh	r3, [r7, #12]
				            	char L[]={"L"};
 8001ae4:	234c      	movs	r3, #76	; 0x4c
 8001ae6:	813b      	strh	r3, [r7, #8]
				            	send_string(F);
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 fef3 	bl	80028d8 <send_string>
				            	int encoderCounterUp3 = htim3.Instance->CNT;
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <sending+0x74>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	61fb      	str	r3, [r7, #28]
				            	itoa(encoderCounterUp3,itoaBuffer,10);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	220a      	movs	r2, #10
 8001b00:	4619      	mov	r1, r3
 8001b02:	69f8      	ldr	r0, [r7, #28]
 8001b04:	f007 fd62 	bl	80095cc <itoa>
				                send_string(itoaBuffer);
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 fee3 	bl	80028d8 <send_string>

				                send_string(P);
 8001b12:	f107 030c 	add.w	r3, r7, #12
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 fede 	bl	80028d8 <send_string>
				                itoa(torque,itoaBuffer,10);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f107 0114 	add.w	r1, r7, #20
 8001b22:	220a      	movs	r2, #10
 8001b24:	4618      	mov	r0, r3
 8001b26:	f007 fd51 	bl	80095cc <itoa>
				                send_string(itoaBuffer);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 fed2 	bl	80028d8 <send_string>
				                send_string(L);
 8001b34:	f107 0308 	add.w	r3, r7, #8
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f000 fecd 	bl	80028d8 <send_string>
}
 8001b3e:	bf00      	nop
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200004c8 	.word	0x200004c8

08001b4c <firstScreenOled>:

void firstScreenOled() // frames of first stage
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08e      	sub	sp, #56	; 0x38
 8001b50:	af04      	add	r7, sp, #16

	unsigned char  EncDownMessage[] = {"ENC DN : "};
 8001b52:	4a39      	ldr	r2, [pc, #228]	; (8001c38 <firstScreenOled+0xec>)
 8001b54:	f107 031c 	add.w	r3, r7, #28
 8001b58:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b5a:	c303      	stmia	r3!, {r0, r1}
 8001b5c:	801a      	strh	r2, [r3, #0]
	unsigned char  EncUpMessage[] = {"ENC UP : "};
 8001b5e:	4a37      	ldr	r2, [pc, #220]	; (8001c3c <firstScreenOled+0xf0>)
 8001b60:	f107 0310 	add.w	r3, r7, #16
 8001b64:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b66:	c303      	stmia	r3!, {r0, r1}
 8001b68:	801a      	strh	r2, [r3, #0]
	unsigned char  PWMMessage[] = {"PWM : "};
 8001b6a:	4a35      	ldr	r2, [pc, #212]	; (8001c40 <firstScreenOled+0xf4>)
 8001b6c:	f107 0308 	add.w	r3, r7, #8
 8001b70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b74:	6018      	str	r0, [r3, #0]
 8001b76:	3304      	adds	r3, #4
 8001b78:	8019      	strh	r1, [r3, #0]
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	0c0a      	lsrs	r2, r1, #16
 8001b7e:	701a      	strb	r2, [r3, #0]
	unsigned char  MODEMessage[] = {"MODE: "};
 8001b80:	4a30      	ldr	r2, [pc, #192]	; (8001c44 <firstScreenOled+0xf8>)
 8001b82:	463b      	mov	r3, r7
 8001b84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b88:	6018      	str	r0, [r3, #0]
 8001b8a:	3304      	adds	r3, #4
 8001b8c:	8019      	strh	r1, [r3, #0]
 8001b8e:	3302      	adds	r3, #2
 8001b90:	0c0a      	lsrs	r2, r1, #16
 8001b92:	701a      	strb	r2, [r3, #0]


		      SSD1306_draw_fast_hline(0,43,200,WHITE);
 8001b94:	2301      	movs	r3, #1
 8001b96:	22c8      	movs	r2, #200	; 0xc8
 8001b98:	212b      	movs	r1, #43	; 0x2b
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f7ff fcdc 	bl	8001558 <SSD1306_draw_fast_hline>
		      GFX_draw_string(0, 33, EncUpMessage , WHITE,BLACK, 1, 1);
 8001ba0:	f107 0210 	add.w	r2, r7, #16
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	9302      	str	r3, [sp, #8]
 8001ba8:	2301      	movs	r3, #1
 8001baa:	9301      	str	r3, [sp, #4]
 8001bac:	2300      	movs	r3, #0
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	2121      	movs	r1, #33	; 0x21
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f7ff faad 	bl	8001114 <GFX_draw_string>

		      SSD1306_draw_fast_hline(0,32,200,WHITE);
 8001bba:	2301      	movs	r3, #1
 8001bbc:	22c8      	movs	r2, #200	; 0xc8
 8001bbe:	2120      	movs	r1, #32
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f7ff fcc9 	bl	8001558 <SSD1306_draw_fast_hline>
		      GFX_draw_string(0, 22, EncDownMessage, WHITE,BLACK, 1, 1);
 8001bc6:	f107 021c 	add.w	r2, r7, #28
 8001bca:	2301      	movs	r3, #1
 8001bcc:	9302      	str	r3, [sp, #8]
 8001bce:	2301      	movs	r3, #1
 8001bd0:	9301      	str	r3, [sp, #4]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	2116      	movs	r1, #22
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f7ff fa9a 	bl	8001114 <GFX_draw_string>

		      SSD1306_draw_fast_hline(0,21,200,WHITE);
 8001be0:	2301      	movs	r3, #1
 8001be2:	22c8      	movs	r2, #200	; 0xc8
 8001be4:	2115      	movs	r1, #21
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7ff fcb6 	bl	8001558 <SSD1306_draw_fast_hline>
		      GFX_draw_string(0, 11,PWMMessage , WHITE,BLACK, 1, 1);
 8001bec:	f107 0208 	add.w	r2, r7, #8
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	9302      	str	r3, [sp, #8]
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	210b      	movs	r1, #11
 8001c00:	2000      	movs	r0, #0
 8001c02:	f7ff fa87 	bl	8001114 <GFX_draw_string>

		      SSD1306_draw_fast_hline(0,10,200,WHITE);
 8001c06:	2301      	movs	r3, #1
 8001c08:	22c8      	movs	r2, #200	; 0xc8
 8001c0a:	210a      	movs	r1, #10
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f7ff fca3 	bl	8001558 <SSD1306_draw_fast_hline>
		      GFX_draw_string(0, 0, MODEMessage, WHITE,BLACK, 1, 1);
 8001c12:	463a      	mov	r2, r7
 8001c14:	2301      	movs	r3, #1
 8001c16:	9302      	str	r3, [sp, #8]
 8001c18:	2301      	movs	r3, #1
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	2301      	movs	r3, #1
 8001c22:	2100      	movs	r1, #0
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff fa75 	bl	8001114 <GFX_draw_string>

			  SSD1306_display_repaint();
 8001c2a:	f7ff ff11 	bl	8001a50 <SSD1306_display_repaint>
}
 8001c2e:	bf00      	nop
 8001c30:	3728      	adds	r7, #40	; 0x28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	0800c3c0 	.word	0x0800c3c0
 8001c3c:	0800c3cc 	.word	0x0800c3cc
 8001c40:	0800c3d8 	.word	0x0800c3d8
 8001c44:	0800c3e0 	.word	0x0800c3e0

08001c48 <encoderUpstageControl>:



void encoderUpstageControl() // info about upper encoder
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08c      	sub	sp, #48	; 0x30
 8001c4c:	af04      	add	r7, sp, #16

	 int encoderCounterUp;
	 encoderCounterUp = htim3.Instance->CNT;
 8001c4e:	4b26      	ldr	r3, [pc, #152]	; (8001ce8 <encoderUpstageControl+0xa0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	61fb      	str	r3, [r7, #28]
	 char itoaBuffer[20];
	 unsigned char  blank[] = {"    "};
 8001c56:	4a25      	ldr	r2, [pc, #148]	; (8001cec <encoderUpstageControl+0xa4>)
 8001c58:	463b      	mov	r3, r7
 8001c5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c5e:	6018      	str	r0, [r3, #0]
 8001c60:	3304      	adds	r3, #4
 8001c62:	7019      	strb	r1, [r3, #0]

	 if (encoderCounterUp >=1000)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c6a:	db16      	blt.n	8001c9a <encoderUpstageControl+0x52>
			     		      {
			     		    	  itoa(encoderCounterUp,itoaBuffer,10);
 8001c6c:	f107 0308 	add.w	r3, r7, #8
 8001c70:	220a      	movs	r2, #10
 8001c72:	4619      	mov	r1, r3
 8001c74:	69f8      	ldr	r0, [r7, #28]
 8001c76:	f007 fca9 	bl	80095cc <itoa>
			     		    	  GFX_draw_string(60, 33, ( unsigned char*)itoaBuffer, WHITE,BLACK, 1, 1);
 8001c7a:	f107 0208 	add.w	r2, r7, #8
 8001c7e:	2301      	movs	r3, #1
 8001c80:	9302      	str	r3, [sp, #8]
 8001c82:	2301      	movs	r3, #1
 8001c84:	9301      	str	r3, [sp, #4]
 8001c86:	2300      	movs	r3, #0
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	2121      	movs	r1, #33	; 0x21
 8001c8e:	203c      	movs	r0, #60	; 0x3c
 8001c90:	f7ff fa40 	bl	8001114 <GFX_draw_string>
			     		    	  SSD1306_display_repaint();
 8001c94:	f7ff fedc 	bl	8001a50 <SSD1306_display_repaint>
			     		    	   GFX_draw_string(60, 33,( unsigned char*)blank, WHITE,BLACK, 1, 1);
			     		    	   itoa(encoderCounterUp,itoaBuffer,10);
			     		    	   GFX_draw_string(60, 33, ( unsigned char*)itoaBuffer, WHITE,BLACK, 1, 1);
			     		    	   SSD1306_display_repaint();
			     		      }
}
 8001c98:	e021      	b.n	8001cde <encoderUpstageControl+0x96>
			     		    	   GFX_draw_string(60, 33,( unsigned char*)blank, WHITE,BLACK, 1, 1);
 8001c9a:	463a      	mov	r2, r7
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	9302      	str	r3, [sp, #8]
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	2301      	movs	r3, #1
 8001caa:	2121      	movs	r1, #33	; 0x21
 8001cac:	203c      	movs	r0, #60	; 0x3c
 8001cae:	f7ff fa31 	bl	8001114 <GFX_draw_string>
			     		    	   itoa(encoderCounterUp,itoaBuffer,10);
 8001cb2:	f107 0308 	add.w	r3, r7, #8
 8001cb6:	220a      	movs	r2, #10
 8001cb8:	4619      	mov	r1, r3
 8001cba:	69f8      	ldr	r0, [r7, #28]
 8001cbc:	f007 fc86 	bl	80095cc <itoa>
			     		    	   GFX_draw_string(60, 33, ( unsigned char*)itoaBuffer, WHITE,BLACK, 1, 1);
 8001cc0:	f107 0208 	add.w	r2, r7, #8
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	9302      	str	r3, [sp, #8]
 8001cc8:	2301      	movs	r3, #1
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	2300      	movs	r3, #0
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	2121      	movs	r1, #33	; 0x21
 8001cd4:	203c      	movs	r0, #60	; 0x3c
 8001cd6:	f7ff fa1d 	bl	8001114 <GFX_draw_string>
			     		    	   SSD1306_display_repaint();
 8001cda:	f7ff feb9 	bl	8001a50 <SSD1306_display_repaint>
}
 8001cde:	bf00      	nop
 8001ce0:	3720      	adds	r7, #32
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200004c8 	.word	0x200004c8
 8001cec:	0800c3e8 	.word	0x0800c3e8

08001cf0 <encoderDownstageControl>:


}

void encoderDownstageControl() // info about counting down encoder
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08c      	sub	sp, #48	; 0x30
 8001cf4:	af04      	add	r7, sp, #16

	int encoderCounterDown;
	encoderCounterDown = htim4.Instance->CNT;
 8001cf6:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <encoderDownstageControl+0x9c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	61fb      	str	r3, [r7, #28]
    unsigned char  blank[] = {"    "};
 8001cfe:	4a24      	ldr	r2, [pc, #144]	; (8001d90 <encoderDownstageControl+0xa0>)
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d08:	6018      	str	r0, [r3, #0]
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	7019      	strb	r1, [r3, #0]
	char itoaBuffer[20];
	   if (encoderCounterDown >=1000)
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d14:	db14      	blt.n	8001d40 <encoderDownstageControl+0x50>
	 	 {
	 		    	  itoa(encoderCounterDown,itoaBuffer,10);
 8001d16:	463b      	mov	r3, r7
 8001d18:	220a      	movs	r2, #10
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	69f8      	ldr	r0, [r7, #28]
 8001d1e:	f007 fc55 	bl	80095cc <itoa>
	 		    	  GFX_draw_string(60, 22, ( unsigned char*)itoaBuffer, WHITE,BLACK, 1, 1);
 8001d22:	463a      	mov	r2, r7
 8001d24:	2301      	movs	r3, #1
 8001d26:	9302      	str	r3, [sp, #8]
 8001d28:	2301      	movs	r3, #1
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	2301      	movs	r3, #1
 8001d32:	2116      	movs	r1, #22
 8001d34:	203c      	movs	r0, #60	; 0x3c
 8001d36:	f7ff f9ed 	bl	8001114 <GFX_draw_string>
	 		    	  SSD1306_display_repaint();
 8001d3a:	f7ff fe89 	bl	8001a50 <SSD1306_display_repaint>
	 		  		  SSD1306_display_repaint();
	 	  }



	}
 8001d3e:	e020      	b.n	8001d82 <encoderDownstageControl+0x92>
	 		  		  GFX_draw_string(60, 22,( unsigned char*)blank, WHITE,BLACK, 1, 1);
 8001d40:	f107 0214 	add.w	r2, r7, #20
 8001d44:	2301      	movs	r3, #1
 8001d46:	9302      	str	r3, [sp, #8]
 8001d48:	2301      	movs	r3, #1
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2301      	movs	r3, #1
 8001d52:	2116      	movs	r1, #22
 8001d54:	203c      	movs	r0, #60	; 0x3c
 8001d56:	f7ff f9dd 	bl	8001114 <GFX_draw_string>
	 		  		  itoa(encoderCounterDown,itoaBuffer,10);
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	220a      	movs	r2, #10
 8001d5e:	4619      	mov	r1, r3
 8001d60:	69f8      	ldr	r0, [r7, #28]
 8001d62:	f007 fc33 	bl	80095cc <itoa>
	 		  		  GFX_draw_string(60, 22, ( unsigned char*)itoaBuffer, WHITE,BLACK, 1, 1);
 8001d66:	463a      	mov	r2, r7
 8001d68:	2301      	movs	r3, #1
 8001d6a:	9302      	str	r3, [sp, #8]
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	9301      	str	r3, [sp, #4]
 8001d70:	2300      	movs	r3, #0
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	2301      	movs	r3, #1
 8001d76:	2116      	movs	r1, #22
 8001d78:	203c      	movs	r0, #60	; 0x3c
 8001d7a:	f7ff f9cb 	bl	8001114 <GFX_draw_string>
	 		  		  SSD1306_display_repaint();
 8001d7e:	f7ff fe67 	bl	8001a50 <SSD1306_display_repaint>
	}
 8001d82:	bf00      	nop
 8001d84:	3720      	adds	r7, #32
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000480 	.word	0x20000480
 8001d90:	0800c3e8 	.word	0x0800c3e8

08001d94 <oledFirstStageControl>:



volatile void oledFirstStageControl(volatile uint8_t *sendFrame) // info about frame from PC
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08c      	sub	sp, #48	; 0x30
 8001d98:	af04      	add	r7, sp, #16
 8001d9a:	6078      	str	r0, [r7, #4]


	    volatile uint8_t frame[13];

	    for (int i =0;i<13;i++)
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61fb      	str	r3, [r7, #28]
 8001da0:	e00d      	b.n	8001dbe <oledFirstStageControl+0x2a>
	      {

	          frame[i]=sendFrame[i];
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	4413      	add	r3, r2
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	b2d9      	uxtb	r1, r3
 8001dac:	f107 0208 	add.w	r2, r7, #8
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	4413      	add	r3, r2
 8001db4:	460a      	mov	r2, r1
 8001db6:	701a      	strb	r2, [r3, #0]
	    for (int i =0;i<13;i++)
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	2b0c      	cmp	r3, #12
 8001dc2:	ddee      	ble.n	8001da2 <oledFirstStageControl+0xe>
	      }


	    unsigned char* OledString;
	    OledString =( unsigned char*)frame;
 8001dc4:	f107 0308 	add.w	r3, r7, #8
 8001dc8:	61bb      	str	r3, [r7, #24]
        GFX_draw_string(25, 25, OledString, WHITE,BLACK, 0, 0);
 8001dca:	2300      	movs	r3, #0
 8001dcc:	9302      	str	r3, [sp, #8]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	9301      	str	r3, [sp, #4]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	2119      	movs	r1, #25
 8001ddc:	2019      	movs	r0, #25
 8001dde:	f7ff f999 	bl	8001114 <GFX_draw_string>
		GFX_draw_string(0, 45, OledString, WHITE,BLACK, 1, 1);
 8001de2:	2301      	movs	r3, #1
 8001de4:	9302      	str	r3, [sp, #8]
 8001de6:	2301      	movs	r3, #1
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	2300      	movs	r3, #0
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	2301      	movs	r3, #1
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	212d      	movs	r1, #45	; 0x2d
 8001df4:	2000      	movs	r0, #0
 8001df6:	f7ff f98d 	bl	8001114 <GFX_draw_string>
		SSD1306_display_repaint();
 8001dfa:	f7ff fe29 	bl	8001a50 <SSD1306_display_repaint>



}
 8001dfe:	bf00      	nop
 8001e00:	3720      	adds	r7, #32
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <startOled>:
	 char itoaBuffer[20];
	 itoa(PWM,itoaBuffer,10);
	 GFX_draw_string(32, 11, ( unsigned char*)itoaBuffer, WHITE,BLACK, 1, 1);
	 SSD1306_display_repaint();
}
void startOled(){ // info about start mode
 8001e08:	b5b0      	push	{r4, r5, r7, lr}
 8001e0a:	b08a      	sub	sp, #40	; 0x28
 8001e0c:	af04      	add	r7, sp, #16
	unsigned char messageStart[] = { "MODE: START       "};
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <startOled+0x40>)
 8001e10:	1d3c      	adds	r4, r7, #4
 8001e12:	461d      	mov	r5, r3
 8001e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e18:	682b      	ldr	r3, [r5, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	8022      	strh	r2, [r4, #0]
 8001e1e:	3402      	adds	r4, #2
 8001e20:	0c1b      	lsrs	r3, r3, #16
 8001e22:	7023      	strb	r3, [r4, #0]
	GFX_draw_string(0, 0,messageStart, WHITE,BLACK, 1, 1);
 8001e24:	1d3a      	adds	r2, r7, #4
 8001e26:	2301      	movs	r3, #1
 8001e28:	9302      	str	r3, [sp, #8]
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	9301      	str	r3, [sp, #4]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	2301      	movs	r3, #1
 8001e34:	2100      	movs	r1, #0
 8001e36:	2000      	movs	r0, #0
 8001e38:	f7ff f96c 	bl	8001114 <GFX_draw_string>
	SSD1306_display_repaint();
 8001e3c:	f7ff fe08 	bl	8001a50 <SSD1306_display_repaint>
}
 8001e40:	bf00      	nop
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bdb0      	pop	{r4, r5, r7, pc}
 8001e48:	0800c3fc 	.word	0x0800c3fc

08001e4c <stopOled>:


void stopOled(){ // info about stop mode
 8001e4c:	b5b0      	push	{r4, r5, r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af04      	add	r7, sp, #16
	unsigned char  stopMessage[] = {"MODE: STOP        "};
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <stopOled+0x40>)
 8001e54:	1d3c      	adds	r4, r7, #4
 8001e56:	461d      	mov	r5, r3
 8001e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e5c:	682b      	ldr	r3, [r5, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	8022      	strh	r2, [r4, #0]
 8001e62:	3402      	adds	r4, #2
 8001e64:	0c1b      	lsrs	r3, r3, #16
 8001e66:	7023      	strb	r3, [r4, #0]
	GFX_draw_string(0, 0, stopMessage, WHITE,BLACK, 1, 1);
 8001e68:	1d3a      	adds	r2, r7, #4
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	9302      	str	r3, [sp, #8]
 8001e6e:	2301      	movs	r3, #1
 8001e70:	9301      	str	r3, [sp, #4]
 8001e72:	2300      	movs	r3, #0
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	2301      	movs	r3, #1
 8001e78:	2100      	movs	r1, #0
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7ff f94a 	bl	8001114 <GFX_draw_string>
	SSD1306_display_repaint();
 8001e80:	f7ff fde6 	bl	8001a50 <SSD1306_display_repaint>
}
 8001e84:	bf00      	nop
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e8c:	0800c410 	.word	0x0800c410

08001e90 <manualLeftOled>:


void manualLeftOled(){ // info about left move
 8001e90:	b5b0      	push	{r4, r5, r7, lr}
 8001e92:	b08a      	sub	sp, #40	; 0x28
 8001e94:	af04      	add	r7, sp, #16


	unsigned char messageManualLeft[] = { "MODE: MANUAL LEFT      "};
 8001e96:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <manualLeftOled+0x3c>)
 8001e98:	463c      	mov	r4, r7
 8001e9a:	461d      	mov	r5, r3
 8001e9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ea0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ea4:	e884 0003 	stmia.w	r4, {r0, r1}
    GFX_draw_string(0, 0, messageManualLeft, WHITE,BLACK, 1, 1);
 8001ea8:	463a      	mov	r2, r7
 8001eaa:	2301      	movs	r3, #1
 8001eac:	9302      	str	r3, [sp, #8]
 8001eae:	2301      	movs	r3, #1
 8001eb0:	9301      	str	r3, [sp, #4]
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	2100      	movs	r1, #0
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f7ff f92a 	bl	8001114 <GFX_draw_string>
	SSD1306_display_repaint();
 8001ec0:	f7ff fdc6 	bl	8001a50 <SSD1306_display_repaint>
		      }
 8001ec4:	bf00      	nop
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bdb0      	pop	{r4, r5, r7, pc}
 8001ecc:	0800c424 	.word	0x0800c424

08001ed0 <manualrightOled>:

void manualrightOled(){ // info about right move
 8001ed0:	b5b0      	push	{r4, r5, r7, lr}
 8001ed2:	b08c      	sub	sp, #48	; 0x30
 8001ed4:	af04      	add	r7, sp, #16

	unsigned char messageManualRight[] = { "MODE: MANUAL RIGHT      "};
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <manualrightOled+0x3c>)
 8001ed8:	1d3c      	adds	r4, r7, #4
 8001eda:	461d      	mov	r5, r3
 8001edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ee0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ee4:	c403      	stmia	r4!, {r0, r1}
 8001ee6:	7022      	strb	r2, [r4, #0]
	GFX_draw_string(0, 0, messageManualRight, WHITE,BLACK, 1, 1);
 8001ee8:	1d3a      	adds	r2, r7, #4
 8001eea:	2301      	movs	r3, #1
 8001eec:	9302      	str	r3, [sp, #8]
 8001eee:	2301      	movs	r3, #1
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	2100      	movs	r1, #0
 8001efa:	2000      	movs	r0, #0
 8001efc:	f7ff f90a 	bl	8001114 <GFX_draw_string>
	SSD1306_display_repaint();
 8001f00:	f7ff fda6 	bl	8001a50 <SSD1306_display_repaint>
		  		      }
 8001f04:	bf00      	nop
 8001f06:	3720      	adds	r7, #32
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f0c:	0800c43c 	.word	0x0800c43c

08001f10 <initWork>:
void initWork()// information on GPIO led about initialization
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
	int i=0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	607b      	str	r3, [r7, #4]
	do{

		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8001f1a:	2120      	movs	r1, #32
 8001f1c:	4808      	ldr	r0, [pc, #32]	; (8001f40 <initWork+0x30>)
 8001f1e:	f002 f9d8 	bl	80042d2 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8001f22:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f26:	f001 fae5 	bl	80034f4 <HAL_Delay>
		i++;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	607b      	str	r3, [r7, #4]
	}while(i<10);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b09      	cmp	r3, #9
 8001f34:	ddf1      	ble.n	8001f1a <initWork+0xa>


}
 8001f36:	bf00      	nop
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40020000 	.word	0x40020000

08001f44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	607b      	str	r3, [r7, #4]
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <MX_DMA_Init+0x4c>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a0f      	ldr	r2, [pc, #60]	; (8001f90 <MX_DMA_Init+0x4c>)
 8001f54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <MX_DMA_Init+0x4c>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f62:	607b      	str	r3, [r7, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2010      	movs	r0, #16
 8001f6c:	f001 fbc1 	bl	80036f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001f70:	2010      	movs	r0, #16
 8001f72:	f001 fbda 	bl	800372a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2100      	movs	r1, #0
 8001f7a:	202f      	movs	r0, #47	; 0x2f
 8001f7c:	f001 fbb9 	bl	80036f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001f80:	202f      	movs	r0, #47	; 0x2f
 8001f82:	f001 fbd2 	bl	800372a <HAL_NVIC_EnableIRQ>

}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800

08001f94 <calculatePID>:
}



 uint32_t calculatePID( int input, int setpoint ,struct pidStruct pidValues ) //engineControl calculate PWM value from pid
{
 8001f94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f98:	b088      	sub	sp, #32
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	61f8      	str	r0, [r7, #28]
 8001f9e:	61b9      	str	r1, [r7, #24]
 8001fa0:	eeb0 5a40 	vmov.f32	s10, s0
 8001fa4:	eef0 5a60 	vmov.f32	s11, s1
 8001fa8:	eeb0 6a41 	vmov.f32	s12, s2
 8001fac:	eef0 6a61 	vmov.f32	s13, s3
 8001fb0:	eeb0 7a42 	vmov.f32	s14, s4
 8001fb4:	eef0 7a62 	vmov.f32	s15, s5
 8001fb8:	ed87 5b00 	vstr	d5, [r7]
 8001fbc:	ed87 6b02 	vstr	d6, [r7, #8]
 8001fc0:	ed87 7b04 	vstr	d7, [r7, #16]

    	_pre_error=0;
 8001fc4:	497b      	ldr	r1, [pc, #492]	; (80021b4 <calculatePID+0x220>)
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	e9c1 2300 	strd	r2, r3, [r1]
	    now = HAL_GetTick (); // get current time in microseconds
 8001fd2:	f001 fa83 	bl	80034dc <HAL_GetTick>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	4a77      	ldr	r2, [pc, #476]	; (80021b8 <calculatePID+0x224>)
 8001fda:	6013      	str	r3, [r2, #0]
		timechange = (now - lasttime);
 8001fdc:	4b76      	ldr	r3, [pc, #472]	; (80021b8 <calculatePID+0x224>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b76      	ldr	r3, [pc, #472]	; (80021bc <calculatePID+0x228>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	4a76      	ldr	r2, [pc, #472]	; (80021c0 <calculatePID+0x22c>)
 8001fe8:	6013      	str	r3, [r2, #0]
		if(timechange >=setTime)
 8001fea:	4b75      	ldr	r3, [pc, #468]	; (80021c0 <calculatePID+0x22c>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	4b75      	ldr	r3, [pc, #468]	; (80021c4 <calculatePID+0x230>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	f0c0 80d6 	bcc.w	80021a4 <calculatePID+0x210>
		{
			     error = setpoint - input;
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fa98 	bl	8000534 <__aeabi_i2d>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	496f      	ldr	r1, [pc, #444]	; (80021c8 <calculatePID+0x234>)
 800200a:	e9c1 2300 	strd	r2, r3, [r1]
			     Pout = pidValues.doubleP * error; // proportional part calculate
 800200e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002012:	4b6d      	ldr	r3, [pc, #436]	; (80021c8 <calculatePID+0x234>)
 8002014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002018:	f7fe faf6 	bl	8000608 <__aeabi_dmul>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	496a      	ldr	r1, [pc, #424]	; (80021cc <calculatePID+0x238>)
 8002022:	e9c1 2300 	strd	r2, r3, [r1]
			     _integral += error * timechange;
 8002026:	4b66      	ldr	r3, [pc, #408]	; (80021c0 <calculatePID+0x22c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fa72 	bl	8000514 <__aeabi_ui2d>
 8002030:	4b65      	ldr	r3, [pc, #404]	; (80021c8 <calculatePID+0x234>)
 8002032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002036:	f7fe fae7 	bl	8000608 <__aeabi_dmul>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4610      	mov	r0, r2
 8002040:	4619      	mov	r1, r3
 8002042:	4b63      	ldr	r3, [pc, #396]	; (80021d0 <calculatePID+0x23c>)
 8002044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002048:	f7fe f928 	bl	800029c <__adddf3>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	495f      	ldr	r1, [pc, #380]	; (80021d0 <calculatePID+0x23c>)
 8002052:	e9c1 2300 	strd	r2, r3, [r1]
			     Iout = pidValues.doubleI * _integral; // integral part calculate
 8002056:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800205a:	4b5d      	ldr	r3, [pc, #372]	; (80021d0 <calculatePID+0x23c>)
 800205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002060:	f7fe fad2 	bl	8000608 <__aeabi_dmul>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	495a      	ldr	r1, [pc, #360]	; (80021d4 <calculatePID+0x240>)
 800206a:	e9c1 2300 	strd	r2, r3, [r1]
			     derivative = (error - _pre_error) / timechange;
 800206e:	4b56      	ldr	r3, [pc, #344]	; (80021c8 <calculatePID+0x234>)
 8002070:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002074:	4b4f      	ldr	r3, [pc, #316]	; (80021b4 <calculatePID+0x220>)
 8002076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207a:	f7fe f90d 	bl	8000298 <__aeabi_dsub>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4690      	mov	r8, r2
 8002084:	4699      	mov	r9, r3
 8002086:	4b4e      	ldr	r3, [pc, #312]	; (80021c0 <calculatePID+0x22c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe fa42 	bl	8000514 <__aeabi_ui2d>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4640      	mov	r0, r8
 8002096:	4649      	mov	r1, r9
 8002098:	f7fe fbe0 	bl	800085c <__aeabi_ddiv>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	494d      	ldr	r1, [pc, #308]	; (80021d8 <calculatePID+0x244>)
 80020a2:	e9c1 2300 	strd	r2, r3, [r1]
			     Dout = pidValues.doubleD * derivative; // differential part calculate
 80020a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020aa:	4b4b      	ldr	r3, [pc, #300]	; (80021d8 <calculatePID+0x244>)
 80020ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b0:	f7fe faaa 	bl	8000608 <__aeabi_dmul>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4948      	ldr	r1, [pc, #288]	; (80021dc <calculatePID+0x248>)
 80020ba:	e9c1 2300 	strd	r2, r3, [r1]
			     Doutput = Pout + Iout + Dout;
 80020be:	4b43      	ldr	r3, [pc, #268]	; (80021cc <calculatePID+0x238>)
 80020c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020c4:	4b43      	ldr	r3, [pc, #268]	; (80021d4 <calculatePID+0x240>)
 80020c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ca:	f7fe f8e7 	bl	800029c <__adddf3>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4610      	mov	r0, r2
 80020d4:	4619      	mov	r1, r3
 80020d6:	4b41      	ldr	r3, [pc, #260]	; (80021dc <calculatePID+0x248>)
 80020d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020dc:	f7fe f8de 	bl	800029c <__adddf3>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	493e      	ldr	r1, [pc, #248]	; (80021e0 <calculatePID+0x24c>)
 80020e6:	e9c1 2300 	strd	r2, r3, [r1]
			    	if (Doutput<0)
 80020ea:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <calculatePID+0x24c>)
 80020ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	f7fe fcf8 	bl	8000aec <__aeabi_dcmplt>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <calculatePID+0x176>
							{
								direction = 1; // direction of motor
 8002102:	4b38      	ldr	r3, [pc, #224]	; (80021e4 <calculatePID+0x250>)
 8002104:	2201      	movs	r2, #1
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	e00e      	b.n	8002128 <calculatePID+0x194>
							}else if(Doutput>0){
 800210a:	4b35      	ldr	r3, [pc, #212]	; (80021e0 <calculatePID+0x24c>)
 800210c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	f7fe fd06 	bl	8000b28 <__aeabi_dcmpgt>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <calculatePID+0x194>
								direction = 0;
 8002122:	4b30      	ldr	r3, [pc, #192]	; (80021e4 <calculatePID+0x250>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
							}
			    if( Doutput < _mini )
 8002128:	4b2d      	ldr	r3, [pc, #180]	; (80021e0 <calculatePID+0x24c>)
 800212a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800212e:	4b2e      	ldr	r3, [pc, #184]	; (80021e8 <calculatePID+0x254>)
 8002130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002134:	f7fe fcda 	bl	8000aec <__aeabi_dcmplt>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d009      	beq.n	8002152 <calculatePID+0x1be>
			        {Doutput =Doutput * -1;} // if output value is lower than 0 multiply by -1
 800213e:	4b28      	ldr	r3, [pc, #160]	; (80021e0 <calculatePID+0x24c>)
 8002140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002144:	4614      	mov	r4, r2
 8002146:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800214a:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <calculatePID+0x24c>)
 800214c:	e9c3 4500 	strd	r4, r5, [r3]
 8002150:	e014      	b.n	800217c <calculatePID+0x1e8>
			    else if( Doutput > _maxi )
 8002152:	4b23      	ldr	r3, [pc, #140]	; (80021e0 <calculatePID+0x24c>)
 8002154:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002158:	4b24      	ldr	r3, [pc, #144]	; (80021ec <calculatePID+0x258>)
 800215a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215e:	f7fe fce3 	bl	8000b28 <__aeabi_dcmpgt>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d009      	beq.n	800217c <calculatePID+0x1e8>
			    { outputPID = _maxi;}
 8002168:	4b20      	ldr	r3, [pc, #128]	; (80021ec <calculatePID+0x258>)
 800216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216e:	4610      	mov	r0, r2
 8002170:	4619      	mov	r1, r3
 8002172:	f7fe fce3 	bl	8000b3c <__aeabi_d2uiz>
 8002176:	4603      	mov	r3, r0
 8002178:	4a1d      	ldr	r2, [pc, #116]	; (80021f0 <calculatePID+0x25c>)
 800217a:	6013      	str	r3, [r2, #0]
			    outputPID=(uint32_t)Doutput;
 800217c:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <calculatePID+0x24c>)
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	f7fe fcd9 	bl	8000b3c <__aeabi_d2uiz>
 800218a:	4603      	mov	r3, r0
 800218c:	4a18      	ldr	r2, [pc, #96]	; (80021f0 <calculatePID+0x25c>)
 800218e:	6013      	str	r3, [r2, #0]
			    _pre_error = error;
 8002190:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <calculatePID+0x234>)
 8002192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002196:	4907      	ldr	r1, [pc, #28]	; (80021b4 <calculatePID+0x220>)
 8002198:	e9c1 2300 	strd	r2, r3, [r1]
				lasttime = now;
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <calculatePID+0x224>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a06      	ldr	r2, [pc, #24]	; (80021bc <calculatePID+0x228>)
 80021a2:	6013      	str	r3, [r2, #0]
		}
 return outputPID;
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <calculatePID+0x25c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3720      	adds	r7, #32
 80021ac:	46bd      	mov	sp, r7
 80021ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021b2:	bf00      	nop
 80021b4:	20000228 	.word	0x20000228
 80021b8:	200002a0 	.word	0x200002a0
 80021bc:	20000238 	.word	0x20000238
 80021c0:	200002c8 	.word	0x200002c8
 80021c4:	20000008 	.word	0x20000008
 80021c8:	200002d0 	.word	0x200002d0
 80021cc:	200002c0 	.word	0x200002c0
 80021d0:	20000230 	.word	0x20000230
 80021d4:	200002b0 	.word	0x200002b0
 80021d8:	200002a8 	.word	0x200002a8
 80021dc:	20000298 	.word	0x20000298
 80021e0:	200002b8 	.word	0x200002b8
 80021e4:	20000214 	.word	0x20000214
 80021e8:	20000220 	.word	0x20000220
 80021ec:	20000000 	.word	0x20000000
 80021f0:	20000218 	.word	0x20000218

080021f4 <pidsConvert>:

 struct pidStruct pidsConvert( char *pidsFrames, uint8_t *pidsFrame)//engine_control converting uint8_t PID data from PC to char values
{
 80021f4:	b5b0      	push	{r4, r5, r7, lr}
 80021f6:	b09c      	sub	sp, #112	; 0x70
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	61f8      	str	r0, [r7, #28]
 80021fc:	61b9      	str	r1, [r7, #24]
	struct pidStruct outputPid;
	 char *arayPidP;
	 char *arayPidI;
	 char *arayPidD;

for (int i = 0 ; i<35;i++){
 80021fe:	2300      	movs	r3, #0
 8002200:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002202:	e00b      	b.n	800221c <pidsConvert+0x28>
	memcpy( &pidsFrames[i],(char *)&pidsFrame[i+13] ,1); // copy all values from uint8_t array to char array
 8002204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002206:	69fa      	ldr	r2, [r7, #28]
 8002208:	4413      	add	r3, r2
 800220a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800220c:	320d      	adds	r2, #13
 800220e:	69b9      	ldr	r1, [r7, #24]
 8002210:	440a      	add	r2, r1
 8002212:	7812      	ldrb	r2, [r2, #0]
 8002214:	701a      	strb	r2, [r3, #0]
for (int i = 0 ; i<35;i++){
 8002216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002218:	3301      	adds	r3, #1
 800221a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800221c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800221e:	2b22      	cmp	r3, #34	; 0x22
 8002220:	ddf0      	ble.n	8002204 <pidsConvert+0x10>

	}

char *ptr=pidsFrames;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	62fb      	str	r3, [r7, #44]	; 0x2c
char *p;
char korektor[] = " ";
 8002226:	2320      	movs	r3, #32
 8002228:	84bb      	strh	r3, [r7, #36]	; 0x24
arayPidP= strtok_r(ptr, korektor, &ptr); // delete spaces
 800222a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002230:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002234:	4618      	mov	r0, r3
 8002236:	f008 f8fd 	bl	800a434 <strtok_r>
 800223a:	66b8      	str	r0, [r7, #104]	; 0x68
outputPid.doubleP =strtod(arayPidP, &p); // convert from char to double
 800223c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002240:	4619      	mov	r1, r3
 8002242:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002244:	f008 f8c2 	bl	800a3cc <strtod>
 8002248:	eeb0 7a40 	vmov.f32	s14, s0
 800224c:	eef0 7a60 	vmov.f32	s15, s1
 8002250:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
arayPidI=strtok_r(ptr, korektor, &ptr);
 8002254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002256:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800225a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800225e:	4618      	mov	r0, r3
 8002260:	f008 f8e8 	bl	800a434 <strtok_r>
 8002264:	6678      	str	r0, [r7, #100]	; 0x64
outputPid.doubleI =strtod(arayPidI, &p);
 8002266:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800226a:	4619      	mov	r1, r3
 800226c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800226e:	f008 f8ad 	bl	800a3cc <strtod>
 8002272:	eeb0 7a40 	vmov.f32	s14, s0
 8002276:	eef0 7a60 	vmov.f32	s15, s1
 800227a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
arayPidD=strtok_r(ptr, korektor, &ptr);
 800227e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002280:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002284:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002288:	4618      	mov	r0, r3
 800228a:	f008 f8d3 	bl	800a434 <strtok_r>
 800228e:	6638      	str	r0, [r7, #96]	; 0x60
outputPid.doubleD =strtod(arayPidD, &p);
 8002290:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002294:	4619      	mov	r1, r3
 8002296:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002298:	f008 f898 	bl	800a3cc <strtod>
 800229c:	eeb0 7a40 	vmov.f32	s14, s0
 80022a0:	eef0 7a60 	vmov.f32	s15, s1
 80022a4:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
return outputPid;
 80022a8:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80022ac:	f107 0530 	add.w	r5, r7, #48	; 0x30
 80022b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022b8:	e884 0003 	stmia.w	r4, {r0, r1}
 80022bc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80022c0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80022c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80022c8:	ec45 4b15 	vmov	d5, r4, r5
 80022cc:	ec41 0b16 	vmov	d6, r0, r1
 80022d0:	ec43 2b17 	vmov	d7, r2, r3
}
 80022d4:	eeb0 0a45 	vmov.f32	s0, s10
 80022d8:	eef0 0a65 	vmov.f32	s1, s11
 80022dc:	eeb0 1a46 	vmov.f32	s2, s12
 80022e0:	eef0 1a66 	vmov.f32	s3, s13
 80022e4:	eeb0 2a47 	vmov.f32	s4, s14
 80022e8:	eef0 2a67 	vmov.f32	s5, s15
 80022ec:	3770      	adds	r7, #112	; 0x70
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080022f4 <engineControl>:


volatile void engineControl( uint8_t * sendFrame  , uint32_t *torque, int *controlOfComm)//engine_control
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
	 static int encoderCounterUp2=0;
	 static int ondrive = 0;
     static uint32_t out=0;


	if (sendFrame[4] == 49&&sendFrame[5] == 48 && sendFrame[8] == 48) // start of working
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	3304      	adds	r3, #4
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b31      	cmp	r3, #49	; 0x31
 8002308:	f040 80a6 	bne.w	8002458 <engineControl+0x164>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	3305      	adds	r3, #5
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b30      	cmp	r3, #48	; 0x30
 8002314:	f040 80a0 	bne.w	8002458 <engineControl+0x164>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	3308      	adds	r3, #8
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b30      	cmp	r3, #48	; 0x30
 8002320:	f040 809a 	bne.w	8002458 <engineControl+0x164>
	{

		startOled(); // paint start mode
 8002324:	f7ff fd70 	bl	8001e08 <startOled>

        encoderCounterUp2 = htim3.Instance->CNT;
 8002328:	4b9b      	ldr	r3, [pc, #620]	; (8002598 <engineControl+0x2a4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	461a      	mov	r2, r3
 8002330:	4b9a      	ldr	r3, [pc, #616]	; (800259c <engineControl+0x2a8>)
 8002332:	601a      	str	r2, [r3, #0]

      if (*controlOfComm== 1){  // if orders from PC arrive
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d119      	bne.n	8002370 <engineControl+0x7c>
    	  convertedPid =pidsConvert( pidsFrames,sendFrame); // transform PID value again
 800233c:	68f9      	ldr	r1, [r7, #12]
 800233e:	4898      	ldr	r0, [pc, #608]	; (80025a0 <engineControl+0x2ac>)
 8002340:	f7ff ff58 	bl	80021f4 <pidsConvert>
 8002344:	eeb0 5a40 	vmov.f32	s10, s0
 8002348:	eef0 5a60 	vmov.f32	s11, s1
 800234c:	eeb0 6a41 	vmov.f32	s12, s2
 8002350:	eef0 6a61 	vmov.f32	s13, s3
 8002354:	eeb0 7a42 	vmov.f32	s14, s4
 8002358:	eef0 7a62 	vmov.f32	s15, s5
 800235c:	4b91      	ldr	r3, [pc, #580]	; (80025a4 <engineControl+0x2b0>)
 800235e:	ed83 5b00 	vstr	d5, [r3]
 8002362:	ed83 6b02 	vstr	d6, [r3, #8]
 8002366:	ed83 7b04 	vstr	d7, [r3, #16]
        *controlOfComm=0;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
        }

	    encoderCounterUp2 = htim3.Instance->CNT;
 8002370:	4b89      	ldr	r3, [pc, #548]	; (8002598 <engineControl+0x2a4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	461a      	mov	r2, r3
 8002378:	4b88      	ldr	r3, [pc, #544]	; (800259c <engineControl+0x2a8>)
 800237a:	601a      	str	r2, [r3, #0]
	     if(encoderCounterUp2>580 && encoderCounterUp2 <600){ // if value if inclination is between those two values
 800237c:	4b87      	ldr	r3, [pc, #540]	; (800259c <engineControl+0x2a8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8002384:	dd07      	ble.n	8002396 <engineControl+0xa2>
 8002386:	4b85      	ldr	r3, [pc, #532]	; (800259c <engineControl+0x2a8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800238e:	da02      	bge.n	8002396 <engineControl+0xa2>
		 ondrive =1; // mark ondrive as one
 8002390:	4b85      	ldr	r3, [pc, #532]	; (80025a8 <engineControl+0x2b4>)
 8002392:	2201      	movs	r2, #1
 8002394:	601a      	str	r2, [r3, #0]
	        }

	    if (encoderCounterUp2>400 && encoderCounterUp2 <800 && ondrive==1) // pendulum is working between those two values
 8002396:	4b81      	ldr	r3, [pc, #516]	; (800259c <engineControl+0x2a8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800239e:	dd4b      	ble.n	8002438 <engineControl+0x144>
 80023a0:	4b7e      	ldr	r3, [pc, #504]	; (800259c <engineControl+0x2a8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80023a8:	da46      	bge.n	8002438 <engineControl+0x144>
 80023aa:	4b7f      	ldr	r3, [pc, #508]	; (80025a8 <engineControl+0x2b4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d142      	bne.n	8002438 <engineControl+0x144>
	    {


       out  =calculatePID( encoderCounterUp2, 600 ,convertedPid); // calculate PWM output
 80023b2:	4b7a      	ldr	r3, [pc, #488]	; (800259c <engineControl+0x2a8>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	4b7b      	ldr	r3, [pc, #492]	; (80025a4 <engineControl+0x2b0>)
 80023b8:	ed93 5b00 	vldr	d5, [r3]
 80023bc:	ed93 6b02 	vldr	d6, [r3, #8]
 80023c0:	ed93 7b04 	vldr	d7, [r3, #16]
 80023c4:	eeb0 0a45 	vmov.f32	s0, s10
 80023c8:	eef0 0a65 	vmov.f32	s1, s11
 80023cc:	eeb0 1a46 	vmov.f32	s2, s12
 80023d0:	eef0 1a66 	vmov.f32	s3, s13
 80023d4:	eeb0 2a47 	vmov.f32	s4, s14
 80023d8:	eef0 2a67 	vmov.f32	s5, s15
 80023dc:	f44f 7116 	mov.w	r1, #600	; 0x258
 80023e0:	4610      	mov	r0, r2
 80023e2:	f7ff fdd7 	bl	8001f94 <calculatePID>
 80023e6:	4603      	mov	r3, r0
 80023e8:	4a70      	ldr	r2, [pc, #448]	; (80025ac <engineControl+0x2b8>)
 80023ea:	6013      	str	r3, [r2, #0]


      *torque = out; // write PWM output value to torque variable
 80023ec:	4b6f      	ldr	r3, [pc, #444]	; (80025ac <engineControl+0x2b8>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	601a      	str	r2, [r3, #0]

         if(direction==1)
 80023f4:	4b6e      	ldr	r3, [pc, #440]	; (80025b0 <engineControl+0x2bc>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d10e      	bne.n	800241a <engineControl+0x126>
			{

			 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1024);// direction engine control
 80023fc:	4b6d      	ldr	r3, [pc, #436]	; (80025b4 <engineControl+0x2c0>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002404:	639a      	str	r2, [r3, #56]	; 0x38
			 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);// direction engine control
 8002406:	4b6b      	ldr	r3, [pc, #428]	; (80025b4 <engineControl+0x2c0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2200      	movs	r2, #0
 800240c:	63da      	str	r2, [r3, #60]	; 0x3c
			 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, out);
 800240e:	4b69      	ldr	r3, [pc, #420]	; (80025b4 <engineControl+0x2c0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a66      	ldr	r2, [pc, #408]	; (80025ac <engineControl+0x2b8>)
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	635a      	str	r2, [r3, #52]	; 0x34
         if(direction==1)
 8002418:	e01e      	b.n	8002458 <engineControl+0x164>
			}else{

			 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);// direction engine control
 800241a:	4b66      	ldr	r3, [pc, #408]	; (80025b4 <engineControl+0x2c0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2200      	movs	r2, #0
 8002420:	639a      	str	r2, [r3, #56]	; 0x38
			 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 1024);// direction engine control
 8002422:	4b64      	ldr	r3, [pc, #400]	; (80025b4 <engineControl+0x2c0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800242a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, out); // engine power control
 800242c:	4b61      	ldr	r3, [pc, #388]	; (80025b4 <engineControl+0x2c0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a5e      	ldr	r2, [pc, #376]	; (80025ac <engineControl+0x2b8>)
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	635a      	str	r2, [r3, #52]	; 0x34
         if(direction==1)
 8002436:	e00f      	b.n	8002458 <engineControl+0x164>
			 }

	     }else{
	    	 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);// direction engine control
 8002438:	4b5e      	ldr	r3, [pc, #376]	; (80025b4 <engineControl+0x2c0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2200      	movs	r2, #0
 800243e:	639a      	str	r2, [r3, #56]	; 0x38
	    	 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);// direction engine control
 8002440:	4b5c      	ldr	r3, [pc, #368]	; (80025b4 <engineControl+0x2c0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2200      	movs	r2, #0
 8002446:	63da      	str	r2, [r3, #60]	; 0x3c
	         __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, out);// engine power control
 8002448:	4b5a      	ldr	r3, [pc, #360]	; (80025b4 <engineControl+0x2c0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a57      	ldr	r2, [pc, #348]	; (80025ac <engineControl+0x2b8>)
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	635a      	str	r2, [r3, #52]	; 0x34
              ondrive = 0;
 8002452:	4b55      	ldr	r3, [pc, #340]	; (80025a8 <engineControl+0x2b4>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]

	}



		if (sendFrame[4] == 48&& sendFrame[5] ==49 && sendFrame[8] == 48) // stop control
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	3304      	adds	r3, #4
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b30      	cmp	r3, #48	; 0x30
 8002460:	d158      	bne.n	8002514 <engineControl+0x220>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3305      	adds	r3, #5
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b31      	cmp	r3, #49	; 0x31
 800246a:	d153      	bne.n	8002514 <engineControl+0x220>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	3308      	adds	r3, #8
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b30      	cmp	r3, #48	; 0x30
 8002474:	d14e      	bne.n	8002514 <engineControl+0x220>
		{
		             _pre_error=0; // if work is stopped reset all of those variables
 8002476:	4950      	ldr	r1, [pc, #320]	; (80025b8 <engineControl+0x2c4>)
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	e9c1 2300 	strd	r2, r3, [r1]
			      	 _integral=0;
 8002484:	494d      	ldr	r1, [pc, #308]	; (80025bc <engineControl+0x2c8>)
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	f04f 0300 	mov.w	r3, #0
 800248e:	e9c1 2300 	strd	r2, r3, [r1]
			      	 derivative=0;
 8002492:	494b      	ldr	r1, [pc, #300]	; (80025c0 <engineControl+0x2cc>)
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	e9c1 2300 	strd	r2, r3, [r1]
			      	 now=0;
 80024a0:	4b48      	ldr	r3, [pc, #288]	; (80025c4 <engineControl+0x2d0>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
			      	 timechange=0;
 80024a6:	4b48      	ldr	r3, [pc, #288]	; (80025c8 <engineControl+0x2d4>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
			      	 lasttime=0;
 80024ac:	4b47      	ldr	r3, [pc, #284]	; (80025cc <engineControl+0x2d8>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
			      	 error=0;
 80024b2:	4947      	ldr	r1, [pc, #284]	; (80025d0 <engineControl+0x2dc>)
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	e9c1 2300 	strd	r2, r3, [r1]
			      	convertedPid.doubleP=0;
 80024c0:	4938      	ldr	r1, [pc, #224]	; (80025a4 <engineControl+0x2b0>)
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	e9c1 2300 	strd	r2, r3, [r1]
			      	convertedPid.doubleP=0;
 80024ce:	4935      	ldr	r1, [pc, #212]	; (80025a4 <engineControl+0x2b0>)
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	e9c1 2300 	strd	r2, r3, [r1]
			      	convertedPid.doubleD=0;
 80024dc:	4931      	ldr	r1, [pc, #196]	; (80025a4 <engineControl+0x2b0>)
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	e9c1 2304 	strd	r2, r3, [r1, #16]
			      	Doutput=0;
 80024ea:	493a      	ldr	r1, [pc, #232]	; (80025d4 <engineControl+0x2e0>)
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	e9c1 2300 	strd	r2, r3, [r1]
			        stopOled();
 80024f8:	f7ff fca8 	bl	8001e4c <stopOled>

			 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);// direction engine control
 80024fc:	4b2d      	ldr	r3, [pc, #180]	; (80025b4 <engineControl+0x2c0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2200      	movs	r2, #0
 8002502:	639a      	str	r2, [r3, #56]	; 0x38
		     __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);// direction engine control
 8002504:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <engineControl+0x2c0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2200      	movs	r2, #0
 800250a:	63da      	str	r2, [r3, #60]	; 0x3c
			 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);// engine power control
 800250c:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <engineControl+0x2c0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2200      	movs	r2, #0
 8002512:	635a      	str	r2, [r3, #52]	; 0x34
		}

		if 	(sendFrame[8] == 49&& sendFrame[7] ==49 && sendFrame[6] == 48)// manual left control
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	3308      	adds	r3, #8
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b31      	cmp	r3, #49	; 0x31
 800251c:	d119      	bne.n	8002552 <engineControl+0x25e>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	3307      	adds	r3, #7
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b31      	cmp	r3, #49	; 0x31
 8002526:	d114      	bne.n	8002552 <engineControl+0x25e>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	3306      	adds	r3, #6
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b30      	cmp	r3, #48	; 0x30
 8002530:	d10f      	bne.n	8002552 <engineControl+0x25e>
				{
			manualLeftOled();
 8002532:	f7ff fcad 	bl	8001e90 <manualLeftOled>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1024);// direction engine control
 8002536:	4b1f      	ldr	r3, [pc, #124]	; (80025b4 <engineControl+0x2c0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800253e:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);// direction engine control
 8002540:	4b1c      	ldr	r3, [pc, #112]	; (80025b4 <engineControl+0x2c0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2200      	movs	r2, #0
 8002546:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 400);// engine power control
 8002548:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <engineControl+0x2c0>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002550:	635a      	str	r2, [r3, #52]	; 0x34
				}
		if	(sendFrame[8] == 49&& sendFrame[7] ==48 && sendFrame[6] == 49)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	3308      	adds	r3, #8
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b31      	cmp	r3, #49	; 0x31
 800255a:	d119      	bne.n	8002590 <engineControl+0x29c>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	3307      	adds	r3, #7
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b30      	cmp	r3, #48	; 0x30
 8002564:	d114      	bne.n	8002590 <engineControl+0x29c>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	3306      	adds	r3, #6
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b31      	cmp	r3, #49	; 0x31
 800256e:	d10f      	bne.n	8002590 <engineControl+0x29c>
				{
			manualrightOled();
 8002570:	f7ff fcae 	bl	8001ed0 <manualrightOled>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);// direction engine control
 8002574:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <engineControl+0x2c0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2200      	movs	r2, #0
 800257a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 1024);// direction engine control
 800257c:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <engineControl+0x2c0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002584:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 400);// engine power control
 8002586:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <engineControl+0x2c0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800258e:	635a      	str	r2, [r3, #52]	; 0x34





		}
 8002590:	bf00      	nop
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	200004c8 	.word	0x200004c8
 800259c:	2000023c 	.word	0x2000023c
 80025a0:	20000258 	.word	0x20000258
 80025a4:	20000240 	.word	0x20000240
 80025a8:	2000027c 	.word	0x2000027c
 80025ac:	20000280 	.word	0x20000280
 80025b0:	20000214 	.word	0x20000214
 80025b4:	20000510 	.word	0x20000510
 80025b8:	20000228 	.word	0x20000228
 80025bc:	20000230 	.word	0x20000230
 80025c0:	200002a8 	.word	0x200002a8
 80025c4:	200002a0 	.word	0x200002a0
 80025c8:	200002c8 	.word	0x200002c8
 80025cc:	20000238 	.word	0x20000238
 80025d0:	200002d0 	.word	0x200002d0
 80025d4:	200002b8 	.word	0x200002b8

080025d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08a      	sub	sp, #40	; 0x28
 80025dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025de:	f107 0314 	add.w	r3, r7, #20
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	60da      	str	r2, [r3, #12]
 80025ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	4b44      	ldr	r3, [pc, #272]	; (8002704 <MX_GPIO_Init+0x12c>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	4a43      	ldr	r2, [pc, #268]	; (8002704 <MX_GPIO_Init+0x12c>)
 80025f8:	f043 0304 	orr.w	r3, r3, #4
 80025fc:	6313      	str	r3, [r2, #48]	; 0x30
 80025fe:	4b41      	ldr	r3, [pc, #260]	; (8002704 <MX_GPIO_Init+0x12c>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	4b3d      	ldr	r3, [pc, #244]	; (8002704 <MX_GPIO_Init+0x12c>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	4a3c      	ldr	r2, [pc, #240]	; (8002704 <MX_GPIO_Init+0x12c>)
 8002614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002618:	6313      	str	r3, [r2, #48]	; 0x30
 800261a:	4b3a      	ldr	r3, [pc, #232]	; (8002704 <MX_GPIO_Init+0x12c>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	4b36      	ldr	r3, [pc, #216]	; (8002704 <MX_GPIO_Init+0x12c>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	4a35      	ldr	r2, [pc, #212]	; (8002704 <MX_GPIO_Init+0x12c>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6313      	str	r3, [r2, #48]	; 0x30
 8002636:	4b33      	ldr	r3, [pc, #204]	; (8002704 <MX_GPIO_Init+0x12c>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	607b      	str	r3, [r7, #4]
 8002646:	4b2f      	ldr	r3, [pc, #188]	; (8002704 <MX_GPIO_Init+0x12c>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	4a2e      	ldr	r2, [pc, #184]	; (8002704 <MX_GPIO_Init+0x12c>)
 800264c:	f043 0302 	orr.w	r3, r3, #2
 8002650:	6313      	str	r3, [r2, #48]	; 0x30
 8002652:	4b2c      	ldr	r3, [pc, #176]	; (8002704 <MX_GPIO_Init+0x12c>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	607b      	str	r3, [r7, #4]
 800265c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800265e:	2200      	movs	r2, #0
 8002660:	2120      	movs	r1, #32
 8002662:	4829      	ldr	r0, [pc, #164]	; (8002708 <MX_GPIO_Init+0x130>)
 8002664:	f001 fe1c 	bl	80042a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);
 8002668:	2201      	movs	r2, #1
 800266a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800266e:	4827      	ldr	r0, [pc, #156]	; (800270c <MX_GPIO_Init+0x134>)
 8002670:	f001 fe16 	bl	80042a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800267a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800267e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	4619      	mov	r1, r3
 800268a:	4820      	ldr	r0, [pc, #128]	; (800270c <MX_GPIO_Init+0x134>)
 800268c:	f001 fc84 	bl	8003f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002690:	2320      	movs	r3, #32
 8002692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002694:	2301      	movs	r3, #1
 8002696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269c:	2300      	movs	r3, #0
 800269e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80026a0:	f107 0314 	add.w	r3, r7, #20
 80026a4:	4619      	mov	r1, r3
 80026a6:	4818      	ldr	r0, [pc, #96]	; (8002708 <MX_GPIO_Init+0x130>)
 80026a8:	f001 fc76 	bl	8003f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80026ac:	23f0      	movs	r3, #240	; 0xf0
 80026ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026b4:	2301      	movs	r3, #1
 80026b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b8:	f107 0314 	add.w	r3, r7, #20
 80026bc:	4619      	mov	r1, r3
 80026be:	4813      	ldr	r0, [pc, #76]	; (800270c <MX_GPIO_Init+0x134>)
 80026c0:	f001 fc6a 	bl	8003f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ca:	2301      	movs	r3, #1
 80026cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d2:	2303      	movs	r3, #3
 80026d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026d6:	f107 0314 	add.w	r3, r7, #20
 80026da:	4619      	mov	r1, r3
 80026dc:	480b      	ldr	r0, [pc, #44]	; (800270c <MX_GPIO_Init+0x134>)
 80026de:	f001 fc5b 	bl	8003f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026ec:	2301      	movs	r3, #1
 80026ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f0:	f107 0314 	add.w	r3, r7, #20
 80026f4:	4619      	mov	r1, r3
 80026f6:	4804      	ldr	r0, [pc, #16]	; (8002708 <MX_GPIO_Init+0x130>)
 80026f8:	f001 fc4e 	bl	8003f98 <HAL_GPIO_Init>

}
 80026fc:	bf00      	nop
 80026fe:	3728      	adds	r7, #40	; 0x28
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40023800 	.word	0x40023800
 8002708:	40020000 	.word	0x40020000
 800270c:	40020800 	.word	0x40020800

08002710 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002714:	4b12      	ldr	r3, [pc, #72]	; (8002760 <MX_I2C1_Init+0x50>)
 8002716:	4a13      	ldr	r2, [pc, #76]	; (8002764 <MX_I2C1_Init+0x54>)
 8002718:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800271a:	4b11      	ldr	r3, [pc, #68]	; (8002760 <MX_I2C1_Init+0x50>)
 800271c:	4a12      	ldr	r2, [pc, #72]	; (8002768 <MX_I2C1_Init+0x58>)
 800271e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002720:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <MX_I2C1_Init+0x50>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002726:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <MX_I2C1_Init+0x50>)
 8002728:	2200      	movs	r2, #0
 800272a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800272c:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <MX_I2C1_Init+0x50>)
 800272e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002732:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002734:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <MX_I2C1_Init+0x50>)
 8002736:	2200      	movs	r2, #0
 8002738:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800273a:	4b09      	ldr	r3, [pc, #36]	; (8002760 <MX_I2C1_Init+0x50>)
 800273c:	2200      	movs	r2, #0
 800273e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002740:	4b07      	ldr	r3, [pc, #28]	; (8002760 <MX_I2C1_Init+0x50>)
 8002742:	2200      	movs	r2, #0
 8002744:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002746:	4b06      	ldr	r3, [pc, #24]	; (8002760 <MX_I2C1_Init+0x50>)
 8002748:	2200      	movs	r2, #0
 800274a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800274c:	4804      	ldr	r0, [pc, #16]	; (8002760 <MX_I2C1_Init+0x50>)
 800274e:	f001 fddb 	bl	8004308 <HAL_I2C_Init>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002758:	f000 f9ae 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800275c:	bf00      	nop
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000338 	.word	0x20000338
 8002764:	40005400 	.word	0x40005400
 8002768:	00061a80 	.word	0x00061a80

0800276c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	; 0x28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a34      	ldr	r2, [pc, #208]	; (800285c <HAL_I2C_MspInit+0xf0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d162      	bne.n	8002854 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	4b33      	ldr	r3, [pc, #204]	; (8002860 <HAL_I2C_MspInit+0xf4>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	4a32      	ldr	r2, [pc, #200]	; (8002860 <HAL_I2C_MspInit+0xf4>)
 8002798:	f043 0302 	orr.w	r3, r3, #2
 800279c:	6313      	str	r3, [r2, #48]	; 0x30
 800279e:	4b30      	ldr	r3, [pc, #192]	; (8002860 <HAL_I2C_MspInit+0xf4>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027b0:	2312      	movs	r3, #18
 80027b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b8:	2303      	movs	r3, #3
 80027ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027bc:	2304      	movs	r3, #4
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c0:	f107 0314 	add.w	r3, r7, #20
 80027c4:	4619      	mov	r1, r3
 80027c6:	4827      	ldr	r0, [pc, #156]	; (8002864 <HAL_I2C_MspInit+0xf8>)
 80027c8:	f001 fbe6 	bl	8003f98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	4b23      	ldr	r3, [pc, #140]	; (8002860 <HAL_I2C_MspInit+0xf4>)
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	4a22      	ldr	r2, [pc, #136]	; (8002860 <HAL_I2C_MspInit+0xf4>)
 80027d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027da:	6413      	str	r3, [r2, #64]	; 0x40
 80027dc:	4b20      	ldr	r3, [pc, #128]	; (8002860 <HAL_I2C_MspInit+0xf4>)
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 80027e8:	4b1f      	ldr	r3, [pc, #124]	; (8002868 <HAL_I2C_MspInit+0xfc>)
 80027ea:	4a20      	ldr	r2, [pc, #128]	; (800286c <HAL_I2C_MspInit+0x100>)
 80027ec:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80027ee:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <HAL_I2C_MspInit+0xfc>)
 80027f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027f4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027f6:	4b1c      	ldr	r3, [pc, #112]	; (8002868 <HAL_I2C_MspInit+0xfc>)
 80027f8:	2240      	movs	r2, #64	; 0x40
 80027fa:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027fc:	4b1a      	ldr	r3, [pc, #104]	; (8002868 <HAL_I2C_MspInit+0xfc>)
 80027fe:	2200      	movs	r2, #0
 8002800:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002802:	4b19      	ldr	r3, [pc, #100]	; (8002868 <HAL_I2C_MspInit+0xfc>)
 8002804:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002808:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800280a:	4b17      	ldr	r3, [pc, #92]	; (8002868 <HAL_I2C_MspInit+0xfc>)
 800280c:	2200      	movs	r2, #0
 800280e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002810:	4b15      	ldr	r3, [pc, #84]	; (8002868 <HAL_I2C_MspInit+0xfc>)
 8002812:	2200      	movs	r2, #0
 8002814:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002816:	4b14      	ldr	r3, [pc, #80]	; (8002868 <HAL_I2C_MspInit+0xfc>)
 8002818:	2200      	movs	r2, #0
 800281a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800281c:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_I2C_MspInit+0xfc>)
 800281e:	2200      	movs	r2, #0
 8002820:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_I2C_MspInit+0xfc>)
 8002824:	2200      	movs	r2, #0
 8002826:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002828:	480f      	ldr	r0, [pc, #60]	; (8002868 <HAL_I2C_MspInit+0xfc>)
 800282a:	f000 ff99 	bl	8003760 <HAL_DMA_Init>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8002834:	f000 f940 	bl	8002ab8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a0b      	ldr	r2, [pc, #44]	; (8002868 <HAL_I2C_MspInit+0xfc>)
 800283c:	635a      	str	r2, [r3, #52]	; 0x34
 800283e:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <HAL_I2C_MspInit+0xfc>)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002844:	2200      	movs	r2, #0
 8002846:	2100      	movs	r1, #0
 8002848:	201f      	movs	r0, #31
 800284a:	f000 ff52 	bl	80036f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800284e:	201f      	movs	r0, #31
 8002850:	f000 ff6b 	bl	800372a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002854:	bf00      	nop
 8002856:	3728      	adds	r7, #40	; 0x28
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40005400 	.word	0x40005400
 8002860:	40023800 	.word	0x40023800
 8002864:	40020400 	.word	0x40020400
 8002868:	200002d8 	.word	0x200002d8
 800286c:	400260b8 	.word	0x400260b8

08002870 <HAL_UARTEx_RxEventCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart , uint16_t Size)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	807b      	strh	r3, [r7, #2]
	if(huart->Instance==USART2)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a10      	ldr	r2, [pc, #64]	; (80028c4 <HAL_UARTEx_RxEventCallback+0x54>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d11a      	bne.n	80028bc <HAL_UARTEx_RxEventCallback+0x4c>
	{

		for (int i = 0 ; i<RxBuf_SIZE;i++){
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	e00c      	b.n	80028a6 <HAL_UARTEx_RxEventCallback+0x36>
						memcpy( &communicationFrame[i],&RxBuf[i] ,Size);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4a0e      	ldr	r2, [pc, #56]	; (80028c8 <HAL_UARTEx_RxEventCallback+0x58>)
 8002890:	1898      	adds	r0, r3, r2
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4a0d      	ldr	r2, [pc, #52]	; (80028cc <HAL_UARTEx_RxEventCallback+0x5c>)
 8002896:	4413      	add	r3, r2
 8002898:	887a      	ldrh	r2, [r7, #2]
 800289a:	4619      	mov	r1, r3
 800289c:	f006 fea0 	bl	80095e0 <memcpy>
		for (int i = 0 ; i<RxBuf_SIZE;i++){
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	3301      	adds	r3, #1
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b22      	cmp	r3, #34	; 0x22
 80028aa:	ddef      	ble.n	800288c <HAL_UARTEx_RxEventCallback+0x1c>

				}



		HAL_UARTEx_ReceiveToIdle_DMA(&huart2,RxBuf,RxBuf_SIZE);
 80028ac:	2223      	movs	r2, #35	; 0x23
 80028ae:	4907      	ldr	r1, [pc, #28]	; (80028cc <HAL_UARTEx_RxEventCallback+0x5c>)
 80028b0:	4807      	ldr	r0, [pc, #28]	; (80028d0 <HAL_UARTEx_RxEventCallback+0x60>)
 80028b2:	f005 fda4 	bl	80083fe <HAL_UARTEx_ReceiveToIdle_DMA>

		controlOfComm =1;// one if communication arrived
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <HAL_UARTEx_RxEventCallback+0x64>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

	}


}
 80028bc:	bf00      	nop
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40004400 	.word	0x40004400
 80028c8:	200003f0 	.word	0x200003f0
 80028cc:	20000418 	.word	0x20000418
 80028d0:	2000043c 	.word	0x2000043c
 80028d4:	20000414 	.word	0x20000414

080028d8 <send_string>:


void send_string(char* s)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s), 1000);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7fd fc7d 	bl	80001e0 <strlen>
 80028e6:	4603      	mov	r3, r0
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4803      	ldr	r0, [pc, #12]	; (8002900 <send_string+0x28>)
 80028f2:	f005 fcf2 	bl	80082da <HAL_UART_Transmit>
}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	2000043c 	.word	0x2000043c

08002904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002908:	f000 fd82 	bl	8003410 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800290c:	f000 f86a 	bl	80029e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  // DMA before usart !!
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002910:	f7ff fe62 	bl	80025d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002914:	f7ff fb16 	bl	8001f44 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002918:	f000 fca4 	bl	8003264 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800291c:	f000 fa60 	bl	8002de0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002920:	f000 faec 	bl	8002efc <MX_TIM3_Init>
  MX_TIM4_Init();
 8002924:	f000 fb3e 	bl	8002fa4 <MX_TIM4_Init>
  MX_I2C1_Init();
 8002928:	f7ff fef2 	bl	8002710 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // DMA before usart !!

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2,RxBuf,RxBuf_SIZE);
 800292c:	2223      	movs	r2, #35	; 0x23
 800292e:	4923      	ldr	r1, [pc, #140]	; (80029bc <main+0xb8>)
 8002930:	4823      	ldr	r0, [pc, #140]	; (80029c0 <main+0xbc>)
 8002932:	f005 fd64 	bl	80083fe <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 8002936:	4b23      	ldr	r3, [pc, #140]	; (80029c4 <main+0xc0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <main+0xc0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0208 	bic.w	r2, r2, #8
 8002944:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // engine power control
 8002946:	2100      	movs	r1, #0
 8002948:	481f      	ldr	r0, [pc, #124]	; (80029c8 <main+0xc4>)
 800294a:	f004 fc83 	bl	8007254 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // engine direction control
 800294e:	2104      	movs	r1, #4
 8002950:	481d      	ldr	r0, [pc, #116]	; (80029c8 <main+0xc4>)
 8002952:	f004 fc7f 	bl	8007254 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // engine direction control
 8002956:	2108      	movs	r1, #8
 8002958:	481b      	ldr	r0, [pc, #108]	; (80029c8 <main+0xc4>)
 800295a:	f004 fc7b 	bl	8007254 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // enkoder down
 800295e:	213c      	movs	r1, #60	; 0x3c
 8002960:	481a      	ldr	r0, [pc, #104]	; (80029cc <main+0xc8>)
 8002962:	f004 fdcd 	bl	8007500 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // encoder up
 8002966:	213c      	movs	r1, #60	; 0x3c
 8002968:	4819      	ldr	r0, [pc, #100]	; (80029d0 <main+0xcc>)
 800296a:	f004 fdc9 	bl	8007500 <HAL_TIM_Encoder_Start>
    SSD1306_init(); // initialization of oled
 800296e:	f7fe fc7f 	bl	8001270 <SSD1306_init>
    firstScreenOled();// painted first oled
 8002972:	f7ff f8eb 	bl	8001b4c <firstScreenOled>
    initWork(); // information of ended initialization
 8002976:	f7ff facb 	bl	8001f10 <initWork>
  while (1)
  {



	  oledFirstStageControl(communicationFrame); // paint first stage
 800297a:	4816      	ldr	r0, [pc, #88]	; (80029d4 <main+0xd0>)
 800297c:	f7ff fa0a 	bl	8001d94 <oledFirstStageControl>
	  encoderDownstageControl(); // painting encoder down value
 8002980:	f7ff f9b6 	bl	8001cf0 <encoderDownstageControl>
	  encoderUpstageControl(); // paiting encoder up value
 8002984:	f7ff f960 	bl	8001c48 <encoderUpstageControl>
	  engineControl(communicationFrame, &torque, &controlOfComm); // control engine and calculate pid values
 8002988:	4a13      	ldr	r2, [pc, #76]	; (80029d8 <main+0xd4>)
 800298a:	4914      	ldr	r1, [pc, #80]	; (80029dc <main+0xd8>)
 800298c:	4811      	ldr	r0, [pc, #68]	; (80029d4 <main+0xd0>)
 800298e:	f7ff fcb1 	bl	80022f4 <engineControl>

		 if (sendCounter >250)
 8002992:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <main+0xdc>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2bfa      	cmp	r3, #250	; 0xfa
 8002998:	d909      	bls.n	80029ae <main+0xaa>
					            {
			 sending(&torque);// sending information to PC
 800299a:	4810      	ldr	r0, [pc, #64]	; (80029dc <main+0xd8>)
 800299c:	f7ff f89a 	bl	8001ad4 <sending>
  	         sendCounter=sendCounter-250;
 80029a0:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <main+0xdc>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	3306      	adds	r3, #6
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	4b0d      	ldr	r3, [pc, #52]	; (80029e0 <main+0xdc>)
 80029aa:	701a      	strb	r2, [r3, #0]
 80029ac:	e7e5      	b.n	800297a <main+0x76>
             }else {

		     sendCounter++;
 80029ae:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <main+0xdc>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	3301      	adds	r3, #1
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <main+0xdc>)
 80029b8:	701a      	strb	r2, [r3, #0]
	  oledFirstStageControl(communicationFrame); // paint first stage
 80029ba:	e7de      	b.n	800297a <main+0x76>
 80029bc:	20000418 	.word	0x20000418
 80029c0:	2000043c 	.word	0x2000043c
 80029c4:	20000390 	.word	0x20000390
 80029c8:	20000510 	.word	0x20000510
 80029cc:	200004c8 	.word	0x200004c8
 80029d0:	20000480 	.word	0x20000480
 80029d4:	200003f0 	.word	0x200003f0
 80029d8:	20000414 	.word	0x20000414
 80029dc:	20000284 	.word	0x20000284
 80029e0:	20000288 	.word	0x20000288

080029e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b094      	sub	sp, #80	; 0x50
 80029e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029ea:	f107 0320 	add.w	r3, r7, #32
 80029ee:	2230      	movs	r2, #48	; 0x30
 80029f0:	2100      	movs	r1, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f006 fe02 	bl	80095fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029f8:	f107 030c 	add.w	r3, r7, #12
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	4b28      	ldr	r3, [pc, #160]	; (8002ab0 <SystemClock_Config+0xcc>)
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	4a27      	ldr	r2, [pc, #156]	; (8002ab0 <SystemClock_Config+0xcc>)
 8002a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a16:	6413      	str	r3, [r2, #64]	; 0x40
 8002a18:	4b25      	ldr	r3, [pc, #148]	; (8002ab0 <SystemClock_Config+0xcc>)
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a24:	2300      	movs	r3, #0
 8002a26:	607b      	str	r3, [r7, #4]
 8002a28:	4b22      	ldr	r3, [pc, #136]	; (8002ab4 <SystemClock_Config+0xd0>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a30:	4a20      	ldr	r2, [pc, #128]	; (8002ab4 <SystemClock_Config+0xd0>)
 8002a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	4b1e      	ldr	r3, [pc, #120]	; (8002ab4 <SystemClock_Config+0xd0>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a40:	607b      	str	r3, [r7, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a44:	2302      	movs	r3, #2
 8002a46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a4c:	2310      	movs	r3, #16
 8002a4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a50:	2302      	movs	r3, #2
 8002a52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a54:	2300      	movs	r3, #0
 8002a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a58:	2308      	movs	r3, #8
 8002a5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002a5c:	2354      	movs	r3, #84	; 0x54
 8002a5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a60:	2302      	movs	r3, #2
 8002a62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002a64:	2307      	movs	r3, #7
 8002a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a68:	f107 0320 	add.w	r3, r7, #32
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f003 fed5 	bl	800681c <HAL_RCC_OscConfig>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002a78:	f000 f81e 	bl	8002ab8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a7c:	230f      	movs	r3, #15
 8002a7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a80:	2302      	movs	r3, #2
 8002a82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a92:	f107 030c 	add.w	r3, r7, #12
 8002a96:	2102      	movs	r1, #2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f004 f937 	bl	8006d0c <HAL_RCC_ClockConfig>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002aa4:	f000 f808 	bl	8002ab8 <Error_Handler>
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	3750      	adds	r7, #80	; 0x50
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40007000 	.word	0x40007000

08002ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002abc:	b672      	cpsid	i
}
 8002abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ac0:	e7fe      	b.n	8002ac0 <Error_Handler+0x8>
	...

08002ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	607b      	str	r3, [r7, #4]
 8002ace:	4b1f      	ldr	r3, [pc, #124]	; (8002b4c <HAL_MspInit+0x88>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	4a1e      	ldr	r2, [pc, #120]	; (8002b4c <HAL_MspInit+0x88>)
 8002ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ada:	4b1c      	ldr	r3, [pc, #112]	; (8002b4c <HAL_MspInit+0x88>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae2:	607b      	str	r3, [r7, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	603b      	str	r3, [r7, #0]
 8002aea:	4b18      	ldr	r3, [pc, #96]	; (8002b4c <HAL_MspInit+0x88>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	4a17      	ldr	r2, [pc, #92]	; (8002b4c <HAL_MspInit+0x88>)
 8002af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af4:	6413      	str	r3, [r2, #64]	; 0x40
 8002af6:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <HAL_MspInit+0x88>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002b02:	2007      	movs	r0, #7
 8002b04:	f000 fdea 	bl	80036dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 4);
 8002b08:	2204      	movs	r2, #4
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	f06f 000b 	mvn.w	r0, #11
 8002b10:	f000 fdef 	bl	80036f2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 4);
 8002b14:	2204      	movs	r2, #4
 8002b16:	2100      	movs	r1, #0
 8002b18:	f06f 000a 	mvn.w	r0, #10
 8002b1c:	f000 fde9 	bl	80036f2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 4);
 8002b20:	2204      	movs	r2, #4
 8002b22:	2100      	movs	r1, #0
 8002b24:	f06f 0009 	mvn.w	r0, #9
 8002b28:	f000 fde3 	bl	80036f2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 4);
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	2100      	movs	r1, #0
 8002b30:	f06f 0004 	mvn.w	r0, #4
 8002b34:	f000 fddd 	bl	80036f2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 4);
 8002b38:	2204      	movs	r2, #4
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	f06f 0001 	mvn.w	r0, #1
 8002b40:	f000 fdd7 	bl	80036f2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b44:	bf00      	nop
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40023800 	.word	0x40023800

08002b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b54:	e7fe      	b.n	8002b54 <NMI_Handler+0x4>

08002b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b56:	b480      	push	{r7}
 8002b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b5a:	e7fe      	b.n	8002b5a <HardFault_Handler+0x4>

08002b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b60:	e7fe      	b.n	8002b60 <MemManage_Handler+0x4>

08002b62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b66:	e7fe      	b.n	8002b66 <BusFault_Handler+0x4>

08002b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b6c:	e7fe      	b.n	8002b6c <UsageFault_Handler+0x4>

08002b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b9c:	f000 fc8a 	bl	80034b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ba0:	bf00      	nop
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002ba8:	4802      	ldr	r0, [pc, #8]	; (8002bb4 <DMA1_Stream5_IRQHandler+0x10>)
 8002baa:	f000 ff71 	bl	8003a90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000390 	.word	0x20000390

08002bb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002bbc:	4802      	ldr	r0, [pc, #8]	; (8002bc8 <TIM2_IRQHandler+0x10>)
 8002bbe:	f004 fd2d 	bl	800761c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000510 	.word	0x20000510

08002bcc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002bd0:	4802      	ldr	r0, [pc, #8]	; (8002bdc <TIM3_IRQHandler+0x10>)
 8002bd2:	f004 fd23 	bl	800761c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	200004c8 	.word	0x200004c8

08002be0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002be4:	4802      	ldr	r0, [pc, #8]	; (8002bf0 <TIM4_IRQHandler+0x10>)
 8002be6:	f004 fd19 	bl	800761c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000480 	.word	0x20000480

08002bf4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002bf8:	4802      	ldr	r0, [pc, #8]	; (8002c04 <I2C1_EV_IRQHandler+0x10>)
 8002bfa:	f001 ff25 	bl	8004a48 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000338 	.word	0x20000338

08002c08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c0c:	4802      	ldr	r0, [pc, #8]	; (8002c18 <USART2_IRQHandler+0x10>)
 8002c0e:	f005 fc5b 	bl	80084c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	2000043c 	.word	0x2000043c

08002c1c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002c20:	4802      	ldr	r0, [pc, #8]	; (8002c2c <DMA1_Stream7_IRQHandler+0x10>)
 8002c22:	f000 ff35 	bl	8003a90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	200002d8 	.word	0x200002d8

08002c30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
	return 1;
 8002c34:	2301      	movs	r3, #1
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <_kill>:

int _kill(int pid, int sig)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c4a:	f006 fc7d 	bl	8009548 <__errno>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2216      	movs	r2, #22
 8002c52:	601a      	str	r2, [r3, #0]
	return -1;
 8002c54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <_exit>:

void _exit (int status)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c68:	f04f 31ff 	mov.w	r1, #4294967295
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7ff ffe7 	bl	8002c40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c72:	e7fe      	b.n	8002c72 <_exit+0x12>

08002c74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	e00a      	b.n	8002c9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c86:	f3af 8000 	nop.w
 8002c8a:	4601      	mov	r1, r0
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	60ba      	str	r2, [r7, #8]
 8002c92:	b2ca      	uxtb	r2, r1
 8002c94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	dbf0      	blt.n	8002c86 <_read+0x12>
	}

return len;
 8002ca4:	687b      	ldr	r3, [r7, #4]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b086      	sub	sp, #24
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	e009      	b.n	8002cd4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	60ba      	str	r2, [r7, #8]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	dbf1      	blt.n	8002cc0 <_write+0x12>
	}
	return len;
 8002cdc:	687b      	ldr	r3, [r7, #4]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <_close>:

int _close(int file)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
	return -1;
 8002cee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d0e:	605a      	str	r2, [r3, #4]
	return 0;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <_isatty>:

int _isatty(int file)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
	return 1;
 8002d26:	2301      	movs	r3, #1
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
	return 0;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d58:	4a14      	ldr	r2, [pc, #80]	; (8002dac <_sbrk+0x5c>)
 8002d5a:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <_sbrk+0x60>)
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d64:	4b13      	ldr	r3, [pc, #76]	; (8002db4 <_sbrk+0x64>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d102      	bne.n	8002d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d6c:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <_sbrk+0x64>)
 8002d6e:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <_sbrk+0x68>)
 8002d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d72:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <_sbrk+0x64>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4413      	add	r3, r2
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d207      	bcs.n	8002d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d80:	f006 fbe2 	bl	8009548 <__errno>
 8002d84:	4603      	mov	r3, r0
 8002d86:	220c      	movs	r2, #12
 8002d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d8e:	e009      	b.n	8002da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d90:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <_sbrk+0x64>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d96:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <_sbrk+0x64>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	4a05      	ldr	r2, [pc, #20]	; (8002db4 <_sbrk+0x64>)
 8002da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002da2:	68fb      	ldr	r3, [r7, #12]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20018000 	.word	0x20018000
 8002db0:	00000400 	.word	0x00000400
 8002db4:	2000028c 	.word	0x2000028c
 8002db8:	20000570 	.word	0x20000570

08002dbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dc0:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <SystemInit+0x20>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc6:	4a05      	ldr	r2, [pc, #20]	; (8002ddc <SystemInit+0x20>)
 8002dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dd0:	bf00      	nop
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	e000ed00 	.word	0xe000ed00

08002de0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08e      	sub	sp, #56	; 0x38
 8002de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	605a      	str	r2, [r3, #4]
 8002df0:	609a      	str	r2, [r3, #8]
 8002df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002df4:	f107 0320 	add.w	r3, r7, #32
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dfe:	1d3b      	adds	r3, r7, #4
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	60da      	str	r2, [r3, #12]
 8002e0a:	611a      	str	r2, [r3, #16]
 8002e0c:	615a      	str	r2, [r3, #20]
 8002e0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e10:	4b39      	ldr	r3, [pc, #228]	; (8002ef8 <MX_TIM2_Init+0x118>)
 8002e12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002e18:	4b37      	ldr	r3, [pc, #220]	; (8002ef8 <MX_TIM2_Init+0x118>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e1e:	4b36      	ldr	r3, [pc, #216]	; (8002ef8 <MX_TIM2_Init+0x118>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8002e24:	4b34      	ldr	r3, [pc, #208]	; (8002ef8 <MX_TIM2_Init+0x118>)
 8002e26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e2c:	4b32      	ldr	r3, [pc, #200]	; (8002ef8 <MX_TIM2_Init+0x118>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e32:	4b31      	ldr	r3, [pc, #196]	; (8002ef8 <MX_TIM2_Init+0x118>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e38:	482f      	ldr	r0, [pc, #188]	; (8002ef8 <MX_TIM2_Init+0x118>)
 8002e3a:	f004 f963 	bl	8007104 <HAL_TIM_Base_Init>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002e44:	f7ff fe38 	bl	8002ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e52:	4619      	mov	r1, r3
 8002e54:	4828      	ldr	r0, [pc, #160]	; (8002ef8 <MX_TIM2_Init+0x118>)
 8002e56:	f004 fdab 	bl	80079b0 <HAL_TIM_ConfigClockSource>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002e60:	f7ff fe2a 	bl	8002ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e64:	4824      	ldr	r0, [pc, #144]	; (8002ef8 <MX_TIM2_Init+0x118>)
 8002e66:	f004 f99c 	bl	80071a2 <HAL_TIM_PWM_Init>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002e70:	f7ff fe22 	bl	8002ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e74:	2300      	movs	r3, #0
 8002e76:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e7c:	f107 0320 	add.w	r3, r7, #32
 8002e80:	4619      	mov	r1, r3
 8002e82:	481d      	ldr	r0, [pc, #116]	; (8002ef8 <MX_TIM2_Init+0x118>)
 8002e84:	f005 f95a 	bl	800813c <HAL_TIMEx_MasterConfigSynchronization>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002e8e:	f7ff fe13 	bl	8002ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e92:	2360      	movs	r3, #96	; 0x60
 8002e94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002e9e:	2304      	movs	r3, #4
 8002ea0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ea2:	1d3b      	adds	r3, r7, #4
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4813      	ldr	r0, [pc, #76]	; (8002ef8 <MX_TIM2_Init+0x118>)
 8002eaa:	f004 fcbf 	bl	800782c <HAL_TIM_PWM_ConfigChannel>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002eb4:	f7ff fe00 	bl	8002ab8 <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ebc:	1d3b      	adds	r3, r7, #4
 8002ebe:	2204      	movs	r2, #4
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	480d      	ldr	r0, [pc, #52]	; (8002ef8 <MX_TIM2_Init+0x118>)
 8002ec4:	f004 fcb2 	bl	800782c <HAL_TIM_PWM_ConfigChannel>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8002ece:	f7ff fdf3 	bl	8002ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ed2:	1d3b      	adds	r3, r7, #4
 8002ed4:	2208      	movs	r2, #8
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4807      	ldr	r0, [pc, #28]	; (8002ef8 <MX_TIM2_Init+0x118>)
 8002eda:	f004 fca7 	bl	800782c <HAL_TIM_PWM_ConfigChannel>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8002ee4:	f7ff fde8 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002ee8:	4803      	ldr	r0, [pc, #12]	; (8002ef8 <MX_TIM2_Init+0x118>)
 8002eea:	f000 f963 	bl	80031b4 <HAL_TIM_MspPostInit>

}
 8002eee:	bf00      	nop
 8002ef0:	3738      	adds	r7, #56	; 0x38
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000510 	.word	0x20000510

08002efc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08c      	sub	sp, #48	; 0x30
 8002f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f02:	f107 030c 	add.w	r3, r7, #12
 8002f06:	2224      	movs	r2, #36	; 0x24
 8002f08:	2100      	movs	r1, #0
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f006 fb76 	bl	80095fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f10:	1d3b      	adds	r3, r7, #4
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f18:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <MX_TIM3_Init+0xa0>)
 8002f1a:	4a21      	ldr	r2, [pc, #132]	; (8002fa0 <MX_TIM3_Init+0xa4>)
 8002f1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002f1e:	4b1f      	ldr	r3, [pc, #124]	; (8002f9c <MX_TIM3_Init+0xa0>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f24:	4b1d      	ldr	r3, [pc, #116]	; (8002f9c <MX_TIM3_Init+0xa0>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1199;
 8002f2a:	4b1c      	ldr	r3, [pc, #112]	; (8002f9c <MX_TIM3_Init+0xa0>)
 8002f2c:	f240 42af 	movw	r2, #1199	; 0x4af
 8002f30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f32:	4b1a      	ldr	r3, [pc, #104]	; (8002f9c <MX_TIM3_Init+0xa0>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f38:	4b18      	ldr	r3, [pc, #96]	; (8002f9c <MX_TIM3_Init+0xa0>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f42:	2300      	movs	r3, #0
 8002f44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f46:	2301      	movs	r3, #1
 8002f48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f52:	2300      	movs	r3, #0
 8002f54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f56:	2301      	movs	r3, #1
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002f62:	f107 030c 	add.w	r3, r7, #12
 8002f66:	4619      	mov	r1, r3
 8002f68:	480c      	ldr	r0, [pc, #48]	; (8002f9c <MX_TIM3_Init+0xa0>)
 8002f6a:	f004 fa23 	bl	80073b4 <HAL_TIM_Encoder_Init>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002f74:	f7ff fda0 	bl	8002ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f80:	1d3b      	adds	r3, r7, #4
 8002f82:	4619      	mov	r1, r3
 8002f84:	4805      	ldr	r0, [pc, #20]	; (8002f9c <MX_TIM3_Init+0xa0>)
 8002f86:	f005 f8d9 	bl	800813c <HAL_TIMEx_MasterConfigSynchronization>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002f90:	f7ff fd92 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f94:	bf00      	nop
 8002f96:	3730      	adds	r7, #48	; 0x30
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	200004c8 	.word	0x200004c8
 8002fa0:	40000400 	.word	0x40000400

08002fa4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08c      	sub	sp, #48	; 0x30
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002faa:	f107 030c 	add.w	r3, r7, #12
 8002fae:	2224      	movs	r2, #36	; 0x24
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f006 fb22 	bl	80095fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fb8:	1d3b      	adds	r3, r7, #4
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002fc0:	4b20      	ldr	r3, [pc, #128]	; (8003044 <MX_TIM4_Init+0xa0>)
 8002fc2:	4a21      	ldr	r2, [pc, #132]	; (8003048 <MX_TIM4_Init+0xa4>)
 8002fc4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002fc6:	4b1f      	ldr	r3, [pc, #124]	; (8003044 <MX_TIM4_Init+0xa0>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fcc:	4b1d      	ldr	r3, [pc, #116]	; (8003044 <MX_TIM4_Init+0xa0>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1023;
 8002fd2:	4b1c      	ldr	r3, [pc, #112]	; (8003044 <MX_TIM4_Init+0xa0>)
 8002fd4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002fd8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fda:	4b1a      	ldr	r3, [pc, #104]	; (8003044 <MX_TIM4_Init+0xa0>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002fe0:	4b18      	ldr	r3, [pc, #96]	; (8003044 <MX_TIM4_Init+0xa0>)
 8002fe2:	2280      	movs	r2, #128	; 0x80
 8002fe4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002fea:	2302      	movs	r3, #2
 8002fec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ffe:	2301      	movs	r3, #1
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003002:	2300      	movs	r3, #0
 8003004:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800300a:	f107 030c 	add.w	r3, r7, #12
 800300e:	4619      	mov	r1, r3
 8003010:	480c      	ldr	r0, [pc, #48]	; (8003044 <MX_TIM4_Init+0xa0>)
 8003012:	f004 f9cf 	bl	80073b4 <HAL_TIM_Encoder_Init>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800301c:	f7ff fd4c 	bl	8002ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003020:	2300      	movs	r3, #0
 8003022:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003024:	2300      	movs	r3, #0
 8003026:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003028:	1d3b      	adds	r3, r7, #4
 800302a:	4619      	mov	r1, r3
 800302c:	4805      	ldr	r0, [pc, #20]	; (8003044 <MX_TIM4_Init+0xa0>)
 800302e:	f005 f885 	bl	800813c <HAL_TIMEx_MasterConfigSynchronization>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003038:	f7ff fd3e 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800303c:	bf00      	nop
 800303e:	3730      	adds	r7, #48	; 0x30
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20000480 	.word	0x20000480
 8003048:	40000800 	.word	0x40000800

0800304c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305c:	d115      	bne.n	800308a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <HAL_TIM_Base_MspInit+0x48>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	4a0b      	ldr	r2, [pc, #44]	; (8003094 <HAL_TIM_Base_MspInit+0x48>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	6413      	str	r3, [r2, #64]	; 0x40
 800306e:	4b09      	ldr	r3, [pc, #36]	; (8003094 <HAL_TIM_Base_MspInit+0x48>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800307a:	2200      	movs	r2, #0
 800307c:	2100      	movs	r1, #0
 800307e:	201c      	movs	r0, #28
 8003080:	f000 fb37 	bl	80036f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003084:	201c      	movs	r0, #28
 8003086:	f000 fb50 	bl	800372a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800308a:	bf00      	nop
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800

08003098 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08c      	sub	sp, #48	; 0x30
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a0:	f107 031c 	add.w	r3, r7, #28
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	60da      	str	r2, [r3, #12]
 80030ae:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a3a      	ldr	r2, [pc, #232]	; (80031a0 <HAL_TIM_Encoder_MspInit+0x108>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d134      	bne.n	8003124 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	61bb      	str	r3, [r7, #24]
 80030be:	4b39      	ldr	r3, [pc, #228]	; (80031a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	4a38      	ldr	r2, [pc, #224]	; (80031a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80030c4:	f043 0302 	orr.w	r3, r3, #2
 80030c8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ca:	4b36      	ldr	r3, [pc, #216]	; (80031a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	61bb      	str	r3, [r7, #24]
 80030d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	4b32      	ldr	r3, [pc, #200]	; (80031a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	4a31      	ldr	r2, [pc, #196]	; (80031a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	6313      	str	r3, [r2, #48]	; 0x30
 80030e6:	4b2f      	ldr	r3, [pc, #188]	; (80031a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030f2:	23c0      	movs	r3, #192	; 0xc0
 80030f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f6:	2302      	movs	r3, #2
 80030f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fe:	2300      	movs	r3, #0
 8003100:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003102:	2302      	movs	r3, #2
 8003104:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003106:	f107 031c 	add.w	r3, r7, #28
 800310a:	4619      	mov	r1, r3
 800310c:	4826      	ldr	r0, [pc, #152]	; (80031a8 <HAL_TIM_Encoder_MspInit+0x110>)
 800310e:	f000 ff43 	bl	8003f98 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 2);
 8003112:	2202      	movs	r2, #2
 8003114:	2100      	movs	r1, #0
 8003116:	201d      	movs	r0, #29
 8003118:	f000 faeb 	bl	80036f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800311c:	201d      	movs	r0, #29
 800311e:	f000 fb04 	bl	800372a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003122:	e038      	b.n	8003196 <HAL_TIM_Encoder_MspInit+0xfe>
  else if(tim_encoderHandle->Instance==TIM4)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a20      	ldr	r2, [pc, #128]	; (80031ac <HAL_TIM_Encoder_MspInit+0x114>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d133      	bne.n	8003196 <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	4b1c      	ldr	r3, [pc, #112]	; (80031a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	4a1b      	ldr	r2, [pc, #108]	; (80031a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003138:	f043 0304 	orr.w	r3, r3, #4
 800313c:	6413      	str	r3, [r2, #64]	; 0x40
 800313e:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	4a14      	ldr	r2, [pc, #80]	; (80031a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003154:	f043 0302 	orr.w	r3, r3, #2
 8003158:	6313      	str	r3, [r2, #48]	; 0x30
 800315a:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003166:	23c0      	movs	r3, #192	; 0xc0
 8003168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316a:	2302      	movs	r3, #2
 800316c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316e:	2300      	movs	r3, #0
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003172:	2300      	movs	r3, #0
 8003174:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003176:	2302      	movs	r3, #2
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317a:	f107 031c 	add.w	r3, r7, #28
 800317e:	4619      	mov	r1, r3
 8003180:	480b      	ldr	r0, [pc, #44]	; (80031b0 <HAL_TIM_Encoder_MspInit+0x118>)
 8003182:	f000 ff09 	bl	8003f98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 2);
 8003186:	2202      	movs	r2, #2
 8003188:	2100      	movs	r1, #0
 800318a:	201e      	movs	r0, #30
 800318c:	f000 fab1 	bl	80036f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003190:	201e      	movs	r0, #30
 8003192:	f000 faca 	bl	800372a <HAL_NVIC_EnableIRQ>
}
 8003196:	bf00      	nop
 8003198:	3730      	adds	r7, #48	; 0x30
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40000400 	.word	0x40000400
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40020000 	.word	0x40020000
 80031ac:	40000800 	.word	0x40000800
 80031b0:	40020400 	.word	0x40020400

080031b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08a      	sub	sp, #40	; 0x28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031bc:	f107 0314 	add.w	r3, r7, #20
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	60da      	str	r2, [r3, #12]
 80031ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d4:	d13c      	bne.n	8003250 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d6:	2300      	movs	r3, #0
 80031d8:	613b      	str	r3, [r7, #16]
 80031da:	4b1f      	ldr	r3, [pc, #124]	; (8003258 <HAL_TIM_MspPostInit+0xa4>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	4a1e      	ldr	r2, [pc, #120]	; (8003258 <HAL_TIM_MspPostInit+0xa4>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6313      	str	r3, [r2, #48]	; 0x30
 80031e6:	4b1c      	ldr	r3, [pc, #112]	; (8003258 <HAL_TIM_MspPostInit+0xa4>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	4b18      	ldr	r3, [pc, #96]	; (8003258 <HAL_TIM_MspPostInit+0xa4>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	4a17      	ldr	r2, [pc, #92]	; (8003258 <HAL_TIM_MspPostInit+0xa4>)
 80031fc:	f043 0302 	orr.w	r3, r3, #2
 8003200:	6313      	str	r3, [r2, #48]	; 0x30
 8003202:	4b15      	ldr	r3, [pc, #84]	; (8003258 <HAL_TIM_MspPostInit+0xa4>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800320e:	2303      	movs	r3, #3
 8003210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003212:	2302      	movs	r3, #2
 8003214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003216:	2300      	movs	r3, #0
 8003218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321a:	2300      	movs	r3, #0
 800321c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800321e:	2301      	movs	r3, #1
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003222:	f107 0314 	add.w	r3, r7, #20
 8003226:	4619      	mov	r1, r3
 8003228:	480c      	ldr	r0, [pc, #48]	; (800325c <HAL_TIM_MspPostInit+0xa8>)
 800322a:	f000 feb5 	bl	8003f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800322e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003234:	2302      	movs	r3, #2
 8003236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003238:	2300      	movs	r3, #0
 800323a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323c:	2300      	movs	r3, #0
 800323e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003240:	2301      	movs	r3, #1
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003244:	f107 0314 	add.w	r3, r7, #20
 8003248:	4619      	mov	r1, r3
 800324a:	4805      	ldr	r0, [pc, #20]	; (8003260 <HAL_TIM_MspPostInit+0xac>)
 800324c:	f000 fea4 	bl	8003f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003250:	bf00      	nop
 8003252:	3728      	adds	r7, #40	; 0x28
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40023800 	.word	0x40023800
 800325c:	40020000 	.word	0x40020000
 8003260:	40020400 	.word	0x40020400

08003264 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003268:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <MX_USART2_UART_Init+0x4c>)
 800326a:	4a12      	ldr	r2, [pc, #72]	; (80032b4 <MX_USART2_UART_Init+0x50>)
 800326c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800326e:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <MX_USART2_UART_Init+0x4c>)
 8003270:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003274:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003276:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <MX_USART2_UART_Init+0x4c>)
 8003278:	2200      	movs	r2, #0
 800327a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800327c:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <MX_USART2_UART_Init+0x4c>)
 800327e:	2200      	movs	r2, #0
 8003280:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003282:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <MX_USART2_UART_Init+0x4c>)
 8003284:	2200      	movs	r2, #0
 8003286:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003288:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <MX_USART2_UART_Init+0x4c>)
 800328a:	220c      	movs	r2, #12
 800328c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800328e:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <MX_USART2_UART_Init+0x4c>)
 8003290:	2200      	movs	r2, #0
 8003292:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <MX_USART2_UART_Init+0x4c>)
 8003296:	2200      	movs	r2, #0
 8003298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800329a:	4805      	ldr	r0, [pc, #20]	; (80032b0 <MX_USART2_UART_Init+0x4c>)
 800329c:	f004 ffd0 	bl	8008240 <HAL_UART_Init>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80032a6:	f7ff fc07 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	2000043c 	.word	0x2000043c
 80032b4:	40004400 	.word	0x40004400

080032b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08a      	sub	sp, #40	; 0x28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c0:	f107 0314 	add.w	r3, r7, #20
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a34      	ldr	r2, [pc, #208]	; (80033a8 <HAL_UART_MspInit+0xf0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d162      	bne.n	80033a0 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032da:	2300      	movs	r3, #0
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	4b33      	ldr	r3, [pc, #204]	; (80033ac <HAL_UART_MspInit+0xf4>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	4a32      	ldr	r2, [pc, #200]	; (80033ac <HAL_UART_MspInit+0xf4>)
 80032e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ea:	4b30      	ldr	r3, [pc, #192]	; (80033ac <HAL_UART_MspInit+0xf4>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	4b2c      	ldr	r3, [pc, #176]	; (80033ac <HAL_UART_MspInit+0xf4>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	4a2b      	ldr	r2, [pc, #172]	; (80033ac <HAL_UART_MspInit+0xf4>)
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	6313      	str	r3, [r2, #48]	; 0x30
 8003306:	4b29      	ldr	r3, [pc, #164]	; (80033ac <HAL_UART_MspInit+0xf4>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003312:	230c      	movs	r3, #12
 8003314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003316:	2302      	movs	r3, #2
 8003318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331e:	2300      	movs	r3, #0
 8003320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003322:	2307      	movs	r3, #7
 8003324:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003326:	f107 0314 	add.w	r3, r7, #20
 800332a:	4619      	mov	r1, r3
 800332c:	4820      	ldr	r0, [pc, #128]	; (80033b0 <HAL_UART_MspInit+0xf8>)
 800332e:	f000 fe33 	bl	8003f98 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003332:	4b20      	ldr	r3, [pc, #128]	; (80033b4 <HAL_UART_MspInit+0xfc>)
 8003334:	4a20      	ldr	r2, [pc, #128]	; (80033b8 <HAL_UART_MspInit+0x100>)
 8003336:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003338:	4b1e      	ldr	r3, [pc, #120]	; (80033b4 <HAL_UART_MspInit+0xfc>)
 800333a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800333e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003340:	4b1c      	ldr	r3, [pc, #112]	; (80033b4 <HAL_UART_MspInit+0xfc>)
 8003342:	2200      	movs	r2, #0
 8003344:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003346:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <HAL_UART_MspInit+0xfc>)
 8003348:	2200      	movs	r2, #0
 800334a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800334c:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <HAL_UART_MspInit+0xfc>)
 800334e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003352:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003354:	4b17      	ldr	r3, [pc, #92]	; (80033b4 <HAL_UART_MspInit+0xfc>)
 8003356:	2200      	movs	r2, #0
 8003358:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800335a:	4b16      	ldr	r3, [pc, #88]	; (80033b4 <HAL_UART_MspInit+0xfc>)
 800335c:	2200      	movs	r2, #0
 800335e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003360:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <HAL_UART_MspInit+0xfc>)
 8003362:	2200      	movs	r2, #0
 8003364:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003366:	4b13      	ldr	r3, [pc, #76]	; (80033b4 <HAL_UART_MspInit+0xfc>)
 8003368:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800336c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800336e:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <HAL_UART_MspInit+0xfc>)
 8003370:	2200      	movs	r2, #0
 8003372:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003374:	480f      	ldr	r0, [pc, #60]	; (80033b4 <HAL_UART_MspInit+0xfc>)
 8003376:	f000 f9f3 	bl	8003760 <HAL_DMA_Init>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003380:	f7ff fb9a 	bl	8002ab8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a0b      	ldr	r2, [pc, #44]	; (80033b4 <HAL_UART_MspInit+0xfc>)
 8003388:	639a      	str	r2, [r3, #56]	; 0x38
 800338a:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <HAL_UART_MspInit+0xfc>)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003390:	2200      	movs	r2, #0
 8003392:	2100      	movs	r1, #0
 8003394:	2026      	movs	r0, #38	; 0x26
 8003396:	f000 f9ac 	bl	80036f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800339a:	2026      	movs	r0, #38	; 0x26
 800339c:	f000 f9c5 	bl	800372a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80033a0:	bf00      	nop
 80033a2:	3728      	adds	r7, #40	; 0x28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40004400 	.word	0x40004400
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40020000 	.word	0x40020000
 80033b4:	20000390 	.word	0x20000390
 80033b8:	40026088 	.word	0x40026088

080033bc <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    		 /* set stack pointer */
 80033bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033c0:	480d      	ldr	r0, [pc, #52]	; (80033f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033c2:	490e      	ldr	r1, [pc, #56]	; (80033fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033c4:	4a0e      	ldr	r2, [pc, #56]	; (8003400 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033c8:	e002      	b.n	80033d0 <LoopCopyDataInit>

080033ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ce:	3304      	adds	r3, #4

080033d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033d4:	d3f9      	bcc.n	80033ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033d6:	4a0b      	ldr	r2, [pc, #44]	; (8003404 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033d8:	4c0b      	ldr	r4, [pc, #44]	; (8003408 <LoopFillZerobss+0x26>)
  movs r3, #0
 80033da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033dc:	e001      	b.n	80033e2 <LoopFillZerobss>

080033de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033e0:	3204      	adds	r2, #4

080033e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033e4:	d3fb      	bcc.n	80033de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033e6:	f7ff fce9 	bl	8002dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033ea:	f006 f8b3 	bl	8009554 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033ee:	f7ff fa89 	bl	8002904 <main>
  bx  lr    
 80033f2:	4770      	bx	lr
Reset_Handler:  ldr   sp, =_estack    		 /* set stack pointer */
 80033f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80033f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033fc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003400:	0800cdf4 	.word	0x0800cdf4
  ldr r2, =_sbss
 8003404:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003408:	2000056c 	.word	0x2000056c

0800340c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800340c:	e7fe      	b.n	800340c <ADC_IRQHandler>
	...

08003410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003414:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <HAL_Init+0x40>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a0d      	ldr	r2, [pc, #52]	; (8003450 <HAL_Init+0x40>)
 800341a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800341e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <HAL_Init+0x40>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a0a      	ldr	r2, [pc, #40]	; (8003450 <HAL_Init+0x40>)
 8003426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800342a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800342c:	4b08      	ldr	r3, [pc, #32]	; (8003450 <HAL_Init+0x40>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a07      	ldr	r2, [pc, #28]	; (8003450 <HAL_Init+0x40>)
 8003432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003436:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003438:	2003      	movs	r0, #3
 800343a:	f000 f94f 	bl	80036dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800343e:	2000      	movs	r0, #0
 8003440:	f000 f808 	bl	8003454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003444:	f7ff fb3e 	bl	8002ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40023c00 	.word	0x40023c00

08003454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800345c:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <HAL_InitTick+0x54>)
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	4b12      	ldr	r3, [pc, #72]	; (80034ac <HAL_InitTick+0x58>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	4619      	mov	r1, r3
 8003466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800346a:	fbb3 f3f1 	udiv	r3, r3, r1
 800346e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003472:	4618      	mov	r0, r3
 8003474:	f000 f967 	bl	8003746 <HAL_SYSTICK_Config>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e00e      	b.n	80034a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b0f      	cmp	r3, #15
 8003486:	d80a      	bhi.n	800349e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003488:	2200      	movs	r2, #0
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	f04f 30ff 	mov.w	r0, #4294967295
 8003490:	f000 f92f 	bl	80036f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003494:	4a06      	ldr	r2, [pc, #24]	; (80034b0 <HAL_InitTick+0x5c>)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	e000      	b.n	80034a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	2000000c 	.word	0x2000000c
 80034ac:	20000014 	.word	0x20000014
 80034b0:	20000010 	.word	0x20000010

080034b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034b8:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <HAL_IncTick+0x20>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	461a      	mov	r2, r3
 80034be:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <HAL_IncTick+0x24>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4413      	add	r3, r2
 80034c4:	4a04      	ldr	r2, [pc, #16]	; (80034d8 <HAL_IncTick+0x24>)
 80034c6:	6013      	str	r3, [r2, #0]
}
 80034c8:	bf00      	nop
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20000014 	.word	0x20000014
 80034d8:	20000558 	.word	0x20000558

080034dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  return uwTick;
 80034e0:	4b03      	ldr	r3, [pc, #12]	; (80034f0 <HAL_GetTick+0x14>)
 80034e2:	681b      	ldr	r3, [r3, #0]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	20000558 	.word	0x20000558

080034f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034fc:	f7ff ffee 	bl	80034dc <HAL_GetTick>
 8003500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350c:	d005      	beq.n	800351a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800350e:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <HAL_Delay+0x44>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4413      	add	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800351a:	bf00      	nop
 800351c:	f7ff ffde 	bl	80034dc <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	429a      	cmp	r2, r3
 800352a:	d8f7      	bhi.n	800351c <HAL_Delay+0x28>
  {
  }
}
 800352c:	bf00      	nop
 800352e:	bf00      	nop
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20000014 	.word	0x20000014

0800353c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800354c:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <__NVIC_SetPriorityGrouping+0x44>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003558:	4013      	ands	r3, r2
 800355a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800356c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800356e:	4a04      	ldr	r2, [pc, #16]	; (8003580 <__NVIC_SetPriorityGrouping+0x44>)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	60d3      	str	r3, [r2, #12]
}
 8003574:	bf00      	nop
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003588:	4b04      	ldr	r3, [pc, #16]	; (800359c <__NVIC_GetPriorityGrouping+0x18>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	0a1b      	lsrs	r3, r3, #8
 800358e:	f003 0307 	and.w	r3, r3, #7
}
 8003592:	4618      	mov	r0, r3
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	db0b      	blt.n	80035ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	f003 021f 	and.w	r2, r3, #31
 80035b8:	4907      	ldr	r1, [pc, #28]	; (80035d8 <__NVIC_EnableIRQ+0x38>)
 80035ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	2001      	movs	r0, #1
 80035c2:	fa00 f202 	lsl.w	r2, r0, r2
 80035c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	e000e100 	.word	0xe000e100

080035dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	6039      	str	r1, [r7, #0]
 80035e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	db0a      	blt.n	8003606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	490c      	ldr	r1, [pc, #48]	; (8003628 <__NVIC_SetPriority+0x4c>)
 80035f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fa:	0112      	lsls	r2, r2, #4
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	440b      	add	r3, r1
 8003600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003604:	e00a      	b.n	800361c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	b2da      	uxtb	r2, r3
 800360a:	4908      	ldr	r1, [pc, #32]	; (800362c <__NVIC_SetPriority+0x50>)
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	3b04      	subs	r3, #4
 8003614:	0112      	lsls	r2, r2, #4
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	440b      	add	r3, r1
 800361a:	761a      	strb	r2, [r3, #24]
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	e000e100 	.word	0xe000e100
 800362c:	e000ed00 	.word	0xe000ed00

08003630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003630:	b480      	push	{r7}
 8003632:	b089      	sub	sp, #36	; 0x24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f1c3 0307 	rsb	r3, r3, #7
 800364a:	2b04      	cmp	r3, #4
 800364c:	bf28      	it	cs
 800364e:	2304      	movcs	r3, #4
 8003650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	3304      	adds	r3, #4
 8003656:	2b06      	cmp	r3, #6
 8003658:	d902      	bls.n	8003660 <NVIC_EncodePriority+0x30>
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	3b03      	subs	r3, #3
 800365e:	e000      	b.n	8003662 <NVIC_EncodePriority+0x32>
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003664:	f04f 32ff 	mov.w	r2, #4294967295
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43da      	mvns	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	401a      	ands	r2, r3
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003678:	f04f 31ff 	mov.w	r1, #4294967295
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	fa01 f303 	lsl.w	r3, r1, r3
 8003682:	43d9      	mvns	r1, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003688:	4313      	orrs	r3, r2
         );
}
 800368a:	4618      	mov	r0, r3
 800368c:	3724      	adds	r7, #36	; 0x24
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
	...

08003698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036a8:	d301      	bcc.n	80036ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036aa:	2301      	movs	r3, #1
 80036ac:	e00f      	b.n	80036ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ae:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <SysTick_Config+0x40>)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036b6:	210f      	movs	r1, #15
 80036b8:	f04f 30ff 	mov.w	r0, #4294967295
 80036bc:	f7ff ff8e 	bl	80035dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036c0:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <SysTick_Config+0x40>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036c6:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <SysTick_Config+0x40>)
 80036c8:	2207      	movs	r2, #7
 80036ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	e000e010 	.word	0xe000e010

080036dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff ff29 	bl	800353c <__NVIC_SetPriorityGrouping>
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b086      	sub	sp, #24
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	4603      	mov	r3, r0
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	607a      	str	r2, [r7, #4]
 80036fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003704:	f7ff ff3e 	bl	8003584 <__NVIC_GetPriorityGrouping>
 8003708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	68b9      	ldr	r1, [r7, #8]
 800370e:	6978      	ldr	r0, [r7, #20]
 8003710:	f7ff ff8e 	bl	8003630 <NVIC_EncodePriority>
 8003714:	4602      	mov	r2, r0
 8003716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800371a:	4611      	mov	r1, r2
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff ff5d 	bl	80035dc <__NVIC_SetPriority>
}
 8003722:	bf00      	nop
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	af00      	add	r7, sp, #0
 8003730:	4603      	mov	r3, r0
 8003732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff ff31 	bl	80035a0 <__NVIC_EnableIRQ>
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff ffa2 	bl	8003698 <SysTick_Config>
 8003754:	4603      	mov	r3, r0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800376c:	f7ff feb6 	bl	80034dc <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e099      	b.n	80038b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0201 	bic.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800379c:	e00f      	b.n	80037be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800379e:	f7ff fe9d 	bl	80034dc <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b05      	cmp	r3, #5
 80037aa:	d908      	bls.n	80037be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2203      	movs	r2, #3
 80037b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e078      	b.n	80038b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1e8      	bne.n	800379e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	4b38      	ldr	r3, [pc, #224]	; (80038b8 <HAL_DMA_Init+0x158>)
 80037d8:	4013      	ands	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003802:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	2b04      	cmp	r3, #4
 8003816:	d107      	bne.n	8003828 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003820:	4313      	orrs	r3, r2
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f023 0307 	bic.w	r3, r3, #7
 800383e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	2b04      	cmp	r3, #4
 8003850:	d117      	bne.n	8003882 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00e      	beq.n	8003882 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fb1b 	bl	8003ea0 <DMA_CheckFifoParam>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2240      	movs	r2, #64	; 0x40
 8003874:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800387e:	2301      	movs	r3, #1
 8003880:	e016      	b.n	80038b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fad2 	bl	8003e34 <DMA_CalcBaseAndBitshift>
 8003890:	4603      	mov	r3, r0
 8003892:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003898:	223f      	movs	r2, #63	; 0x3f
 800389a:	409a      	lsls	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	f010803f 	.word	0xf010803f

080038bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <HAL_DMA_Start_IT+0x26>
 80038de:	2302      	movs	r3, #2
 80038e0:	e040      	b.n	8003964 <HAL_DMA_Start_IT+0xa8>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d12f      	bne.n	8003956 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2202      	movs	r2, #2
 80038fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 fa64 	bl	8003dd8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003914:	223f      	movs	r2, #63	; 0x3f
 8003916:	409a      	lsls	r2, r3
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0216 	orr.w	r2, r2, #22
 800392a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	2b00      	cmp	r3, #0
 8003932:	d007      	beq.n	8003944 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0208 	orr.w	r2, r2, #8
 8003942:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	e005      	b.n	8003962 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800395e:	2302      	movs	r3, #2
 8003960:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003962:	7dfb      	ldrb	r3, [r7, #23]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003978:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800397a:	f7ff fdaf 	bl	80034dc <HAL_GetTick>
 800397e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d008      	beq.n	800399e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2280      	movs	r2, #128	; 0x80
 8003990:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e052      	b.n	8003a44 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0216 	bic.w	r2, r2, #22
 80039ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695a      	ldr	r2, [r3, #20]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d103      	bne.n	80039ce <HAL_DMA_Abort+0x62>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d007      	beq.n	80039de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0208 	bic.w	r2, r2, #8
 80039dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0201 	bic.w	r2, r2, #1
 80039ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039ee:	e013      	b.n	8003a18 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039f0:	f7ff fd74 	bl	80034dc <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b05      	cmp	r3, #5
 80039fc:	d90c      	bls.n	8003a18 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2220      	movs	r2, #32
 8003a02:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2203      	movs	r2, #3
 8003a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e015      	b.n	8003a44 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1e4      	bne.n	80039f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2a:	223f      	movs	r2, #63	; 0x3f
 8003a2c:	409a      	lsls	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d004      	beq.n	8003a6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2280      	movs	r2, #128	; 0x80
 8003a64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e00c      	b.n	8003a84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2205      	movs	r2, #5
 8003a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0201 	bic.w	r2, r2, #1
 8003a80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a9c:	4b92      	ldr	r3, [pc, #584]	; (8003ce8 <HAL_DMA_IRQHandler+0x258>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a92      	ldr	r2, [pc, #584]	; (8003cec <HAL_DMA_IRQHandler+0x25c>)
 8003aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa6:	0a9b      	lsrs	r3, r3, #10
 8003aa8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aba:	2208      	movs	r2, #8
 8003abc:	409a      	lsls	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d01a      	beq.n	8003afc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d013      	beq.n	8003afc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0204 	bic.w	r2, r2, #4
 8003ae2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae8:	2208      	movs	r2, #8
 8003aea:	409a      	lsls	r2, r3
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af4:	f043 0201 	orr.w	r2, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b00:	2201      	movs	r2, #1
 8003b02:	409a      	lsls	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4013      	ands	r3, r2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d012      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00b      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1e:	2201      	movs	r2, #1
 8003b20:	409a      	lsls	r2, r3
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2a:	f043 0202 	orr.w	r2, r3, #2
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b36:	2204      	movs	r2, #4
 8003b38:	409a      	lsls	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d012      	beq.n	8003b68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00b      	beq.n	8003b68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b54:	2204      	movs	r2, #4
 8003b56:	409a      	lsls	r2, r3
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b60:	f043 0204 	orr.w	r2, r3, #4
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6c:	2210      	movs	r2, #16
 8003b6e:	409a      	lsls	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d043      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d03c      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8a:	2210      	movs	r2, #16
 8003b8c:	409a      	lsls	r2, r3
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d018      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d108      	bne.n	8003bc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d024      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	4798      	blx	r3
 8003bbe:	e01f      	b.n	8003c00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d01b      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	4798      	blx	r3
 8003bd0:	e016      	b.n	8003c00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d107      	bne.n	8003bf0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0208 	bic.w	r2, r2, #8
 8003bee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c04:	2220      	movs	r2, #32
 8003c06:	409a      	lsls	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 808e 	beq.w	8003d2e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 8086 	beq.w	8003d2e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c26:	2220      	movs	r2, #32
 8003c28:	409a      	lsls	r2, r3
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b05      	cmp	r3, #5
 8003c38:	d136      	bne.n	8003ca8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0216 	bic.w	r2, r2, #22
 8003c48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695a      	ldr	r2, [r3, #20]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d103      	bne.n	8003c6a <HAL_DMA_IRQHandler+0x1da>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d007      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0208 	bic.w	r2, r2, #8
 8003c78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7e:	223f      	movs	r2, #63	; 0x3f
 8003c80:	409a      	lsls	r2, r3
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d07d      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	4798      	blx	r3
        }
        return;
 8003ca6:	e078      	b.n	8003d9a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d01c      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d108      	bne.n	8003cd6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d030      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	4798      	blx	r3
 8003cd4:	e02b      	b.n	8003d2e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d027      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	4798      	blx	r3
 8003ce6:	e022      	b.n	8003d2e <HAL_DMA_IRQHandler+0x29e>
 8003ce8:	2000000c 	.word	0x2000000c
 8003cec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10f      	bne.n	8003d1e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0210 	bic.w	r2, r2, #16
 8003d0c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d032      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d022      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2205      	movs	r2, #5
 8003d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0201 	bic.w	r2, r2, #1
 8003d58:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	60bb      	str	r3, [r7, #8]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d307      	bcc.n	8003d76 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1f2      	bne.n	8003d5a <HAL_DMA_IRQHandler+0x2ca>
 8003d74:	e000      	b.n	8003d78 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003d76:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	4798      	blx	r3
 8003d98:	e000      	b.n	8003d9c <HAL_DMA_IRQHandler+0x30c>
        return;
 8003d9a:	bf00      	nop
    }
  }
}
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop

08003da4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003db2:	b2db      	uxtb	r3, r3
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
 8003de4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003df4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b40      	cmp	r3, #64	; 0x40
 8003e04:	d108      	bne.n	8003e18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e16:	e007      	b.n	8003e28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	60da      	str	r2, [r3, #12]
}
 8003e28:	bf00      	nop
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	3b10      	subs	r3, #16
 8003e44:	4a14      	ldr	r2, [pc, #80]	; (8003e98 <DMA_CalcBaseAndBitshift+0x64>)
 8003e46:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4a:	091b      	lsrs	r3, r3, #4
 8003e4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e4e:	4a13      	ldr	r2, [pc, #76]	; (8003e9c <DMA_CalcBaseAndBitshift+0x68>)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4413      	add	r3, r2
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d909      	bls.n	8003e76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e6a:	f023 0303 	bic.w	r3, r3, #3
 8003e6e:	1d1a      	adds	r2, r3, #4
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	659a      	str	r2, [r3, #88]	; 0x58
 8003e74:	e007      	b.n	8003e86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e7e:	f023 0303 	bic.w	r3, r3, #3
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	aaaaaaab 	.word	0xaaaaaaab
 8003e9c:	0800c980 	.word	0x0800c980

08003ea0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d11f      	bne.n	8003efa <DMA_CheckFifoParam+0x5a>
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d856      	bhi.n	8003f6e <DMA_CheckFifoParam+0xce>
 8003ec0:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <DMA_CheckFifoParam+0x28>)
 8003ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec6:	bf00      	nop
 8003ec8:	08003ed9 	.word	0x08003ed9
 8003ecc:	08003eeb 	.word	0x08003eeb
 8003ed0:	08003ed9 	.word	0x08003ed9
 8003ed4:	08003f6f 	.word	0x08003f6f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d046      	beq.n	8003f72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ee8:	e043      	b.n	8003f72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ef2:	d140      	bne.n	8003f76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ef8:	e03d      	b.n	8003f76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f02:	d121      	bne.n	8003f48 <DMA_CheckFifoParam+0xa8>
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d837      	bhi.n	8003f7a <DMA_CheckFifoParam+0xda>
 8003f0a:	a201      	add	r2, pc, #4	; (adr r2, 8003f10 <DMA_CheckFifoParam+0x70>)
 8003f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f10:	08003f21 	.word	0x08003f21
 8003f14:	08003f27 	.word	0x08003f27
 8003f18:	08003f21 	.word	0x08003f21
 8003f1c:	08003f39 	.word	0x08003f39
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	73fb      	strb	r3, [r7, #15]
      break;
 8003f24:	e030      	b.n	8003f88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d025      	beq.n	8003f7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f36:	e022      	b.n	8003f7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f40:	d11f      	bne.n	8003f82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f46:	e01c      	b.n	8003f82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d903      	bls.n	8003f56 <DMA_CheckFifoParam+0xb6>
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b03      	cmp	r3, #3
 8003f52:	d003      	beq.n	8003f5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f54:	e018      	b.n	8003f88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	73fb      	strb	r3, [r7, #15]
      break;
 8003f5a:	e015      	b.n	8003f88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00e      	beq.n	8003f86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f6c:	e00b      	b.n	8003f86 <DMA_CheckFifoParam+0xe6>
      break;
 8003f6e:	bf00      	nop
 8003f70:	e00a      	b.n	8003f88 <DMA_CheckFifoParam+0xe8>
      break;
 8003f72:	bf00      	nop
 8003f74:	e008      	b.n	8003f88 <DMA_CheckFifoParam+0xe8>
      break;
 8003f76:	bf00      	nop
 8003f78:	e006      	b.n	8003f88 <DMA_CheckFifoParam+0xe8>
      break;
 8003f7a:	bf00      	nop
 8003f7c:	e004      	b.n	8003f88 <DMA_CheckFifoParam+0xe8>
      break;
 8003f7e:	bf00      	nop
 8003f80:	e002      	b.n	8003f88 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f82:	bf00      	nop
 8003f84:	e000      	b.n	8003f88 <DMA_CheckFifoParam+0xe8>
      break;
 8003f86:	bf00      	nop
    }
  } 
  
  return status; 
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop

08003f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b089      	sub	sp, #36	; 0x24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61fb      	str	r3, [r7, #28]
 8003fb2:	e159      	b.n	8004268 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	f040 8148 	bne.w	8004262 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d005      	beq.n	8003fea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d130      	bne.n	800404c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4013      	ands	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	4313      	orrs	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004020:	2201      	movs	r2, #1
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	43db      	mvns	r3, r3
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	4013      	ands	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	f003 0201 	and.w	r2, r3, #1
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4313      	orrs	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f003 0303 	and.w	r3, r3, #3
 8004054:	2b03      	cmp	r3, #3
 8004056:	d017      	beq.n	8004088 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	2203      	movs	r2, #3
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	43db      	mvns	r3, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4013      	ands	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4313      	orrs	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 0303 	and.w	r3, r3, #3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d123      	bne.n	80040dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	08da      	lsrs	r2, r3, #3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3208      	adds	r2, #8
 800409c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	220f      	movs	r2, #15
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	43db      	mvns	r3, r3
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	4013      	ands	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	08da      	lsrs	r2, r3, #3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3208      	adds	r2, #8
 80040d6:	69b9      	ldr	r1, [r7, #24]
 80040d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	2203      	movs	r2, #3
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4013      	ands	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f003 0203 	and.w	r2, r3, #3
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	4313      	orrs	r3, r2
 8004108:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80a2 	beq.w	8004262 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	4b57      	ldr	r3, [pc, #348]	; (8004280 <HAL_GPIO_Init+0x2e8>)
 8004124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004126:	4a56      	ldr	r2, [pc, #344]	; (8004280 <HAL_GPIO_Init+0x2e8>)
 8004128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800412c:	6453      	str	r3, [r2, #68]	; 0x44
 800412e:	4b54      	ldr	r3, [pc, #336]	; (8004280 <HAL_GPIO_Init+0x2e8>)
 8004130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800413a:	4a52      	ldr	r2, [pc, #328]	; (8004284 <HAL_GPIO_Init+0x2ec>)
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	089b      	lsrs	r3, r3, #2
 8004140:	3302      	adds	r3, #2
 8004142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	220f      	movs	r2, #15
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	43db      	mvns	r3, r3
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	4013      	ands	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a49      	ldr	r2, [pc, #292]	; (8004288 <HAL_GPIO_Init+0x2f0>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d019      	beq.n	800419a <HAL_GPIO_Init+0x202>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a48      	ldr	r2, [pc, #288]	; (800428c <HAL_GPIO_Init+0x2f4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <HAL_GPIO_Init+0x1fe>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a47      	ldr	r2, [pc, #284]	; (8004290 <HAL_GPIO_Init+0x2f8>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00d      	beq.n	8004192 <HAL_GPIO_Init+0x1fa>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a46      	ldr	r2, [pc, #280]	; (8004294 <HAL_GPIO_Init+0x2fc>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d007      	beq.n	800418e <HAL_GPIO_Init+0x1f6>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a45      	ldr	r2, [pc, #276]	; (8004298 <HAL_GPIO_Init+0x300>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d101      	bne.n	800418a <HAL_GPIO_Init+0x1f2>
 8004186:	2304      	movs	r3, #4
 8004188:	e008      	b.n	800419c <HAL_GPIO_Init+0x204>
 800418a:	2307      	movs	r3, #7
 800418c:	e006      	b.n	800419c <HAL_GPIO_Init+0x204>
 800418e:	2303      	movs	r3, #3
 8004190:	e004      	b.n	800419c <HAL_GPIO_Init+0x204>
 8004192:	2302      	movs	r3, #2
 8004194:	e002      	b.n	800419c <HAL_GPIO_Init+0x204>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <HAL_GPIO_Init+0x204>
 800419a:	2300      	movs	r3, #0
 800419c:	69fa      	ldr	r2, [r7, #28]
 800419e:	f002 0203 	and.w	r2, r2, #3
 80041a2:	0092      	lsls	r2, r2, #2
 80041a4:	4093      	lsls	r3, r2
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041ac:	4935      	ldr	r1, [pc, #212]	; (8004284 <HAL_GPIO_Init+0x2ec>)
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	089b      	lsrs	r3, r3, #2
 80041b2:	3302      	adds	r3, #2
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041ba:	4b38      	ldr	r3, [pc, #224]	; (800429c <HAL_GPIO_Init+0x304>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	43db      	mvns	r3, r3
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	4013      	ands	r3, r2
 80041c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041de:	4a2f      	ldr	r2, [pc, #188]	; (800429c <HAL_GPIO_Init+0x304>)
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80041e4:	4b2d      	ldr	r3, [pc, #180]	; (800429c <HAL_GPIO_Init+0x304>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	43db      	mvns	r3, r3
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4013      	ands	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	4313      	orrs	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004208:	4a24      	ldr	r2, [pc, #144]	; (800429c <HAL_GPIO_Init+0x304>)
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800420e:	4b23      	ldr	r3, [pc, #140]	; (800429c <HAL_GPIO_Init+0x304>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	43db      	mvns	r3, r3
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	4013      	ands	r3, r2
 800421c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	4313      	orrs	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004232:	4a1a      	ldr	r2, [pc, #104]	; (800429c <HAL_GPIO_Init+0x304>)
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004238:	4b18      	ldr	r3, [pc, #96]	; (800429c <HAL_GPIO_Init+0x304>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	43db      	mvns	r3, r3
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	4013      	ands	r3, r2
 8004246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	4313      	orrs	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800425c:	4a0f      	ldr	r2, [pc, #60]	; (800429c <HAL_GPIO_Init+0x304>)
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	3301      	adds	r3, #1
 8004266:	61fb      	str	r3, [r7, #28]
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	2b0f      	cmp	r3, #15
 800426c:	f67f aea2 	bls.w	8003fb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004270:	bf00      	nop
 8004272:	bf00      	nop
 8004274:	3724      	adds	r7, #36	; 0x24
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40023800 	.word	0x40023800
 8004284:	40013800 	.word	0x40013800
 8004288:	40020000 	.word	0x40020000
 800428c:	40020400 	.word	0x40020400
 8004290:	40020800 	.word	0x40020800
 8004294:	40020c00 	.word	0x40020c00
 8004298:	40021000 	.word	0x40021000
 800429c:	40013c00 	.word	0x40013c00

080042a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	807b      	strh	r3, [r7, #2]
 80042ac:	4613      	mov	r3, r2
 80042ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042b0:	787b      	ldrb	r3, [r7, #1]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042b6:	887a      	ldrh	r2, [r7, #2]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042bc:	e003      	b.n	80042c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042be:	887b      	ldrh	r3, [r7, #2]
 80042c0:	041a      	lsls	r2, r3, #16
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	619a      	str	r2, [r3, #24]
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b085      	sub	sp, #20
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	460b      	mov	r3, r1
 80042dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042e4:	887a      	ldrh	r2, [r7, #2]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4013      	ands	r3, r2
 80042ea:	041a      	lsls	r2, r3, #16
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	43d9      	mvns	r1, r3
 80042f0:	887b      	ldrh	r3, [r7, #2]
 80042f2:	400b      	ands	r3, r1
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	619a      	str	r2, [r3, #24]
}
 80042fa:	bf00      	nop
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
	...

08004308 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e12b      	b.n	8004572 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7fe fa1c 	bl	800276c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2224      	movs	r2, #36	; 0x24
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0201 	bic.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800435a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800436a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800436c:	f002 fea2 	bl	80070b4 <HAL_RCC_GetPCLK1Freq>
 8004370:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	4a81      	ldr	r2, [pc, #516]	; (800457c <HAL_I2C_Init+0x274>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d807      	bhi.n	800438c <HAL_I2C_Init+0x84>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4a80      	ldr	r2, [pc, #512]	; (8004580 <HAL_I2C_Init+0x278>)
 8004380:	4293      	cmp	r3, r2
 8004382:	bf94      	ite	ls
 8004384:	2301      	movls	r3, #1
 8004386:	2300      	movhi	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	e006      	b.n	800439a <HAL_I2C_Init+0x92>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4a7d      	ldr	r2, [pc, #500]	; (8004584 <HAL_I2C_Init+0x27c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	bf94      	ite	ls
 8004394:	2301      	movls	r3, #1
 8004396:	2300      	movhi	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e0e7      	b.n	8004572 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4a78      	ldr	r2, [pc, #480]	; (8004588 <HAL_I2C_Init+0x280>)
 80043a6:	fba2 2303 	umull	r2, r3, r2, r3
 80043aa:	0c9b      	lsrs	r3, r3, #18
 80043ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	430a      	orrs	r2, r1
 80043c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	4a6a      	ldr	r2, [pc, #424]	; (800457c <HAL_I2C_Init+0x274>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d802      	bhi.n	80043dc <HAL_I2C_Init+0xd4>
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	3301      	adds	r3, #1
 80043da:	e009      	b.n	80043f0 <HAL_I2C_Init+0xe8>
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80043e2:	fb02 f303 	mul.w	r3, r2, r3
 80043e6:	4a69      	ldr	r2, [pc, #420]	; (800458c <HAL_I2C_Init+0x284>)
 80043e8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ec:	099b      	lsrs	r3, r3, #6
 80043ee:	3301      	adds	r3, #1
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6812      	ldr	r2, [r2, #0]
 80043f4:	430b      	orrs	r3, r1
 80043f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004402:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	495c      	ldr	r1, [pc, #368]	; (800457c <HAL_I2C_Init+0x274>)
 800440c:	428b      	cmp	r3, r1
 800440e:	d819      	bhi.n	8004444 <HAL_I2C_Init+0x13c>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	1e59      	subs	r1, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	fbb1 f3f3 	udiv	r3, r1, r3
 800441e:	1c59      	adds	r1, r3, #1
 8004420:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004424:	400b      	ands	r3, r1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <HAL_I2C_Init+0x138>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	1e59      	subs	r1, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	fbb1 f3f3 	udiv	r3, r1, r3
 8004438:	3301      	adds	r3, #1
 800443a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800443e:	e051      	b.n	80044e4 <HAL_I2C_Init+0x1dc>
 8004440:	2304      	movs	r3, #4
 8004442:	e04f      	b.n	80044e4 <HAL_I2C_Init+0x1dc>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d111      	bne.n	8004470 <HAL_I2C_Init+0x168>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	1e58      	subs	r0, r3, #1
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6859      	ldr	r1, [r3, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	440b      	add	r3, r1
 800445a:	fbb0 f3f3 	udiv	r3, r0, r3
 800445e:	3301      	adds	r3, #1
 8004460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004464:	2b00      	cmp	r3, #0
 8004466:	bf0c      	ite	eq
 8004468:	2301      	moveq	r3, #1
 800446a:	2300      	movne	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	e012      	b.n	8004496 <HAL_I2C_Init+0x18e>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	1e58      	subs	r0, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6859      	ldr	r1, [r3, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	0099      	lsls	r1, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	fbb0 f3f3 	udiv	r3, r0, r3
 8004486:	3301      	adds	r3, #1
 8004488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800448c:	2b00      	cmp	r3, #0
 800448e:	bf0c      	ite	eq
 8004490:	2301      	moveq	r3, #1
 8004492:	2300      	movne	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <HAL_I2C_Init+0x196>
 800449a:	2301      	movs	r3, #1
 800449c:	e022      	b.n	80044e4 <HAL_I2C_Init+0x1dc>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10e      	bne.n	80044c4 <HAL_I2C_Init+0x1bc>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1e58      	subs	r0, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6859      	ldr	r1, [r3, #4]
 80044ae:	460b      	mov	r3, r1
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	440b      	add	r3, r1
 80044b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80044b8:	3301      	adds	r3, #1
 80044ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044c2:	e00f      	b.n	80044e4 <HAL_I2C_Init+0x1dc>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	1e58      	subs	r0, r3, #1
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6859      	ldr	r1, [r3, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	0099      	lsls	r1, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044da:	3301      	adds	r3, #1
 80044dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	6809      	ldr	r1, [r1, #0]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69da      	ldr	r2, [r3, #28]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004512:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6911      	ldr	r1, [r2, #16]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	68d2      	ldr	r2, [r2, #12]
 800451e:	4311      	orrs	r1, r2
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6812      	ldr	r2, [r2, #0]
 8004524:	430b      	orrs	r3, r1
 8004526:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695a      	ldr	r2, [r3, #20]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2220      	movs	r2, #32
 800455e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	000186a0 	.word	0x000186a0
 8004580:	001e847f 	.word	0x001e847f
 8004584:	003d08ff 	.word	0x003d08ff
 8004588:	431bde83 	.word	0x431bde83
 800458c:	10624dd3 	.word	0x10624dd3

08004590 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af02      	add	r7, sp, #8
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	4608      	mov	r0, r1
 800459a:	4611      	mov	r1, r2
 800459c:	461a      	mov	r2, r3
 800459e:	4603      	mov	r3, r0
 80045a0:	817b      	strh	r3, [r7, #10]
 80045a2:	460b      	mov	r3, r1
 80045a4:	813b      	strh	r3, [r7, #8]
 80045a6:	4613      	mov	r3, r2
 80045a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045aa:	f7fe ff97 	bl	80034dc <HAL_GetTick>
 80045ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b20      	cmp	r3, #32
 80045ba:	f040 80d9 	bne.w	8004770 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	2319      	movs	r3, #25
 80045c4:	2201      	movs	r2, #1
 80045c6:	496d      	ldr	r1, [pc, #436]	; (800477c <HAL_I2C_Mem_Write+0x1ec>)
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f001 ff53 	bl	8006474 <I2C_WaitOnFlagUntilTimeout>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80045d4:	2302      	movs	r3, #2
 80045d6:	e0cc      	b.n	8004772 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d101      	bne.n	80045e6 <HAL_I2C_Mem_Write+0x56>
 80045e2:	2302      	movs	r3, #2
 80045e4:	e0c5      	b.n	8004772 <HAL_I2C_Mem_Write+0x1e2>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d007      	beq.n	800460c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800461a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2221      	movs	r2, #33	; 0x21
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2240      	movs	r2, #64	; 0x40
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6a3a      	ldr	r2, [r7, #32]
 8004636:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800463c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4a4d      	ldr	r2, [pc, #308]	; (8004780 <HAL_I2C_Mem_Write+0x1f0>)
 800464c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800464e:	88f8      	ldrh	r0, [r7, #6]
 8004650:	893a      	ldrh	r2, [r7, #8]
 8004652:	8979      	ldrh	r1, [r7, #10]
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	9301      	str	r3, [sp, #4]
 8004658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	4603      	mov	r3, r0
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f001 fcb8 	bl	8005fd4 <I2C_RequestMemoryWrite>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d052      	beq.n	8004710 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e081      	b.n	8004772 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f001 ffd4 	bl	8006620 <I2C_WaitOnTXEFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00d      	beq.n	800469a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	2b04      	cmp	r3, #4
 8004684:	d107      	bne.n	8004696 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004694:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e06b      	b.n	8004772 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	781a      	ldrb	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	3b01      	subs	r3, #1
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d11b      	bne.n	8004710 <HAL_I2C_Mem_Write+0x180>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d017      	beq.n	8004710 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	781a      	ldrb	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1aa      	bne.n	800466e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f001 ffc0 	bl	80066a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00d      	beq.n	8004744 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472c:	2b04      	cmp	r3, #4
 800472e:	d107      	bne.n	8004740 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800473e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e016      	b.n	8004772 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004752:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	e000      	b.n	8004772 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004770:	2302      	movs	r3, #2
  }
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	00100002 	.word	0x00100002
 8004780:	ffff0000 	.word	0xffff0000

08004784 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08a      	sub	sp, #40	; 0x28
 8004788:	af02      	add	r7, sp, #8
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	4608      	mov	r0, r1
 800478e:	4611      	mov	r1, r2
 8004790:	461a      	mov	r2, r3
 8004792:	4603      	mov	r3, r0
 8004794:	817b      	strh	r3, [r7, #10]
 8004796:	460b      	mov	r3, r1
 8004798:	813b      	strh	r3, [r7, #8]
 800479a:	4613      	mov	r3, r2
 800479c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047a2:	f7fe fe9b 	bl	80034dc <HAL_GetTick>
 80047a6:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b20      	cmp	r3, #32
 80047b2:	f040 813a 	bne.w	8004a2a <HAL_I2C_Mem_Write_DMA+0x2a6>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80047b6:	4b9f      	ldr	r3, [pc, #636]	; (8004a34 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	08db      	lsrs	r3, r3, #3
 80047bc:	4a9e      	ldr	r2, [pc, #632]	; (8004a38 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 80047be:	fba2 2303 	umull	r2, r3, r2, r3
 80047c2:	0a1a      	lsrs	r2, r3, #8
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	009a      	lsls	r2, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d116      	bne.n	800480a <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	f043 0220 	orr.w	r2, r3, #32
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e110      	b.n	8004a2c <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b02      	cmp	r3, #2
 8004816:	d0db      	beq.n	80047d0 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800481e:	2b01      	cmp	r3, #1
 8004820:	d101      	bne.n	8004826 <HAL_I2C_Mem_Write_DMA+0xa2>
 8004822:	2302      	movs	r3, #2
 8004824:	e102      	b.n	8004a2c <HAL_I2C_Mem_Write_DMA+0x2a8>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b01      	cmp	r3, #1
 800483a:	d007      	beq.n	800484c <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800485a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2221      	movs	r2, #33	; 0x21
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2240      	movs	r2, #64	; 0x40
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004876:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800487c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004882:	b29a      	uxth	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4a6c      	ldr	r2, [pc, #432]	; (8004a3c <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800488c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800488e:	897a      	ldrh	r2, [r7, #10]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004894:	893a      	ldrh	r2, [r7, #8]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800489a:	88fa      	ldrh	r2, [r7, #6]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 80a9 	beq.w	8004a02 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d02a      	beq.n	800490e <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048bc:	4a60      	ldr	r2, [pc, #384]	; (8004a40 <HAL_I2C_Mem_Write_DMA+0x2bc>)
 80048be:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c4:	4a5f      	ldr	r2, [pc, #380]	; (8004a44 <HAL_I2C_Mem_Write_DMA+0x2c0>)
 80048c6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048cc:	2200      	movs	r2, #0
 80048ce:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d4:	2200      	movs	r2, #0
 80048d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048dc:	2200      	movs	r2, #0
 80048de:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e4:	2200      	movs	r2, #0
 80048e6:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	4619      	mov	r1, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3310      	adds	r3, #16
 80048f8:	461a      	mov	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fe:	f7fe ffdd 	bl	80038bc <HAL_DMA_Start_IT>
 8004902:	4603      	mov	r3, r0
 8004904:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004906:	7efb      	ldrb	r3, [r7, #27]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d166      	bne.n	80049da <HAL_I2C_Mem_Write_DMA+0x256>
 800490c:	e013      	b.n	8004936 <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2220      	movs	r2, #32
 8004912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e07a      	b.n	8004a2c <HAL_I2C_Mem_Write_DMA+0x2a8>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004936:	88f8      	ldrh	r0, [r7, #6]
 8004938:	893a      	ldrh	r2, [r7, #8]
 800493a:	8979      	ldrh	r1, [r7, #10]
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	9301      	str	r3, [sp, #4]
 8004940:	2323      	movs	r3, #35	; 0x23
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	4603      	mov	r3, r0
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f001 fb44 	bl	8005fd4 <I2C_RequestMemoryWrite>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d022      	beq.n	8004998 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff f878 	bl	8003a4c <HAL_DMA_Abort_IT>
 800495c:	4603      	mov	r3, r0
 800495e:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004964:	2200      	movs	r2, #0
 8004966:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004976:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0201 	bic.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e049      	b.n	8004a2c <HAL_I2C_Mem_Write_DMA+0x2a8>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004998:	2300      	movs	r3, #0
 800499a:	613b      	str	r3, [r7, #16]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	613b      	str	r3, [r7, #16]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	613b      	str	r3, [r7, #16]
 80049ac:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049c4:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049d4:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	e028      	b.n	8004a2c <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	f043 0210 	orr.w	r2, r3, #16
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e014      	b.n	8004a2c <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <HAL_I2C_Mem_Write_DMA+0x2a8>
    }
  }
  else
  {
    return HAL_BUSY;
 8004a2a:	2302      	movs	r3, #2
  }
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3720      	adds	r7, #32
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	2000000c 	.word	0x2000000c
 8004a38:	14f8b589 	.word	0x14f8b589
 8004a3c:	ffff0000 	.word	0xffff0000
 8004a40:	08006101 	.word	0x08006101
 8004a44:	080062ab 	.word	0x080062ab

08004a48 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a68:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a70:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
 8004a74:	2b10      	cmp	r3, #16
 8004a76:	d003      	beq.n	8004a80 <HAL_I2C_EV_IRQHandler+0x38>
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	2b40      	cmp	r3, #64	; 0x40
 8004a7c:	f040 80c1 	bne.w	8004c02 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10d      	bne.n	8004ab6 <HAL_I2C_EV_IRQHandler+0x6e>
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004aa0:	d003      	beq.n	8004aaa <HAL_I2C_EV_IRQHandler+0x62>
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004aa8:	d101      	bne.n	8004aae <HAL_I2C_EV_IRQHandler+0x66>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <HAL_I2C_EV_IRQHandler+0x68>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	f000 8132 	beq.w	8004d1a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00c      	beq.n	8004ada <HAL_I2C_EV_IRQHandler+0x92>
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	0a5b      	lsrs	r3, r3, #9
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d006      	beq.n	8004ada <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f001 fe8a 	bl	80067e6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fcd2 	bl	800547c <I2C_Master_SB>
 8004ad8:	e092      	b.n	8004c00 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	08db      	lsrs	r3, r3, #3
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d009      	beq.n	8004afa <HAL_I2C_EV_IRQHandler+0xb2>
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	0a5b      	lsrs	r3, r3, #9
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fd48 	bl	8005588 <I2C_Master_ADD10>
 8004af8:	e082      	b.n	8004c00 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	085b      	lsrs	r3, r3, #1
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d009      	beq.n	8004b1a <HAL_I2C_EV_IRQHandler+0xd2>
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	0a5b      	lsrs	r3, r3, #9
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fd62 	bl	80055dc <I2C_Master_ADDR>
 8004b18:	e072      	b.n	8004c00 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	089b      	lsrs	r3, r3, #2
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d03b      	beq.n	8004b9e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b34:	f000 80f3 	beq.w	8004d1e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	09db      	lsrs	r3, r3, #7
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00f      	beq.n	8004b64 <HAL_I2C_EV_IRQHandler+0x11c>
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	0a9b      	lsrs	r3, r3, #10
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d009      	beq.n	8004b64 <HAL_I2C_EV_IRQHandler+0x11c>
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	089b      	lsrs	r3, r3, #2
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d103      	bne.n	8004b64 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f94c 	bl	8004dfa <I2C_MasterTransmit_TXE>
 8004b62:	e04d      	b.n	8004c00 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	089b      	lsrs	r3, r3, #2
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 80d6 	beq.w	8004d1e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	0a5b      	lsrs	r3, r3, #9
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 80cf 	beq.w	8004d1e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004b80:	7bbb      	ldrb	r3, [r7, #14]
 8004b82:	2b21      	cmp	r3, #33	; 0x21
 8004b84:	d103      	bne.n	8004b8e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f9d3 	bl	8004f32 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b8c:	e0c7      	b.n	8004d1e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004b8e:	7bfb      	ldrb	r3, [r7, #15]
 8004b90:	2b40      	cmp	r3, #64	; 0x40
 8004b92:	f040 80c4 	bne.w	8004d1e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 fa41 	bl	800501e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b9c:	e0bf      	b.n	8004d1e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bac:	f000 80b7 	beq.w	8004d1e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	099b      	lsrs	r3, r3, #6
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00f      	beq.n	8004bdc <HAL_I2C_EV_IRQHandler+0x194>
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	0a9b      	lsrs	r3, r3, #10
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d009      	beq.n	8004bdc <HAL_I2C_EV_IRQHandler+0x194>
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	089b      	lsrs	r3, r3, #2
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d103      	bne.n	8004bdc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fab6 	bl	8005146 <I2C_MasterReceive_RXNE>
 8004bda:	e011      	b.n	8004c00 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	089b      	lsrs	r3, r3, #2
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 809a 	beq.w	8004d1e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	0a5b      	lsrs	r3, r3, #9
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 8093 	beq.w	8004d1e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fb55 	bl	80052a8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bfe:	e08e      	b.n	8004d1e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004c00:	e08d      	b.n	8004d1e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d004      	beq.n	8004c14 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	61fb      	str	r3, [r7, #28]
 8004c12:	e007      	b.n	8004c24 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	085b      	lsrs	r3, r3, #1
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d012      	beq.n	8004c56 <HAL_I2C_EV_IRQHandler+0x20e>
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	0a5b      	lsrs	r3, r3, #9
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00c      	beq.n	8004c56 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004c4c:	69b9      	ldr	r1, [r7, #24]
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 ff13 	bl	8005a7a <I2C_Slave_ADDR>
 8004c54:	e066      	b.n	8004d24 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	091b      	lsrs	r3, r3, #4
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d009      	beq.n	8004c76 <HAL_I2C_EV_IRQHandler+0x22e>
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	0a5b      	lsrs	r3, r3, #9
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 ff4e 	bl	8005b10 <I2C_Slave_STOPF>
 8004c74:	e056      	b.n	8004d24 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c76:	7bbb      	ldrb	r3, [r7, #14]
 8004c78:	2b21      	cmp	r3, #33	; 0x21
 8004c7a:	d002      	beq.n	8004c82 <HAL_I2C_EV_IRQHandler+0x23a>
 8004c7c:	7bbb      	ldrb	r3, [r7, #14]
 8004c7e:	2b29      	cmp	r3, #41	; 0x29
 8004c80:	d125      	bne.n	8004cce <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	09db      	lsrs	r3, r3, #7
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00f      	beq.n	8004cae <HAL_I2C_EV_IRQHandler+0x266>
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	0a9b      	lsrs	r3, r3, #10
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d009      	beq.n	8004cae <HAL_I2C_EV_IRQHandler+0x266>
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	089b      	lsrs	r3, r3, #2
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d103      	bne.n	8004cae <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fe29 	bl	80058fe <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cac:	e039      	b.n	8004d22 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	089b      	lsrs	r3, r3, #2
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d033      	beq.n	8004d22 <HAL_I2C_EV_IRQHandler+0x2da>
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	0a5b      	lsrs	r3, r3, #9
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d02d      	beq.n	8004d22 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fe56 	bl	8005978 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ccc:	e029      	b.n	8004d22 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	099b      	lsrs	r3, r3, #6
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00f      	beq.n	8004cfa <HAL_I2C_EV_IRQHandler+0x2b2>
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	0a9b      	lsrs	r3, r3, #10
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d009      	beq.n	8004cfa <HAL_I2C_EV_IRQHandler+0x2b2>
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	089b      	lsrs	r3, r3, #2
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d103      	bne.n	8004cfa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fe61 	bl	80059ba <I2C_SlaveReceive_RXNE>
 8004cf8:	e014      	b.n	8004d24 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	089b      	lsrs	r3, r3, #2
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00e      	beq.n	8004d24 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	0a5b      	lsrs	r3, r3, #9
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d008      	beq.n	8004d24 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fe8f 	bl	8005a36 <I2C_SlaveReceive_BTF>
 8004d18:	e004      	b.n	8004d24 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004d1a:	bf00      	nop
 8004d1c:	e002      	b.n	8004d24 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d1e:	bf00      	nop
 8004d20:	e000      	b.n	8004d24 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d22:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004d24:	3720      	adds	r7, #32
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	460b      	mov	r3, r1
 8004d84:	70fb      	strb	r3, [r7, #3]
 8004d86:	4613      	mov	r3, r2
 8004d88:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b084      	sub	sp, #16
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e08:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e10:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e16:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d150      	bne.n	8004ec2 <I2C_MasterTransmit_TXE+0xc8>
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
 8004e22:	2b21      	cmp	r3, #33	; 0x21
 8004e24:	d14d      	bne.n	8004ec2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	d01d      	beq.n	8004e68 <I2C_MasterTransmit_TXE+0x6e>
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b20      	cmp	r3, #32
 8004e30:	d01a      	beq.n	8004e68 <I2C_MasterTransmit_TXE+0x6e>
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e38:	d016      	beq.n	8004e68 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e48:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2211      	movs	r2, #17
 8004e4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7ff ff62 	bl	8004d2a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e66:	e060      	b.n	8004f2a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e76:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e86:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b40      	cmp	r3, #64	; 0x40
 8004ea0:	d107      	bne.n	8004eb2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7ff ff7d 	bl	8004daa <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004eb0:	e03b      	b.n	8004f2a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7ff ff35 	bl	8004d2a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ec0:	e033      	b.n	8004f2a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
 8004ec4:	2b21      	cmp	r3, #33	; 0x21
 8004ec6:	d005      	beq.n	8004ed4 <I2C_MasterTransmit_TXE+0xda>
 8004ec8:	7bbb      	ldrb	r3, [r7, #14]
 8004eca:	2b40      	cmp	r3, #64	; 0x40
 8004ecc:	d12d      	bne.n	8004f2a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004ece:	7bfb      	ldrb	r3, [r7, #15]
 8004ed0:	2b22      	cmp	r3, #34	; 0x22
 8004ed2:	d12a      	bne.n	8004f2a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d108      	bne.n	8004ef0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eec:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004eee:	e01c      	b.n	8004f2a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b40      	cmp	r3, #64	; 0x40
 8004efa:	d103      	bne.n	8004f04 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f88e 	bl	800501e <I2C_MemoryTransmit_TXE_BTF>
}
 8004f02:	e012      	b.n	8004f2a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	781a      	ldrb	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f28:	e7ff      	b.n	8004f2a <I2C_MasterTransmit_TXE+0x130>
 8004f2a:	bf00      	nop
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b084      	sub	sp, #16
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b21      	cmp	r3, #33	; 0x21
 8004f4a:	d164      	bne.n	8005016 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d012      	beq.n	8004f7c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	781a      	ldrb	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004f7a:	e04c      	b.n	8005016 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d01d      	beq.n	8004fbe <I2C_MasterTransmit_BTF+0x8c>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2b20      	cmp	r3, #32
 8004f86:	d01a      	beq.n	8004fbe <I2C_MasterTransmit_BTF+0x8c>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f8e:	d016      	beq.n	8004fbe <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f9e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2211      	movs	r2, #17
 8004fa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7ff feb7 	bl	8004d2a <HAL_I2C_MasterTxCpltCallback>
}
 8004fbc:	e02b      	b.n	8005016 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fcc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fdc:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b40      	cmp	r3, #64	; 0x40
 8004ff6:	d107      	bne.n	8005008 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff fed2 	bl	8004daa <HAL_I2C_MemTxCpltCallback>
}
 8005006:	e006      	b.n	8005016 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff fe8a 	bl	8004d2a <HAL_I2C_MasterTxCpltCallback>
}
 8005016:	bf00      	nop
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800502c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005032:	2b00      	cmp	r3, #0
 8005034:	d11d      	bne.n	8005072 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800503a:	2b01      	cmp	r3, #1
 800503c:	d10b      	bne.n	8005056 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005042:	b2da      	uxtb	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800504e:	1c9a      	adds	r2, r3, #2
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005054:	e073      	b.n	800513e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800505a:	b29b      	uxth	r3, r3
 800505c:	121b      	asrs	r3, r3, #8
 800505e:	b2da      	uxtb	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005070:	e065      	b.n	800513e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005076:	2b01      	cmp	r3, #1
 8005078:	d10b      	bne.n	8005092 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800507e:	b2da      	uxtb	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005090:	e055      	b.n	800513e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005096:	2b02      	cmp	r3, #2
 8005098:	d151      	bne.n	800513e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800509a:	7bfb      	ldrb	r3, [r7, #15]
 800509c:	2b22      	cmp	r3, #34	; 0x22
 800509e:	d10d      	bne.n	80050bc <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050ae:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80050ba:	e040      	b.n	800513e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d015      	beq.n	80050f2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
 80050c8:	2b21      	cmp	r3, #33	; 0x21
 80050ca:	d112      	bne.n	80050f2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	781a      	ldrb	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	3b01      	subs	r3, #1
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050f0:	e025      	b.n	800513e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d120      	bne.n	800513e <I2C_MemoryTransmit_TXE_BTF+0x120>
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
 80050fe:	2b21      	cmp	r3, #33	; 0x21
 8005100:	d11d      	bne.n	800513e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005110:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005120:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7ff fe36 	bl	8004daa <HAL_I2C_MemTxCpltCallback>
}
 800513e:	bf00      	nop
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b22      	cmp	r3, #34	; 0x22
 8005158:	f040 80a2 	bne.w	80052a0 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005160:	b29b      	uxth	r3, r3
 8005162:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b03      	cmp	r3, #3
 8005168:	d921      	bls.n	80051ae <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	691a      	ldr	r2, [r3, #16]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	b2d2      	uxtb	r2, r2
 8005176:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005186:	b29b      	uxth	r3, r3
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005194:	b29b      	uxth	r3, r3
 8005196:	2b03      	cmp	r3, #3
 8005198:	f040 8082 	bne.w	80052a0 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051aa:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80051ac:	e078      	b.n	80052a0 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d074      	beq.n	80052a0 <I2C_MasterReceive_RXNE+0x15a>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d002      	beq.n	80051c2 <I2C_MasterReceive_RXNE+0x7c>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d16e      	bne.n	80052a0 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f001 faae 	bl	8006724 <I2C_WaitOnSTOPRequestThroughIT>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d142      	bne.n	8005254 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051dc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051ec:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b40      	cmp	r3, #64	; 0x40
 8005226:	d10a      	bne.n	800523e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7ff fdc1 	bl	8004dbe <HAL_I2C_MemRxCpltCallback>
}
 800523c:	e030      	b.n	80052a0 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2212      	movs	r2, #18
 800524a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff fd76 	bl	8004d3e <HAL_I2C_MasterRxCpltCallback>
}
 8005252:	e025      	b.n	80052a0 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005262:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691a      	ldr	r2, [r3, #16]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005280:	b29b      	uxth	r3, r3
 8005282:	3b01      	subs	r3, #1
 8005284:	b29a      	uxth	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2220      	movs	r2, #32
 800528e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7ff fd99 	bl	8004dd2 <HAL_I2C_ErrorCallback>
}
 80052a0:	bf00      	nop
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d11b      	bne.n	80052f8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ce:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80052f6:	e0bd      	b.n	8005474 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	2b03      	cmp	r3, #3
 8005300:	d129      	bne.n	8005356 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005310:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b04      	cmp	r3, #4
 8005316:	d00a      	beq.n	800532e <I2C_MasterReceive_BTF+0x86>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2b02      	cmp	r3, #2
 800531c:	d007      	beq.n	800532e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800532c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534a:	b29b      	uxth	r3, r3
 800534c:	3b01      	subs	r3, #1
 800534e:	b29a      	uxth	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005354:	e08e      	b.n	8005474 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535a:	b29b      	uxth	r3, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d176      	bne.n	800544e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d002      	beq.n	800536c <I2C_MasterReceive_BTF+0xc4>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2b10      	cmp	r3, #16
 800536a:	d108      	bne.n	800537e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	e019      	b.n	80053b2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2b04      	cmp	r3, #4
 8005382:	d002      	beq.n	800538a <I2C_MasterReceive_BTF+0xe2>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b02      	cmp	r3, #2
 8005388:	d108      	bne.n	800539c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	e00a      	b.n	80053b2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b10      	cmp	r3, #16
 80053a0:	d007      	beq.n	80053b2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	3b01      	subs	r3, #1
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691a      	ldr	r2, [r3, #16]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800540c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2220      	movs	r2, #32
 8005412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b40      	cmp	r3, #64	; 0x40
 8005420:	d10a      	bne.n	8005438 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff fcc4 	bl	8004dbe <HAL_I2C_MemRxCpltCallback>
}
 8005436:	e01d      	b.n	8005474 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2212      	movs	r2, #18
 8005444:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7ff fc79 	bl	8004d3e <HAL_I2C_MasterRxCpltCallback>
}
 800544c:	e012      	b.n	8005474 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	691a      	ldr	r2, [r3, #16]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	b2d2      	uxtb	r2, r2
 800545a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546a:	b29b      	uxth	r3, r3
 800546c:	3b01      	subs	r3, #1
 800546e:	b29a      	uxth	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005474:	bf00      	nop
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b40      	cmp	r3, #64	; 0x40
 800548e:	d117      	bne.n	80054c0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005494:	2b00      	cmp	r3, #0
 8005496:	d109      	bne.n	80054ac <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549c:	b2db      	uxtb	r3, r3
 800549e:	461a      	mov	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054a8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80054aa:	e067      	b.n	800557c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	f043 0301 	orr.w	r3, r3, #1
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	611a      	str	r2, [r3, #16]
}
 80054be:	e05d      	b.n	800557c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054c8:	d133      	bne.n	8005532 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b21      	cmp	r3, #33	; 0x21
 80054d4:	d109      	bne.n	80054ea <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	461a      	mov	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054e6:	611a      	str	r2, [r3, #16]
 80054e8:	e008      	b.n	80054fc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	f043 0301 	orr.w	r3, r3, #1
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005500:	2b00      	cmp	r3, #0
 8005502:	d004      	beq.n	800550e <I2C_Master_SB+0x92>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800550a:	2b00      	cmp	r3, #0
 800550c:	d108      	bne.n	8005520 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005512:	2b00      	cmp	r3, #0
 8005514:	d032      	beq.n	800557c <I2C_Master_SB+0x100>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800551c:	2b00      	cmp	r3, #0
 800551e:	d02d      	beq.n	800557c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800552e:	605a      	str	r2, [r3, #4]
}
 8005530:	e024      	b.n	800557c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10e      	bne.n	8005558 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553e:	b29b      	uxth	r3, r3
 8005540:	11db      	asrs	r3, r3, #7
 8005542:	b2db      	uxtb	r3, r3
 8005544:	f003 0306 	and.w	r3, r3, #6
 8005548:	b2db      	uxtb	r3, r3
 800554a:	f063 030f 	orn	r3, r3, #15
 800554e:	b2da      	uxtb	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	611a      	str	r2, [r3, #16]
}
 8005556:	e011      	b.n	800557c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800555c:	2b01      	cmp	r3, #1
 800555e:	d10d      	bne.n	800557c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005564:	b29b      	uxth	r3, r3
 8005566:	11db      	asrs	r3, r3, #7
 8005568:	b2db      	uxtb	r3, r3
 800556a:	f003 0306 	and.w	r3, r3, #6
 800556e:	b2db      	uxtb	r3, r3
 8005570:	f063 030e 	orn	r3, r3, #14
 8005574:	b2da      	uxtb	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	611a      	str	r2, [r3, #16]
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005594:	b2da      	uxtb	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d004      	beq.n	80055ae <I2C_Master_ADD10+0x26>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d108      	bne.n	80055c0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00c      	beq.n	80055d0 <I2C_Master_ADD10+0x48>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d007      	beq.n	80055d0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055ce:	605a      	str	r2, [r3, #4]
  }
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80055dc:	b480      	push	{r7}
 80055de:	b091      	sub	sp, #68	; 0x44
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b22      	cmp	r3, #34	; 0x22
 8005604:	f040 8169 	bne.w	80058da <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10f      	bne.n	8005630 <I2C_Master_ADDR+0x54>
 8005610:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005614:	2b40      	cmp	r3, #64	; 0x40
 8005616:	d10b      	bne.n	8005630 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005618:	2300      	movs	r3, #0
 800561a:	633b      	str	r3, [r7, #48]	; 0x30
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	633b      	str	r3, [r7, #48]	; 0x30
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	633b      	str	r3, [r7, #48]	; 0x30
 800562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562e:	e160      	b.n	80058f2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005634:	2b00      	cmp	r3, #0
 8005636:	d11d      	bne.n	8005674 <I2C_Master_ADDR+0x98>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005640:	d118      	bne.n	8005674 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005642:	2300      	movs	r3, #0
 8005644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005656:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005666:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	651a      	str	r2, [r3, #80]	; 0x50
 8005672:	e13e      	b.n	80058f2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005678:	b29b      	uxth	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d113      	bne.n	80056a6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800567e:	2300      	movs	r3, #0
 8005680:	62bb      	str	r3, [r7, #40]	; 0x28
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	62bb      	str	r3, [r7, #40]	; 0x28
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	62bb      	str	r3, [r7, #40]	; 0x28
 8005692:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	e115      	b.n	80058d2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	f040 808a 	bne.w	80057c6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80056b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056b8:	d137      	bne.n	800572a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056c8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056d8:	d113      	bne.n	8005702 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ea:	2300      	movs	r3, #0
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	627b      	str	r3, [r7, #36]	; 0x24
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	627b      	str	r3, [r7, #36]	; 0x24
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	e0e7      	b.n	80058d2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005702:	2300      	movs	r3, #0
 8005704:	623b      	str	r3, [r7, #32]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	623b      	str	r3, [r7, #32]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	623b      	str	r3, [r7, #32]
 8005716:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	e0d3      	b.n	80058d2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800572a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572c:	2b08      	cmp	r3, #8
 800572e:	d02e      	beq.n	800578e <I2C_Master_ADDR+0x1b2>
 8005730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005732:	2b20      	cmp	r3, #32
 8005734:	d02b      	beq.n	800578e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005738:	2b12      	cmp	r3, #18
 800573a:	d102      	bne.n	8005742 <I2C_Master_ADDR+0x166>
 800573c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573e:	2b01      	cmp	r3, #1
 8005740:	d125      	bne.n	800578e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005744:	2b04      	cmp	r3, #4
 8005746:	d00e      	beq.n	8005766 <I2C_Master_ADDR+0x18a>
 8005748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574a:	2b02      	cmp	r3, #2
 800574c:	d00b      	beq.n	8005766 <I2C_Master_ADDR+0x18a>
 800574e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005750:	2b10      	cmp	r3, #16
 8005752:	d008      	beq.n	8005766 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	e007      	b.n	8005776 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005774:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005776:	2300      	movs	r3, #0
 8005778:	61fb      	str	r3, [r7, #28]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	61fb      	str	r3, [r7, #28]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	61fb      	str	r3, [r7, #28]
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	e0a1      	b.n	80058d2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800579c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800579e:	2300      	movs	r3, #0
 80057a0:	61bb      	str	r3, [r7, #24]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	61bb      	str	r3, [r7, #24]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	61bb      	str	r3, [r7, #24]
 80057b2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	e085      	b.n	80058d2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d14d      	bne.n	800586c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80057d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	d016      	beq.n	8005804 <I2C_Master_ADDR+0x228>
 80057d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d013      	beq.n	8005804 <I2C_Master_ADDR+0x228>
 80057dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057de:	2b10      	cmp	r3, #16
 80057e0:	d010      	beq.n	8005804 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	e007      	b.n	8005814 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005812:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800581e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005822:	d117      	bne.n	8005854 <I2C_Master_ADDR+0x278>
 8005824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005826:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800582a:	d00b      	beq.n	8005844 <I2C_Master_ADDR+0x268>
 800582c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582e:	2b01      	cmp	r3, #1
 8005830:	d008      	beq.n	8005844 <I2C_Master_ADDR+0x268>
 8005832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005834:	2b08      	cmp	r3, #8
 8005836:	d005      	beq.n	8005844 <I2C_Master_ADDR+0x268>
 8005838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583a:	2b10      	cmp	r3, #16
 800583c:	d002      	beq.n	8005844 <I2C_Master_ADDR+0x268>
 800583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005840:	2b20      	cmp	r3, #32
 8005842:	d107      	bne.n	8005854 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005852:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005854:	2300      	movs	r3, #0
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	e032      	b.n	80058d2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800587a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800588a:	d117      	bne.n	80058bc <I2C_Master_ADDR+0x2e0>
 800588c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005892:	d00b      	beq.n	80058ac <I2C_Master_ADDR+0x2d0>
 8005894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005896:	2b01      	cmp	r3, #1
 8005898:	d008      	beq.n	80058ac <I2C_Master_ADDR+0x2d0>
 800589a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589c:	2b08      	cmp	r3, #8
 800589e:	d005      	beq.n	80058ac <I2C_Master_ADDR+0x2d0>
 80058a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a2:	2b10      	cmp	r3, #16
 80058a4:	d002      	beq.n	80058ac <I2C_Master_ADDR+0x2d0>
 80058a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a8:	2b20      	cmp	r3, #32
 80058aa:	d107      	bne.n	80058bc <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058ba:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058bc:	2300      	movs	r3, #0
 80058be:	613b      	str	r3, [r7, #16]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	613b      	str	r3, [r7, #16]
 80058d0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80058d8:	e00b      	b.n	80058f2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	60fb      	str	r3, [r7, #12]
 80058ee:	68fb      	ldr	r3, [r7, #12]
}
 80058f0:	e7ff      	b.n	80058f2 <I2C_Master_ADDR+0x316>
 80058f2:	bf00      	nop
 80058f4:	3744      	adds	r7, #68	; 0x44
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b084      	sub	sp, #16
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005912:	b29b      	uxth	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	d02b      	beq.n	8005970 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	781a      	ldrb	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	1c5a      	adds	r2, r3, #1
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005932:	b29b      	uxth	r3, r3
 8005934:	3b01      	subs	r3, #1
 8005936:	b29a      	uxth	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005940:	b29b      	uxth	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d114      	bne.n	8005970 <I2C_SlaveTransmit_TXE+0x72>
 8005946:	7bfb      	ldrb	r3, [r7, #15]
 8005948:	2b29      	cmp	r3, #41	; 0x29
 800594a:	d111      	bne.n	8005970 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800595a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2221      	movs	r2, #33	; 0x21
 8005960:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2228      	movs	r2, #40	; 0x28
 8005966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7ff f9f1 	bl	8004d52 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005970:	bf00      	nop
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005984:	b29b      	uxth	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d011      	beq.n	80059ae <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	781a      	ldrb	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	1c5a      	adds	r2, r3, #1
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	3b01      	subs	r3, #1
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80059ae:	bf00      	nop
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b084      	sub	sp, #16
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d02c      	beq.n	8005a2e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	691a      	ldr	r2, [r3, #16]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	3b01      	subs	r3, #1
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d114      	bne.n	8005a2e <I2C_SlaveReceive_RXNE+0x74>
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
 8005a06:	2b2a      	cmp	r3, #42	; 0x2a
 8005a08:	d111      	bne.n	8005a2e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a18:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2222      	movs	r2, #34	; 0x22
 8005a1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2228      	movs	r2, #40	; 0x28
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7ff f99c 	bl	8004d66 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005a2e:	bf00      	nop
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d012      	beq.n	8005a6e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691a      	ldr	r2, [r3, #16]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005a6e:	bf00      	nop
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b084      	sub	sp, #16
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005a84:	2300      	movs	r3, #0
 8005a86:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a94:	2b28      	cmp	r3, #40	; 0x28
 8005a96:	d127      	bne.n	8005ae8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aa6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	089b      	lsrs	r3, r3, #2
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	09db      	lsrs	r3, r3, #7
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d103      	bne.n	8005acc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	81bb      	strh	r3, [r7, #12]
 8005aca:	e002      	b.n	8005ad2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005ada:	89ba      	ldrh	r2, [r7, #12]
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
 8005ade:	4619      	mov	r1, r3
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7ff f94a 	bl	8004d7a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005ae6:	e00e      	b.n	8005b06 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ae8:	2300      	movs	r3, #0
 8005aea:	60bb      	str	r3, [r7, #8]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	60bb      	str	r3, [r7, #8]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	60bb      	str	r3, [r7, #8]
 8005afc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005b06:	bf00      	nop
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b2e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005b30:	2300      	movs	r3, #0
 8005b32:	60bb      	str	r3, [r7, #8]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	60bb      	str	r3, [r7, #8]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0201 	orr.w	r2, r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b5c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b6c:	d172      	bne.n	8005c54 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b6e:	7bfb      	ldrb	r3, [r7, #15]
 8005b70:	2b22      	cmp	r3, #34	; 0x22
 8005b72:	d002      	beq.n	8005b7a <I2C_Slave_STOPF+0x6a>
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
 8005b76:	2b2a      	cmp	r3, #42	; 0x2a
 8005b78:	d135      	bne.n	8005be6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d005      	beq.n	8005b9e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	f043 0204 	orr.w	r2, r3, #4
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7fe f8f6 	bl	8003da4 <HAL_DMA_GetState>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d049      	beq.n	8005c52 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc2:	4a69      	ldr	r2, [pc, #420]	; (8005d68 <I2C_Slave_STOPF+0x258>)
 8005bc4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fd ff3e 	bl	8003a4c <HAL_DMA_Abort_IT>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d03d      	beq.n	8005c52 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005be0:	4610      	mov	r0, r2
 8005be2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005be4:	e035      	b.n	8005c52 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d005      	beq.n	8005c0a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	f043 0204 	orr.w	r2, r3, #4
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c18:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fe f8c0 	bl	8003da4 <HAL_DMA_GetState>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d014      	beq.n	8005c54 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2e:	4a4e      	ldr	r2, [pc, #312]	; (8005d68 <I2C_Slave_STOPF+0x258>)
 8005c30:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fd ff08 	bl	8003a4c <HAL_DMA_Abort_IT>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d008      	beq.n	8005c54 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	4798      	blx	r3
 8005c50:	e000      	b.n	8005c54 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c52:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d03e      	beq.n	8005cdc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	d112      	bne.n	8005c92 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691a      	ldr	r2, [r3, #16]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9c:	2b40      	cmp	r3, #64	; 0x40
 8005c9e:	d112      	bne.n	8005cc6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	691a      	ldr	r2, [r3, #16]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d005      	beq.n	8005cdc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	f043 0204 	orr.w	r2, r3, #4
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f843 	bl	8005d70 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005cea:	e039      	b.n	8005d60 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
 8005cee:	2b2a      	cmp	r3, #42	; 0x2a
 8005cf0:	d109      	bne.n	8005d06 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2228      	movs	r2, #40	; 0x28
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7ff f830 	bl	8004d66 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b28      	cmp	r3, #40	; 0x28
 8005d10:	d111      	bne.n	8005d36 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a15      	ldr	r2, [pc, #84]	; (8005d6c <I2C_Slave_STOPF+0x25c>)
 8005d16:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7ff f831 	bl	8004d96 <HAL_I2C_ListenCpltCallback>
}
 8005d34:	e014      	b.n	8005d60 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3a:	2b22      	cmp	r3, #34	; 0x22
 8005d3c:	d002      	beq.n	8005d44 <I2C_Slave_STOPF+0x234>
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	2b22      	cmp	r3, #34	; 0x22
 8005d42:	d10d      	bne.n	8005d60 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7ff f803 	bl	8004d66 <HAL_I2C_SlaveRxCpltCallback>
}
 8005d60:	bf00      	nop
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	08006325 	.word	0x08006325
 8005d6c:	ffff0000 	.word	0xffff0000

08005d70 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d7e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d86:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005d88:	7bbb      	ldrb	r3, [r7, #14]
 8005d8a:	2b10      	cmp	r3, #16
 8005d8c:	d002      	beq.n	8005d94 <I2C_ITError+0x24>
 8005d8e:	7bbb      	ldrb	r3, [r7, #14]
 8005d90:	2b40      	cmp	r3, #64	; 0x40
 8005d92:	d10a      	bne.n	8005daa <I2C_ITError+0x3a>
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	2b22      	cmp	r3, #34	; 0x22
 8005d98:	d107      	bne.n	8005daa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005da8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005daa:	7bfb      	ldrb	r3, [r7, #15]
 8005dac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005db0:	2b28      	cmp	r3, #40	; 0x28
 8005db2:	d107      	bne.n	8005dc4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2228      	movs	r2, #40	; 0x28
 8005dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005dc2:	e015      	b.n	8005df0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dd2:	d00a      	beq.n	8005dea <I2C_ITError+0x7a>
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
 8005dd6:	2b60      	cmp	r3, #96	; 0x60
 8005dd8:	d007      	beq.n	8005dea <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dfe:	d162      	bne.n	8005ec6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e0e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d020      	beq.n	8005e60 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e22:	4a6a      	ldr	r2, [pc, #424]	; (8005fcc <I2C_ITError+0x25c>)
 8005e24:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fd fe0e 	bl	8003a4c <HAL_DMA_Abort_IT>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 8089 	beq.w	8005f4a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 0201 	bic.w	r2, r2, #1
 8005e46:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e5a:	4610      	mov	r0, r2
 8005e5c:	4798      	blx	r3
 8005e5e:	e074      	b.n	8005f4a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	4a59      	ldr	r2, [pc, #356]	; (8005fcc <I2C_ITError+0x25c>)
 8005e66:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fd fded 	bl	8003a4c <HAL_DMA_Abort_IT>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d068      	beq.n	8005f4a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e82:	2b40      	cmp	r3, #64	; 0x40
 8005e84:	d10b      	bne.n	8005e9e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	691a      	ldr	r2, [r3, #16]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	b2d2      	uxtb	r2, r2
 8005e92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0201 	bic.w	r2, r2, #1
 8005eac:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ec0:	4610      	mov	r0, r2
 8005ec2:	4798      	blx	r3
 8005ec4:	e041      	b.n	8005f4a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b60      	cmp	r3, #96	; 0x60
 8005ed0:	d125      	bne.n	8005f1e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eea:	2b40      	cmp	r3, #64	; 0x40
 8005eec:	d10b      	bne.n	8005f06 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	691a      	ldr	r2, [r3, #16]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	b2d2      	uxtb	r2, r2
 8005efa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f022 0201 	bic.w	r2, r2, #1
 8005f14:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7fe ff65 	bl	8004de6 <HAL_I2C_AbortCpltCallback>
 8005f1c:	e015      	b.n	8005f4a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f28:	2b40      	cmp	r3, #64	; 0x40
 8005f2a:	d10b      	bne.n	8005f44 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691a      	ldr	r2, [r3, #16]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	1c5a      	adds	r2, r3, #1
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7fe ff44 	bl	8004dd2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10e      	bne.n	8005f78 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d109      	bne.n	8005f78 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d104      	bne.n	8005f78 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d007      	beq.n	8005f88 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f86:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f8e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b04      	cmp	r3, #4
 8005f9a:	d113      	bne.n	8005fc4 <I2C_ITError+0x254>
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
 8005f9e:	2b28      	cmp	r3, #40	; 0x28
 8005fa0:	d110      	bne.n	8005fc4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a0a      	ldr	r2, [pc, #40]	; (8005fd0 <I2C_ITError+0x260>)
 8005fa6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7fe fee9 	bl	8004d96 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005fc4:	bf00      	nop
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	08006325 	.word	0x08006325
 8005fd0:	ffff0000 	.word	0xffff0000

08005fd4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b088      	sub	sp, #32
 8005fd8:	af02      	add	r7, sp, #8
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	4608      	mov	r0, r1
 8005fde:	4611      	mov	r1, r2
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	817b      	strh	r3, [r7, #10]
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	813b      	strh	r3, [r7, #8]
 8005fea:	4613      	mov	r3, r2
 8005fec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ffc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	2200      	movs	r2, #0
 8006006:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 fa32 	bl	8006474 <I2C_WaitOnFlagUntilTimeout>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00d      	beq.n	8006032 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006024:	d103      	bne.n	800602e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800602c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e05f      	b.n	80060f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006032:	897b      	ldrh	r3, [r7, #10]
 8006034:	b2db      	uxtb	r3, r3
 8006036:	461a      	mov	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006040:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006044:	6a3a      	ldr	r2, [r7, #32]
 8006046:	492d      	ldr	r1, [pc, #180]	; (80060fc <I2C_RequestMemoryWrite+0x128>)
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 fa6a 	bl	8006522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e04c      	b.n	80060f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006058:	2300      	movs	r3, #0
 800605a:	617b      	str	r3, [r7, #20]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	617b      	str	r3, [r7, #20]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	617b      	str	r3, [r7, #20]
 800606c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800606e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006070:	6a39      	ldr	r1, [r7, #32]
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 fad4 	bl	8006620 <I2C_WaitOnTXEFlagUntilTimeout>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00d      	beq.n	800609a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006082:	2b04      	cmp	r3, #4
 8006084:	d107      	bne.n	8006096 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006094:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e02b      	b.n	80060f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800609a:	88fb      	ldrh	r3, [r7, #6]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d105      	bne.n	80060ac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060a0:	893b      	ldrh	r3, [r7, #8]
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	611a      	str	r2, [r3, #16]
 80060aa:	e021      	b.n	80060f0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80060ac:	893b      	ldrh	r3, [r7, #8]
 80060ae:	0a1b      	lsrs	r3, r3, #8
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060bc:	6a39      	ldr	r1, [r7, #32]
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 faae 	bl	8006620 <I2C_WaitOnTXEFlagUntilTimeout>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00d      	beq.n	80060e6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d107      	bne.n	80060e2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e005      	b.n	80060f2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060e6:	893b      	ldrh	r3, [r7, #8]
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3718      	adds	r7, #24
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	00010002 	.word	0x00010002

08006100 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006114:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800611c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006122:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006132:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006140:	2200      	movs	r2, #0
 8006142:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006150:	2200      	movs	r2, #0
 8006152:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006154:	7cfb      	ldrb	r3, [r7, #19]
 8006156:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800615a:	2b21      	cmp	r3, #33	; 0x21
 800615c:	d007      	beq.n	800616e <I2C_DMAXferCplt+0x6e>
 800615e:	7cfb      	ldrb	r3, [r7, #19]
 8006160:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8006164:	2b22      	cmp	r3, #34	; 0x22
 8006166:	d131      	bne.n	80061cc <I2C_DMAXferCplt+0xcc>
 8006168:	7cbb      	ldrb	r3, [r7, #18]
 800616a:	2b20      	cmp	r3, #32
 800616c:	d12e      	bne.n	80061cc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800617c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	2200      	movs	r2, #0
 8006182:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006184:	7cfb      	ldrb	r3, [r7, #19]
 8006186:	2b29      	cmp	r3, #41	; 0x29
 8006188:	d10a      	bne.n	80061a0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2221      	movs	r2, #33	; 0x21
 800618e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	2228      	movs	r2, #40	; 0x28
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006198:	6978      	ldr	r0, [r7, #20]
 800619a:	f7fe fdda 	bl	8004d52 <HAL_I2C_SlaveTxCpltCallback>
 800619e:	e00c      	b.n	80061ba <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80061a0:	7cfb      	ldrb	r3, [r7, #19]
 80061a2:	2b2a      	cmp	r3, #42	; 0x2a
 80061a4:	d109      	bne.n	80061ba <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2222      	movs	r2, #34	; 0x22
 80061aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	2228      	movs	r2, #40	; 0x28
 80061b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80061b4:	6978      	ldr	r0, [r7, #20]
 80061b6:	f7fe fdd6 	bl	8004d66 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80061c8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80061ca:	e06a      	b.n	80062a2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d064      	beq.n	80062a2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d107      	bne.n	80061f2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061f0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006200:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006208:	d009      	beq.n	800621e <I2C_DMAXferCplt+0x11e>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b08      	cmp	r3, #8
 800620e:	d006      	beq.n	800621e <I2C_DMAXferCplt+0x11e>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006216:	d002      	beq.n	800621e <I2C_DMAXferCplt+0x11e>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2b20      	cmp	r3, #32
 800621c:	d107      	bne.n	800622e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800622c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800623c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800624c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2200      	movs	r2, #0
 8006252:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006258:	2b00      	cmp	r3, #0
 800625a:	d003      	beq.n	8006264 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800625c:	6978      	ldr	r0, [r7, #20]
 800625e:	f7fe fdb8 	bl	8004dd2 <HAL_I2C_ErrorCallback>
}
 8006262:	e01e      	b.n	80062a2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2220      	movs	r2, #32
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b40      	cmp	r3, #64	; 0x40
 8006276:	d10a      	bne.n	800628e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	2200      	movs	r2, #0
 8006284:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006286:	6978      	ldr	r0, [r7, #20]
 8006288:	f7fe fd99 	bl	8004dbe <HAL_I2C_MemRxCpltCallback>
}
 800628c:	e009      	b.n	80062a2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2212      	movs	r2, #18
 800629a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800629c:	6978      	ldr	r0, [r7, #20]
 800629e:	f7fe fd4e 	bl	8004d3e <HAL_I2C_MasterRxCpltCallback>
}
 80062a2:	bf00      	nop
 80062a4:	3718      	adds	r7, #24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c4:	2200      	movs	r2, #0
 80062c6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d4:	2200      	movs	r2, #0
 80062d6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7fd fd71 	bl	8003dc0 <HAL_DMA_GetError>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d01b      	beq.n	800631c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062f2:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	f043 0210 	orr.w	r2, r3, #16
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f7fe fd5b 	bl	8004dd2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800631c:	bf00      	nop
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800632c:	2300      	movs	r3, #0
 800632e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800633c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800633e:	4b4b      	ldr	r3, [pc, #300]	; (800646c <I2C_DMAAbort+0x148>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	08db      	lsrs	r3, r3, #3
 8006344:	4a4a      	ldr	r2, [pc, #296]	; (8006470 <I2C_DMAAbort+0x14c>)
 8006346:	fba2 2303 	umull	r2, r3, r2, r3
 800634a:	0a1a      	lsrs	r2, r3, #8
 800634c:	4613      	mov	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4413      	add	r3, r2
 8006352:	00da      	lsls	r2, r3, #3
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d106      	bne.n	800636c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	f043 0220 	orr.w	r2, r3, #32
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800636a:	e00a      	b.n	8006382 <I2C_DMAAbort+0x5e>
    }
    count--;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	3b01      	subs	r3, #1
 8006370:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800637c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006380:	d0ea      	beq.n	8006358 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638e:	2200      	movs	r2, #0
 8006390:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006396:	2b00      	cmp	r3, #0
 8006398:	d003      	beq.n	80063a2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639e:	2200      	movs	r2, #0
 80063a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063b0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2200      	movs	r2, #0
 80063b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d003      	beq.n	80063c8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c4:	2200      	movs	r2, #0
 80063c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d003      	beq.n	80063d8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d4:	2200      	movs	r2, #0
 80063d6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0201 	bic.w	r2, r2, #1
 80063e6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b60      	cmp	r3, #96	; 0x60
 80063f2:	d10e      	bne.n	8006412 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	2220      	movs	r2, #32
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	2200      	movs	r2, #0
 8006408:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800640a:	6978      	ldr	r0, [r7, #20]
 800640c:	f7fe fceb 	bl	8004de6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006410:	e027      	b.n	8006462 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006412:	7cfb      	ldrb	r3, [r7, #19]
 8006414:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006418:	2b28      	cmp	r3, #40	; 0x28
 800641a:	d117      	bne.n	800644c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0201 	orr.w	r2, r2, #1
 800642a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800643a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	2200      	movs	r2, #0
 8006440:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2228      	movs	r2, #40	; 0x28
 8006446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800644a:	e007      	b.n	800645c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	2220      	movs	r2, #32
 8006450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800645c:	6978      	ldr	r0, [r7, #20]
 800645e:	f7fe fcb8 	bl	8004dd2 <HAL_I2C_ErrorCallback>
}
 8006462:	bf00      	nop
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	2000000c 	.word	0x2000000c
 8006470:	14f8b589 	.word	0x14f8b589

08006474 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	603b      	str	r3, [r7, #0]
 8006480:	4613      	mov	r3, r2
 8006482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006484:	e025      	b.n	80064d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648c:	d021      	beq.n	80064d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800648e:	f7fd f825 	bl	80034dc <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	429a      	cmp	r2, r3
 800649c:	d302      	bcc.n	80064a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d116      	bne.n	80064d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	f043 0220 	orr.w	r2, r3, #32
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e023      	b.n	800651a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	0c1b      	lsrs	r3, r3, #16
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d10d      	bne.n	80064f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	43da      	mvns	r2, r3
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	4013      	ands	r3, r2
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	bf0c      	ite	eq
 80064ee:	2301      	moveq	r3, #1
 80064f0:	2300      	movne	r3, #0
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	461a      	mov	r2, r3
 80064f6:	e00c      	b.n	8006512 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	43da      	mvns	r2, r3
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	4013      	ands	r3, r2
 8006504:	b29b      	uxth	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	bf0c      	ite	eq
 800650a:	2301      	moveq	r3, #1
 800650c:	2300      	movne	r3, #0
 800650e:	b2db      	uxtb	r3, r3
 8006510:	461a      	mov	r2, r3
 8006512:	79fb      	ldrb	r3, [r7, #7]
 8006514:	429a      	cmp	r2, r3
 8006516:	d0b6      	beq.n	8006486 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b084      	sub	sp, #16
 8006526:	af00      	add	r7, sp, #0
 8006528:	60f8      	str	r0, [r7, #12]
 800652a:	60b9      	str	r1, [r7, #8]
 800652c:	607a      	str	r2, [r7, #4]
 800652e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006530:	e051      	b.n	80065d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800653c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006540:	d123      	bne.n	800658a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006550:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800655a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2220      	movs	r2, #32
 8006566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	f043 0204 	orr.w	r2, r3, #4
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e046      	b.n	8006618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006590:	d021      	beq.n	80065d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006592:	f7fc ffa3 	bl	80034dc <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d302      	bcc.n	80065a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d116      	bne.n	80065d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c2:	f043 0220 	orr.w	r2, r3, #32
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e020      	b.n	8006618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	0c1b      	lsrs	r3, r3, #16
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d10c      	bne.n	80065fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	43da      	mvns	r2, r3
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	4013      	ands	r3, r2
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	bf14      	ite	ne
 80065f2:	2301      	movne	r3, #1
 80065f4:	2300      	moveq	r3, #0
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	e00b      	b.n	8006612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	43da      	mvns	r2, r3
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	4013      	ands	r3, r2
 8006606:	b29b      	uxth	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	bf14      	ite	ne
 800660c:	2301      	movne	r3, #1
 800660e:	2300      	moveq	r3, #0
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d18d      	bne.n	8006532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800662c:	e02d      	b.n	800668a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f000 f8aa 	bl	8006788 <I2C_IsAcknowledgeFailed>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e02d      	b.n	800669a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006644:	d021      	beq.n	800668a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006646:	f7fc ff49 	bl	80034dc <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	429a      	cmp	r2, r3
 8006654:	d302      	bcc.n	800665c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d116      	bne.n	800668a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2220      	movs	r2, #32
 8006666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	f043 0220 	orr.w	r2, r3, #32
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e007      	b.n	800669a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006694:	2b80      	cmp	r3, #128	; 0x80
 8006696:	d1ca      	bne.n	800662e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b084      	sub	sp, #16
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	60f8      	str	r0, [r7, #12]
 80066aa:	60b9      	str	r1, [r7, #8]
 80066ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066ae:	e02d      	b.n	800670c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 f869 	bl	8006788 <I2C_IsAcknowledgeFailed>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e02d      	b.n	800671c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c6:	d021      	beq.n	800670c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066c8:	f7fc ff08 	bl	80034dc <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d302      	bcc.n	80066de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d116      	bne.n	800670c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2220      	movs	r2, #32
 80066e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f8:	f043 0220 	orr.w	r2, r3, #32
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e007      	b.n	800671c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	f003 0304 	and.w	r3, r3, #4
 8006716:	2b04      	cmp	r3, #4
 8006718:	d1ca      	bne.n	80066b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800672c:	2300      	movs	r3, #0
 800672e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006730:	4b13      	ldr	r3, [pc, #76]	; (8006780 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	08db      	lsrs	r3, r3, #3
 8006736:	4a13      	ldr	r2, [pc, #76]	; (8006784 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006738:	fba2 2303 	umull	r2, r3, r2, r3
 800673c:	0a1a      	lsrs	r2, r3, #8
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	3b01      	subs	r3, #1
 800674a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d107      	bne.n	8006762 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006756:	f043 0220 	orr.w	r2, r3, #32
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e008      	b.n	8006774 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800676c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006770:	d0e9      	beq.n	8006746 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	2000000c 	.word	0x2000000c
 8006784:	14f8b589 	.word	0x14f8b589

08006788 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800679a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800679e:	d11b      	bne.n	80067d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2220      	movs	r2, #32
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c4:	f043 0204 	orr.w	r2, r3, #4
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e000      	b.n	80067da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80067f6:	d103      	bne.n	8006800 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80067fe:	e007      	b.n	8006810 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006804:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006808:	d102      	bne.n	8006810 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2208      	movs	r2, #8
 800680e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d101      	bne.n	800682e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e264      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d075      	beq.n	8006926 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800683a:	4ba3      	ldr	r3, [pc, #652]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f003 030c 	and.w	r3, r3, #12
 8006842:	2b04      	cmp	r3, #4
 8006844:	d00c      	beq.n	8006860 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006846:	4ba0      	ldr	r3, [pc, #640]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800684e:	2b08      	cmp	r3, #8
 8006850:	d112      	bne.n	8006878 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006852:	4b9d      	ldr	r3, [pc, #628]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800685a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800685e:	d10b      	bne.n	8006878 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006860:	4b99      	ldr	r3, [pc, #612]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d05b      	beq.n	8006924 <HAL_RCC_OscConfig+0x108>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d157      	bne.n	8006924 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e23f      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006880:	d106      	bne.n	8006890 <HAL_RCC_OscConfig+0x74>
 8006882:	4b91      	ldr	r3, [pc, #580]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a90      	ldr	r2, [pc, #576]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	e01d      	b.n	80068cc <HAL_RCC_OscConfig+0xb0>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006898:	d10c      	bne.n	80068b4 <HAL_RCC_OscConfig+0x98>
 800689a:	4b8b      	ldr	r3, [pc, #556]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a8a      	ldr	r2, [pc, #552]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 80068a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068a4:	6013      	str	r3, [r2, #0]
 80068a6:	4b88      	ldr	r3, [pc, #544]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a87      	ldr	r2, [pc, #540]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 80068ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068b0:	6013      	str	r3, [r2, #0]
 80068b2:	e00b      	b.n	80068cc <HAL_RCC_OscConfig+0xb0>
 80068b4:	4b84      	ldr	r3, [pc, #528]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a83      	ldr	r2, [pc, #524]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 80068ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068be:	6013      	str	r3, [r2, #0]
 80068c0:	4b81      	ldr	r3, [pc, #516]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a80      	ldr	r2, [pc, #512]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 80068c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d013      	beq.n	80068fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d4:	f7fc fe02 	bl	80034dc <HAL_GetTick>
 80068d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068da:	e008      	b.n	80068ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068dc:	f7fc fdfe 	bl	80034dc <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b64      	cmp	r3, #100	; 0x64
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e204      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ee:	4b76      	ldr	r3, [pc, #472]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d0f0      	beq.n	80068dc <HAL_RCC_OscConfig+0xc0>
 80068fa:	e014      	b.n	8006926 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068fc:	f7fc fdee 	bl	80034dc <HAL_GetTick>
 8006900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006902:	e008      	b.n	8006916 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006904:	f7fc fdea 	bl	80034dc <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	2b64      	cmp	r3, #100	; 0x64
 8006910:	d901      	bls.n	8006916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e1f0      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006916:	4b6c      	ldr	r3, [pc, #432]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1f0      	bne.n	8006904 <HAL_RCC_OscConfig+0xe8>
 8006922:	e000      	b.n	8006926 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d063      	beq.n	80069fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006932:	4b65      	ldr	r3, [pc, #404]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 030c 	and.w	r3, r3, #12
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00b      	beq.n	8006956 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800693e:	4b62      	ldr	r3, [pc, #392]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006946:	2b08      	cmp	r3, #8
 8006948:	d11c      	bne.n	8006984 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800694a:	4b5f      	ldr	r3, [pc, #380]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d116      	bne.n	8006984 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006956:	4b5c      	ldr	r3, [pc, #368]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0302 	and.w	r3, r3, #2
 800695e:	2b00      	cmp	r3, #0
 8006960:	d005      	beq.n	800696e <HAL_RCC_OscConfig+0x152>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d001      	beq.n	800696e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e1c4      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800696e:	4b56      	ldr	r3, [pc, #344]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	4952      	ldr	r1, [pc, #328]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 800697e:	4313      	orrs	r3, r2
 8006980:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006982:	e03a      	b.n	80069fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d020      	beq.n	80069ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800698c:	4b4f      	ldr	r3, [pc, #316]	; (8006acc <HAL_RCC_OscConfig+0x2b0>)
 800698e:	2201      	movs	r2, #1
 8006990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006992:	f7fc fda3 	bl	80034dc <HAL_GetTick>
 8006996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006998:	e008      	b.n	80069ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800699a:	f7fc fd9f 	bl	80034dc <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d901      	bls.n	80069ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e1a5      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ac:	4b46      	ldr	r3, [pc, #280]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d0f0      	beq.n	800699a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069b8:	4b43      	ldr	r3, [pc, #268]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	00db      	lsls	r3, r3, #3
 80069c6:	4940      	ldr	r1, [pc, #256]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	600b      	str	r3, [r1, #0]
 80069cc:	e015      	b.n	80069fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069ce:	4b3f      	ldr	r3, [pc, #252]	; (8006acc <HAL_RCC_OscConfig+0x2b0>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d4:	f7fc fd82 	bl	80034dc <HAL_GetTick>
 80069d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069da:	e008      	b.n	80069ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069dc:	f7fc fd7e 	bl	80034dc <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e184      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069ee:	4b36      	ldr	r3, [pc, #216]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1f0      	bne.n	80069dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0308 	and.w	r3, r3, #8
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d030      	beq.n	8006a68 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d016      	beq.n	8006a3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a0e:	4b30      	ldr	r3, [pc, #192]	; (8006ad0 <HAL_RCC_OscConfig+0x2b4>)
 8006a10:	2201      	movs	r2, #1
 8006a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a14:	f7fc fd62 	bl	80034dc <HAL_GetTick>
 8006a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a1a:	e008      	b.n	8006a2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a1c:	f7fc fd5e 	bl	80034dc <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e164      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a2e:	4b26      	ldr	r3, [pc, #152]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0f0      	beq.n	8006a1c <HAL_RCC_OscConfig+0x200>
 8006a3a:	e015      	b.n	8006a68 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a3c:	4b24      	ldr	r3, [pc, #144]	; (8006ad0 <HAL_RCC_OscConfig+0x2b4>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a42:	f7fc fd4b 	bl	80034dc <HAL_GetTick>
 8006a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a48:	e008      	b.n	8006a5c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a4a:	f7fc fd47 	bl	80034dc <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d901      	bls.n	8006a5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e14d      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a5c:	4b1a      	ldr	r3, [pc, #104]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1f0      	bne.n	8006a4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0304 	and.w	r3, r3, #4
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 80a0 	beq.w	8006bb6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a76:	2300      	movs	r3, #0
 8006a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a7a:	4b13      	ldr	r3, [pc, #76]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10f      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a86:	2300      	movs	r3, #0
 8006a88:	60bb      	str	r3, [r7, #8]
 8006a8a:	4b0f      	ldr	r3, [pc, #60]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8e:	4a0e      	ldr	r2, [pc, #56]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a94:	6413      	str	r3, [r2, #64]	; 0x40
 8006a96:	4b0c      	ldr	r3, [pc, #48]	; (8006ac8 <HAL_RCC_OscConfig+0x2ac>)
 8006a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a9e:	60bb      	str	r3, [r7, #8]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aa6:	4b0b      	ldr	r3, [pc, #44]	; (8006ad4 <HAL_RCC_OscConfig+0x2b8>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d121      	bne.n	8006af6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ab2:	4b08      	ldr	r3, [pc, #32]	; (8006ad4 <HAL_RCC_OscConfig+0x2b8>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a07      	ldr	r2, [pc, #28]	; (8006ad4 <HAL_RCC_OscConfig+0x2b8>)
 8006ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006abe:	f7fc fd0d 	bl	80034dc <HAL_GetTick>
 8006ac2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ac4:	e011      	b.n	8006aea <HAL_RCC_OscConfig+0x2ce>
 8006ac6:	bf00      	nop
 8006ac8:	40023800 	.word	0x40023800
 8006acc:	42470000 	.word	0x42470000
 8006ad0:	42470e80 	.word	0x42470e80
 8006ad4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ad8:	f7fc fd00 	bl	80034dc <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e106      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aea:	4b85      	ldr	r3, [pc, #532]	; (8006d00 <HAL_RCC_OscConfig+0x4e4>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d0f0      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d106      	bne.n	8006b0c <HAL_RCC_OscConfig+0x2f0>
 8006afe:	4b81      	ldr	r3, [pc, #516]	; (8006d04 <HAL_RCC_OscConfig+0x4e8>)
 8006b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b02:	4a80      	ldr	r2, [pc, #512]	; (8006d04 <HAL_RCC_OscConfig+0x4e8>)
 8006b04:	f043 0301 	orr.w	r3, r3, #1
 8006b08:	6713      	str	r3, [r2, #112]	; 0x70
 8006b0a:	e01c      	b.n	8006b46 <HAL_RCC_OscConfig+0x32a>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	2b05      	cmp	r3, #5
 8006b12:	d10c      	bne.n	8006b2e <HAL_RCC_OscConfig+0x312>
 8006b14:	4b7b      	ldr	r3, [pc, #492]	; (8006d04 <HAL_RCC_OscConfig+0x4e8>)
 8006b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b18:	4a7a      	ldr	r2, [pc, #488]	; (8006d04 <HAL_RCC_OscConfig+0x4e8>)
 8006b1a:	f043 0304 	orr.w	r3, r3, #4
 8006b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b20:	4b78      	ldr	r3, [pc, #480]	; (8006d04 <HAL_RCC_OscConfig+0x4e8>)
 8006b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b24:	4a77      	ldr	r2, [pc, #476]	; (8006d04 <HAL_RCC_OscConfig+0x4e8>)
 8006b26:	f043 0301 	orr.w	r3, r3, #1
 8006b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b2c:	e00b      	b.n	8006b46 <HAL_RCC_OscConfig+0x32a>
 8006b2e:	4b75      	ldr	r3, [pc, #468]	; (8006d04 <HAL_RCC_OscConfig+0x4e8>)
 8006b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b32:	4a74      	ldr	r2, [pc, #464]	; (8006d04 <HAL_RCC_OscConfig+0x4e8>)
 8006b34:	f023 0301 	bic.w	r3, r3, #1
 8006b38:	6713      	str	r3, [r2, #112]	; 0x70
 8006b3a:	4b72      	ldr	r3, [pc, #456]	; (8006d04 <HAL_RCC_OscConfig+0x4e8>)
 8006b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3e:	4a71      	ldr	r2, [pc, #452]	; (8006d04 <HAL_RCC_OscConfig+0x4e8>)
 8006b40:	f023 0304 	bic.w	r3, r3, #4
 8006b44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d015      	beq.n	8006b7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b4e:	f7fc fcc5 	bl	80034dc <HAL_GetTick>
 8006b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b54:	e00a      	b.n	8006b6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b56:	f7fc fcc1 	bl	80034dc <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d901      	bls.n	8006b6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e0c5      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b6c:	4b65      	ldr	r3, [pc, #404]	; (8006d04 <HAL_RCC_OscConfig+0x4e8>)
 8006b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d0ee      	beq.n	8006b56 <HAL_RCC_OscConfig+0x33a>
 8006b78:	e014      	b.n	8006ba4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b7a:	f7fc fcaf 	bl	80034dc <HAL_GetTick>
 8006b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b80:	e00a      	b.n	8006b98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b82:	f7fc fcab 	bl	80034dc <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d901      	bls.n	8006b98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e0af      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b98:	4b5a      	ldr	r3, [pc, #360]	; (8006d04 <HAL_RCC_OscConfig+0x4e8>)
 8006b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1ee      	bne.n	8006b82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ba4:	7dfb      	ldrb	r3, [r7, #23]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d105      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006baa:	4b56      	ldr	r3, [pc, #344]	; (8006d04 <HAL_RCC_OscConfig+0x4e8>)
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	4a55      	ldr	r2, [pc, #340]	; (8006d04 <HAL_RCC_OscConfig+0x4e8>)
 8006bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 809b 	beq.w	8006cf6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006bc0:	4b50      	ldr	r3, [pc, #320]	; (8006d04 <HAL_RCC_OscConfig+0x4e8>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f003 030c 	and.w	r3, r3, #12
 8006bc8:	2b08      	cmp	r3, #8
 8006bca:	d05c      	beq.n	8006c86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d141      	bne.n	8006c58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bd4:	4b4c      	ldr	r3, [pc, #304]	; (8006d08 <HAL_RCC_OscConfig+0x4ec>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bda:	f7fc fc7f 	bl	80034dc <HAL_GetTick>
 8006bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006be0:	e008      	b.n	8006bf4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006be2:	f7fc fc7b 	bl	80034dc <HAL_GetTick>
 8006be6:	4602      	mov	r2, r0
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d901      	bls.n	8006bf4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e081      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bf4:	4b43      	ldr	r3, [pc, #268]	; (8006d04 <HAL_RCC_OscConfig+0x4e8>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1f0      	bne.n	8006be2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	69da      	ldr	r2, [r3, #28]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	019b      	lsls	r3, r3, #6
 8006c10:	431a      	orrs	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c16:	085b      	lsrs	r3, r3, #1
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	041b      	lsls	r3, r3, #16
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c22:	061b      	lsls	r3, r3, #24
 8006c24:	4937      	ldr	r1, [pc, #220]	; (8006d04 <HAL_RCC_OscConfig+0x4e8>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c2a:	4b37      	ldr	r3, [pc, #220]	; (8006d08 <HAL_RCC_OscConfig+0x4ec>)
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c30:	f7fc fc54 	bl	80034dc <HAL_GetTick>
 8006c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c36:	e008      	b.n	8006c4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c38:	f7fc fc50 	bl	80034dc <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d901      	bls.n	8006c4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e056      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c4a:	4b2e      	ldr	r3, [pc, #184]	; (8006d04 <HAL_RCC_OscConfig+0x4e8>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d0f0      	beq.n	8006c38 <HAL_RCC_OscConfig+0x41c>
 8006c56:	e04e      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c58:	4b2b      	ldr	r3, [pc, #172]	; (8006d08 <HAL_RCC_OscConfig+0x4ec>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c5e:	f7fc fc3d 	bl	80034dc <HAL_GetTick>
 8006c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c64:	e008      	b.n	8006c78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c66:	f7fc fc39 	bl	80034dc <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d901      	bls.n	8006c78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e03f      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c78:	4b22      	ldr	r3, [pc, #136]	; (8006d04 <HAL_RCC_OscConfig+0x4e8>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1f0      	bne.n	8006c66 <HAL_RCC_OscConfig+0x44a>
 8006c84:	e037      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d101      	bne.n	8006c92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e032      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c92:	4b1c      	ldr	r3, [pc, #112]	; (8006d04 <HAL_RCC_OscConfig+0x4e8>)
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d028      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d121      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d11a      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006cc8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d111      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd8:	085b      	lsrs	r3, r3, #1
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d107      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d001      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e000      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	40007000 	.word	0x40007000
 8006d04:	40023800 	.word	0x40023800
 8006d08:	42470060 	.word	0x42470060

08006d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d101      	bne.n	8006d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e0cc      	b.n	8006eba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d20:	4b68      	ldr	r3, [pc, #416]	; (8006ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0307 	and.w	r3, r3, #7
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d90c      	bls.n	8006d48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d2e:	4b65      	ldr	r3, [pc, #404]	; (8006ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	b2d2      	uxtb	r2, r2
 8006d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d36:	4b63      	ldr	r3, [pc, #396]	; (8006ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0307 	and.w	r3, r3, #7
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d001      	beq.n	8006d48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e0b8      	b.n	8006eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0302 	and.w	r3, r3, #2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d020      	beq.n	8006d96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 0304 	and.w	r3, r3, #4
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d005      	beq.n	8006d6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d60:	4b59      	ldr	r3, [pc, #356]	; (8006ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	4a58      	ldr	r2, [pc, #352]	; (8006ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0308 	and.w	r3, r3, #8
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d005      	beq.n	8006d84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d78:	4b53      	ldr	r3, [pc, #332]	; (8006ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	4a52      	ldr	r2, [pc, #328]	; (8006ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d84:	4b50      	ldr	r3, [pc, #320]	; (8006ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	494d      	ldr	r1, [pc, #308]	; (8006ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d044      	beq.n	8006e2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d107      	bne.n	8006dba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006daa:	4b47      	ldr	r3, [pc, #284]	; (8006ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d119      	bne.n	8006dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e07f      	b.n	8006eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d003      	beq.n	8006dca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dc6:	2b03      	cmp	r3, #3
 8006dc8:	d107      	bne.n	8006dda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dca:	4b3f      	ldr	r3, [pc, #252]	; (8006ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d109      	bne.n	8006dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e06f      	b.n	8006eba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dda:	4b3b      	ldr	r3, [pc, #236]	; (8006ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e067      	b.n	8006eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dea:	4b37      	ldr	r3, [pc, #220]	; (8006ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f023 0203 	bic.w	r2, r3, #3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	4934      	ldr	r1, [pc, #208]	; (8006ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006dfc:	f7fc fb6e 	bl	80034dc <HAL_GetTick>
 8006e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e02:	e00a      	b.n	8006e1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e04:	f7fc fb6a 	bl	80034dc <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d901      	bls.n	8006e1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e04f      	b.n	8006eba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e1a:	4b2b      	ldr	r3, [pc, #172]	; (8006ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f003 020c 	and.w	r2, r3, #12
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d1eb      	bne.n	8006e04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e2c:	4b25      	ldr	r3, [pc, #148]	; (8006ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0307 	and.w	r3, r3, #7
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d20c      	bcs.n	8006e54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e3a:	4b22      	ldr	r3, [pc, #136]	; (8006ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	b2d2      	uxtb	r2, r2
 8006e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e42:	4b20      	ldr	r3, [pc, #128]	; (8006ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0307 	and.w	r3, r3, #7
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d001      	beq.n	8006e54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e032      	b.n	8006eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0304 	and.w	r3, r3, #4
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d008      	beq.n	8006e72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e60:	4b19      	ldr	r3, [pc, #100]	; (8006ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	4916      	ldr	r1, [pc, #88]	; (8006ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0308 	and.w	r3, r3, #8
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d009      	beq.n	8006e92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e7e:	4b12      	ldr	r3, [pc, #72]	; (8006ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	00db      	lsls	r3, r3, #3
 8006e8c:	490e      	ldr	r1, [pc, #56]	; (8006ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e92:	f000 f821 	bl	8006ed8 <HAL_RCC_GetSysClockFreq>
 8006e96:	4602      	mov	r2, r0
 8006e98:	4b0b      	ldr	r3, [pc, #44]	; (8006ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	091b      	lsrs	r3, r3, #4
 8006e9e:	f003 030f 	and.w	r3, r3, #15
 8006ea2:	490a      	ldr	r1, [pc, #40]	; (8006ecc <HAL_RCC_ClockConfig+0x1c0>)
 8006ea4:	5ccb      	ldrb	r3, [r1, r3]
 8006ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8006eaa:	4a09      	ldr	r2, [pc, #36]	; (8006ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8006eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006eae:	4b09      	ldr	r3, [pc, #36]	; (8006ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fc face 	bl	8003454 <HAL_InitTick>

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	40023c00 	.word	0x40023c00
 8006ec8:	40023800 	.word	0x40023800
 8006ecc:	0800c968 	.word	0x0800c968
 8006ed0:	2000000c 	.word	0x2000000c
 8006ed4:	20000010 	.word	0x20000010

08006ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ed8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006edc:	b084      	sub	sp, #16
 8006ede:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	607b      	str	r3, [r7, #4]
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	60fb      	str	r3, [r7, #12]
 8006ee8:	2300      	movs	r3, #0
 8006eea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006eec:	2300      	movs	r3, #0
 8006eee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ef0:	4b67      	ldr	r3, [pc, #412]	; (8007090 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f003 030c 	and.w	r3, r3, #12
 8006ef8:	2b08      	cmp	r3, #8
 8006efa:	d00d      	beq.n	8006f18 <HAL_RCC_GetSysClockFreq+0x40>
 8006efc:	2b08      	cmp	r3, #8
 8006efe:	f200 80bd 	bhi.w	800707c <HAL_RCC_GetSysClockFreq+0x1a4>
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d002      	beq.n	8006f0c <HAL_RCC_GetSysClockFreq+0x34>
 8006f06:	2b04      	cmp	r3, #4
 8006f08:	d003      	beq.n	8006f12 <HAL_RCC_GetSysClockFreq+0x3a>
 8006f0a:	e0b7      	b.n	800707c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f0c:	4b61      	ldr	r3, [pc, #388]	; (8007094 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006f0e:	60bb      	str	r3, [r7, #8]
       break;
 8006f10:	e0b7      	b.n	8007082 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f12:	4b61      	ldr	r3, [pc, #388]	; (8007098 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006f14:	60bb      	str	r3, [r7, #8]
      break;
 8006f16:	e0b4      	b.n	8007082 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f18:	4b5d      	ldr	r3, [pc, #372]	; (8007090 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f22:	4b5b      	ldr	r3, [pc, #364]	; (8007090 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d04d      	beq.n	8006fca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f2e:	4b58      	ldr	r3, [pc, #352]	; (8007090 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	099b      	lsrs	r3, r3, #6
 8006f34:	461a      	mov	r2, r3
 8006f36:	f04f 0300 	mov.w	r3, #0
 8006f3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006f3e:	f04f 0100 	mov.w	r1, #0
 8006f42:	ea02 0800 	and.w	r8, r2, r0
 8006f46:	ea03 0901 	and.w	r9, r3, r1
 8006f4a:	4640      	mov	r0, r8
 8006f4c:	4649      	mov	r1, r9
 8006f4e:	f04f 0200 	mov.w	r2, #0
 8006f52:	f04f 0300 	mov.w	r3, #0
 8006f56:	014b      	lsls	r3, r1, #5
 8006f58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006f5c:	0142      	lsls	r2, r0, #5
 8006f5e:	4610      	mov	r0, r2
 8006f60:	4619      	mov	r1, r3
 8006f62:	ebb0 0008 	subs.w	r0, r0, r8
 8006f66:	eb61 0109 	sbc.w	r1, r1, r9
 8006f6a:	f04f 0200 	mov.w	r2, #0
 8006f6e:	f04f 0300 	mov.w	r3, #0
 8006f72:	018b      	lsls	r3, r1, #6
 8006f74:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006f78:	0182      	lsls	r2, r0, #6
 8006f7a:	1a12      	subs	r2, r2, r0
 8006f7c:	eb63 0301 	sbc.w	r3, r3, r1
 8006f80:	f04f 0000 	mov.w	r0, #0
 8006f84:	f04f 0100 	mov.w	r1, #0
 8006f88:	00d9      	lsls	r1, r3, #3
 8006f8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f8e:	00d0      	lsls	r0, r2, #3
 8006f90:	4602      	mov	r2, r0
 8006f92:	460b      	mov	r3, r1
 8006f94:	eb12 0208 	adds.w	r2, r2, r8
 8006f98:	eb43 0309 	adc.w	r3, r3, r9
 8006f9c:	f04f 0000 	mov.w	r0, #0
 8006fa0:	f04f 0100 	mov.w	r1, #0
 8006fa4:	0259      	lsls	r1, r3, #9
 8006fa6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006faa:	0250      	lsls	r0, r2, #9
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	f04f 0300 	mov.w	r3, #0
 8006fbc:	f7f9 fdde 	bl	8000b7c <__aeabi_uldivmod>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	e04a      	b.n	8007060 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fca:	4b31      	ldr	r3, [pc, #196]	; (8007090 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	099b      	lsrs	r3, r3, #6
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	f04f 0300 	mov.w	r3, #0
 8006fd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006fda:	f04f 0100 	mov.w	r1, #0
 8006fde:	ea02 0400 	and.w	r4, r2, r0
 8006fe2:	ea03 0501 	and.w	r5, r3, r1
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	4629      	mov	r1, r5
 8006fea:	f04f 0200 	mov.w	r2, #0
 8006fee:	f04f 0300 	mov.w	r3, #0
 8006ff2:	014b      	lsls	r3, r1, #5
 8006ff4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006ff8:	0142      	lsls	r2, r0, #5
 8006ffa:	4610      	mov	r0, r2
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	1b00      	subs	r0, r0, r4
 8007000:	eb61 0105 	sbc.w	r1, r1, r5
 8007004:	f04f 0200 	mov.w	r2, #0
 8007008:	f04f 0300 	mov.w	r3, #0
 800700c:	018b      	lsls	r3, r1, #6
 800700e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007012:	0182      	lsls	r2, r0, #6
 8007014:	1a12      	subs	r2, r2, r0
 8007016:	eb63 0301 	sbc.w	r3, r3, r1
 800701a:	f04f 0000 	mov.w	r0, #0
 800701e:	f04f 0100 	mov.w	r1, #0
 8007022:	00d9      	lsls	r1, r3, #3
 8007024:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007028:	00d0      	lsls	r0, r2, #3
 800702a:	4602      	mov	r2, r0
 800702c:	460b      	mov	r3, r1
 800702e:	1912      	adds	r2, r2, r4
 8007030:	eb45 0303 	adc.w	r3, r5, r3
 8007034:	f04f 0000 	mov.w	r0, #0
 8007038:	f04f 0100 	mov.w	r1, #0
 800703c:	0299      	lsls	r1, r3, #10
 800703e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007042:	0290      	lsls	r0, r2, #10
 8007044:	4602      	mov	r2, r0
 8007046:	460b      	mov	r3, r1
 8007048:	4610      	mov	r0, r2
 800704a:	4619      	mov	r1, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	461a      	mov	r2, r3
 8007050:	f04f 0300 	mov.w	r3, #0
 8007054:	f7f9 fd92 	bl	8000b7c <__aeabi_uldivmod>
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	4613      	mov	r3, r2
 800705e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007060:	4b0b      	ldr	r3, [pc, #44]	; (8007090 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	0c1b      	lsrs	r3, r3, #16
 8007066:	f003 0303 	and.w	r3, r3, #3
 800706a:	3301      	adds	r3, #1
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	fbb2 f3f3 	udiv	r3, r2, r3
 8007078:	60bb      	str	r3, [r7, #8]
      break;
 800707a:	e002      	b.n	8007082 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800707c:	4b05      	ldr	r3, [pc, #20]	; (8007094 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800707e:	60bb      	str	r3, [r7, #8]
      break;
 8007080:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007082:	68bb      	ldr	r3, [r7, #8]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800708e:	bf00      	nop
 8007090:	40023800 	.word	0x40023800
 8007094:	00f42400 	.word	0x00f42400
 8007098:	007a1200 	.word	0x007a1200

0800709c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800709c:	b480      	push	{r7}
 800709e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070a0:	4b03      	ldr	r3, [pc, #12]	; (80070b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80070a2:	681b      	ldr	r3, [r3, #0]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	2000000c 	.word	0x2000000c

080070b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070b8:	f7ff fff0 	bl	800709c <HAL_RCC_GetHCLKFreq>
 80070bc:	4602      	mov	r2, r0
 80070be:	4b05      	ldr	r3, [pc, #20]	; (80070d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	0a9b      	lsrs	r3, r3, #10
 80070c4:	f003 0307 	and.w	r3, r3, #7
 80070c8:	4903      	ldr	r1, [pc, #12]	; (80070d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070ca:	5ccb      	ldrb	r3, [r1, r3]
 80070cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	40023800 	.word	0x40023800
 80070d8:	0800c978 	.word	0x0800c978

080070dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80070e0:	f7ff ffdc 	bl	800709c <HAL_RCC_GetHCLKFreq>
 80070e4:	4602      	mov	r2, r0
 80070e6:	4b05      	ldr	r3, [pc, #20]	; (80070fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	0b5b      	lsrs	r3, r3, #13
 80070ec:	f003 0307 	and.w	r3, r3, #7
 80070f0:	4903      	ldr	r1, [pc, #12]	; (8007100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070f2:	5ccb      	ldrb	r3, [r1, r3]
 80070f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	40023800 	.word	0x40023800
 8007100:	0800c978 	.word	0x0800c978

08007104 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e041      	b.n	800719a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d106      	bne.n	8007130 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7fb ff8e 	bl	800304c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2202      	movs	r2, #2
 8007134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	3304      	adds	r3, #4
 8007140:	4619      	mov	r1, r3
 8007142:	4610      	mov	r0, r2
 8007144:	f000 fd2e 	bl	8007ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b082      	sub	sp, #8
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e041      	b.n	8007238 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d106      	bne.n	80071ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f839 	bl	8007240 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2202      	movs	r2, #2
 80071d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	3304      	adds	r3, #4
 80071de:	4619      	mov	r1, r3
 80071e0:	4610      	mov	r0, r2
 80071e2:	f000 fcdf 	bl	8007ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d109      	bne.n	8007278 <HAL_TIM_PWM_Start+0x24>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b01      	cmp	r3, #1
 800726e:	bf14      	ite	ne
 8007270:	2301      	movne	r3, #1
 8007272:	2300      	moveq	r3, #0
 8007274:	b2db      	uxtb	r3, r3
 8007276:	e022      	b.n	80072be <HAL_TIM_PWM_Start+0x6a>
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	2b04      	cmp	r3, #4
 800727c:	d109      	bne.n	8007292 <HAL_TIM_PWM_Start+0x3e>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b01      	cmp	r3, #1
 8007288:	bf14      	ite	ne
 800728a:	2301      	movne	r3, #1
 800728c:	2300      	moveq	r3, #0
 800728e:	b2db      	uxtb	r3, r3
 8007290:	e015      	b.n	80072be <HAL_TIM_PWM_Start+0x6a>
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b08      	cmp	r3, #8
 8007296:	d109      	bne.n	80072ac <HAL_TIM_PWM_Start+0x58>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	bf14      	ite	ne
 80072a4:	2301      	movne	r3, #1
 80072a6:	2300      	moveq	r3, #0
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	e008      	b.n	80072be <HAL_TIM_PWM_Start+0x6a>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	bf14      	ite	ne
 80072b8:	2301      	movne	r3, #1
 80072ba:	2300      	moveq	r3, #0
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e068      	b.n	8007398 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d104      	bne.n	80072d6 <HAL_TIM_PWM_Start+0x82>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2202      	movs	r2, #2
 80072d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072d4:	e013      	b.n	80072fe <HAL_TIM_PWM_Start+0xaa>
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2b04      	cmp	r3, #4
 80072da:	d104      	bne.n	80072e6 <HAL_TIM_PWM_Start+0x92>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072e4:	e00b      	b.n	80072fe <HAL_TIM_PWM_Start+0xaa>
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2b08      	cmp	r3, #8
 80072ea:	d104      	bne.n	80072f6 <HAL_TIM_PWM_Start+0xa2>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2202      	movs	r2, #2
 80072f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072f4:	e003      	b.n	80072fe <HAL_TIM_PWM_Start+0xaa>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2202      	movs	r2, #2
 80072fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2201      	movs	r2, #1
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	4618      	mov	r0, r3
 8007308:	f000 fef2 	bl	80080f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a23      	ldr	r2, [pc, #140]	; (80073a0 <HAL_TIM_PWM_Start+0x14c>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d107      	bne.n	8007326 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007324:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a1d      	ldr	r2, [pc, #116]	; (80073a0 <HAL_TIM_PWM_Start+0x14c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d018      	beq.n	8007362 <HAL_TIM_PWM_Start+0x10e>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007338:	d013      	beq.n	8007362 <HAL_TIM_PWM_Start+0x10e>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a19      	ldr	r2, [pc, #100]	; (80073a4 <HAL_TIM_PWM_Start+0x150>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d00e      	beq.n	8007362 <HAL_TIM_PWM_Start+0x10e>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a17      	ldr	r2, [pc, #92]	; (80073a8 <HAL_TIM_PWM_Start+0x154>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d009      	beq.n	8007362 <HAL_TIM_PWM_Start+0x10e>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a16      	ldr	r2, [pc, #88]	; (80073ac <HAL_TIM_PWM_Start+0x158>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d004      	beq.n	8007362 <HAL_TIM_PWM_Start+0x10e>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a14      	ldr	r2, [pc, #80]	; (80073b0 <HAL_TIM_PWM_Start+0x15c>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d111      	bne.n	8007386 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f003 0307 	and.w	r3, r3, #7
 800736c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b06      	cmp	r3, #6
 8007372:	d010      	beq.n	8007396 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f042 0201 	orr.w	r2, r2, #1
 8007382:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007384:	e007      	b.n	8007396 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f042 0201 	orr.w	r2, r2, #1
 8007394:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	40010000 	.word	0x40010000
 80073a4:	40000400 	.word	0x40000400
 80073a8:	40000800 	.word	0x40000800
 80073ac:	40000c00 	.word	0x40000c00
 80073b0:	40014000 	.word	0x40014000

080073b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e097      	b.n	80074f8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d106      	bne.n	80073e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7fb fe5b 	bl	8003098 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2202      	movs	r2, #2
 80073e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	6812      	ldr	r2, [r2, #0]
 80073f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073f8:	f023 0307 	bic.w	r3, r3, #7
 80073fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	3304      	adds	r3, #4
 8007406:	4619      	mov	r1, r3
 8007408:	4610      	mov	r0, r2
 800740a:	f000 fbcb 	bl	8007ba4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	4313      	orrs	r3, r2
 800742e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007436:	f023 0303 	bic.w	r3, r3, #3
 800743a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	689a      	ldr	r2, [r3, #8]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	021b      	lsls	r3, r3, #8
 8007446:	4313      	orrs	r3, r2
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	4313      	orrs	r3, r2
 800744c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007454:	f023 030c 	bic.w	r3, r3, #12
 8007458:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007460:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007464:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	68da      	ldr	r2, [r3, #12]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	021b      	lsls	r3, r3, #8
 8007470:	4313      	orrs	r3, r2
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	4313      	orrs	r3, r2
 8007476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	011a      	lsls	r2, r3, #4
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	031b      	lsls	r3, r3, #12
 8007484:	4313      	orrs	r3, r2
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	4313      	orrs	r3, r2
 800748a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007492:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800749a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	685a      	ldr	r2, [r3, #4]
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	695b      	ldr	r3, [r3, #20]
 80074a4:	011b      	lsls	r3, r3, #4
 80074a6:	4313      	orrs	r3, r2
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3718      	adds	r7, #24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007510:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007518:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007520:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007528:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d110      	bne.n	8007552 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007530:	7bfb      	ldrb	r3, [r7, #15]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d102      	bne.n	800753c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007536:	7b7b      	ldrb	r3, [r7, #13]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d001      	beq.n	8007540 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e069      	b.n	8007614 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2202      	movs	r2, #2
 8007544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2202      	movs	r2, #2
 800754c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007550:	e031      	b.n	80075b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2b04      	cmp	r3, #4
 8007556:	d110      	bne.n	800757a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007558:	7bbb      	ldrb	r3, [r7, #14]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d102      	bne.n	8007564 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800755e:	7b3b      	ldrb	r3, [r7, #12]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d001      	beq.n	8007568 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e055      	b.n	8007614 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2202      	movs	r2, #2
 8007574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007578:	e01d      	b.n	80075b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800757a:	7bfb      	ldrb	r3, [r7, #15]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d108      	bne.n	8007592 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007580:	7bbb      	ldrb	r3, [r7, #14]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d105      	bne.n	8007592 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007586:	7b7b      	ldrb	r3, [r7, #13]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d102      	bne.n	8007592 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800758c:	7b3b      	ldrb	r3, [r7, #12]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d001      	beq.n	8007596 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e03e      	b.n	8007614 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2202      	movs	r2, #2
 800759a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2202      	movs	r2, #2
 80075a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2202      	movs	r2, #2
 80075aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2202      	movs	r2, #2
 80075b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d003      	beq.n	80075c4 <HAL_TIM_Encoder_Start+0xc4>
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	2b04      	cmp	r3, #4
 80075c0:	d008      	beq.n	80075d4 <HAL_TIM_Encoder_Start+0xd4>
 80075c2:	e00f      	b.n	80075e4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2201      	movs	r2, #1
 80075ca:	2100      	movs	r1, #0
 80075cc:	4618      	mov	r0, r3
 80075ce:	f000 fd8f 	bl	80080f0 <TIM_CCxChannelCmd>
      break;
 80075d2:	e016      	b.n	8007602 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2201      	movs	r2, #1
 80075da:	2104      	movs	r1, #4
 80075dc:	4618      	mov	r0, r3
 80075de:	f000 fd87 	bl	80080f0 <TIM_CCxChannelCmd>
      break;
 80075e2:	e00e      	b.n	8007602 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2201      	movs	r2, #1
 80075ea:	2100      	movs	r1, #0
 80075ec:	4618      	mov	r0, r3
 80075ee:	f000 fd7f 	bl	80080f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2201      	movs	r2, #1
 80075f8:	2104      	movs	r1, #4
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 fd78 	bl	80080f0 <TIM_CCxChannelCmd>
      break;
 8007600:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f042 0201 	orr.w	r2, r2, #1
 8007610:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	2b02      	cmp	r3, #2
 8007630:	d122      	bne.n	8007678 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	2b02      	cmp	r3, #2
 800763e:	d11b      	bne.n	8007678 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f06f 0202 	mvn.w	r2, #2
 8007648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	f003 0303 	and.w	r3, r3, #3
 800765a:	2b00      	cmp	r3, #0
 800765c:	d003      	beq.n	8007666 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fa81 	bl	8007b66 <HAL_TIM_IC_CaptureCallback>
 8007664:	e005      	b.n	8007672 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fa73 	bl	8007b52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fa84 	bl	8007b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	f003 0304 	and.w	r3, r3, #4
 8007682:	2b04      	cmp	r3, #4
 8007684:	d122      	bne.n	80076cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	f003 0304 	and.w	r3, r3, #4
 8007690:	2b04      	cmp	r3, #4
 8007692:	d11b      	bne.n	80076cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f06f 0204 	mvn.w	r2, #4
 800769c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2202      	movs	r2, #2
 80076a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fa57 	bl	8007b66 <HAL_TIM_IC_CaptureCallback>
 80076b8:	e005      	b.n	80076c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fa49 	bl	8007b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fa5a 	bl	8007b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	f003 0308 	and.w	r3, r3, #8
 80076d6:	2b08      	cmp	r3, #8
 80076d8:	d122      	bne.n	8007720 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	f003 0308 	and.w	r3, r3, #8
 80076e4:	2b08      	cmp	r3, #8
 80076e6:	d11b      	bne.n	8007720 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f06f 0208 	mvn.w	r2, #8
 80076f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2204      	movs	r2, #4
 80076f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	f003 0303 	and.w	r3, r3, #3
 8007702:	2b00      	cmp	r3, #0
 8007704:	d003      	beq.n	800770e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fa2d 	bl	8007b66 <HAL_TIM_IC_CaptureCallback>
 800770c:	e005      	b.n	800771a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fa1f 	bl	8007b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fa30 	bl	8007b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	f003 0310 	and.w	r3, r3, #16
 800772a:	2b10      	cmp	r3, #16
 800772c:	d122      	bne.n	8007774 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	f003 0310 	and.w	r3, r3, #16
 8007738:	2b10      	cmp	r3, #16
 800773a:	d11b      	bne.n	8007774 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f06f 0210 	mvn.w	r2, #16
 8007744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2208      	movs	r2, #8
 800774a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007756:	2b00      	cmp	r3, #0
 8007758:	d003      	beq.n	8007762 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fa03 	bl	8007b66 <HAL_TIM_IC_CaptureCallback>
 8007760:	e005      	b.n	800776e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f9f5 	bl	8007b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fa06 	bl	8007b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	2b01      	cmp	r3, #1
 8007780:	d10e      	bne.n	80077a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	f003 0301 	and.w	r3, r3, #1
 800778c:	2b01      	cmp	r3, #1
 800778e:	d107      	bne.n	80077a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f06f 0201 	mvn.w	r2, #1
 8007798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f9cf 	bl	8007b3e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077aa:	2b80      	cmp	r3, #128	; 0x80
 80077ac:	d10e      	bne.n	80077cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077b8:	2b80      	cmp	r3, #128	; 0x80
 80077ba:	d107      	bne.n	80077cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80077c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fd30 	bl	800822c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d6:	2b40      	cmp	r3, #64	; 0x40
 80077d8:	d10e      	bne.n	80077f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e4:	2b40      	cmp	r3, #64	; 0x40
 80077e6:	d107      	bne.n	80077f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f9cb 	bl	8007b8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	f003 0320 	and.w	r3, r3, #32
 8007802:	2b20      	cmp	r3, #32
 8007804:	d10e      	bne.n	8007824 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	f003 0320 	and.w	r3, r3, #32
 8007810:	2b20      	cmp	r3, #32
 8007812:	d107      	bne.n	8007824 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f06f 0220 	mvn.w	r2, #32
 800781c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fcfa 	bl	8008218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007824:	bf00      	nop
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007842:	2b01      	cmp	r3, #1
 8007844:	d101      	bne.n	800784a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007846:	2302      	movs	r3, #2
 8007848:	e0ae      	b.n	80079a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b0c      	cmp	r3, #12
 8007856:	f200 809f 	bhi.w	8007998 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800785a:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	08007895 	.word	0x08007895
 8007864:	08007999 	.word	0x08007999
 8007868:	08007999 	.word	0x08007999
 800786c:	08007999 	.word	0x08007999
 8007870:	080078d5 	.word	0x080078d5
 8007874:	08007999 	.word	0x08007999
 8007878:	08007999 	.word	0x08007999
 800787c:	08007999 	.word	0x08007999
 8007880:	08007917 	.word	0x08007917
 8007884:	08007999 	.word	0x08007999
 8007888:	08007999 	.word	0x08007999
 800788c:	08007999 	.word	0x08007999
 8007890:	08007957 	.word	0x08007957
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68b9      	ldr	r1, [r7, #8]
 800789a:	4618      	mov	r0, r3
 800789c:	f000 fa02 	bl	8007ca4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	699a      	ldr	r2, [r3, #24]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f042 0208 	orr.w	r2, r2, #8
 80078ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	699a      	ldr	r2, [r3, #24]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 0204 	bic.w	r2, r2, #4
 80078be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6999      	ldr	r1, [r3, #24]
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	691a      	ldr	r2, [r3, #16]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	430a      	orrs	r2, r1
 80078d0:	619a      	str	r2, [r3, #24]
      break;
 80078d2:	e064      	b.n	800799e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68b9      	ldr	r1, [r7, #8]
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 fa48 	bl	8007d70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	699a      	ldr	r2, [r3, #24]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	699a      	ldr	r2, [r3, #24]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	6999      	ldr	r1, [r3, #24]
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	021a      	lsls	r2, r3, #8
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	430a      	orrs	r2, r1
 8007912:	619a      	str	r2, [r3, #24]
      break;
 8007914:	e043      	b.n	800799e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68b9      	ldr	r1, [r7, #8]
 800791c:	4618      	mov	r0, r3
 800791e:	f000 fa93 	bl	8007e48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	69da      	ldr	r2, [r3, #28]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f042 0208 	orr.w	r2, r2, #8
 8007930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	69da      	ldr	r2, [r3, #28]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f022 0204 	bic.w	r2, r2, #4
 8007940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	69d9      	ldr	r1, [r3, #28]
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	691a      	ldr	r2, [r3, #16]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	430a      	orrs	r2, r1
 8007952:	61da      	str	r2, [r3, #28]
      break;
 8007954:	e023      	b.n	800799e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68b9      	ldr	r1, [r7, #8]
 800795c:	4618      	mov	r0, r3
 800795e:	f000 fadd 	bl	8007f1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	69da      	ldr	r2, [r3, #28]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	69da      	ldr	r2, [r3, #28]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	69d9      	ldr	r1, [r3, #28]
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	021a      	lsls	r2, r3, #8
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	430a      	orrs	r2, r1
 8007994:	61da      	str	r2, [r3, #28]
      break;
 8007996:	e002      	b.n	800799e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	75fb      	strb	r3, [r7, #23]
      break;
 800799c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80079a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3718      	adds	r7, #24
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d101      	bne.n	80079cc <HAL_TIM_ConfigClockSource+0x1c>
 80079c8:	2302      	movs	r3, #2
 80079ca:	e0b4      	b.n	8007b36 <HAL_TIM_ConfigClockSource+0x186>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2202      	movs	r2, #2
 80079d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80079ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a04:	d03e      	beq.n	8007a84 <HAL_TIM_ConfigClockSource+0xd4>
 8007a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a0a:	f200 8087 	bhi.w	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
 8007a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a12:	f000 8086 	beq.w	8007b22 <HAL_TIM_ConfigClockSource+0x172>
 8007a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a1a:	d87f      	bhi.n	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
 8007a1c:	2b70      	cmp	r3, #112	; 0x70
 8007a1e:	d01a      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0xa6>
 8007a20:	2b70      	cmp	r3, #112	; 0x70
 8007a22:	d87b      	bhi.n	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
 8007a24:	2b60      	cmp	r3, #96	; 0x60
 8007a26:	d050      	beq.n	8007aca <HAL_TIM_ConfigClockSource+0x11a>
 8007a28:	2b60      	cmp	r3, #96	; 0x60
 8007a2a:	d877      	bhi.n	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
 8007a2c:	2b50      	cmp	r3, #80	; 0x50
 8007a2e:	d03c      	beq.n	8007aaa <HAL_TIM_ConfigClockSource+0xfa>
 8007a30:	2b50      	cmp	r3, #80	; 0x50
 8007a32:	d873      	bhi.n	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
 8007a34:	2b40      	cmp	r3, #64	; 0x40
 8007a36:	d058      	beq.n	8007aea <HAL_TIM_ConfigClockSource+0x13a>
 8007a38:	2b40      	cmp	r3, #64	; 0x40
 8007a3a:	d86f      	bhi.n	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
 8007a3c:	2b30      	cmp	r3, #48	; 0x30
 8007a3e:	d064      	beq.n	8007b0a <HAL_TIM_ConfigClockSource+0x15a>
 8007a40:	2b30      	cmp	r3, #48	; 0x30
 8007a42:	d86b      	bhi.n	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
 8007a44:	2b20      	cmp	r3, #32
 8007a46:	d060      	beq.n	8007b0a <HAL_TIM_ConfigClockSource+0x15a>
 8007a48:	2b20      	cmp	r3, #32
 8007a4a:	d867      	bhi.n	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d05c      	beq.n	8007b0a <HAL_TIM_ConfigClockSource+0x15a>
 8007a50:	2b10      	cmp	r3, #16
 8007a52:	d05a      	beq.n	8007b0a <HAL_TIM_ConfigClockSource+0x15a>
 8007a54:	e062      	b.n	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6818      	ldr	r0, [r3, #0]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	6899      	ldr	r1, [r3, #8]
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	f000 fb23 	bl	80080b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	609a      	str	r2, [r3, #8]
      break;
 8007a82:	e04f      	b.n	8007b24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6818      	ldr	r0, [r3, #0]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	6899      	ldr	r1, [r3, #8]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	f000 fb0c 	bl	80080b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689a      	ldr	r2, [r3, #8]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007aa6:	609a      	str	r2, [r3, #8]
      break;
 8007aa8:	e03c      	b.n	8007b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6818      	ldr	r0, [r3, #0]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	6859      	ldr	r1, [r3, #4]
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	f000 fa80 	bl	8007fbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2150      	movs	r1, #80	; 0x50
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 fad9 	bl	800807a <TIM_ITRx_SetConfig>
      break;
 8007ac8:	e02c      	b.n	8007b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6818      	ldr	r0, [r3, #0]
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	6859      	ldr	r1, [r3, #4]
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	f000 fa9f 	bl	800801a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2160      	movs	r1, #96	; 0x60
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 fac9 	bl	800807a <TIM_ITRx_SetConfig>
      break;
 8007ae8:	e01c      	b.n	8007b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6818      	ldr	r0, [r3, #0]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	6859      	ldr	r1, [r3, #4]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	461a      	mov	r2, r3
 8007af8:	f000 fa60 	bl	8007fbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2140      	movs	r1, #64	; 0x40
 8007b02:	4618      	mov	r0, r3
 8007b04:	f000 fab9 	bl	800807a <TIM_ITRx_SetConfig>
      break;
 8007b08:	e00c      	b.n	8007b24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4619      	mov	r1, r3
 8007b14:	4610      	mov	r0, r2
 8007b16:	f000 fab0 	bl	800807a <TIM_ITRx_SetConfig>
      break;
 8007b1a:	e003      	b.n	8007b24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b20:	e000      	b.n	8007b24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007b22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b083      	sub	sp, #12
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007b46:	bf00      	nop
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b083      	sub	sp, #12
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b5a:	bf00      	nop
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b083      	sub	sp, #12
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b6e:	bf00      	nop
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b82:	bf00      	nop
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b083      	sub	sp, #12
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b96:	bf00      	nop
 8007b98:	370c      	adds	r7, #12
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
	...

08007ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a34      	ldr	r2, [pc, #208]	; (8007c88 <TIM_Base_SetConfig+0xe4>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d00f      	beq.n	8007bdc <TIM_Base_SetConfig+0x38>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bc2:	d00b      	beq.n	8007bdc <TIM_Base_SetConfig+0x38>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a31      	ldr	r2, [pc, #196]	; (8007c8c <TIM_Base_SetConfig+0xe8>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d007      	beq.n	8007bdc <TIM_Base_SetConfig+0x38>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a30      	ldr	r2, [pc, #192]	; (8007c90 <TIM_Base_SetConfig+0xec>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d003      	beq.n	8007bdc <TIM_Base_SetConfig+0x38>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a2f      	ldr	r2, [pc, #188]	; (8007c94 <TIM_Base_SetConfig+0xf0>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d108      	bne.n	8007bee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a25      	ldr	r2, [pc, #148]	; (8007c88 <TIM_Base_SetConfig+0xe4>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d01b      	beq.n	8007c2e <TIM_Base_SetConfig+0x8a>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bfc:	d017      	beq.n	8007c2e <TIM_Base_SetConfig+0x8a>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a22      	ldr	r2, [pc, #136]	; (8007c8c <TIM_Base_SetConfig+0xe8>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d013      	beq.n	8007c2e <TIM_Base_SetConfig+0x8a>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a21      	ldr	r2, [pc, #132]	; (8007c90 <TIM_Base_SetConfig+0xec>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d00f      	beq.n	8007c2e <TIM_Base_SetConfig+0x8a>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a20      	ldr	r2, [pc, #128]	; (8007c94 <TIM_Base_SetConfig+0xf0>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d00b      	beq.n	8007c2e <TIM_Base_SetConfig+0x8a>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a1f      	ldr	r2, [pc, #124]	; (8007c98 <TIM_Base_SetConfig+0xf4>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d007      	beq.n	8007c2e <TIM_Base_SetConfig+0x8a>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a1e      	ldr	r2, [pc, #120]	; (8007c9c <TIM_Base_SetConfig+0xf8>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d003      	beq.n	8007c2e <TIM_Base_SetConfig+0x8a>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a1d      	ldr	r2, [pc, #116]	; (8007ca0 <TIM_Base_SetConfig+0xfc>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d108      	bne.n	8007c40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	689a      	ldr	r2, [r3, #8]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a08      	ldr	r2, [pc, #32]	; (8007c88 <TIM_Base_SetConfig+0xe4>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d103      	bne.n	8007c74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	691a      	ldr	r2, [r3, #16]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	615a      	str	r2, [r3, #20]
}
 8007c7a:	bf00      	nop
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	40010000 	.word	0x40010000
 8007c8c:	40000400 	.word	0x40000400
 8007c90:	40000800 	.word	0x40000800
 8007c94:	40000c00 	.word	0x40000c00
 8007c98:	40014000 	.word	0x40014000
 8007c9c:	40014400 	.word	0x40014400
 8007ca0:	40014800 	.word	0x40014800

08007ca4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b087      	sub	sp, #28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	f023 0201 	bic.w	r2, r3, #1
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f023 0303 	bic.w	r3, r3, #3
 8007cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	f023 0302 	bic.w	r3, r3, #2
 8007cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a1c      	ldr	r2, [pc, #112]	; (8007d6c <TIM_OC1_SetConfig+0xc8>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d10c      	bne.n	8007d1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	f023 0308 	bic.w	r3, r3, #8
 8007d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	f023 0304 	bic.w	r3, r3, #4
 8007d18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a13      	ldr	r2, [pc, #76]	; (8007d6c <TIM_OC1_SetConfig+0xc8>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d111      	bne.n	8007d46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	621a      	str	r2, [r3, #32]
}
 8007d60:	bf00      	nop
 8007d62:	371c      	adds	r7, #28
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr
 8007d6c:	40010000 	.word	0x40010000

08007d70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	f023 0210 	bic.w	r2, r3, #16
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	021b      	lsls	r3, r3, #8
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	f023 0320 	bic.w	r3, r3, #32
 8007dba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	011b      	lsls	r3, r3, #4
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a1e      	ldr	r2, [pc, #120]	; (8007e44 <TIM_OC2_SetConfig+0xd4>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d10d      	bne.n	8007dec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	011b      	lsls	r3, r3, #4
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a15      	ldr	r2, [pc, #84]	; (8007e44 <TIM_OC2_SetConfig+0xd4>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d113      	bne.n	8007e1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007dfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	693a      	ldr	r2, [r7, #16]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	697a      	ldr	r2, [r7, #20]
 8007e34:	621a      	str	r2, [r3, #32]
}
 8007e36:	bf00      	nop
 8007e38:	371c      	adds	r7, #28
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	40010000 	.word	0x40010000

08007e48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	69db      	ldr	r3, [r3, #28]
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f023 0303 	bic.w	r3, r3, #3
 8007e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	021b      	lsls	r3, r3, #8
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a1d      	ldr	r2, [pc, #116]	; (8007f18 <TIM_OC3_SetConfig+0xd0>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d10d      	bne.n	8007ec2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007eac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	021b      	lsls	r3, r3, #8
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ec0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a14      	ldr	r2, [pc, #80]	; (8007f18 <TIM_OC3_SetConfig+0xd0>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d113      	bne.n	8007ef2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	011b      	lsls	r3, r3, #4
 8007ee0:	693a      	ldr	r2, [r7, #16]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	011b      	lsls	r3, r3, #4
 8007eec:	693a      	ldr	r2, [r7, #16]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	685a      	ldr	r2, [r3, #4]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	697a      	ldr	r2, [r7, #20]
 8007f0a:	621a      	str	r2, [r3, #32]
}
 8007f0c:	bf00      	nop
 8007f0e:	371c      	adds	r7, #28
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr
 8007f18:	40010000 	.word	0x40010000

08007f1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b087      	sub	sp, #28
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a1b      	ldr	r3, [r3, #32]
 8007f2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	69db      	ldr	r3, [r3, #28]
 8007f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	021b      	lsls	r3, r3, #8
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	031b      	lsls	r3, r3, #12
 8007f6e:	693a      	ldr	r2, [r7, #16]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a10      	ldr	r2, [pc, #64]	; (8007fb8 <TIM_OC4_SetConfig+0x9c>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d109      	bne.n	8007f90 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	695b      	ldr	r3, [r3, #20]
 8007f88:	019b      	lsls	r3, r3, #6
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	685a      	ldr	r2, [r3, #4]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	621a      	str	r2, [r3, #32]
}
 8007faa:	bf00      	nop
 8007fac:	371c      	adds	r7, #28
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	40010000 	.word	0x40010000

08007fbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b087      	sub	sp, #28
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6a1b      	ldr	r3, [r3, #32]
 8007fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	f023 0201 	bic.w	r2, r3, #1
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	011b      	lsls	r3, r3, #4
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f023 030a 	bic.w	r3, r3, #10
 8007ff8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ffa:	697a      	ldr	r2, [r7, #20]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	621a      	str	r2, [r3, #32]
}
 800800e:	bf00      	nop
 8008010:	371c      	adds	r7, #28
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800801a:	b480      	push	{r7}
 800801c:	b087      	sub	sp, #28
 800801e:	af00      	add	r7, sp, #0
 8008020:	60f8      	str	r0, [r7, #12]
 8008022:	60b9      	str	r1, [r7, #8]
 8008024:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	f023 0210 	bic.w	r2, r3, #16
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6a1b      	ldr	r3, [r3, #32]
 800803c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008044:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	031b      	lsls	r3, r3, #12
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	4313      	orrs	r3, r2
 800804e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008056:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	011b      	lsls	r3, r3, #4
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	4313      	orrs	r3, r2
 8008060:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	697a      	ldr	r2, [r7, #20]
 8008066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	621a      	str	r2, [r3, #32]
}
 800806e:	bf00      	nop
 8008070:	371c      	adds	r7, #28
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr

0800807a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800807a:	b480      	push	{r7}
 800807c:	b085      	sub	sp, #20
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008090:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008092:	683a      	ldr	r2, [r7, #0]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	4313      	orrs	r3, r2
 8008098:	f043 0307 	orr.w	r3, r3, #7
 800809c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	609a      	str	r2, [r3, #8]
}
 80080a4:	bf00      	nop
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b087      	sub	sp, #28
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
 80080bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	021a      	lsls	r2, r3, #8
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	431a      	orrs	r2, r3
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	4313      	orrs	r3, r2
 80080dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	609a      	str	r2, [r3, #8]
}
 80080e4:	bf00      	nop
 80080e6:	371c      	adds	r7, #28
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b087      	sub	sp, #28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	f003 031f 	and.w	r3, r3, #31
 8008102:	2201      	movs	r2, #1
 8008104:	fa02 f303 	lsl.w	r3, r2, r3
 8008108:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6a1a      	ldr	r2, [r3, #32]
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	43db      	mvns	r3, r3
 8008112:	401a      	ands	r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6a1a      	ldr	r2, [r3, #32]
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	f003 031f 	and.w	r3, r3, #31
 8008122:	6879      	ldr	r1, [r7, #4]
 8008124:	fa01 f303 	lsl.w	r3, r1, r3
 8008128:	431a      	orrs	r2, r3
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	621a      	str	r2, [r3, #32]
}
 800812e:	bf00      	nop
 8008130:	371c      	adds	r7, #28
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
	...

0800813c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800814c:	2b01      	cmp	r3, #1
 800814e:	d101      	bne.n	8008154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008150:	2302      	movs	r3, #2
 8008152:	e050      	b.n	80081f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2202      	movs	r2, #2
 8008160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800817a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	4313      	orrs	r3, r2
 8008184:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a1c      	ldr	r2, [pc, #112]	; (8008204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d018      	beq.n	80081ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081a0:	d013      	beq.n	80081ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a18      	ldr	r2, [pc, #96]	; (8008208 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d00e      	beq.n	80081ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a16      	ldr	r2, [pc, #88]	; (800820c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d009      	beq.n	80081ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a15      	ldr	r2, [pc, #84]	; (8008210 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d004      	beq.n	80081ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a13      	ldr	r2, [pc, #76]	; (8008214 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d10c      	bne.n	80081e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	4313      	orrs	r3, r2
 80081da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	40010000 	.word	0x40010000
 8008208:	40000400 	.word	0x40000400
 800820c:	40000800 	.word	0x40000800
 8008210:	40000c00 	.word	0x40000c00
 8008214:	40014000 	.word	0x40014000

08008218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d101      	bne.n	8008252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e03f      	b.n	80082d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	d106      	bne.n	800826c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f7fb f826 	bl	80032b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2224      	movs	r2, #36	; 0x24
 8008270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68da      	ldr	r2, [r3, #12]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008282:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 ff97 	bl	80091b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	691a      	ldr	r2, [r3, #16]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008298:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	695a      	ldr	r2, [r3, #20]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68da      	ldr	r2, [r3, #12]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2220      	movs	r2, #32
 80082c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2220      	movs	r2, #32
 80082cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b08a      	sub	sp, #40	; 0x28
 80082de:	af02      	add	r7, sp, #8
 80082e0:	60f8      	str	r0, [r7, #12]
 80082e2:	60b9      	str	r1, [r7, #8]
 80082e4:	603b      	str	r3, [r7, #0]
 80082e6:	4613      	mov	r3, r2
 80082e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80082ea:	2300      	movs	r3, #0
 80082ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b20      	cmp	r3, #32
 80082f8:	d17c      	bne.n	80083f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d002      	beq.n	8008306 <HAL_UART_Transmit+0x2c>
 8008300:	88fb      	ldrh	r3, [r7, #6]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d101      	bne.n	800830a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e075      	b.n	80083f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008310:	2b01      	cmp	r3, #1
 8008312:	d101      	bne.n	8008318 <HAL_UART_Transmit+0x3e>
 8008314:	2302      	movs	r3, #2
 8008316:	e06e      	b.n	80083f6 <HAL_UART_Transmit+0x11c>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2221      	movs	r2, #33	; 0x21
 800832a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800832e:	f7fb f8d5 	bl	80034dc <HAL_GetTick>
 8008332:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	88fa      	ldrh	r2, [r7, #6]
 8008338:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	88fa      	ldrh	r2, [r7, #6]
 800833e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008348:	d108      	bne.n	800835c <HAL_UART_Transmit+0x82>
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d104      	bne.n	800835c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008352:	2300      	movs	r3, #0
 8008354:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	61bb      	str	r3, [r7, #24]
 800835a:	e003      	b.n	8008364 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008360:	2300      	movs	r3, #0
 8008362:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800836c:	e02a      	b.n	80083c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	2200      	movs	r2, #0
 8008376:	2180      	movs	r1, #128	; 0x80
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f000 fc53 	bl	8008c24 <UART_WaitOnFlagUntilTimeout>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008384:	2303      	movs	r3, #3
 8008386:	e036      	b.n	80083f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10b      	bne.n	80083a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	881b      	ldrh	r3, [r3, #0]
 8008392:	461a      	mov	r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800839c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	3302      	adds	r3, #2
 80083a2:	61bb      	str	r3, [r7, #24]
 80083a4:	e007      	b.n	80083b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	781a      	ldrb	r2, [r3, #0]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	3301      	adds	r3, #1
 80083b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	3b01      	subs	r3, #1
 80083be:	b29a      	uxth	r2, r3
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1cf      	bne.n	800836e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	9300      	str	r3, [sp, #0]
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	2200      	movs	r2, #0
 80083d6:	2140      	movs	r1, #64	; 0x40
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f000 fc23 	bl	8008c24 <UART_WaitOnFlagUntilTimeout>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d001      	beq.n	80083e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80083e4:	2303      	movs	r3, #3
 80083e6:	e006      	b.n	80083f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2220      	movs	r2, #32
 80083ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80083f0:	2300      	movs	r3, #0
 80083f2:	e000      	b.n	80083f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80083f4:	2302      	movs	r3, #2
  }
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3720      	adds	r7, #32
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b08c      	sub	sp, #48	; 0x30
 8008402:	af00      	add	r7, sp, #0
 8008404:	60f8      	str	r0, [r7, #12]
 8008406:	60b9      	str	r1, [r7, #8]
 8008408:	4613      	mov	r3, r2
 800840a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b20      	cmp	r3, #32
 8008416:	d152      	bne.n	80084be <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d002      	beq.n	8008424 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800841e:	88fb      	ldrh	r3, [r7, #6]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d101      	bne.n	8008428 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	e04b      	b.n	80084c0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800842e:	2b01      	cmp	r3, #1
 8008430:	d101      	bne.n	8008436 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8008432:	2302      	movs	r3, #2
 8008434:	e044      	b.n	80084c0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2201      	movs	r2, #1
 8008442:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008444:	88fb      	ldrh	r3, [r7, #6]
 8008446:	461a      	mov	r2, r3
 8008448:	68b9      	ldr	r1, [r7, #8]
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f000 fc58 	bl	8008d00 <UART_Start_Receive_DMA>
 8008450:	4603      	mov	r3, r0
 8008452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008456:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800845a:	2b00      	cmp	r3, #0
 800845c:	d12c      	bne.n	80084b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008462:	2b01      	cmp	r3, #1
 8008464:	d125      	bne.n	80084b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008466:	2300      	movs	r3, #0
 8008468:	613b      	str	r3, [r7, #16]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	613b      	str	r3, [r7, #16]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	613b      	str	r3, [r7, #16]
 800847a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	330c      	adds	r3, #12
 8008482:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	e853 3f00 	ldrex	r3, [r3]
 800848a:	617b      	str	r3, [r7, #20]
   return(result);
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	f043 0310 	orr.w	r3, r3, #16
 8008492:	62bb      	str	r3, [r7, #40]	; 0x28
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	330c      	adds	r3, #12
 800849a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800849c:	627a      	str	r2, [r7, #36]	; 0x24
 800849e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a0:	6a39      	ldr	r1, [r7, #32]
 80084a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084a4:	e841 2300 	strex	r3, r2, [r1]
 80084a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1e5      	bne.n	800847c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80084b0:	e002      	b.n	80084b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80084b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80084bc:	e000      	b.n	80084c0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80084be:	2302      	movs	r3, #2
  }
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3730      	adds	r7, #48	; 0x30
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b0ba      	sub	sp, #232	; 0xe8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80084ee:	2300      	movs	r3, #0
 80084f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80084f4:	2300      	movs	r3, #0
 80084f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80084fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084fe:	f003 030f 	and.w	r3, r3, #15
 8008502:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008506:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10f      	bne.n	800852e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800850e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008512:	f003 0320 	and.w	r3, r3, #32
 8008516:	2b00      	cmp	r3, #0
 8008518:	d009      	beq.n	800852e <HAL_UART_IRQHandler+0x66>
 800851a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800851e:	f003 0320 	and.w	r3, r3, #32
 8008522:	2b00      	cmp	r3, #0
 8008524:	d003      	beq.n	800852e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fd8b 	bl	8009042 <UART_Receive_IT>
      return;
 800852c:	e256      	b.n	80089dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800852e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008532:	2b00      	cmp	r3, #0
 8008534:	f000 80de 	beq.w	80086f4 <HAL_UART_IRQHandler+0x22c>
 8008538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	2b00      	cmp	r3, #0
 8008542:	d106      	bne.n	8008552 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008548:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800854c:	2b00      	cmp	r3, #0
 800854e:	f000 80d1 	beq.w	80086f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00b      	beq.n	8008576 <HAL_UART_IRQHandler+0xae>
 800855e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008566:	2b00      	cmp	r3, #0
 8008568:	d005      	beq.n	8008576 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856e:	f043 0201 	orr.w	r2, r3, #1
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800857a:	f003 0304 	and.w	r3, r3, #4
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00b      	beq.n	800859a <HAL_UART_IRQHandler+0xd2>
 8008582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008586:	f003 0301 	and.w	r3, r3, #1
 800858a:	2b00      	cmp	r3, #0
 800858c:	d005      	beq.n	800859a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008592:	f043 0202 	orr.w	r2, r3, #2
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800859a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800859e:	f003 0302 	and.w	r3, r3, #2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00b      	beq.n	80085be <HAL_UART_IRQHandler+0xf6>
 80085a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d005      	beq.n	80085be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b6:	f043 0204 	orr.w	r2, r3, #4
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80085be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085c2:	f003 0308 	and.w	r3, r3, #8
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d011      	beq.n	80085ee <HAL_UART_IRQHandler+0x126>
 80085ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085ce:	f003 0320 	and.w	r3, r3, #32
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d105      	bne.n	80085e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80085d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085da:	f003 0301 	and.w	r3, r3, #1
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d005      	beq.n	80085ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e6:	f043 0208 	orr.w	r2, r3, #8
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f000 81ed 	beq.w	80089d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085fc:	f003 0320 	and.w	r3, r3, #32
 8008600:	2b00      	cmp	r3, #0
 8008602:	d008      	beq.n	8008616 <HAL_UART_IRQHandler+0x14e>
 8008604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008608:	f003 0320 	and.w	r3, r3, #32
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fd16 	bl	8009042 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	695b      	ldr	r3, [r3, #20]
 800861c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008620:	2b40      	cmp	r3, #64	; 0x40
 8008622:	bf0c      	ite	eq
 8008624:	2301      	moveq	r3, #1
 8008626:	2300      	movne	r3, #0
 8008628:	b2db      	uxtb	r3, r3
 800862a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008632:	f003 0308 	and.w	r3, r3, #8
 8008636:	2b00      	cmp	r3, #0
 8008638:	d103      	bne.n	8008642 <HAL_UART_IRQHandler+0x17a>
 800863a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800863e:	2b00      	cmp	r3, #0
 8008640:	d04f      	beq.n	80086e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fc1e 	bl	8008e84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008652:	2b40      	cmp	r3, #64	; 0x40
 8008654:	d141      	bne.n	80086da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3314      	adds	r3, #20
 800865c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008660:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008664:	e853 3f00 	ldrex	r3, [r3]
 8008668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800866c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008674:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3314      	adds	r3, #20
 800867e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008682:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008686:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800868e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008692:	e841 2300 	strex	r3, r2, [r1]
 8008696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800869a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1d9      	bne.n	8008656 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d013      	beq.n	80086d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ae:	4a7d      	ldr	r2, [pc, #500]	; (80088a4 <HAL_UART_IRQHandler+0x3dc>)
 80086b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7fb f9c8 	bl	8003a4c <HAL_DMA_Abort_IT>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d016      	beq.n	80086f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80086cc:	4610      	mov	r0, r2
 80086ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d0:	e00e      	b.n	80086f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f9a4 	bl	8008a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d8:	e00a      	b.n	80086f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 f9a0 	bl	8008a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086e0:	e006      	b.n	80086f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f99c 	bl	8008a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80086ee:	e170      	b.n	80089d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f0:	bf00      	nop
    return;
 80086f2:	e16e      	b.n	80089d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	f040 814a 	bne.w	8008992 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80086fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008702:	f003 0310 	and.w	r3, r3, #16
 8008706:	2b00      	cmp	r3, #0
 8008708:	f000 8143 	beq.w	8008992 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800870c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008710:	f003 0310 	and.w	r3, r3, #16
 8008714:	2b00      	cmp	r3, #0
 8008716:	f000 813c 	beq.w	8008992 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800871a:	2300      	movs	r3, #0
 800871c:	60bb      	str	r3, [r7, #8]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	60bb      	str	r3, [r7, #8]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	60bb      	str	r3, [r7, #8]
 800872e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800873a:	2b40      	cmp	r3, #64	; 0x40
 800873c:	f040 80b4 	bne.w	80088a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800874c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008750:	2b00      	cmp	r3, #0
 8008752:	f000 8140 	beq.w	80089d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800875a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800875e:	429a      	cmp	r2, r3
 8008760:	f080 8139 	bcs.w	80089d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800876a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008776:	f000 8088 	beq.w	800888a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	330c      	adds	r3, #12
 8008780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008784:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008788:	e853 3f00 	ldrex	r3, [r3]
 800878c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008790:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008798:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	330c      	adds	r3, #12
 80087a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80087a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80087aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80087b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80087b6:	e841 2300 	strex	r3, r2, [r1]
 80087ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80087be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1d9      	bne.n	800877a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	3314      	adds	r3, #20
 80087cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087d0:	e853 3f00 	ldrex	r3, [r3]
 80087d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80087d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087d8:	f023 0301 	bic.w	r3, r3, #1
 80087dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	3314      	adds	r3, #20
 80087e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80087ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80087ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80087f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80087f6:	e841 2300 	strex	r3, r2, [r1]
 80087fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80087fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1e1      	bne.n	80087c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	3314      	adds	r3, #20
 8008808:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800880c:	e853 3f00 	ldrex	r3, [r3]
 8008810:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008818:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	3314      	adds	r3, #20
 8008822:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008826:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008828:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800882c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800882e:	e841 2300 	strex	r3, r2, [r1]
 8008832:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1e3      	bne.n	8008802 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2220      	movs	r2, #32
 800883e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	330c      	adds	r3, #12
 800884e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008852:	e853 3f00 	ldrex	r3, [r3]
 8008856:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800885a:	f023 0310 	bic.w	r3, r3, #16
 800885e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	330c      	adds	r3, #12
 8008868:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800886c:	65ba      	str	r2, [r7, #88]	; 0x58
 800886e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008870:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008872:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008874:	e841 2300 	strex	r3, r2, [r1]
 8008878:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800887a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1e3      	bne.n	8008848 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008884:	4618      	mov	r0, r3
 8008886:	f7fb f871 	bl	800396c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008892:	b29b      	uxth	r3, r3
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	b29b      	uxth	r3, r3
 8008898:	4619      	mov	r1, r3
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f7f9 ffe8 	bl	8002870 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80088a0:	e099      	b.n	80089d6 <HAL_UART_IRQHandler+0x50e>
 80088a2:	bf00      	nop
 80088a4:	08008f4b 	.word	0x08008f4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088bc:	b29b      	uxth	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f000 808b 	beq.w	80089da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80088c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f000 8086 	beq.w	80089da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	330c      	adds	r3, #12
 80088d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d8:	e853 3f00 	ldrex	r3, [r3]
 80088dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	330c      	adds	r3, #12
 80088ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80088f2:	647a      	str	r2, [r7, #68]	; 0x44
 80088f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088fa:	e841 2300 	strex	r3, r2, [r1]
 80088fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1e3      	bne.n	80088ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3314      	adds	r3, #20
 800890c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008910:	e853 3f00 	ldrex	r3, [r3]
 8008914:	623b      	str	r3, [r7, #32]
   return(result);
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	f023 0301 	bic.w	r3, r3, #1
 800891c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	3314      	adds	r3, #20
 8008926:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800892a:	633a      	str	r2, [r7, #48]	; 0x30
 800892c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008932:	e841 2300 	strex	r3, r2, [r1]
 8008936:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1e3      	bne.n	8008906 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2220      	movs	r2, #32
 8008942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	330c      	adds	r3, #12
 8008952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	e853 3f00 	ldrex	r3, [r3]
 800895a:	60fb      	str	r3, [r7, #12]
   return(result);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f023 0310 	bic.w	r3, r3, #16
 8008962:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	330c      	adds	r3, #12
 800896c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008970:	61fa      	str	r2, [r7, #28]
 8008972:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008974:	69b9      	ldr	r1, [r7, #24]
 8008976:	69fa      	ldr	r2, [r7, #28]
 8008978:	e841 2300 	strex	r3, r2, [r1]
 800897c:	617b      	str	r3, [r7, #20]
   return(result);
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1e3      	bne.n	800894c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008984:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7f9 ff70 	bl	8002870 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008990:	e023      	b.n	80089da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800899a:	2b00      	cmp	r3, #0
 800899c:	d009      	beq.n	80089b2 <HAL_UART_IRQHandler+0x4ea>
 800899e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d003      	beq.n	80089b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fae1 	bl	8008f72 <UART_Transmit_IT>
    return;
 80089b0:	e014      	b.n	80089dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80089b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00e      	beq.n	80089dc <HAL_UART_IRQHandler+0x514>
 80089be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d008      	beq.n	80089dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fb21 	bl	8009012 <UART_EndTransmit_IT>
    return;
 80089d0:	e004      	b.n	80089dc <HAL_UART_IRQHandler+0x514>
    return;
 80089d2:	bf00      	nop
 80089d4:	e002      	b.n	80089dc <HAL_UART_IRQHandler+0x514>
      return;
 80089d6:	bf00      	nop
 80089d8:	e000      	b.n	80089dc <HAL_UART_IRQHandler+0x514>
      return;
 80089da:	bf00      	nop
  }
}
 80089dc:	37e8      	adds	r7, #232	; 0xe8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop

080089e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80089ec:	bf00      	nop
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008a00:	bf00      	nop
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008a14:	bf00      	nop
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008a28:	bf00      	nop
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b09c      	sub	sp, #112	; 0x70
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a40:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d172      	bne.n	8008b36 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a52:	2200      	movs	r2, #0
 8008a54:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	330c      	adds	r3, #12
 8008a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a60:	e853 3f00 	ldrex	r3, [r3]
 8008a64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	330c      	adds	r3, #12
 8008a74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a76:	65ba      	str	r2, [r7, #88]	; 0x58
 8008a78:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a7e:	e841 2300 	strex	r3, r2, [r1]
 8008a82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1e5      	bne.n	8008a56 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	3314      	adds	r3, #20
 8008a90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a94:	e853 3f00 	ldrex	r3, [r3]
 8008a98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9c:	f023 0301 	bic.w	r3, r3, #1
 8008aa0:	667b      	str	r3, [r7, #100]	; 0x64
 8008aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	3314      	adds	r3, #20
 8008aa8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008aaa:	647a      	str	r2, [r7, #68]	; 0x44
 8008aac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ab0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ab2:	e841 2300 	strex	r3, r2, [r1]
 8008ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1e5      	bne.n	8008a8a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	3314      	adds	r3, #20
 8008ac4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac8:	e853 3f00 	ldrex	r3, [r3]
 8008acc:	623b      	str	r3, [r7, #32]
   return(result);
 8008ace:	6a3b      	ldr	r3, [r7, #32]
 8008ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ad4:	663b      	str	r3, [r7, #96]	; 0x60
 8008ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	3314      	adds	r3, #20
 8008adc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ade:	633a      	str	r2, [r7, #48]	; 0x30
 8008ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ae6:	e841 2300 	strex	r3, r2, [r1]
 8008aea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1e5      	bne.n	8008abe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008af4:	2220      	movs	r2, #32
 8008af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d119      	bne.n	8008b36 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	330c      	adds	r3, #12
 8008b08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	e853 3f00 	ldrex	r3, [r3]
 8008b10:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f023 0310 	bic.w	r3, r3, #16
 8008b18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	330c      	adds	r3, #12
 8008b20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b22:	61fa      	str	r2, [r7, #28]
 8008b24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b26:	69b9      	ldr	r1, [r7, #24]
 8008b28:	69fa      	ldr	r2, [r7, #28]
 8008b2a:	e841 2300 	strex	r3, r2, [r1]
 8008b2e:	617b      	str	r3, [r7, #20]
   return(result);
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1e5      	bne.n	8008b02 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d106      	bne.n	8008b4c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b42:	4619      	mov	r1, r3
 8008b44:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008b46:	f7f9 fe93 	bl	8002870 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008b4a:	e002      	b.n	8008b52 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008b4c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008b4e:	f7ff ff53 	bl	80089f8 <HAL_UART_RxCpltCallback>
}
 8008b52:	bf00      	nop
 8008b54:	3770      	adds	r7, #112	; 0x70
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b084      	sub	sp, #16
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b66:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d108      	bne.n	8008b82 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b74:	085b      	lsrs	r3, r3, #1
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	4619      	mov	r1, r3
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f7f9 fe78 	bl	8002870 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008b80:	e002      	b.n	8008b88 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f7ff ff42 	bl	8008a0c <HAL_UART_RxHalfCpltCallback>
}
 8008b88:	bf00      	nop
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	695b      	ldr	r3, [r3, #20]
 8008ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bac:	2b80      	cmp	r3, #128	; 0x80
 8008bae:	bf0c      	ite	eq
 8008bb0:	2301      	moveq	r3, #1
 8008bb2:	2300      	movne	r3, #0
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	2b21      	cmp	r3, #33	; 0x21
 8008bc2:	d108      	bne.n	8008bd6 <UART_DMAError+0x46>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d005      	beq.n	8008bd6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008bd0:	68b8      	ldr	r0, [r7, #8]
 8008bd2:	f000 f92f 	bl	8008e34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	695b      	ldr	r3, [r3, #20]
 8008bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be0:	2b40      	cmp	r3, #64	; 0x40
 8008be2:	bf0c      	ite	eq
 8008be4:	2301      	moveq	r3, #1
 8008be6:	2300      	movne	r3, #0
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b22      	cmp	r3, #34	; 0x22
 8008bf6:	d108      	bne.n	8008c0a <UART_DMAError+0x7a>
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d005      	beq.n	8008c0a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	2200      	movs	r2, #0
 8008c02:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008c04:	68b8      	ldr	r0, [r7, #8]
 8008c06:	f000 f93d 	bl	8008e84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0e:	f043 0210 	orr.w	r2, r3, #16
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c16:	68b8      	ldr	r0, [r7, #8]
 8008c18:	f7ff ff02 	bl	8008a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c1c:	bf00      	nop
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b090      	sub	sp, #64	; 0x40
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	603b      	str	r3, [r7, #0]
 8008c30:	4613      	mov	r3, r2
 8008c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c34:	e050      	b.n	8008cd8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c3c:	d04c      	beq.n	8008cd8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d007      	beq.n	8008c54 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c44:	f7fa fc4a 	bl	80034dc <HAL_GetTick>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d241      	bcs.n	8008cd8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	330c      	adds	r3, #12
 8008c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5e:	e853 3f00 	ldrex	r3, [r3]
 8008c62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	330c      	adds	r3, #12
 8008c72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c74:	637a      	str	r2, [r7, #52]	; 0x34
 8008c76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c7c:	e841 2300 	strex	r3, r2, [r1]
 8008c80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1e5      	bne.n	8008c54 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	3314      	adds	r3, #20
 8008c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	e853 3f00 	ldrex	r3, [r3]
 8008c96:	613b      	str	r3, [r7, #16]
   return(result);
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	f023 0301 	bic.w	r3, r3, #1
 8008c9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	3314      	adds	r3, #20
 8008ca6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ca8:	623a      	str	r2, [r7, #32]
 8008caa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cac:	69f9      	ldr	r1, [r7, #28]
 8008cae:	6a3a      	ldr	r2, [r7, #32]
 8008cb0:	e841 2300 	strex	r3, r2, [r1]
 8008cb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1e5      	bne.n	8008c88 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2220      	movs	r2, #32
 8008cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	e00f      	b.n	8008cf8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	bf0c      	ite	eq
 8008ce8:	2301      	moveq	r3, #1
 8008cea:	2300      	movne	r3, #0
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	461a      	mov	r2, r3
 8008cf0:	79fb      	ldrb	r3, [r7, #7]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d09f      	beq.n	8008c36 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3740      	adds	r7, #64	; 0x40
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b098      	sub	sp, #96	; 0x60
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	88fa      	ldrh	r2, [r7, #6]
 8008d18:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2222      	movs	r2, #34	; 0x22
 8008d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2c:	4a3e      	ldr	r2, [pc, #248]	; (8008e28 <UART_Start_Receive_DMA+0x128>)
 8008d2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d34:	4a3d      	ldr	r2, [pc, #244]	; (8008e2c <UART_Start_Receive_DMA+0x12c>)
 8008d36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3c:	4a3c      	ldr	r2, [pc, #240]	; (8008e30 <UART_Start_Receive_DMA+0x130>)
 8008d3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d44:	2200      	movs	r2, #0
 8008d46:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008d48:	f107 0308 	add.w	r3, r7, #8
 8008d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3304      	adds	r3, #4
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	88fb      	ldrh	r3, [r7, #6]
 8008d60:	f7fa fdac 	bl	80038bc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008d64:	2300      	movs	r3, #0
 8008d66:	613b      	str	r3, [r7, #16]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	613b      	str	r3, [r7, #16]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	613b      	str	r3, [r7, #16]
 8008d78:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	330c      	adds	r3, #12
 8008d88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d8c:	e853 3f00 	ldrex	r3, [r3]
 8008d90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d98:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	330c      	adds	r3, #12
 8008da0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008da2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008da4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008da8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008daa:	e841 2300 	strex	r3, r2, [r1]
 8008dae:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1e5      	bne.n	8008d82 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	3314      	adds	r3, #20
 8008dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc0:	e853 3f00 	ldrex	r3, [r3]
 8008dc4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc8:	f043 0301 	orr.w	r3, r3, #1
 8008dcc:	657b      	str	r3, [r7, #84]	; 0x54
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	3314      	adds	r3, #20
 8008dd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008dd6:	63ba      	str	r2, [r7, #56]	; 0x38
 8008dd8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008ddc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dde:	e841 2300 	strex	r3, r2, [r1]
 8008de2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1e5      	bne.n	8008db6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	3314      	adds	r3, #20
 8008df0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	e853 3f00 	ldrex	r3, [r3]
 8008df8:	617b      	str	r3, [r7, #20]
   return(result);
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e00:	653b      	str	r3, [r7, #80]	; 0x50
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3314      	adds	r3, #20
 8008e08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e0a:	627a      	str	r2, [r7, #36]	; 0x24
 8008e0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0e:	6a39      	ldr	r1, [r7, #32]
 8008e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e12:	e841 2300 	strex	r3, r2, [r1]
 8008e16:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1e5      	bne.n	8008dea <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3760      	adds	r7, #96	; 0x60
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	08008a35 	.word	0x08008a35
 8008e2c:	08008b5b 	.word	0x08008b5b
 8008e30:	08008b91 	.word	0x08008b91

08008e34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b089      	sub	sp, #36	; 0x24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	330c      	adds	r3, #12
 8008e42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	e853 3f00 	ldrex	r3, [r3]
 8008e4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008e52:	61fb      	str	r3, [r7, #28]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	330c      	adds	r3, #12
 8008e5a:	69fa      	ldr	r2, [r7, #28]
 8008e5c:	61ba      	str	r2, [r7, #24]
 8008e5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e60:	6979      	ldr	r1, [r7, #20]
 8008e62:	69ba      	ldr	r2, [r7, #24]
 8008e64:	e841 2300 	strex	r3, r2, [r1]
 8008e68:	613b      	str	r3, [r7, #16]
   return(result);
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1e5      	bne.n	8008e3c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2220      	movs	r2, #32
 8008e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008e78:	bf00      	nop
 8008e7a:	3724      	adds	r7, #36	; 0x24
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b095      	sub	sp, #84	; 0x54
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	330c      	adds	r3, #12
 8008e92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e96:	e853 3f00 	ldrex	r3, [r3]
 8008e9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	330c      	adds	r3, #12
 8008eaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008eac:	643a      	str	r2, [r7, #64]	; 0x40
 8008eae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008eb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008eb4:	e841 2300 	strex	r3, r2, [r1]
 8008eb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1e5      	bne.n	8008e8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	3314      	adds	r3, #20
 8008ec6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec8:	6a3b      	ldr	r3, [r7, #32]
 8008eca:	e853 3f00 	ldrex	r3, [r3]
 8008ece:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	f023 0301 	bic.w	r3, r3, #1
 8008ed6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3314      	adds	r3, #20
 8008ede:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ee0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ee8:	e841 2300 	strex	r3, r2, [r1]
 8008eec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1e5      	bne.n	8008ec0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d119      	bne.n	8008f30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	330c      	adds	r3, #12
 8008f02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	e853 3f00 	ldrex	r3, [r3]
 8008f0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	f023 0310 	bic.w	r3, r3, #16
 8008f12:	647b      	str	r3, [r7, #68]	; 0x44
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	330c      	adds	r3, #12
 8008f1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f1c:	61ba      	str	r2, [r7, #24]
 8008f1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f20:	6979      	ldr	r1, [r7, #20]
 8008f22:	69ba      	ldr	r2, [r7, #24]
 8008f24:	e841 2300 	strex	r3, r2, [r1]
 8008f28:	613b      	str	r3, [r7, #16]
   return(result);
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d1e5      	bne.n	8008efc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2220      	movs	r2, #32
 8008f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008f3e:	bf00      	nop
 8008f40:	3754      	adds	r7, #84	; 0x54
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr

08008f4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b084      	sub	sp, #16
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2200      	movs	r2, #0
 8008f62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f7ff fd5b 	bl	8008a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f6a:	bf00      	nop
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008f72:	b480      	push	{r7}
 8008f74:	b085      	sub	sp, #20
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b21      	cmp	r3, #33	; 0x21
 8008f84:	d13e      	bne.n	8009004 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f8e:	d114      	bne.n	8008fba <UART_Transmit_IT+0x48>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d110      	bne.n	8008fba <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a1b      	ldr	r3, [r3, #32]
 8008f9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	881b      	ldrh	r3, [r3, #0]
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a1b      	ldr	r3, [r3, #32]
 8008fb2:	1c9a      	adds	r2, r3, #2
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	621a      	str	r2, [r3, #32]
 8008fb8:	e008      	b.n	8008fcc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a1b      	ldr	r3, [r3, #32]
 8008fbe:	1c59      	adds	r1, r3, #1
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	6211      	str	r1, [r2, #32]
 8008fc4:	781a      	ldrb	r2, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	4619      	mov	r1, r3
 8008fda:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d10f      	bne.n	8009000 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68da      	ldr	r2, [r3, #12]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68da      	ldr	r2, [r3, #12]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ffe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	e000      	b.n	8009006 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009004:	2302      	movs	r3, #2
  }
}
 8009006:	4618      	mov	r0, r3
 8009008:	3714      	adds	r7, #20
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b082      	sub	sp, #8
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	68da      	ldr	r2, [r3, #12]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009028:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2220      	movs	r2, #32
 800902e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7ff fcd6 	bl	80089e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b08c      	sub	sp, #48	; 0x30
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009050:	b2db      	uxtb	r3, r3
 8009052:	2b22      	cmp	r3, #34	; 0x22
 8009054:	f040 80ab 	bne.w	80091ae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009060:	d117      	bne.n	8009092 <UART_Receive_IT+0x50>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d113      	bne.n	8009092 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800906a:	2300      	movs	r3, #0
 800906c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009072:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	b29b      	uxth	r3, r3
 800907c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009080:	b29a      	uxth	r2, r3
 8009082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009084:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800908a:	1c9a      	adds	r2, r3, #2
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	629a      	str	r2, [r3, #40]	; 0x28
 8009090:	e026      	b.n	80090e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009096:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009098:	2300      	movs	r3, #0
 800909a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090a4:	d007      	beq.n	80090b6 <UART_Receive_IT+0x74>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d10a      	bne.n	80090c4 <UART_Receive_IT+0x82>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d106      	bne.n	80090c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	b2da      	uxtb	r2, r3
 80090be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c0:	701a      	strb	r2, [r3, #0]
 80090c2:	e008      	b.n	80090d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090da:	1c5a      	adds	r2, r3, #1
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	3b01      	subs	r3, #1
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	4619      	mov	r1, r3
 80090ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d15a      	bne.n	80091aa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68da      	ldr	r2, [r3, #12]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f022 0220 	bic.w	r2, r2, #32
 8009102:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	68da      	ldr	r2, [r3, #12]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009112:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	695a      	ldr	r2, [r3, #20]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f022 0201 	bic.w	r2, r2, #1
 8009122:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2220      	movs	r2, #32
 8009128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009130:	2b01      	cmp	r3, #1
 8009132:	d135      	bne.n	80091a0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	330c      	adds	r3, #12
 8009140:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	e853 3f00 	ldrex	r3, [r3]
 8009148:	613b      	str	r3, [r7, #16]
   return(result);
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	f023 0310 	bic.w	r3, r3, #16
 8009150:	627b      	str	r3, [r7, #36]	; 0x24
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	330c      	adds	r3, #12
 8009158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800915a:	623a      	str	r2, [r7, #32]
 800915c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915e:	69f9      	ldr	r1, [r7, #28]
 8009160:	6a3a      	ldr	r2, [r7, #32]
 8009162:	e841 2300 	strex	r3, r2, [r1]
 8009166:	61bb      	str	r3, [r7, #24]
   return(result);
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1e5      	bne.n	800913a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f003 0310 	and.w	r3, r3, #16
 8009178:	2b10      	cmp	r3, #16
 800917a:	d10a      	bne.n	8009192 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800917c:	2300      	movs	r3, #0
 800917e:	60fb      	str	r3, [r7, #12]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	60fb      	str	r3, [r7, #12]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	60fb      	str	r3, [r7, #12]
 8009190:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009196:	4619      	mov	r1, r3
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f7f9 fb69 	bl	8002870 <HAL_UARTEx_RxEventCallback>
 800919e:	e002      	b.n	80091a6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f7ff fc29 	bl	80089f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80091a6:	2300      	movs	r3, #0
 80091a8:	e002      	b.n	80091b0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80091aa:	2300      	movs	r3, #0
 80091ac:	e000      	b.n	80091b0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80091ae:	2302      	movs	r3, #2
  }
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3730      	adds	r7, #48	; 0x30
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091bc:	b09f      	sub	sp, #124	; 0x7c
 80091be:	af00      	add	r7, sp, #0
 80091c0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80091cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091ce:	68d9      	ldr	r1, [r3, #12]
 80091d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	ea40 0301 	orr.w	r3, r0, r1
 80091d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80091da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091dc:	689a      	ldr	r2, [r3, #8]
 80091de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	431a      	orrs	r2, r3
 80091e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091e6:	695b      	ldr	r3, [r3, #20]
 80091e8:	431a      	orrs	r2, r3
 80091ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091ec:	69db      	ldr	r3, [r3, #28]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80091f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80091fc:	f021 010c 	bic.w	r1, r1, #12
 8009200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009206:	430b      	orrs	r3, r1
 8009208:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800920a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	695b      	ldr	r3, [r3, #20]
 8009210:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009216:	6999      	ldr	r1, [r3, #24]
 8009218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	ea40 0301 	orr.w	r3, r0, r1
 8009220:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	4bc5      	ldr	r3, [pc, #788]	; (800953c <UART_SetConfig+0x384>)
 8009228:	429a      	cmp	r2, r3
 800922a:	d004      	beq.n	8009236 <UART_SetConfig+0x7e>
 800922c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	4bc3      	ldr	r3, [pc, #780]	; (8009540 <UART_SetConfig+0x388>)
 8009232:	429a      	cmp	r2, r3
 8009234:	d103      	bne.n	800923e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009236:	f7fd ff51 	bl	80070dc <HAL_RCC_GetPCLK2Freq>
 800923a:	6778      	str	r0, [r7, #116]	; 0x74
 800923c:	e002      	b.n	8009244 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800923e:	f7fd ff39 	bl	80070b4 <HAL_RCC_GetPCLK1Freq>
 8009242:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009246:	69db      	ldr	r3, [r3, #28]
 8009248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800924c:	f040 80b6 	bne.w	80093bc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009250:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009252:	461c      	mov	r4, r3
 8009254:	f04f 0500 	mov.w	r5, #0
 8009258:	4622      	mov	r2, r4
 800925a:	462b      	mov	r3, r5
 800925c:	1891      	adds	r1, r2, r2
 800925e:	6439      	str	r1, [r7, #64]	; 0x40
 8009260:	415b      	adcs	r3, r3
 8009262:	647b      	str	r3, [r7, #68]	; 0x44
 8009264:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009268:	1912      	adds	r2, r2, r4
 800926a:	eb45 0303 	adc.w	r3, r5, r3
 800926e:	f04f 0000 	mov.w	r0, #0
 8009272:	f04f 0100 	mov.w	r1, #0
 8009276:	00d9      	lsls	r1, r3, #3
 8009278:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800927c:	00d0      	lsls	r0, r2, #3
 800927e:	4602      	mov	r2, r0
 8009280:	460b      	mov	r3, r1
 8009282:	1911      	adds	r1, r2, r4
 8009284:	6639      	str	r1, [r7, #96]	; 0x60
 8009286:	416b      	adcs	r3, r5
 8009288:	667b      	str	r3, [r7, #100]	; 0x64
 800928a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	461a      	mov	r2, r3
 8009290:	f04f 0300 	mov.w	r3, #0
 8009294:	1891      	adds	r1, r2, r2
 8009296:	63b9      	str	r1, [r7, #56]	; 0x38
 8009298:	415b      	adcs	r3, r3
 800929a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800929c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80092a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80092a4:	f7f7 fc6a 	bl	8000b7c <__aeabi_uldivmod>
 80092a8:	4602      	mov	r2, r0
 80092aa:	460b      	mov	r3, r1
 80092ac:	4ba5      	ldr	r3, [pc, #660]	; (8009544 <UART_SetConfig+0x38c>)
 80092ae:	fba3 2302 	umull	r2, r3, r3, r2
 80092b2:	095b      	lsrs	r3, r3, #5
 80092b4:	011e      	lsls	r6, r3, #4
 80092b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092b8:	461c      	mov	r4, r3
 80092ba:	f04f 0500 	mov.w	r5, #0
 80092be:	4622      	mov	r2, r4
 80092c0:	462b      	mov	r3, r5
 80092c2:	1891      	adds	r1, r2, r2
 80092c4:	6339      	str	r1, [r7, #48]	; 0x30
 80092c6:	415b      	adcs	r3, r3
 80092c8:	637b      	str	r3, [r7, #52]	; 0x34
 80092ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80092ce:	1912      	adds	r2, r2, r4
 80092d0:	eb45 0303 	adc.w	r3, r5, r3
 80092d4:	f04f 0000 	mov.w	r0, #0
 80092d8:	f04f 0100 	mov.w	r1, #0
 80092dc:	00d9      	lsls	r1, r3, #3
 80092de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80092e2:	00d0      	lsls	r0, r2, #3
 80092e4:	4602      	mov	r2, r0
 80092e6:	460b      	mov	r3, r1
 80092e8:	1911      	adds	r1, r2, r4
 80092ea:	65b9      	str	r1, [r7, #88]	; 0x58
 80092ec:	416b      	adcs	r3, r5
 80092ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	461a      	mov	r2, r3
 80092f6:	f04f 0300 	mov.w	r3, #0
 80092fa:	1891      	adds	r1, r2, r2
 80092fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80092fe:	415b      	adcs	r3, r3
 8009300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009302:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009306:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800930a:	f7f7 fc37 	bl	8000b7c <__aeabi_uldivmod>
 800930e:	4602      	mov	r2, r0
 8009310:	460b      	mov	r3, r1
 8009312:	4b8c      	ldr	r3, [pc, #560]	; (8009544 <UART_SetConfig+0x38c>)
 8009314:	fba3 1302 	umull	r1, r3, r3, r2
 8009318:	095b      	lsrs	r3, r3, #5
 800931a:	2164      	movs	r1, #100	; 0x64
 800931c:	fb01 f303 	mul.w	r3, r1, r3
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	00db      	lsls	r3, r3, #3
 8009324:	3332      	adds	r3, #50	; 0x32
 8009326:	4a87      	ldr	r2, [pc, #540]	; (8009544 <UART_SetConfig+0x38c>)
 8009328:	fba2 2303 	umull	r2, r3, r2, r3
 800932c:	095b      	lsrs	r3, r3, #5
 800932e:	005b      	lsls	r3, r3, #1
 8009330:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009334:	441e      	add	r6, r3
 8009336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009338:	4618      	mov	r0, r3
 800933a:	f04f 0100 	mov.w	r1, #0
 800933e:	4602      	mov	r2, r0
 8009340:	460b      	mov	r3, r1
 8009342:	1894      	adds	r4, r2, r2
 8009344:	623c      	str	r4, [r7, #32]
 8009346:	415b      	adcs	r3, r3
 8009348:	627b      	str	r3, [r7, #36]	; 0x24
 800934a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800934e:	1812      	adds	r2, r2, r0
 8009350:	eb41 0303 	adc.w	r3, r1, r3
 8009354:	f04f 0400 	mov.w	r4, #0
 8009358:	f04f 0500 	mov.w	r5, #0
 800935c:	00dd      	lsls	r5, r3, #3
 800935e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009362:	00d4      	lsls	r4, r2, #3
 8009364:	4622      	mov	r2, r4
 8009366:	462b      	mov	r3, r5
 8009368:	1814      	adds	r4, r2, r0
 800936a:	653c      	str	r4, [r7, #80]	; 0x50
 800936c:	414b      	adcs	r3, r1
 800936e:	657b      	str	r3, [r7, #84]	; 0x54
 8009370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	461a      	mov	r2, r3
 8009376:	f04f 0300 	mov.w	r3, #0
 800937a:	1891      	adds	r1, r2, r2
 800937c:	61b9      	str	r1, [r7, #24]
 800937e:	415b      	adcs	r3, r3
 8009380:	61fb      	str	r3, [r7, #28]
 8009382:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009386:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800938a:	f7f7 fbf7 	bl	8000b7c <__aeabi_uldivmod>
 800938e:	4602      	mov	r2, r0
 8009390:	460b      	mov	r3, r1
 8009392:	4b6c      	ldr	r3, [pc, #432]	; (8009544 <UART_SetConfig+0x38c>)
 8009394:	fba3 1302 	umull	r1, r3, r3, r2
 8009398:	095b      	lsrs	r3, r3, #5
 800939a:	2164      	movs	r1, #100	; 0x64
 800939c:	fb01 f303 	mul.w	r3, r1, r3
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	00db      	lsls	r3, r3, #3
 80093a4:	3332      	adds	r3, #50	; 0x32
 80093a6:	4a67      	ldr	r2, [pc, #412]	; (8009544 <UART_SetConfig+0x38c>)
 80093a8:	fba2 2303 	umull	r2, r3, r2, r3
 80093ac:	095b      	lsrs	r3, r3, #5
 80093ae:	f003 0207 	and.w	r2, r3, #7
 80093b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4432      	add	r2, r6
 80093b8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80093ba:	e0b9      	b.n	8009530 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093be:	461c      	mov	r4, r3
 80093c0:	f04f 0500 	mov.w	r5, #0
 80093c4:	4622      	mov	r2, r4
 80093c6:	462b      	mov	r3, r5
 80093c8:	1891      	adds	r1, r2, r2
 80093ca:	6139      	str	r1, [r7, #16]
 80093cc:	415b      	adcs	r3, r3
 80093ce:	617b      	str	r3, [r7, #20]
 80093d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80093d4:	1912      	adds	r2, r2, r4
 80093d6:	eb45 0303 	adc.w	r3, r5, r3
 80093da:	f04f 0000 	mov.w	r0, #0
 80093de:	f04f 0100 	mov.w	r1, #0
 80093e2:	00d9      	lsls	r1, r3, #3
 80093e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80093e8:	00d0      	lsls	r0, r2, #3
 80093ea:	4602      	mov	r2, r0
 80093ec:	460b      	mov	r3, r1
 80093ee:	eb12 0804 	adds.w	r8, r2, r4
 80093f2:	eb43 0905 	adc.w	r9, r3, r5
 80093f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	4618      	mov	r0, r3
 80093fc:	f04f 0100 	mov.w	r1, #0
 8009400:	f04f 0200 	mov.w	r2, #0
 8009404:	f04f 0300 	mov.w	r3, #0
 8009408:	008b      	lsls	r3, r1, #2
 800940a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800940e:	0082      	lsls	r2, r0, #2
 8009410:	4640      	mov	r0, r8
 8009412:	4649      	mov	r1, r9
 8009414:	f7f7 fbb2 	bl	8000b7c <__aeabi_uldivmod>
 8009418:	4602      	mov	r2, r0
 800941a:	460b      	mov	r3, r1
 800941c:	4b49      	ldr	r3, [pc, #292]	; (8009544 <UART_SetConfig+0x38c>)
 800941e:	fba3 2302 	umull	r2, r3, r3, r2
 8009422:	095b      	lsrs	r3, r3, #5
 8009424:	011e      	lsls	r6, r3, #4
 8009426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009428:	4618      	mov	r0, r3
 800942a:	f04f 0100 	mov.w	r1, #0
 800942e:	4602      	mov	r2, r0
 8009430:	460b      	mov	r3, r1
 8009432:	1894      	adds	r4, r2, r2
 8009434:	60bc      	str	r4, [r7, #8]
 8009436:	415b      	adcs	r3, r3
 8009438:	60fb      	str	r3, [r7, #12]
 800943a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800943e:	1812      	adds	r2, r2, r0
 8009440:	eb41 0303 	adc.w	r3, r1, r3
 8009444:	f04f 0400 	mov.w	r4, #0
 8009448:	f04f 0500 	mov.w	r5, #0
 800944c:	00dd      	lsls	r5, r3, #3
 800944e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009452:	00d4      	lsls	r4, r2, #3
 8009454:	4622      	mov	r2, r4
 8009456:	462b      	mov	r3, r5
 8009458:	1814      	adds	r4, r2, r0
 800945a:	64bc      	str	r4, [r7, #72]	; 0x48
 800945c:	414b      	adcs	r3, r1
 800945e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	4618      	mov	r0, r3
 8009466:	f04f 0100 	mov.w	r1, #0
 800946a:	f04f 0200 	mov.w	r2, #0
 800946e:	f04f 0300 	mov.w	r3, #0
 8009472:	008b      	lsls	r3, r1, #2
 8009474:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009478:	0082      	lsls	r2, r0, #2
 800947a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800947e:	f7f7 fb7d 	bl	8000b7c <__aeabi_uldivmod>
 8009482:	4602      	mov	r2, r0
 8009484:	460b      	mov	r3, r1
 8009486:	4b2f      	ldr	r3, [pc, #188]	; (8009544 <UART_SetConfig+0x38c>)
 8009488:	fba3 1302 	umull	r1, r3, r3, r2
 800948c:	095b      	lsrs	r3, r3, #5
 800948e:	2164      	movs	r1, #100	; 0x64
 8009490:	fb01 f303 	mul.w	r3, r1, r3
 8009494:	1ad3      	subs	r3, r2, r3
 8009496:	011b      	lsls	r3, r3, #4
 8009498:	3332      	adds	r3, #50	; 0x32
 800949a:	4a2a      	ldr	r2, [pc, #168]	; (8009544 <UART_SetConfig+0x38c>)
 800949c:	fba2 2303 	umull	r2, r3, r2, r3
 80094a0:	095b      	lsrs	r3, r3, #5
 80094a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094a6:	441e      	add	r6, r3
 80094a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094aa:	4618      	mov	r0, r3
 80094ac:	f04f 0100 	mov.w	r1, #0
 80094b0:	4602      	mov	r2, r0
 80094b2:	460b      	mov	r3, r1
 80094b4:	1894      	adds	r4, r2, r2
 80094b6:	603c      	str	r4, [r7, #0]
 80094b8:	415b      	adcs	r3, r3
 80094ba:	607b      	str	r3, [r7, #4]
 80094bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094c0:	1812      	adds	r2, r2, r0
 80094c2:	eb41 0303 	adc.w	r3, r1, r3
 80094c6:	f04f 0400 	mov.w	r4, #0
 80094ca:	f04f 0500 	mov.w	r5, #0
 80094ce:	00dd      	lsls	r5, r3, #3
 80094d0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80094d4:	00d4      	lsls	r4, r2, #3
 80094d6:	4622      	mov	r2, r4
 80094d8:	462b      	mov	r3, r5
 80094da:	eb12 0a00 	adds.w	sl, r2, r0
 80094de:	eb43 0b01 	adc.w	fp, r3, r1
 80094e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	4618      	mov	r0, r3
 80094e8:	f04f 0100 	mov.w	r1, #0
 80094ec:	f04f 0200 	mov.w	r2, #0
 80094f0:	f04f 0300 	mov.w	r3, #0
 80094f4:	008b      	lsls	r3, r1, #2
 80094f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80094fa:	0082      	lsls	r2, r0, #2
 80094fc:	4650      	mov	r0, sl
 80094fe:	4659      	mov	r1, fp
 8009500:	f7f7 fb3c 	bl	8000b7c <__aeabi_uldivmod>
 8009504:	4602      	mov	r2, r0
 8009506:	460b      	mov	r3, r1
 8009508:	4b0e      	ldr	r3, [pc, #56]	; (8009544 <UART_SetConfig+0x38c>)
 800950a:	fba3 1302 	umull	r1, r3, r3, r2
 800950e:	095b      	lsrs	r3, r3, #5
 8009510:	2164      	movs	r1, #100	; 0x64
 8009512:	fb01 f303 	mul.w	r3, r1, r3
 8009516:	1ad3      	subs	r3, r2, r3
 8009518:	011b      	lsls	r3, r3, #4
 800951a:	3332      	adds	r3, #50	; 0x32
 800951c:	4a09      	ldr	r2, [pc, #36]	; (8009544 <UART_SetConfig+0x38c>)
 800951e:	fba2 2303 	umull	r2, r3, r2, r3
 8009522:	095b      	lsrs	r3, r3, #5
 8009524:	f003 020f 	and.w	r2, r3, #15
 8009528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4432      	add	r2, r6
 800952e:	609a      	str	r2, [r3, #8]
}
 8009530:	bf00      	nop
 8009532:	377c      	adds	r7, #124	; 0x7c
 8009534:	46bd      	mov	sp, r7
 8009536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800953a:	bf00      	nop
 800953c:	40011000 	.word	0x40011000
 8009540:	40011400 	.word	0x40011400
 8009544:	51eb851f 	.word	0x51eb851f

08009548 <__errno>:
 8009548:	4b01      	ldr	r3, [pc, #4]	; (8009550 <__errno+0x8>)
 800954a:	6818      	ldr	r0, [r3, #0]
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	20000018 	.word	0x20000018

08009554 <__libc_init_array>:
 8009554:	b570      	push	{r4, r5, r6, lr}
 8009556:	4d0d      	ldr	r5, [pc, #52]	; (800958c <__libc_init_array+0x38>)
 8009558:	4c0d      	ldr	r4, [pc, #52]	; (8009590 <__libc_init_array+0x3c>)
 800955a:	1b64      	subs	r4, r4, r5
 800955c:	10a4      	asrs	r4, r4, #2
 800955e:	2600      	movs	r6, #0
 8009560:	42a6      	cmp	r6, r4
 8009562:	d109      	bne.n	8009578 <__libc_init_array+0x24>
 8009564:	4d0b      	ldr	r5, [pc, #44]	; (8009594 <__libc_init_array+0x40>)
 8009566:	4c0c      	ldr	r4, [pc, #48]	; (8009598 <__libc_init_array+0x44>)
 8009568:	f002 ff1e 	bl	800c3a8 <_init>
 800956c:	1b64      	subs	r4, r4, r5
 800956e:	10a4      	asrs	r4, r4, #2
 8009570:	2600      	movs	r6, #0
 8009572:	42a6      	cmp	r6, r4
 8009574:	d105      	bne.n	8009582 <__libc_init_array+0x2e>
 8009576:	bd70      	pop	{r4, r5, r6, pc}
 8009578:	f855 3b04 	ldr.w	r3, [r5], #4
 800957c:	4798      	blx	r3
 800957e:	3601      	adds	r6, #1
 8009580:	e7ee      	b.n	8009560 <__libc_init_array+0xc>
 8009582:	f855 3b04 	ldr.w	r3, [r5], #4
 8009586:	4798      	blx	r3
 8009588:	3601      	adds	r6, #1
 800958a:	e7f2      	b.n	8009572 <__libc_init_array+0x1e>
 800958c:	0800cdec 	.word	0x0800cdec
 8009590:	0800cdec 	.word	0x0800cdec
 8009594:	0800cdec 	.word	0x0800cdec
 8009598:	0800cdf0 	.word	0x0800cdf0

0800959c <__itoa>:
 800959c:	1e93      	subs	r3, r2, #2
 800959e:	2b22      	cmp	r3, #34	; 0x22
 80095a0:	b510      	push	{r4, lr}
 80095a2:	460c      	mov	r4, r1
 80095a4:	d904      	bls.n	80095b0 <__itoa+0x14>
 80095a6:	2300      	movs	r3, #0
 80095a8:	700b      	strb	r3, [r1, #0]
 80095aa:	461c      	mov	r4, r3
 80095ac:	4620      	mov	r0, r4
 80095ae:	bd10      	pop	{r4, pc}
 80095b0:	2a0a      	cmp	r2, #10
 80095b2:	d109      	bne.n	80095c8 <__itoa+0x2c>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	da07      	bge.n	80095c8 <__itoa+0x2c>
 80095b8:	232d      	movs	r3, #45	; 0x2d
 80095ba:	700b      	strb	r3, [r1, #0]
 80095bc:	4240      	negs	r0, r0
 80095be:	2101      	movs	r1, #1
 80095c0:	4421      	add	r1, r4
 80095c2:	f000 ff3b 	bl	800a43c <__utoa>
 80095c6:	e7f1      	b.n	80095ac <__itoa+0x10>
 80095c8:	2100      	movs	r1, #0
 80095ca:	e7f9      	b.n	80095c0 <__itoa+0x24>

080095cc <itoa>:
 80095cc:	f7ff bfe6 	b.w	800959c <__itoa>

080095d0 <malloc>:
 80095d0:	4b02      	ldr	r3, [pc, #8]	; (80095dc <malloc+0xc>)
 80095d2:	4601      	mov	r1, r0
 80095d4:	6818      	ldr	r0, [r3, #0]
 80095d6:	f000 b869 	b.w	80096ac <_malloc_r>
 80095da:	bf00      	nop
 80095dc:	20000018 	.word	0x20000018

080095e0 <memcpy>:
 80095e0:	440a      	add	r2, r1
 80095e2:	4291      	cmp	r1, r2
 80095e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80095e8:	d100      	bne.n	80095ec <memcpy+0xc>
 80095ea:	4770      	bx	lr
 80095ec:	b510      	push	{r4, lr}
 80095ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095f6:	4291      	cmp	r1, r2
 80095f8:	d1f9      	bne.n	80095ee <memcpy+0xe>
 80095fa:	bd10      	pop	{r4, pc}

080095fc <memset>:
 80095fc:	4402      	add	r2, r0
 80095fe:	4603      	mov	r3, r0
 8009600:	4293      	cmp	r3, r2
 8009602:	d100      	bne.n	8009606 <memset+0xa>
 8009604:	4770      	bx	lr
 8009606:	f803 1b01 	strb.w	r1, [r3], #1
 800960a:	e7f9      	b.n	8009600 <memset+0x4>

0800960c <_free_r>:
 800960c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800960e:	2900      	cmp	r1, #0
 8009610:	d048      	beq.n	80096a4 <_free_r+0x98>
 8009612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009616:	9001      	str	r0, [sp, #4]
 8009618:	2b00      	cmp	r3, #0
 800961a:	f1a1 0404 	sub.w	r4, r1, #4
 800961e:	bfb8      	it	lt
 8009620:	18e4      	addlt	r4, r4, r3
 8009622:	f001 facf 	bl	800abc4 <__malloc_lock>
 8009626:	4a20      	ldr	r2, [pc, #128]	; (80096a8 <_free_r+0x9c>)
 8009628:	9801      	ldr	r0, [sp, #4]
 800962a:	6813      	ldr	r3, [r2, #0]
 800962c:	4615      	mov	r5, r2
 800962e:	b933      	cbnz	r3, 800963e <_free_r+0x32>
 8009630:	6063      	str	r3, [r4, #4]
 8009632:	6014      	str	r4, [r2, #0]
 8009634:	b003      	add	sp, #12
 8009636:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800963a:	f001 bac9 	b.w	800abd0 <__malloc_unlock>
 800963e:	42a3      	cmp	r3, r4
 8009640:	d90b      	bls.n	800965a <_free_r+0x4e>
 8009642:	6821      	ldr	r1, [r4, #0]
 8009644:	1862      	adds	r2, r4, r1
 8009646:	4293      	cmp	r3, r2
 8009648:	bf04      	itt	eq
 800964a:	681a      	ldreq	r2, [r3, #0]
 800964c:	685b      	ldreq	r3, [r3, #4]
 800964e:	6063      	str	r3, [r4, #4]
 8009650:	bf04      	itt	eq
 8009652:	1852      	addeq	r2, r2, r1
 8009654:	6022      	streq	r2, [r4, #0]
 8009656:	602c      	str	r4, [r5, #0]
 8009658:	e7ec      	b.n	8009634 <_free_r+0x28>
 800965a:	461a      	mov	r2, r3
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	b10b      	cbz	r3, 8009664 <_free_r+0x58>
 8009660:	42a3      	cmp	r3, r4
 8009662:	d9fa      	bls.n	800965a <_free_r+0x4e>
 8009664:	6811      	ldr	r1, [r2, #0]
 8009666:	1855      	adds	r5, r2, r1
 8009668:	42a5      	cmp	r5, r4
 800966a:	d10b      	bne.n	8009684 <_free_r+0x78>
 800966c:	6824      	ldr	r4, [r4, #0]
 800966e:	4421      	add	r1, r4
 8009670:	1854      	adds	r4, r2, r1
 8009672:	42a3      	cmp	r3, r4
 8009674:	6011      	str	r1, [r2, #0]
 8009676:	d1dd      	bne.n	8009634 <_free_r+0x28>
 8009678:	681c      	ldr	r4, [r3, #0]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	6053      	str	r3, [r2, #4]
 800967e:	4421      	add	r1, r4
 8009680:	6011      	str	r1, [r2, #0]
 8009682:	e7d7      	b.n	8009634 <_free_r+0x28>
 8009684:	d902      	bls.n	800968c <_free_r+0x80>
 8009686:	230c      	movs	r3, #12
 8009688:	6003      	str	r3, [r0, #0]
 800968a:	e7d3      	b.n	8009634 <_free_r+0x28>
 800968c:	6825      	ldr	r5, [r4, #0]
 800968e:	1961      	adds	r1, r4, r5
 8009690:	428b      	cmp	r3, r1
 8009692:	bf04      	itt	eq
 8009694:	6819      	ldreq	r1, [r3, #0]
 8009696:	685b      	ldreq	r3, [r3, #4]
 8009698:	6063      	str	r3, [r4, #4]
 800969a:	bf04      	itt	eq
 800969c:	1949      	addeq	r1, r1, r5
 800969e:	6021      	streq	r1, [r4, #0]
 80096a0:	6054      	str	r4, [r2, #4]
 80096a2:	e7c7      	b.n	8009634 <_free_r+0x28>
 80096a4:	b003      	add	sp, #12
 80096a6:	bd30      	pop	{r4, r5, pc}
 80096a8:	20000290 	.word	0x20000290

080096ac <_malloc_r>:
 80096ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ae:	1ccd      	adds	r5, r1, #3
 80096b0:	f025 0503 	bic.w	r5, r5, #3
 80096b4:	3508      	adds	r5, #8
 80096b6:	2d0c      	cmp	r5, #12
 80096b8:	bf38      	it	cc
 80096ba:	250c      	movcc	r5, #12
 80096bc:	2d00      	cmp	r5, #0
 80096be:	4606      	mov	r6, r0
 80096c0:	db01      	blt.n	80096c6 <_malloc_r+0x1a>
 80096c2:	42a9      	cmp	r1, r5
 80096c4:	d903      	bls.n	80096ce <_malloc_r+0x22>
 80096c6:	230c      	movs	r3, #12
 80096c8:	6033      	str	r3, [r6, #0]
 80096ca:	2000      	movs	r0, #0
 80096cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096ce:	f001 fa79 	bl	800abc4 <__malloc_lock>
 80096d2:	4921      	ldr	r1, [pc, #132]	; (8009758 <_malloc_r+0xac>)
 80096d4:	680a      	ldr	r2, [r1, #0]
 80096d6:	4614      	mov	r4, r2
 80096d8:	b99c      	cbnz	r4, 8009702 <_malloc_r+0x56>
 80096da:	4f20      	ldr	r7, [pc, #128]	; (800975c <_malloc_r+0xb0>)
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	b923      	cbnz	r3, 80096ea <_malloc_r+0x3e>
 80096e0:	4621      	mov	r1, r4
 80096e2:	4630      	mov	r0, r6
 80096e4:	f000 f83c 	bl	8009760 <_sbrk_r>
 80096e8:	6038      	str	r0, [r7, #0]
 80096ea:	4629      	mov	r1, r5
 80096ec:	4630      	mov	r0, r6
 80096ee:	f000 f837 	bl	8009760 <_sbrk_r>
 80096f2:	1c43      	adds	r3, r0, #1
 80096f4:	d123      	bne.n	800973e <_malloc_r+0x92>
 80096f6:	230c      	movs	r3, #12
 80096f8:	6033      	str	r3, [r6, #0]
 80096fa:	4630      	mov	r0, r6
 80096fc:	f001 fa68 	bl	800abd0 <__malloc_unlock>
 8009700:	e7e3      	b.n	80096ca <_malloc_r+0x1e>
 8009702:	6823      	ldr	r3, [r4, #0]
 8009704:	1b5b      	subs	r3, r3, r5
 8009706:	d417      	bmi.n	8009738 <_malloc_r+0x8c>
 8009708:	2b0b      	cmp	r3, #11
 800970a:	d903      	bls.n	8009714 <_malloc_r+0x68>
 800970c:	6023      	str	r3, [r4, #0]
 800970e:	441c      	add	r4, r3
 8009710:	6025      	str	r5, [r4, #0]
 8009712:	e004      	b.n	800971e <_malloc_r+0x72>
 8009714:	6863      	ldr	r3, [r4, #4]
 8009716:	42a2      	cmp	r2, r4
 8009718:	bf0c      	ite	eq
 800971a:	600b      	streq	r3, [r1, #0]
 800971c:	6053      	strne	r3, [r2, #4]
 800971e:	4630      	mov	r0, r6
 8009720:	f001 fa56 	bl	800abd0 <__malloc_unlock>
 8009724:	f104 000b 	add.w	r0, r4, #11
 8009728:	1d23      	adds	r3, r4, #4
 800972a:	f020 0007 	bic.w	r0, r0, #7
 800972e:	1ac2      	subs	r2, r0, r3
 8009730:	d0cc      	beq.n	80096cc <_malloc_r+0x20>
 8009732:	1a1b      	subs	r3, r3, r0
 8009734:	50a3      	str	r3, [r4, r2]
 8009736:	e7c9      	b.n	80096cc <_malloc_r+0x20>
 8009738:	4622      	mov	r2, r4
 800973a:	6864      	ldr	r4, [r4, #4]
 800973c:	e7cc      	b.n	80096d8 <_malloc_r+0x2c>
 800973e:	1cc4      	adds	r4, r0, #3
 8009740:	f024 0403 	bic.w	r4, r4, #3
 8009744:	42a0      	cmp	r0, r4
 8009746:	d0e3      	beq.n	8009710 <_malloc_r+0x64>
 8009748:	1a21      	subs	r1, r4, r0
 800974a:	4630      	mov	r0, r6
 800974c:	f000 f808 	bl	8009760 <_sbrk_r>
 8009750:	3001      	adds	r0, #1
 8009752:	d1dd      	bne.n	8009710 <_malloc_r+0x64>
 8009754:	e7cf      	b.n	80096f6 <_malloc_r+0x4a>
 8009756:	bf00      	nop
 8009758:	20000290 	.word	0x20000290
 800975c:	20000294 	.word	0x20000294

08009760 <_sbrk_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4d06      	ldr	r5, [pc, #24]	; (800977c <_sbrk_r+0x1c>)
 8009764:	2300      	movs	r3, #0
 8009766:	4604      	mov	r4, r0
 8009768:	4608      	mov	r0, r1
 800976a:	602b      	str	r3, [r5, #0]
 800976c:	f7f9 faf0 	bl	8002d50 <_sbrk>
 8009770:	1c43      	adds	r3, r0, #1
 8009772:	d102      	bne.n	800977a <_sbrk_r+0x1a>
 8009774:	682b      	ldr	r3, [r5, #0]
 8009776:	b103      	cbz	r3, 800977a <_sbrk_r+0x1a>
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	bd38      	pop	{r3, r4, r5, pc}
 800977c:	2000055c 	.word	0x2000055c

08009780 <sulp>:
 8009780:	b570      	push	{r4, r5, r6, lr}
 8009782:	4604      	mov	r4, r0
 8009784:	460d      	mov	r5, r1
 8009786:	ec45 4b10 	vmov	d0, r4, r5
 800978a:	4616      	mov	r6, r2
 800978c:	f001 fd92 	bl	800b2b4 <__ulp>
 8009790:	ec51 0b10 	vmov	r0, r1, d0
 8009794:	b17e      	cbz	r6, 80097b6 <sulp+0x36>
 8009796:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800979a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800979e:	2b00      	cmp	r3, #0
 80097a0:	dd09      	ble.n	80097b6 <sulp+0x36>
 80097a2:	051b      	lsls	r3, r3, #20
 80097a4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80097a8:	2400      	movs	r4, #0
 80097aa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80097ae:	4622      	mov	r2, r4
 80097b0:	462b      	mov	r3, r5
 80097b2:	f7f6 ff29 	bl	8000608 <__aeabi_dmul>
 80097b6:	bd70      	pop	{r4, r5, r6, pc}

080097b8 <_strtod_l>:
 80097b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097bc:	b0a3      	sub	sp, #140	; 0x8c
 80097be:	461f      	mov	r7, r3
 80097c0:	2300      	movs	r3, #0
 80097c2:	931e      	str	r3, [sp, #120]	; 0x78
 80097c4:	4ba4      	ldr	r3, [pc, #656]	; (8009a58 <_strtod_l+0x2a0>)
 80097c6:	9219      	str	r2, [sp, #100]	; 0x64
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	9307      	str	r3, [sp, #28]
 80097cc:	4604      	mov	r4, r0
 80097ce:	4618      	mov	r0, r3
 80097d0:	4688      	mov	r8, r1
 80097d2:	f7f6 fd05 	bl	80001e0 <strlen>
 80097d6:	f04f 0a00 	mov.w	sl, #0
 80097da:	4605      	mov	r5, r0
 80097dc:	f04f 0b00 	mov.w	fp, #0
 80097e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80097e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80097e6:	781a      	ldrb	r2, [r3, #0]
 80097e8:	2a2b      	cmp	r2, #43	; 0x2b
 80097ea:	d04c      	beq.n	8009886 <_strtod_l+0xce>
 80097ec:	d839      	bhi.n	8009862 <_strtod_l+0xaa>
 80097ee:	2a0d      	cmp	r2, #13
 80097f0:	d832      	bhi.n	8009858 <_strtod_l+0xa0>
 80097f2:	2a08      	cmp	r2, #8
 80097f4:	d832      	bhi.n	800985c <_strtod_l+0xa4>
 80097f6:	2a00      	cmp	r2, #0
 80097f8:	d03c      	beq.n	8009874 <_strtod_l+0xbc>
 80097fa:	2300      	movs	r3, #0
 80097fc:	930e      	str	r3, [sp, #56]	; 0x38
 80097fe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009800:	7833      	ldrb	r3, [r6, #0]
 8009802:	2b30      	cmp	r3, #48	; 0x30
 8009804:	f040 80b4 	bne.w	8009970 <_strtod_l+0x1b8>
 8009808:	7873      	ldrb	r3, [r6, #1]
 800980a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800980e:	2b58      	cmp	r3, #88	; 0x58
 8009810:	d16c      	bne.n	80098ec <_strtod_l+0x134>
 8009812:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009814:	9301      	str	r3, [sp, #4]
 8009816:	ab1e      	add	r3, sp, #120	; 0x78
 8009818:	9702      	str	r7, [sp, #8]
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	4a8f      	ldr	r2, [pc, #572]	; (8009a5c <_strtod_l+0x2a4>)
 800981e:	ab1f      	add	r3, sp, #124	; 0x7c
 8009820:	a91d      	add	r1, sp, #116	; 0x74
 8009822:	4620      	mov	r0, r4
 8009824:	f000 feb4 	bl	800a590 <__gethex>
 8009828:	f010 0707 	ands.w	r7, r0, #7
 800982c:	4605      	mov	r5, r0
 800982e:	d005      	beq.n	800983c <_strtod_l+0x84>
 8009830:	2f06      	cmp	r7, #6
 8009832:	d12a      	bne.n	800988a <_strtod_l+0xd2>
 8009834:	3601      	adds	r6, #1
 8009836:	2300      	movs	r3, #0
 8009838:	961d      	str	r6, [sp, #116]	; 0x74
 800983a:	930e      	str	r3, [sp, #56]	; 0x38
 800983c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800983e:	2b00      	cmp	r3, #0
 8009840:	f040 8596 	bne.w	800a370 <_strtod_l+0xbb8>
 8009844:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009846:	b1db      	cbz	r3, 8009880 <_strtod_l+0xc8>
 8009848:	4652      	mov	r2, sl
 800984a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800984e:	ec43 2b10 	vmov	d0, r2, r3
 8009852:	b023      	add	sp, #140	; 0x8c
 8009854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009858:	2a20      	cmp	r2, #32
 800985a:	d1ce      	bne.n	80097fa <_strtod_l+0x42>
 800985c:	3301      	adds	r3, #1
 800985e:	931d      	str	r3, [sp, #116]	; 0x74
 8009860:	e7c0      	b.n	80097e4 <_strtod_l+0x2c>
 8009862:	2a2d      	cmp	r2, #45	; 0x2d
 8009864:	d1c9      	bne.n	80097fa <_strtod_l+0x42>
 8009866:	2201      	movs	r2, #1
 8009868:	920e      	str	r2, [sp, #56]	; 0x38
 800986a:	1c5a      	adds	r2, r3, #1
 800986c:	921d      	str	r2, [sp, #116]	; 0x74
 800986e:	785b      	ldrb	r3, [r3, #1]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d1c4      	bne.n	80097fe <_strtod_l+0x46>
 8009874:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009876:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800987a:	2b00      	cmp	r3, #0
 800987c:	f040 8576 	bne.w	800a36c <_strtod_l+0xbb4>
 8009880:	4652      	mov	r2, sl
 8009882:	465b      	mov	r3, fp
 8009884:	e7e3      	b.n	800984e <_strtod_l+0x96>
 8009886:	2200      	movs	r2, #0
 8009888:	e7ee      	b.n	8009868 <_strtod_l+0xb0>
 800988a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800988c:	b13a      	cbz	r2, 800989e <_strtod_l+0xe6>
 800988e:	2135      	movs	r1, #53	; 0x35
 8009890:	a820      	add	r0, sp, #128	; 0x80
 8009892:	f001 fe1a 	bl	800b4ca <__copybits>
 8009896:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009898:	4620      	mov	r0, r4
 800989a:	f001 f9df 	bl	800ac5c <_Bfree>
 800989e:	3f01      	subs	r7, #1
 80098a0:	2f05      	cmp	r7, #5
 80098a2:	d807      	bhi.n	80098b4 <_strtod_l+0xfc>
 80098a4:	e8df f007 	tbb	[pc, r7]
 80098a8:	1d180b0e 	.word	0x1d180b0e
 80098ac:	030e      	.short	0x030e
 80098ae:	f04f 0b00 	mov.w	fp, #0
 80098b2:	46da      	mov	sl, fp
 80098b4:	0728      	lsls	r0, r5, #28
 80098b6:	d5c1      	bpl.n	800983c <_strtod_l+0x84>
 80098b8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80098bc:	e7be      	b.n	800983c <_strtod_l+0x84>
 80098be:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80098c2:	e7f7      	b.n	80098b4 <_strtod_l+0xfc>
 80098c4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80098c8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80098ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80098ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80098d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80098d6:	e7ed      	b.n	80098b4 <_strtod_l+0xfc>
 80098d8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009a60 <_strtod_l+0x2a8>
 80098dc:	f04f 0a00 	mov.w	sl, #0
 80098e0:	e7e8      	b.n	80098b4 <_strtod_l+0xfc>
 80098e2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80098e6:	f04f 3aff 	mov.w	sl, #4294967295
 80098ea:	e7e3      	b.n	80098b4 <_strtod_l+0xfc>
 80098ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80098ee:	1c5a      	adds	r2, r3, #1
 80098f0:	921d      	str	r2, [sp, #116]	; 0x74
 80098f2:	785b      	ldrb	r3, [r3, #1]
 80098f4:	2b30      	cmp	r3, #48	; 0x30
 80098f6:	d0f9      	beq.n	80098ec <_strtod_l+0x134>
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d09f      	beq.n	800983c <_strtod_l+0x84>
 80098fc:	2301      	movs	r3, #1
 80098fe:	f04f 0900 	mov.w	r9, #0
 8009902:	9304      	str	r3, [sp, #16]
 8009904:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009906:	930a      	str	r3, [sp, #40]	; 0x28
 8009908:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800990c:	464f      	mov	r7, r9
 800990e:	220a      	movs	r2, #10
 8009910:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009912:	7806      	ldrb	r6, [r0, #0]
 8009914:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009918:	b2d9      	uxtb	r1, r3
 800991a:	2909      	cmp	r1, #9
 800991c:	d92a      	bls.n	8009974 <_strtod_l+0x1bc>
 800991e:	9907      	ldr	r1, [sp, #28]
 8009920:	462a      	mov	r2, r5
 8009922:	f001 fe2d 	bl	800b580 <strncmp>
 8009926:	b398      	cbz	r0, 8009990 <_strtod_l+0x1d8>
 8009928:	2000      	movs	r0, #0
 800992a:	4633      	mov	r3, r6
 800992c:	463d      	mov	r5, r7
 800992e:	9007      	str	r0, [sp, #28]
 8009930:	4602      	mov	r2, r0
 8009932:	2b65      	cmp	r3, #101	; 0x65
 8009934:	d001      	beq.n	800993a <_strtod_l+0x182>
 8009936:	2b45      	cmp	r3, #69	; 0x45
 8009938:	d118      	bne.n	800996c <_strtod_l+0x1b4>
 800993a:	b91d      	cbnz	r5, 8009944 <_strtod_l+0x18c>
 800993c:	9b04      	ldr	r3, [sp, #16]
 800993e:	4303      	orrs	r3, r0
 8009940:	d098      	beq.n	8009874 <_strtod_l+0xbc>
 8009942:	2500      	movs	r5, #0
 8009944:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009948:	f108 0301 	add.w	r3, r8, #1
 800994c:	931d      	str	r3, [sp, #116]	; 0x74
 800994e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009952:	2b2b      	cmp	r3, #43	; 0x2b
 8009954:	d075      	beq.n	8009a42 <_strtod_l+0x28a>
 8009956:	2b2d      	cmp	r3, #45	; 0x2d
 8009958:	d07b      	beq.n	8009a52 <_strtod_l+0x29a>
 800995a:	f04f 0c00 	mov.w	ip, #0
 800995e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009962:	2909      	cmp	r1, #9
 8009964:	f240 8082 	bls.w	8009a6c <_strtod_l+0x2b4>
 8009968:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800996c:	2600      	movs	r6, #0
 800996e:	e09d      	b.n	8009aac <_strtod_l+0x2f4>
 8009970:	2300      	movs	r3, #0
 8009972:	e7c4      	b.n	80098fe <_strtod_l+0x146>
 8009974:	2f08      	cmp	r7, #8
 8009976:	bfd8      	it	le
 8009978:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800997a:	f100 0001 	add.w	r0, r0, #1
 800997e:	bfda      	itte	le
 8009980:	fb02 3301 	mlale	r3, r2, r1, r3
 8009984:	9309      	strle	r3, [sp, #36]	; 0x24
 8009986:	fb02 3909 	mlagt	r9, r2, r9, r3
 800998a:	3701      	adds	r7, #1
 800998c:	901d      	str	r0, [sp, #116]	; 0x74
 800998e:	e7bf      	b.n	8009910 <_strtod_l+0x158>
 8009990:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009992:	195a      	adds	r2, r3, r5
 8009994:	921d      	str	r2, [sp, #116]	; 0x74
 8009996:	5d5b      	ldrb	r3, [r3, r5]
 8009998:	2f00      	cmp	r7, #0
 800999a:	d037      	beq.n	8009a0c <_strtod_l+0x254>
 800999c:	9007      	str	r0, [sp, #28]
 800999e:	463d      	mov	r5, r7
 80099a0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80099a4:	2a09      	cmp	r2, #9
 80099a6:	d912      	bls.n	80099ce <_strtod_l+0x216>
 80099a8:	2201      	movs	r2, #1
 80099aa:	e7c2      	b.n	8009932 <_strtod_l+0x17a>
 80099ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80099ae:	1c5a      	adds	r2, r3, #1
 80099b0:	921d      	str	r2, [sp, #116]	; 0x74
 80099b2:	785b      	ldrb	r3, [r3, #1]
 80099b4:	3001      	adds	r0, #1
 80099b6:	2b30      	cmp	r3, #48	; 0x30
 80099b8:	d0f8      	beq.n	80099ac <_strtod_l+0x1f4>
 80099ba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80099be:	2a08      	cmp	r2, #8
 80099c0:	f200 84db 	bhi.w	800a37a <_strtod_l+0xbc2>
 80099c4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80099c6:	9007      	str	r0, [sp, #28]
 80099c8:	2000      	movs	r0, #0
 80099ca:	920a      	str	r2, [sp, #40]	; 0x28
 80099cc:	4605      	mov	r5, r0
 80099ce:	3b30      	subs	r3, #48	; 0x30
 80099d0:	f100 0201 	add.w	r2, r0, #1
 80099d4:	d014      	beq.n	8009a00 <_strtod_l+0x248>
 80099d6:	9907      	ldr	r1, [sp, #28]
 80099d8:	4411      	add	r1, r2
 80099da:	9107      	str	r1, [sp, #28]
 80099dc:	462a      	mov	r2, r5
 80099de:	eb00 0e05 	add.w	lr, r0, r5
 80099e2:	210a      	movs	r1, #10
 80099e4:	4572      	cmp	r2, lr
 80099e6:	d113      	bne.n	8009a10 <_strtod_l+0x258>
 80099e8:	182a      	adds	r2, r5, r0
 80099ea:	2a08      	cmp	r2, #8
 80099ec:	f105 0501 	add.w	r5, r5, #1
 80099f0:	4405      	add	r5, r0
 80099f2:	dc1c      	bgt.n	8009a2e <_strtod_l+0x276>
 80099f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099f6:	220a      	movs	r2, #10
 80099f8:	fb02 3301 	mla	r3, r2, r1, r3
 80099fc:	9309      	str	r3, [sp, #36]	; 0x24
 80099fe:	2200      	movs	r2, #0
 8009a00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a02:	1c59      	adds	r1, r3, #1
 8009a04:	911d      	str	r1, [sp, #116]	; 0x74
 8009a06:	785b      	ldrb	r3, [r3, #1]
 8009a08:	4610      	mov	r0, r2
 8009a0a:	e7c9      	b.n	80099a0 <_strtod_l+0x1e8>
 8009a0c:	4638      	mov	r0, r7
 8009a0e:	e7d2      	b.n	80099b6 <_strtod_l+0x1fe>
 8009a10:	2a08      	cmp	r2, #8
 8009a12:	dc04      	bgt.n	8009a1e <_strtod_l+0x266>
 8009a14:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009a16:	434e      	muls	r6, r1
 8009a18:	9609      	str	r6, [sp, #36]	; 0x24
 8009a1a:	3201      	adds	r2, #1
 8009a1c:	e7e2      	b.n	80099e4 <_strtod_l+0x22c>
 8009a1e:	f102 0c01 	add.w	ip, r2, #1
 8009a22:	f1bc 0f10 	cmp.w	ip, #16
 8009a26:	bfd8      	it	le
 8009a28:	fb01 f909 	mulle.w	r9, r1, r9
 8009a2c:	e7f5      	b.n	8009a1a <_strtod_l+0x262>
 8009a2e:	2d10      	cmp	r5, #16
 8009a30:	bfdc      	itt	le
 8009a32:	220a      	movle	r2, #10
 8009a34:	fb02 3909 	mlale	r9, r2, r9, r3
 8009a38:	e7e1      	b.n	80099fe <_strtod_l+0x246>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	9307      	str	r3, [sp, #28]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	e77c      	b.n	800993c <_strtod_l+0x184>
 8009a42:	f04f 0c00 	mov.w	ip, #0
 8009a46:	f108 0302 	add.w	r3, r8, #2
 8009a4a:	931d      	str	r3, [sp, #116]	; 0x74
 8009a4c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009a50:	e785      	b.n	800995e <_strtod_l+0x1a6>
 8009a52:	f04f 0c01 	mov.w	ip, #1
 8009a56:	e7f6      	b.n	8009a46 <_strtod_l+0x28e>
 8009a58:	0800ca88 	.word	0x0800ca88
 8009a5c:	0800c998 	.word	0x0800c998
 8009a60:	7ff00000 	.word	0x7ff00000
 8009a64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a66:	1c59      	adds	r1, r3, #1
 8009a68:	911d      	str	r1, [sp, #116]	; 0x74
 8009a6a:	785b      	ldrb	r3, [r3, #1]
 8009a6c:	2b30      	cmp	r3, #48	; 0x30
 8009a6e:	d0f9      	beq.n	8009a64 <_strtod_l+0x2ac>
 8009a70:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009a74:	2908      	cmp	r1, #8
 8009a76:	f63f af79 	bhi.w	800996c <_strtod_l+0x1b4>
 8009a7a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009a7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a80:	9308      	str	r3, [sp, #32]
 8009a82:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a84:	1c59      	adds	r1, r3, #1
 8009a86:	911d      	str	r1, [sp, #116]	; 0x74
 8009a88:	785b      	ldrb	r3, [r3, #1]
 8009a8a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009a8e:	2e09      	cmp	r6, #9
 8009a90:	d937      	bls.n	8009b02 <_strtod_l+0x34a>
 8009a92:	9e08      	ldr	r6, [sp, #32]
 8009a94:	1b89      	subs	r1, r1, r6
 8009a96:	2908      	cmp	r1, #8
 8009a98:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009a9c:	dc02      	bgt.n	8009aa4 <_strtod_l+0x2ec>
 8009a9e:	4576      	cmp	r6, lr
 8009aa0:	bfa8      	it	ge
 8009aa2:	4676      	movge	r6, lr
 8009aa4:	f1bc 0f00 	cmp.w	ip, #0
 8009aa8:	d000      	beq.n	8009aac <_strtod_l+0x2f4>
 8009aaa:	4276      	negs	r6, r6
 8009aac:	2d00      	cmp	r5, #0
 8009aae:	d14f      	bne.n	8009b50 <_strtod_l+0x398>
 8009ab0:	9904      	ldr	r1, [sp, #16]
 8009ab2:	4301      	orrs	r1, r0
 8009ab4:	f47f aec2 	bne.w	800983c <_strtod_l+0x84>
 8009ab8:	2a00      	cmp	r2, #0
 8009aba:	f47f aedb 	bne.w	8009874 <_strtod_l+0xbc>
 8009abe:	2b69      	cmp	r3, #105	; 0x69
 8009ac0:	d027      	beq.n	8009b12 <_strtod_l+0x35a>
 8009ac2:	dc24      	bgt.n	8009b0e <_strtod_l+0x356>
 8009ac4:	2b49      	cmp	r3, #73	; 0x49
 8009ac6:	d024      	beq.n	8009b12 <_strtod_l+0x35a>
 8009ac8:	2b4e      	cmp	r3, #78	; 0x4e
 8009aca:	f47f aed3 	bne.w	8009874 <_strtod_l+0xbc>
 8009ace:	499e      	ldr	r1, [pc, #632]	; (8009d48 <_strtod_l+0x590>)
 8009ad0:	a81d      	add	r0, sp, #116	; 0x74
 8009ad2:	f000 ffb5 	bl	800aa40 <__match>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	f43f aecc 	beq.w	8009874 <_strtod_l+0xbc>
 8009adc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	2b28      	cmp	r3, #40	; 0x28
 8009ae2:	d12d      	bne.n	8009b40 <_strtod_l+0x388>
 8009ae4:	4999      	ldr	r1, [pc, #612]	; (8009d4c <_strtod_l+0x594>)
 8009ae6:	aa20      	add	r2, sp, #128	; 0x80
 8009ae8:	a81d      	add	r0, sp, #116	; 0x74
 8009aea:	f000 ffbd 	bl	800aa68 <__hexnan>
 8009aee:	2805      	cmp	r0, #5
 8009af0:	d126      	bne.n	8009b40 <_strtod_l+0x388>
 8009af2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009af4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009af8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009afc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009b00:	e69c      	b.n	800983c <_strtod_l+0x84>
 8009b02:	210a      	movs	r1, #10
 8009b04:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009b08:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009b0c:	e7b9      	b.n	8009a82 <_strtod_l+0x2ca>
 8009b0e:	2b6e      	cmp	r3, #110	; 0x6e
 8009b10:	e7db      	b.n	8009aca <_strtod_l+0x312>
 8009b12:	498f      	ldr	r1, [pc, #572]	; (8009d50 <_strtod_l+0x598>)
 8009b14:	a81d      	add	r0, sp, #116	; 0x74
 8009b16:	f000 ff93 	bl	800aa40 <__match>
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	f43f aeaa 	beq.w	8009874 <_strtod_l+0xbc>
 8009b20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b22:	498c      	ldr	r1, [pc, #560]	; (8009d54 <_strtod_l+0x59c>)
 8009b24:	3b01      	subs	r3, #1
 8009b26:	a81d      	add	r0, sp, #116	; 0x74
 8009b28:	931d      	str	r3, [sp, #116]	; 0x74
 8009b2a:	f000 ff89 	bl	800aa40 <__match>
 8009b2e:	b910      	cbnz	r0, 8009b36 <_strtod_l+0x37e>
 8009b30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b32:	3301      	adds	r3, #1
 8009b34:	931d      	str	r3, [sp, #116]	; 0x74
 8009b36:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8009d64 <_strtod_l+0x5ac>
 8009b3a:	f04f 0a00 	mov.w	sl, #0
 8009b3e:	e67d      	b.n	800983c <_strtod_l+0x84>
 8009b40:	4885      	ldr	r0, [pc, #532]	; (8009d58 <_strtod_l+0x5a0>)
 8009b42:	f001 fd15 	bl	800b570 <nan>
 8009b46:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009b4a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009b4e:	e675      	b.n	800983c <_strtod_l+0x84>
 8009b50:	9b07      	ldr	r3, [sp, #28]
 8009b52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b54:	1af3      	subs	r3, r6, r3
 8009b56:	2f00      	cmp	r7, #0
 8009b58:	bf08      	it	eq
 8009b5a:	462f      	moveq	r7, r5
 8009b5c:	2d10      	cmp	r5, #16
 8009b5e:	9308      	str	r3, [sp, #32]
 8009b60:	46a8      	mov	r8, r5
 8009b62:	bfa8      	it	ge
 8009b64:	f04f 0810 	movge.w	r8, #16
 8009b68:	f7f6 fcd4 	bl	8000514 <__aeabi_ui2d>
 8009b6c:	2d09      	cmp	r5, #9
 8009b6e:	4682      	mov	sl, r0
 8009b70:	468b      	mov	fp, r1
 8009b72:	dd13      	ble.n	8009b9c <_strtod_l+0x3e4>
 8009b74:	4b79      	ldr	r3, [pc, #484]	; (8009d5c <_strtod_l+0x5a4>)
 8009b76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009b7a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009b7e:	f7f6 fd43 	bl	8000608 <__aeabi_dmul>
 8009b82:	4682      	mov	sl, r0
 8009b84:	4648      	mov	r0, r9
 8009b86:	468b      	mov	fp, r1
 8009b88:	f7f6 fcc4 	bl	8000514 <__aeabi_ui2d>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	4650      	mov	r0, sl
 8009b92:	4659      	mov	r1, fp
 8009b94:	f7f6 fb82 	bl	800029c <__adddf3>
 8009b98:	4682      	mov	sl, r0
 8009b9a:	468b      	mov	fp, r1
 8009b9c:	2d0f      	cmp	r5, #15
 8009b9e:	dc38      	bgt.n	8009c12 <_strtod_l+0x45a>
 8009ba0:	9b08      	ldr	r3, [sp, #32]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	f43f ae4a 	beq.w	800983c <_strtod_l+0x84>
 8009ba8:	dd24      	ble.n	8009bf4 <_strtod_l+0x43c>
 8009baa:	2b16      	cmp	r3, #22
 8009bac:	dc0b      	bgt.n	8009bc6 <_strtod_l+0x40e>
 8009bae:	4d6b      	ldr	r5, [pc, #428]	; (8009d5c <_strtod_l+0x5a4>)
 8009bb0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8009bb4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009bb8:	4652      	mov	r2, sl
 8009bba:	465b      	mov	r3, fp
 8009bbc:	f7f6 fd24 	bl	8000608 <__aeabi_dmul>
 8009bc0:	4682      	mov	sl, r0
 8009bc2:	468b      	mov	fp, r1
 8009bc4:	e63a      	b.n	800983c <_strtod_l+0x84>
 8009bc6:	9a08      	ldr	r2, [sp, #32]
 8009bc8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	db20      	blt.n	8009c12 <_strtod_l+0x45a>
 8009bd0:	4c62      	ldr	r4, [pc, #392]	; (8009d5c <_strtod_l+0x5a4>)
 8009bd2:	f1c5 050f 	rsb	r5, r5, #15
 8009bd6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009bda:	4652      	mov	r2, sl
 8009bdc:	465b      	mov	r3, fp
 8009bde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009be2:	f7f6 fd11 	bl	8000608 <__aeabi_dmul>
 8009be6:	9b08      	ldr	r3, [sp, #32]
 8009be8:	1b5d      	subs	r5, r3, r5
 8009bea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009bee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009bf2:	e7e3      	b.n	8009bbc <_strtod_l+0x404>
 8009bf4:	9b08      	ldr	r3, [sp, #32]
 8009bf6:	3316      	adds	r3, #22
 8009bf8:	db0b      	blt.n	8009c12 <_strtod_l+0x45a>
 8009bfa:	9b07      	ldr	r3, [sp, #28]
 8009bfc:	4a57      	ldr	r2, [pc, #348]	; (8009d5c <_strtod_l+0x5a4>)
 8009bfe:	1b9e      	subs	r6, r3, r6
 8009c00:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009c04:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c08:	4650      	mov	r0, sl
 8009c0a:	4659      	mov	r1, fp
 8009c0c:	f7f6 fe26 	bl	800085c <__aeabi_ddiv>
 8009c10:	e7d6      	b.n	8009bc0 <_strtod_l+0x408>
 8009c12:	9b08      	ldr	r3, [sp, #32]
 8009c14:	eba5 0808 	sub.w	r8, r5, r8
 8009c18:	4498      	add	r8, r3
 8009c1a:	f1b8 0f00 	cmp.w	r8, #0
 8009c1e:	dd71      	ble.n	8009d04 <_strtod_l+0x54c>
 8009c20:	f018 030f 	ands.w	r3, r8, #15
 8009c24:	d00a      	beq.n	8009c3c <_strtod_l+0x484>
 8009c26:	494d      	ldr	r1, [pc, #308]	; (8009d5c <_strtod_l+0x5a4>)
 8009c28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009c2c:	4652      	mov	r2, sl
 8009c2e:	465b      	mov	r3, fp
 8009c30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c34:	f7f6 fce8 	bl	8000608 <__aeabi_dmul>
 8009c38:	4682      	mov	sl, r0
 8009c3a:	468b      	mov	fp, r1
 8009c3c:	f038 080f 	bics.w	r8, r8, #15
 8009c40:	d04d      	beq.n	8009cde <_strtod_l+0x526>
 8009c42:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009c46:	dd22      	ble.n	8009c8e <_strtod_l+0x4d6>
 8009c48:	2500      	movs	r5, #0
 8009c4a:	462e      	mov	r6, r5
 8009c4c:	9509      	str	r5, [sp, #36]	; 0x24
 8009c4e:	9507      	str	r5, [sp, #28]
 8009c50:	2322      	movs	r3, #34	; 0x22
 8009c52:	f8df b110 	ldr.w	fp, [pc, #272]	; 8009d64 <_strtod_l+0x5ac>
 8009c56:	6023      	str	r3, [r4, #0]
 8009c58:	f04f 0a00 	mov.w	sl, #0
 8009c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f43f adec 	beq.w	800983c <_strtod_l+0x84>
 8009c64:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009c66:	4620      	mov	r0, r4
 8009c68:	f000 fff8 	bl	800ac5c <_Bfree>
 8009c6c:	9907      	ldr	r1, [sp, #28]
 8009c6e:	4620      	mov	r0, r4
 8009c70:	f000 fff4 	bl	800ac5c <_Bfree>
 8009c74:	4631      	mov	r1, r6
 8009c76:	4620      	mov	r0, r4
 8009c78:	f000 fff0 	bl	800ac5c <_Bfree>
 8009c7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f000 ffec 	bl	800ac5c <_Bfree>
 8009c84:	4629      	mov	r1, r5
 8009c86:	4620      	mov	r0, r4
 8009c88:	f000 ffe8 	bl	800ac5c <_Bfree>
 8009c8c:	e5d6      	b.n	800983c <_strtod_l+0x84>
 8009c8e:	2300      	movs	r3, #0
 8009c90:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009c94:	4650      	mov	r0, sl
 8009c96:	4659      	mov	r1, fp
 8009c98:	4699      	mov	r9, r3
 8009c9a:	f1b8 0f01 	cmp.w	r8, #1
 8009c9e:	dc21      	bgt.n	8009ce4 <_strtod_l+0x52c>
 8009ca0:	b10b      	cbz	r3, 8009ca6 <_strtod_l+0x4ee>
 8009ca2:	4682      	mov	sl, r0
 8009ca4:	468b      	mov	fp, r1
 8009ca6:	4b2e      	ldr	r3, [pc, #184]	; (8009d60 <_strtod_l+0x5a8>)
 8009ca8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009cac:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009cb0:	4652      	mov	r2, sl
 8009cb2:	465b      	mov	r3, fp
 8009cb4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009cb8:	f7f6 fca6 	bl	8000608 <__aeabi_dmul>
 8009cbc:	4b29      	ldr	r3, [pc, #164]	; (8009d64 <_strtod_l+0x5ac>)
 8009cbe:	460a      	mov	r2, r1
 8009cc0:	400b      	ands	r3, r1
 8009cc2:	4929      	ldr	r1, [pc, #164]	; (8009d68 <_strtod_l+0x5b0>)
 8009cc4:	428b      	cmp	r3, r1
 8009cc6:	4682      	mov	sl, r0
 8009cc8:	d8be      	bhi.n	8009c48 <_strtod_l+0x490>
 8009cca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009cce:	428b      	cmp	r3, r1
 8009cd0:	bf86      	itte	hi
 8009cd2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009d6c <_strtod_l+0x5b4>
 8009cd6:	f04f 3aff 	movhi.w	sl, #4294967295
 8009cda:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009cde:	2300      	movs	r3, #0
 8009ce0:	9304      	str	r3, [sp, #16]
 8009ce2:	e081      	b.n	8009de8 <_strtod_l+0x630>
 8009ce4:	f018 0f01 	tst.w	r8, #1
 8009ce8:	d007      	beq.n	8009cfa <_strtod_l+0x542>
 8009cea:	4b1d      	ldr	r3, [pc, #116]	; (8009d60 <_strtod_l+0x5a8>)
 8009cec:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf4:	f7f6 fc88 	bl	8000608 <__aeabi_dmul>
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	f109 0901 	add.w	r9, r9, #1
 8009cfe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009d02:	e7ca      	b.n	8009c9a <_strtod_l+0x4e2>
 8009d04:	d0eb      	beq.n	8009cde <_strtod_l+0x526>
 8009d06:	f1c8 0800 	rsb	r8, r8, #0
 8009d0a:	f018 020f 	ands.w	r2, r8, #15
 8009d0e:	d00a      	beq.n	8009d26 <_strtod_l+0x56e>
 8009d10:	4b12      	ldr	r3, [pc, #72]	; (8009d5c <_strtod_l+0x5a4>)
 8009d12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d16:	4650      	mov	r0, sl
 8009d18:	4659      	mov	r1, fp
 8009d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1e:	f7f6 fd9d 	bl	800085c <__aeabi_ddiv>
 8009d22:	4682      	mov	sl, r0
 8009d24:	468b      	mov	fp, r1
 8009d26:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009d2a:	d0d8      	beq.n	8009cde <_strtod_l+0x526>
 8009d2c:	f1b8 0f1f 	cmp.w	r8, #31
 8009d30:	dd1e      	ble.n	8009d70 <_strtod_l+0x5b8>
 8009d32:	2500      	movs	r5, #0
 8009d34:	462e      	mov	r6, r5
 8009d36:	9509      	str	r5, [sp, #36]	; 0x24
 8009d38:	9507      	str	r5, [sp, #28]
 8009d3a:	2322      	movs	r3, #34	; 0x22
 8009d3c:	f04f 0a00 	mov.w	sl, #0
 8009d40:	f04f 0b00 	mov.w	fp, #0
 8009d44:	6023      	str	r3, [r4, #0]
 8009d46:	e789      	b.n	8009c5c <_strtod_l+0x4a4>
 8009d48:	0800c995 	.word	0x0800c995
 8009d4c:	0800c9ac 	.word	0x0800c9ac
 8009d50:	0800c98c 	.word	0x0800c98c
 8009d54:	0800c98f 	.word	0x0800c98f
 8009d58:	0800cc4f 	.word	0x0800cc4f
 8009d5c:	0800cb40 	.word	0x0800cb40
 8009d60:	0800cb18 	.word	0x0800cb18
 8009d64:	7ff00000 	.word	0x7ff00000
 8009d68:	7ca00000 	.word	0x7ca00000
 8009d6c:	7fefffff 	.word	0x7fefffff
 8009d70:	f018 0310 	ands.w	r3, r8, #16
 8009d74:	bf18      	it	ne
 8009d76:	236a      	movne	r3, #106	; 0x6a
 8009d78:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800a130 <_strtod_l+0x978>
 8009d7c:	9304      	str	r3, [sp, #16]
 8009d7e:	4650      	mov	r0, sl
 8009d80:	4659      	mov	r1, fp
 8009d82:	2300      	movs	r3, #0
 8009d84:	f018 0f01 	tst.w	r8, #1
 8009d88:	d004      	beq.n	8009d94 <_strtod_l+0x5dc>
 8009d8a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009d8e:	f7f6 fc3b 	bl	8000608 <__aeabi_dmul>
 8009d92:	2301      	movs	r3, #1
 8009d94:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009d98:	f109 0908 	add.w	r9, r9, #8
 8009d9c:	d1f2      	bne.n	8009d84 <_strtod_l+0x5cc>
 8009d9e:	b10b      	cbz	r3, 8009da4 <_strtod_l+0x5ec>
 8009da0:	4682      	mov	sl, r0
 8009da2:	468b      	mov	fp, r1
 8009da4:	9b04      	ldr	r3, [sp, #16]
 8009da6:	b1bb      	cbz	r3, 8009dd8 <_strtod_l+0x620>
 8009da8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009dac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	4659      	mov	r1, fp
 8009db4:	dd10      	ble.n	8009dd8 <_strtod_l+0x620>
 8009db6:	2b1f      	cmp	r3, #31
 8009db8:	f340 8128 	ble.w	800a00c <_strtod_l+0x854>
 8009dbc:	2b34      	cmp	r3, #52	; 0x34
 8009dbe:	bfde      	ittt	le
 8009dc0:	3b20      	suble	r3, #32
 8009dc2:	f04f 32ff 	movle.w	r2, #4294967295
 8009dc6:	fa02 f303 	lslle.w	r3, r2, r3
 8009dca:	f04f 0a00 	mov.w	sl, #0
 8009dce:	bfcc      	ite	gt
 8009dd0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009dd4:	ea03 0b01 	andle.w	fp, r3, r1
 8009dd8:	2200      	movs	r2, #0
 8009dda:	2300      	movs	r3, #0
 8009ddc:	4650      	mov	r0, sl
 8009dde:	4659      	mov	r1, fp
 8009de0:	f7f6 fe7a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	d1a4      	bne.n	8009d32 <_strtod_l+0x57a>
 8009de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dea:	9300      	str	r3, [sp, #0]
 8009dec:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009dee:	462b      	mov	r3, r5
 8009df0:	463a      	mov	r2, r7
 8009df2:	4620      	mov	r0, r4
 8009df4:	f000 ff9e 	bl	800ad34 <__s2b>
 8009df8:	9009      	str	r0, [sp, #36]	; 0x24
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	f43f af24 	beq.w	8009c48 <_strtod_l+0x490>
 8009e00:	9b07      	ldr	r3, [sp, #28]
 8009e02:	1b9e      	subs	r6, r3, r6
 8009e04:	9b08      	ldr	r3, [sp, #32]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	bfb4      	ite	lt
 8009e0a:	4633      	movlt	r3, r6
 8009e0c:	2300      	movge	r3, #0
 8009e0e:	9310      	str	r3, [sp, #64]	; 0x40
 8009e10:	9b08      	ldr	r3, [sp, #32]
 8009e12:	2500      	movs	r5, #0
 8009e14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009e18:	9318      	str	r3, [sp, #96]	; 0x60
 8009e1a:	462e      	mov	r6, r5
 8009e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e1e:	4620      	mov	r0, r4
 8009e20:	6859      	ldr	r1, [r3, #4]
 8009e22:	f000 fedb 	bl	800abdc <_Balloc>
 8009e26:	9007      	str	r0, [sp, #28]
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	f43f af11 	beq.w	8009c50 <_strtod_l+0x498>
 8009e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e30:	691a      	ldr	r2, [r3, #16]
 8009e32:	3202      	adds	r2, #2
 8009e34:	f103 010c 	add.w	r1, r3, #12
 8009e38:	0092      	lsls	r2, r2, #2
 8009e3a:	300c      	adds	r0, #12
 8009e3c:	f7ff fbd0 	bl	80095e0 <memcpy>
 8009e40:	ec4b ab10 	vmov	d0, sl, fp
 8009e44:	aa20      	add	r2, sp, #128	; 0x80
 8009e46:	a91f      	add	r1, sp, #124	; 0x7c
 8009e48:	4620      	mov	r0, r4
 8009e4a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009e4e:	f001 faad 	bl	800b3ac <__d2b>
 8009e52:	901e      	str	r0, [sp, #120]	; 0x78
 8009e54:	2800      	cmp	r0, #0
 8009e56:	f43f aefb 	beq.w	8009c50 <_strtod_l+0x498>
 8009e5a:	2101      	movs	r1, #1
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	f001 f803 	bl	800ae68 <__i2b>
 8009e62:	4606      	mov	r6, r0
 8009e64:	2800      	cmp	r0, #0
 8009e66:	f43f aef3 	beq.w	8009c50 <_strtod_l+0x498>
 8009e6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009e6c:	9904      	ldr	r1, [sp, #16]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	bfab      	itete	ge
 8009e72:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009e74:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009e76:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009e78:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8009e7c:	bfac      	ite	ge
 8009e7e:	eb03 0902 	addge.w	r9, r3, r2
 8009e82:	1ad7      	sublt	r7, r2, r3
 8009e84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009e86:	eba3 0801 	sub.w	r8, r3, r1
 8009e8a:	4490      	add	r8, r2
 8009e8c:	4ba3      	ldr	r3, [pc, #652]	; (800a11c <_strtod_l+0x964>)
 8009e8e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e92:	4598      	cmp	r8, r3
 8009e94:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009e98:	f280 80cc 	bge.w	800a034 <_strtod_l+0x87c>
 8009e9c:	eba3 0308 	sub.w	r3, r3, r8
 8009ea0:	2b1f      	cmp	r3, #31
 8009ea2:	eba2 0203 	sub.w	r2, r2, r3
 8009ea6:	f04f 0101 	mov.w	r1, #1
 8009eaa:	f300 80b6 	bgt.w	800a01a <_strtod_l+0x862>
 8009eae:	fa01 f303 	lsl.w	r3, r1, r3
 8009eb2:	9311      	str	r3, [sp, #68]	; 0x44
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	930c      	str	r3, [sp, #48]	; 0x30
 8009eb8:	eb09 0802 	add.w	r8, r9, r2
 8009ebc:	9b04      	ldr	r3, [sp, #16]
 8009ebe:	45c1      	cmp	r9, r8
 8009ec0:	4417      	add	r7, r2
 8009ec2:	441f      	add	r7, r3
 8009ec4:	464b      	mov	r3, r9
 8009ec6:	bfa8      	it	ge
 8009ec8:	4643      	movge	r3, r8
 8009eca:	42bb      	cmp	r3, r7
 8009ecc:	bfa8      	it	ge
 8009ece:	463b      	movge	r3, r7
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	bfc2      	ittt	gt
 8009ed4:	eba8 0803 	subgt.w	r8, r8, r3
 8009ed8:	1aff      	subgt	r7, r7, r3
 8009eda:	eba9 0903 	subgt.w	r9, r9, r3
 8009ede:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	dd17      	ble.n	8009f14 <_strtod_l+0x75c>
 8009ee4:	4631      	mov	r1, r6
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	4620      	mov	r0, r4
 8009eea:	f001 f879 	bl	800afe0 <__pow5mult>
 8009eee:	4606      	mov	r6, r0
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	f43f aead 	beq.w	8009c50 <_strtod_l+0x498>
 8009ef6:	4601      	mov	r1, r0
 8009ef8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009efa:	4620      	mov	r0, r4
 8009efc:	f000 ffca 	bl	800ae94 <__multiply>
 8009f00:	900f      	str	r0, [sp, #60]	; 0x3c
 8009f02:	2800      	cmp	r0, #0
 8009f04:	f43f aea4 	beq.w	8009c50 <_strtod_l+0x498>
 8009f08:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f000 fea6 	bl	800ac5c <_Bfree>
 8009f10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f12:	931e      	str	r3, [sp, #120]	; 0x78
 8009f14:	f1b8 0f00 	cmp.w	r8, #0
 8009f18:	f300 8091 	bgt.w	800a03e <_strtod_l+0x886>
 8009f1c:	9b08      	ldr	r3, [sp, #32]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	dd08      	ble.n	8009f34 <_strtod_l+0x77c>
 8009f22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009f24:	9907      	ldr	r1, [sp, #28]
 8009f26:	4620      	mov	r0, r4
 8009f28:	f001 f85a 	bl	800afe0 <__pow5mult>
 8009f2c:	9007      	str	r0, [sp, #28]
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	f43f ae8e 	beq.w	8009c50 <_strtod_l+0x498>
 8009f34:	2f00      	cmp	r7, #0
 8009f36:	dd08      	ble.n	8009f4a <_strtod_l+0x792>
 8009f38:	9907      	ldr	r1, [sp, #28]
 8009f3a:	463a      	mov	r2, r7
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	f001 f8a9 	bl	800b094 <__lshift>
 8009f42:	9007      	str	r0, [sp, #28]
 8009f44:	2800      	cmp	r0, #0
 8009f46:	f43f ae83 	beq.w	8009c50 <_strtod_l+0x498>
 8009f4a:	f1b9 0f00 	cmp.w	r9, #0
 8009f4e:	dd08      	ble.n	8009f62 <_strtod_l+0x7aa>
 8009f50:	4631      	mov	r1, r6
 8009f52:	464a      	mov	r2, r9
 8009f54:	4620      	mov	r0, r4
 8009f56:	f001 f89d 	bl	800b094 <__lshift>
 8009f5a:	4606      	mov	r6, r0
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	f43f ae77 	beq.w	8009c50 <_strtod_l+0x498>
 8009f62:	9a07      	ldr	r2, [sp, #28]
 8009f64:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009f66:	4620      	mov	r0, r4
 8009f68:	f001 f91c 	bl	800b1a4 <__mdiff>
 8009f6c:	4605      	mov	r5, r0
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	f43f ae6e 	beq.w	8009c50 <_strtod_l+0x498>
 8009f74:	68c3      	ldr	r3, [r0, #12]
 8009f76:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f78:	2300      	movs	r3, #0
 8009f7a:	60c3      	str	r3, [r0, #12]
 8009f7c:	4631      	mov	r1, r6
 8009f7e:	f001 f8f5 	bl	800b16c <__mcmp>
 8009f82:	2800      	cmp	r0, #0
 8009f84:	da65      	bge.n	800a052 <_strtod_l+0x89a>
 8009f86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f88:	ea53 030a 	orrs.w	r3, r3, sl
 8009f8c:	f040 8087 	bne.w	800a09e <_strtod_l+0x8e6>
 8009f90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f040 8082 	bne.w	800a09e <_strtod_l+0x8e6>
 8009f9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009f9e:	0d1b      	lsrs	r3, r3, #20
 8009fa0:	051b      	lsls	r3, r3, #20
 8009fa2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009fa6:	d97a      	bls.n	800a09e <_strtod_l+0x8e6>
 8009fa8:	696b      	ldr	r3, [r5, #20]
 8009faa:	b913      	cbnz	r3, 8009fb2 <_strtod_l+0x7fa>
 8009fac:	692b      	ldr	r3, [r5, #16]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	dd75      	ble.n	800a09e <_strtod_l+0x8e6>
 8009fb2:	4629      	mov	r1, r5
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	f001 f86c 	bl	800b094 <__lshift>
 8009fbc:	4631      	mov	r1, r6
 8009fbe:	4605      	mov	r5, r0
 8009fc0:	f001 f8d4 	bl	800b16c <__mcmp>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	dd6a      	ble.n	800a09e <_strtod_l+0x8e6>
 8009fc8:	9904      	ldr	r1, [sp, #16]
 8009fca:	4a55      	ldr	r2, [pc, #340]	; (800a120 <_strtod_l+0x968>)
 8009fcc:	465b      	mov	r3, fp
 8009fce:	2900      	cmp	r1, #0
 8009fd0:	f000 8085 	beq.w	800a0de <_strtod_l+0x926>
 8009fd4:	ea02 010b 	and.w	r1, r2, fp
 8009fd8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009fdc:	dc7f      	bgt.n	800a0de <_strtod_l+0x926>
 8009fde:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009fe2:	f77f aeaa 	ble.w	8009d3a <_strtod_l+0x582>
 8009fe6:	4a4f      	ldr	r2, [pc, #316]	; (800a124 <_strtod_l+0x96c>)
 8009fe8:	2300      	movs	r3, #0
 8009fea:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8009fee:	4650      	mov	r0, sl
 8009ff0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009ff4:	4659      	mov	r1, fp
 8009ff6:	f7f6 fb07 	bl	8000608 <__aeabi_dmul>
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	4303      	orrs	r3, r0
 8009ffe:	bf08      	it	eq
 800a000:	2322      	moveq	r3, #34	; 0x22
 800a002:	4682      	mov	sl, r0
 800a004:	468b      	mov	fp, r1
 800a006:	bf08      	it	eq
 800a008:	6023      	streq	r3, [r4, #0]
 800a00a:	e62b      	b.n	8009c64 <_strtod_l+0x4ac>
 800a00c:	f04f 32ff 	mov.w	r2, #4294967295
 800a010:	fa02 f303 	lsl.w	r3, r2, r3
 800a014:	ea03 0a0a 	and.w	sl, r3, sl
 800a018:	e6de      	b.n	8009dd8 <_strtod_l+0x620>
 800a01a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a01e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a022:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a026:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a02a:	fa01 f308 	lsl.w	r3, r1, r8
 800a02e:	930c      	str	r3, [sp, #48]	; 0x30
 800a030:	9111      	str	r1, [sp, #68]	; 0x44
 800a032:	e741      	b.n	8009eb8 <_strtod_l+0x700>
 800a034:	2300      	movs	r3, #0
 800a036:	930c      	str	r3, [sp, #48]	; 0x30
 800a038:	2301      	movs	r3, #1
 800a03a:	9311      	str	r3, [sp, #68]	; 0x44
 800a03c:	e73c      	b.n	8009eb8 <_strtod_l+0x700>
 800a03e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a040:	4642      	mov	r2, r8
 800a042:	4620      	mov	r0, r4
 800a044:	f001 f826 	bl	800b094 <__lshift>
 800a048:	901e      	str	r0, [sp, #120]	; 0x78
 800a04a:	2800      	cmp	r0, #0
 800a04c:	f47f af66 	bne.w	8009f1c <_strtod_l+0x764>
 800a050:	e5fe      	b.n	8009c50 <_strtod_l+0x498>
 800a052:	465f      	mov	r7, fp
 800a054:	d16e      	bne.n	800a134 <_strtod_l+0x97c>
 800a056:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a058:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a05c:	b342      	cbz	r2, 800a0b0 <_strtod_l+0x8f8>
 800a05e:	4a32      	ldr	r2, [pc, #200]	; (800a128 <_strtod_l+0x970>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d128      	bne.n	800a0b6 <_strtod_l+0x8fe>
 800a064:	9b04      	ldr	r3, [sp, #16]
 800a066:	4650      	mov	r0, sl
 800a068:	b1eb      	cbz	r3, 800a0a6 <_strtod_l+0x8ee>
 800a06a:	4a2d      	ldr	r2, [pc, #180]	; (800a120 <_strtod_l+0x968>)
 800a06c:	403a      	ands	r2, r7
 800a06e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a072:	f04f 31ff 	mov.w	r1, #4294967295
 800a076:	d819      	bhi.n	800a0ac <_strtod_l+0x8f4>
 800a078:	0d12      	lsrs	r2, r2, #20
 800a07a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a07e:	fa01 f303 	lsl.w	r3, r1, r3
 800a082:	4298      	cmp	r0, r3
 800a084:	d117      	bne.n	800a0b6 <_strtod_l+0x8fe>
 800a086:	4b29      	ldr	r3, [pc, #164]	; (800a12c <_strtod_l+0x974>)
 800a088:	429f      	cmp	r7, r3
 800a08a:	d102      	bne.n	800a092 <_strtod_l+0x8da>
 800a08c:	3001      	adds	r0, #1
 800a08e:	f43f addf 	beq.w	8009c50 <_strtod_l+0x498>
 800a092:	4b23      	ldr	r3, [pc, #140]	; (800a120 <_strtod_l+0x968>)
 800a094:	403b      	ands	r3, r7
 800a096:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a09a:	f04f 0a00 	mov.w	sl, #0
 800a09e:	9b04      	ldr	r3, [sp, #16]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d1a0      	bne.n	8009fe6 <_strtod_l+0x82e>
 800a0a4:	e5de      	b.n	8009c64 <_strtod_l+0x4ac>
 800a0a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a0aa:	e7ea      	b.n	800a082 <_strtod_l+0x8ca>
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	e7e8      	b.n	800a082 <_strtod_l+0x8ca>
 800a0b0:	ea53 030a 	orrs.w	r3, r3, sl
 800a0b4:	d088      	beq.n	8009fc8 <_strtod_l+0x810>
 800a0b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0b8:	b1db      	cbz	r3, 800a0f2 <_strtod_l+0x93a>
 800a0ba:	423b      	tst	r3, r7
 800a0bc:	d0ef      	beq.n	800a09e <_strtod_l+0x8e6>
 800a0be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0c0:	9a04      	ldr	r2, [sp, #16]
 800a0c2:	4650      	mov	r0, sl
 800a0c4:	4659      	mov	r1, fp
 800a0c6:	b1c3      	cbz	r3, 800a0fa <_strtod_l+0x942>
 800a0c8:	f7ff fb5a 	bl	8009780 <sulp>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a0d4:	f7f6 f8e2 	bl	800029c <__adddf3>
 800a0d8:	4682      	mov	sl, r0
 800a0da:	468b      	mov	fp, r1
 800a0dc:	e7df      	b.n	800a09e <_strtod_l+0x8e6>
 800a0de:	4013      	ands	r3, r2
 800a0e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a0e4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a0e8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a0ec:	f04f 3aff 	mov.w	sl, #4294967295
 800a0f0:	e7d5      	b.n	800a09e <_strtod_l+0x8e6>
 800a0f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0f4:	ea13 0f0a 	tst.w	r3, sl
 800a0f8:	e7e0      	b.n	800a0bc <_strtod_l+0x904>
 800a0fa:	f7ff fb41 	bl	8009780 <sulp>
 800a0fe:	4602      	mov	r2, r0
 800a100:	460b      	mov	r3, r1
 800a102:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a106:	f7f6 f8c7 	bl	8000298 <__aeabi_dsub>
 800a10a:	2200      	movs	r2, #0
 800a10c:	2300      	movs	r3, #0
 800a10e:	4682      	mov	sl, r0
 800a110:	468b      	mov	fp, r1
 800a112:	f7f6 fce1 	bl	8000ad8 <__aeabi_dcmpeq>
 800a116:	2800      	cmp	r0, #0
 800a118:	d0c1      	beq.n	800a09e <_strtod_l+0x8e6>
 800a11a:	e60e      	b.n	8009d3a <_strtod_l+0x582>
 800a11c:	fffffc02 	.word	0xfffffc02
 800a120:	7ff00000 	.word	0x7ff00000
 800a124:	39500000 	.word	0x39500000
 800a128:	000fffff 	.word	0x000fffff
 800a12c:	7fefffff 	.word	0x7fefffff
 800a130:	0800c9c0 	.word	0x0800c9c0
 800a134:	4631      	mov	r1, r6
 800a136:	4628      	mov	r0, r5
 800a138:	f001 f994 	bl	800b464 <__ratio>
 800a13c:	ec59 8b10 	vmov	r8, r9, d0
 800a140:	ee10 0a10 	vmov	r0, s0
 800a144:	2200      	movs	r2, #0
 800a146:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a14a:	4649      	mov	r1, r9
 800a14c:	f7f6 fcd8 	bl	8000b00 <__aeabi_dcmple>
 800a150:	2800      	cmp	r0, #0
 800a152:	d07c      	beq.n	800a24e <_strtod_l+0xa96>
 800a154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a156:	2b00      	cmp	r3, #0
 800a158:	d04c      	beq.n	800a1f4 <_strtod_l+0xa3c>
 800a15a:	4b95      	ldr	r3, [pc, #596]	; (800a3b0 <_strtod_l+0xbf8>)
 800a15c:	2200      	movs	r2, #0
 800a15e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a162:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a3b0 <_strtod_l+0xbf8>
 800a166:	f04f 0800 	mov.w	r8, #0
 800a16a:	4b92      	ldr	r3, [pc, #584]	; (800a3b4 <_strtod_l+0xbfc>)
 800a16c:	403b      	ands	r3, r7
 800a16e:	9311      	str	r3, [sp, #68]	; 0x44
 800a170:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a172:	4b91      	ldr	r3, [pc, #580]	; (800a3b8 <_strtod_l+0xc00>)
 800a174:	429a      	cmp	r2, r3
 800a176:	f040 80b2 	bne.w	800a2de <_strtod_l+0xb26>
 800a17a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a17e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a182:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a186:	ec4b ab10 	vmov	d0, sl, fp
 800a18a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800a18e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a192:	f001 f88f 	bl	800b2b4 <__ulp>
 800a196:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a19a:	ec53 2b10 	vmov	r2, r3, d0
 800a19e:	f7f6 fa33 	bl	8000608 <__aeabi_dmul>
 800a1a2:	4652      	mov	r2, sl
 800a1a4:	465b      	mov	r3, fp
 800a1a6:	f7f6 f879 	bl	800029c <__adddf3>
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	4981      	ldr	r1, [pc, #516]	; (800a3b4 <_strtod_l+0xbfc>)
 800a1ae:	4a83      	ldr	r2, [pc, #524]	; (800a3bc <_strtod_l+0xc04>)
 800a1b0:	4019      	ands	r1, r3
 800a1b2:	4291      	cmp	r1, r2
 800a1b4:	4682      	mov	sl, r0
 800a1b6:	d95e      	bls.n	800a276 <_strtod_l+0xabe>
 800a1b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1ba:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d103      	bne.n	800a1ca <_strtod_l+0xa12>
 800a1c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	f43f ad43 	beq.w	8009c50 <_strtod_l+0x498>
 800a1ca:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a3c8 <_strtod_l+0xc10>
 800a1ce:	f04f 3aff 	mov.w	sl, #4294967295
 800a1d2:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	f000 fd41 	bl	800ac5c <_Bfree>
 800a1da:	9907      	ldr	r1, [sp, #28]
 800a1dc:	4620      	mov	r0, r4
 800a1de:	f000 fd3d 	bl	800ac5c <_Bfree>
 800a1e2:	4631      	mov	r1, r6
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	f000 fd39 	bl	800ac5c <_Bfree>
 800a1ea:	4629      	mov	r1, r5
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f000 fd35 	bl	800ac5c <_Bfree>
 800a1f2:	e613      	b.n	8009e1c <_strtod_l+0x664>
 800a1f4:	f1ba 0f00 	cmp.w	sl, #0
 800a1f8:	d11b      	bne.n	800a232 <_strtod_l+0xa7a>
 800a1fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1fe:	b9f3      	cbnz	r3, 800a23e <_strtod_l+0xa86>
 800a200:	4b6b      	ldr	r3, [pc, #428]	; (800a3b0 <_strtod_l+0xbf8>)
 800a202:	2200      	movs	r2, #0
 800a204:	4640      	mov	r0, r8
 800a206:	4649      	mov	r1, r9
 800a208:	f7f6 fc70 	bl	8000aec <__aeabi_dcmplt>
 800a20c:	b9d0      	cbnz	r0, 800a244 <_strtod_l+0xa8c>
 800a20e:	4640      	mov	r0, r8
 800a210:	4649      	mov	r1, r9
 800a212:	4b6b      	ldr	r3, [pc, #428]	; (800a3c0 <_strtod_l+0xc08>)
 800a214:	2200      	movs	r2, #0
 800a216:	f7f6 f9f7 	bl	8000608 <__aeabi_dmul>
 800a21a:	4680      	mov	r8, r0
 800a21c:	4689      	mov	r9, r1
 800a21e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a222:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800a226:	931b      	str	r3, [sp, #108]	; 0x6c
 800a228:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a22c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a230:	e79b      	b.n	800a16a <_strtod_l+0x9b2>
 800a232:	f1ba 0f01 	cmp.w	sl, #1
 800a236:	d102      	bne.n	800a23e <_strtod_l+0xa86>
 800a238:	2f00      	cmp	r7, #0
 800a23a:	f43f ad7e 	beq.w	8009d3a <_strtod_l+0x582>
 800a23e:	4b61      	ldr	r3, [pc, #388]	; (800a3c4 <_strtod_l+0xc0c>)
 800a240:	2200      	movs	r2, #0
 800a242:	e78c      	b.n	800a15e <_strtod_l+0x9a6>
 800a244:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a3c0 <_strtod_l+0xc08>
 800a248:	f04f 0800 	mov.w	r8, #0
 800a24c:	e7e7      	b.n	800a21e <_strtod_l+0xa66>
 800a24e:	4b5c      	ldr	r3, [pc, #368]	; (800a3c0 <_strtod_l+0xc08>)
 800a250:	4640      	mov	r0, r8
 800a252:	4649      	mov	r1, r9
 800a254:	2200      	movs	r2, #0
 800a256:	f7f6 f9d7 	bl	8000608 <__aeabi_dmul>
 800a25a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a25c:	4680      	mov	r8, r0
 800a25e:	4689      	mov	r9, r1
 800a260:	b933      	cbnz	r3, 800a270 <_strtod_l+0xab8>
 800a262:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a266:	9012      	str	r0, [sp, #72]	; 0x48
 800a268:	9313      	str	r3, [sp, #76]	; 0x4c
 800a26a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a26e:	e7dd      	b.n	800a22c <_strtod_l+0xa74>
 800a270:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800a274:	e7f9      	b.n	800a26a <_strtod_l+0xab2>
 800a276:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a27a:	9b04      	ldr	r3, [sp, #16]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d1a8      	bne.n	800a1d2 <_strtod_l+0xa1a>
 800a280:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a284:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a286:	0d1b      	lsrs	r3, r3, #20
 800a288:	051b      	lsls	r3, r3, #20
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d1a1      	bne.n	800a1d2 <_strtod_l+0xa1a>
 800a28e:	4640      	mov	r0, r8
 800a290:	4649      	mov	r1, r9
 800a292:	f7f6 fc8b 	bl	8000bac <__aeabi_d2lz>
 800a296:	f7f6 f989 	bl	80005ac <__aeabi_l2d>
 800a29a:	4602      	mov	r2, r0
 800a29c:	460b      	mov	r3, r1
 800a29e:	4640      	mov	r0, r8
 800a2a0:	4649      	mov	r1, r9
 800a2a2:	f7f5 fff9 	bl	8000298 <__aeabi_dsub>
 800a2a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a2a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2ac:	ea43 030a 	orr.w	r3, r3, sl
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	4680      	mov	r8, r0
 800a2b4:	4689      	mov	r9, r1
 800a2b6:	d053      	beq.n	800a360 <_strtod_l+0xba8>
 800a2b8:	a335      	add	r3, pc, #212	; (adr r3, 800a390 <_strtod_l+0xbd8>)
 800a2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2be:	f7f6 fc15 	bl	8000aec <__aeabi_dcmplt>
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	f47f acce 	bne.w	8009c64 <_strtod_l+0x4ac>
 800a2c8:	a333      	add	r3, pc, #204	; (adr r3, 800a398 <_strtod_l+0xbe0>)
 800a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ce:	4640      	mov	r0, r8
 800a2d0:	4649      	mov	r1, r9
 800a2d2:	f7f6 fc29 	bl	8000b28 <__aeabi_dcmpgt>
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	f43f af7b 	beq.w	800a1d2 <_strtod_l+0xa1a>
 800a2dc:	e4c2      	b.n	8009c64 <_strtod_l+0x4ac>
 800a2de:	9b04      	ldr	r3, [sp, #16]
 800a2e0:	b333      	cbz	r3, 800a330 <_strtod_l+0xb78>
 800a2e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a2e8:	d822      	bhi.n	800a330 <_strtod_l+0xb78>
 800a2ea:	a32d      	add	r3, pc, #180	; (adr r3, 800a3a0 <_strtod_l+0xbe8>)
 800a2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f0:	4640      	mov	r0, r8
 800a2f2:	4649      	mov	r1, r9
 800a2f4:	f7f6 fc04 	bl	8000b00 <__aeabi_dcmple>
 800a2f8:	b1a0      	cbz	r0, 800a324 <_strtod_l+0xb6c>
 800a2fa:	4649      	mov	r1, r9
 800a2fc:	4640      	mov	r0, r8
 800a2fe:	f7f6 fc1d 	bl	8000b3c <__aeabi_d2uiz>
 800a302:	2801      	cmp	r0, #1
 800a304:	bf38      	it	cc
 800a306:	2001      	movcc	r0, #1
 800a308:	f7f6 f904 	bl	8000514 <__aeabi_ui2d>
 800a30c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a30e:	4680      	mov	r8, r0
 800a310:	4689      	mov	r9, r1
 800a312:	bb13      	cbnz	r3, 800a35a <_strtod_l+0xba2>
 800a314:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a318:	9014      	str	r0, [sp, #80]	; 0x50
 800a31a:	9315      	str	r3, [sp, #84]	; 0x54
 800a31c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a320:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a324:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a326:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a328:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a32c:	1a9b      	subs	r3, r3, r2
 800a32e:	930d      	str	r3, [sp, #52]	; 0x34
 800a330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a334:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a338:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a33c:	f000 ffba 	bl	800b2b4 <__ulp>
 800a340:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a344:	ec53 2b10 	vmov	r2, r3, d0
 800a348:	f7f6 f95e 	bl	8000608 <__aeabi_dmul>
 800a34c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a350:	f7f5 ffa4 	bl	800029c <__adddf3>
 800a354:	4682      	mov	sl, r0
 800a356:	468b      	mov	fp, r1
 800a358:	e78f      	b.n	800a27a <_strtod_l+0xac2>
 800a35a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800a35e:	e7dd      	b.n	800a31c <_strtod_l+0xb64>
 800a360:	a311      	add	r3, pc, #68	; (adr r3, 800a3a8 <_strtod_l+0xbf0>)
 800a362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a366:	f7f6 fbc1 	bl	8000aec <__aeabi_dcmplt>
 800a36a:	e7b4      	b.n	800a2d6 <_strtod_l+0xb1e>
 800a36c:	2300      	movs	r3, #0
 800a36e:	930e      	str	r3, [sp, #56]	; 0x38
 800a370:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a372:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a374:	6013      	str	r3, [r2, #0]
 800a376:	f7ff ba65 	b.w	8009844 <_strtod_l+0x8c>
 800a37a:	2b65      	cmp	r3, #101	; 0x65
 800a37c:	f43f ab5d 	beq.w	8009a3a <_strtod_l+0x282>
 800a380:	2b45      	cmp	r3, #69	; 0x45
 800a382:	f43f ab5a 	beq.w	8009a3a <_strtod_l+0x282>
 800a386:	2201      	movs	r2, #1
 800a388:	f7ff bb92 	b.w	8009ab0 <_strtod_l+0x2f8>
 800a38c:	f3af 8000 	nop.w
 800a390:	94a03595 	.word	0x94a03595
 800a394:	3fdfffff 	.word	0x3fdfffff
 800a398:	35afe535 	.word	0x35afe535
 800a39c:	3fe00000 	.word	0x3fe00000
 800a3a0:	ffc00000 	.word	0xffc00000
 800a3a4:	41dfffff 	.word	0x41dfffff
 800a3a8:	94a03595 	.word	0x94a03595
 800a3ac:	3fcfffff 	.word	0x3fcfffff
 800a3b0:	3ff00000 	.word	0x3ff00000
 800a3b4:	7ff00000 	.word	0x7ff00000
 800a3b8:	7fe00000 	.word	0x7fe00000
 800a3bc:	7c9fffff 	.word	0x7c9fffff
 800a3c0:	3fe00000 	.word	0x3fe00000
 800a3c4:	bff00000 	.word	0xbff00000
 800a3c8:	7fefffff 	.word	0x7fefffff

0800a3cc <strtod>:
 800a3cc:	460a      	mov	r2, r1
 800a3ce:	4601      	mov	r1, r0
 800a3d0:	4802      	ldr	r0, [pc, #8]	; (800a3dc <strtod+0x10>)
 800a3d2:	4b03      	ldr	r3, [pc, #12]	; (800a3e0 <strtod+0x14>)
 800a3d4:	6800      	ldr	r0, [r0, #0]
 800a3d6:	f7ff b9ef 	b.w	80097b8 <_strtod_l>
 800a3da:	bf00      	nop
 800a3dc:	20000018 	.word	0x20000018
 800a3e0:	20000080 	.word	0x20000080

0800a3e4 <__strtok_r>:
 800a3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3e6:	b908      	cbnz	r0, 800a3ec <__strtok_r+0x8>
 800a3e8:	6810      	ldr	r0, [r2, #0]
 800a3ea:	b188      	cbz	r0, 800a410 <__strtok_r+0x2c>
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a3f4:	460f      	mov	r7, r1
 800a3f6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a3fa:	b91e      	cbnz	r6, 800a404 <__strtok_r+0x20>
 800a3fc:	b965      	cbnz	r5, 800a418 <__strtok_r+0x34>
 800a3fe:	6015      	str	r5, [r2, #0]
 800a400:	4628      	mov	r0, r5
 800a402:	e005      	b.n	800a410 <__strtok_r+0x2c>
 800a404:	42b5      	cmp	r5, r6
 800a406:	d1f6      	bne.n	800a3f6 <__strtok_r+0x12>
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d1f0      	bne.n	800a3ee <__strtok_r+0xa>
 800a40c:	6014      	str	r4, [r2, #0]
 800a40e:	7003      	strb	r3, [r0, #0]
 800a410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a412:	461c      	mov	r4, r3
 800a414:	e00c      	b.n	800a430 <__strtok_r+0x4c>
 800a416:	b915      	cbnz	r5, 800a41e <__strtok_r+0x3a>
 800a418:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a41c:	460e      	mov	r6, r1
 800a41e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a422:	42ab      	cmp	r3, r5
 800a424:	d1f7      	bne.n	800a416 <__strtok_r+0x32>
 800a426:	2b00      	cmp	r3, #0
 800a428:	d0f3      	beq.n	800a412 <__strtok_r+0x2e>
 800a42a:	2300      	movs	r3, #0
 800a42c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a430:	6014      	str	r4, [r2, #0]
 800a432:	e7ed      	b.n	800a410 <__strtok_r+0x2c>

0800a434 <strtok_r>:
 800a434:	2301      	movs	r3, #1
 800a436:	f7ff bfd5 	b.w	800a3e4 <__strtok_r>
	...

0800a43c <__utoa>:
 800a43c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a43e:	4c1f      	ldr	r4, [pc, #124]	; (800a4bc <__utoa+0x80>)
 800a440:	b08b      	sub	sp, #44	; 0x2c
 800a442:	4605      	mov	r5, r0
 800a444:	460b      	mov	r3, r1
 800a446:	466e      	mov	r6, sp
 800a448:	f104 0c20 	add.w	ip, r4, #32
 800a44c:	6820      	ldr	r0, [r4, #0]
 800a44e:	6861      	ldr	r1, [r4, #4]
 800a450:	4637      	mov	r7, r6
 800a452:	c703      	stmia	r7!, {r0, r1}
 800a454:	3408      	adds	r4, #8
 800a456:	4564      	cmp	r4, ip
 800a458:	463e      	mov	r6, r7
 800a45a:	d1f7      	bne.n	800a44c <__utoa+0x10>
 800a45c:	7921      	ldrb	r1, [r4, #4]
 800a45e:	7139      	strb	r1, [r7, #4]
 800a460:	1e91      	subs	r1, r2, #2
 800a462:	6820      	ldr	r0, [r4, #0]
 800a464:	6038      	str	r0, [r7, #0]
 800a466:	2922      	cmp	r1, #34	; 0x22
 800a468:	f04f 0100 	mov.w	r1, #0
 800a46c:	d904      	bls.n	800a478 <__utoa+0x3c>
 800a46e:	7019      	strb	r1, [r3, #0]
 800a470:	460b      	mov	r3, r1
 800a472:	4618      	mov	r0, r3
 800a474:	b00b      	add	sp, #44	; 0x2c
 800a476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a478:	1e58      	subs	r0, r3, #1
 800a47a:	4684      	mov	ip, r0
 800a47c:	fbb5 f7f2 	udiv	r7, r5, r2
 800a480:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800a484:	fb02 5617 	mls	r6, r2, r7, r5
 800a488:	4476      	add	r6, lr
 800a48a:	460c      	mov	r4, r1
 800a48c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800a490:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800a494:	462e      	mov	r6, r5
 800a496:	42b2      	cmp	r2, r6
 800a498:	f101 0101 	add.w	r1, r1, #1
 800a49c:	463d      	mov	r5, r7
 800a49e:	d9ed      	bls.n	800a47c <__utoa+0x40>
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	545a      	strb	r2, [r3, r1]
 800a4a4:	1919      	adds	r1, r3, r4
 800a4a6:	1aa5      	subs	r5, r4, r2
 800a4a8:	42aa      	cmp	r2, r5
 800a4aa:	dae2      	bge.n	800a472 <__utoa+0x36>
 800a4ac:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800a4b0:	780e      	ldrb	r6, [r1, #0]
 800a4b2:	7006      	strb	r6, [r0, #0]
 800a4b4:	3201      	adds	r2, #1
 800a4b6:	f801 5901 	strb.w	r5, [r1], #-1
 800a4ba:	e7f4      	b.n	800a4a6 <__utoa+0x6a>
 800a4bc:	0800c9e8 	.word	0x0800c9e8

0800a4c0 <rshift>:
 800a4c0:	6903      	ldr	r3, [r0, #16]
 800a4c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a4c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a4ce:	f100 0414 	add.w	r4, r0, #20
 800a4d2:	dd45      	ble.n	800a560 <rshift+0xa0>
 800a4d4:	f011 011f 	ands.w	r1, r1, #31
 800a4d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a4dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a4e0:	d10c      	bne.n	800a4fc <rshift+0x3c>
 800a4e2:	f100 0710 	add.w	r7, r0, #16
 800a4e6:	4629      	mov	r1, r5
 800a4e8:	42b1      	cmp	r1, r6
 800a4ea:	d334      	bcc.n	800a556 <rshift+0x96>
 800a4ec:	1a9b      	subs	r3, r3, r2
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	1eea      	subs	r2, r5, #3
 800a4f2:	4296      	cmp	r6, r2
 800a4f4:	bf38      	it	cc
 800a4f6:	2300      	movcc	r3, #0
 800a4f8:	4423      	add	r3, r4
 800a4fa:	e015      	b.n	800a528 <rshift+0x68>
 800a4fc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a500:	f1c1 0820 	rsb	r8, r1, #32
 800a504:	40cf      	lsrs	r7, r1
 800a506:	f105 0e04 	add.w	lr, r5, #4
 800a50a:	46a1      	mov	r9, r4
 800a50c:	4576      	cmp	r6, lr
 800a50e:	46f4      	mov	ip, lr
 800a510:	d815      	bhi.n	800a53e <rshift+0x7e>
 800a512:	1a9b      	subs	r3, r3, r2
 800a514:	009a      	lsls	r2, r3, #2
 800a516:	3a04      	subs	r2, #4
 800a518:	3501      	adds	r5, #1
 800a51a:	42ae      	cmp	r6, r5
 800a51c:	bf38      	it	cc
 800a51e:	2200      	movcc	r2, #0
 800a520:	18a3      	adds	r3, r4, r2
 800a522:	50a7      	str	r7, [r4, r2]
 800a524:	b107      	cbz	r7, 800a528 <rshift+0x68>
 800a526:	3304      	adds	r3, #4
 800a528:	1b1a      	subs	r2, r3, r4
 800a52a:	42a3      	cmp	r3, r4
 800a52c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a530:	bf08      	it	eq
 800a532:	2300      	moveq	r3, #0
 800a534:	6102      	str	r2, [r0, #16]
 800a536:	bf08      	it	eq
 800a538:	6143      	streq	r3, [r0, #20]
 800a53a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a53e:	f8dc c000 	ldr.w	ip, [ip]
 800a542:	fa0c fc08 	lsl.w	ip, ip, r8
 800a546:	ea4c 0707 	orr.w	r7, ip, r7
 800a54a:	f849 7b04 	str.w	r7, [r9], #4
 800a54e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a552:	40cf      	lsrs	r7, r1
 800a554:	e7da      	b.n	800a50c <rshift+0x4c>
 800a556:	f851 cb04 	ldr.w	ip, [r1], #4
 800a55a:	f847 cf04 	str.w	ip, [r7, #4]!
 800a55e:	e7c3      	b.n	800a4e8 <rshift+0x28>
 800a560:	4623      	mov	r3, r4
 800a562:	e7e1      	b.n	800a528 <rshift+0x68>

0800a564 <__hexdig_fun>:
 800a564:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a568:	2b09      	cmp	r3, #9
 800a56a:	d802      	bhi.n	800a572 <__hexdig_fun+0xe>
 800a56c:	3820      	subs	r0, #32
 800a56e:	b2c0      	uxtb	r0, r0
 800a570:	4770      	bx	lr
 800a572:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a576:	2b05      	cmp	r3, #5
 800a578:	d801      	bhi.n	800a57e <__hexdig_fun+0x1a>
 800a57a:	3847      	subs	r0, #71	; 0x47
 800a57c:	e7f7      	b.n	800a56e <__hexdig_fun+0xa>
 800a57e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a582:	2b05      	cmp	r3, #5
 800a584:	d801      	bhi.n	800a58a <__hexdig_fun+0x26>
 800a586:	3827      	subs	r0, #39	; 0x27
 800a588:	e7f1      	b.n	800a56e <__hexdig_fun+0xa>
 800a58a:	2000      	movs	r0, #0
 800a58c:	4770      	bx	lr
	...

0800a590 <__gethex>:
 800a590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a594:	ed2d 8b02 	vpush	{d8}
 800a598:	b089      	sub	sp, #36	; 0x24
 800a59a:	ee08 0a10 	vmov	s16, r0
 800a59e:	9304      	str	r3, [sp, #16]
 800a5a0:	4bbc      	ldr	r3, [pc, #752]	; (800a894 <__gethex+0x304>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	9301      	str	r3, [sp, #4]
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	468b      	mov	fp, r1
 800a5aa:	4690      	mov	r8, r2
 800a5ac:	f7f5 fe18 	bl	80001e0 <strlen>
 800a5b0:	9b01      	ldr	r3, [sp, #4]
 800a5b2:	f8db 2000 	ldr.w	r2, [fp]
 800a5b6:	4403      	add	r3, r0
 800a5b8:	4682      	mov	sl, r0
 800a5ba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a5be:	9305      	str	r3, [sp, #20]
 800a5c0:	1c93      	adds	r3, r2, #2
 800a5c2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a5c6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a5ca:	32fe      	adds	r2, #254	; 0xfe
 800a5cc:	18d1      	adds	r1, r2, r3
 800a5ce:	461f      	mov	r7, r3
 800a5d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a5d4:	9100      	str	r1, [sp, #0]
 800a5d6:	2830      	cmp	r0, #48	; 0x30
 800a5d8:	d0f8      	beq.n	800a5cc <__gethex+0x3c>
 800a5da:	f7ff ffc3 	bl	800a564 <__hexdig_fun>
 800a5de:	4604      	mov	r4, r0
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	d13a      	bne.n	800a65a <__gethex+0xca>
 800a5e4:	9901      	ldr	r1, [sp, #4]
 800a5e6:	4652      	mov	r2, sl
 800a5e8:	4638      	mov	r0, r7
 800a5ea:	f000 ffc9 	bl	800b580 <strncmp>
 800a5ee:	4605      	mov	r5, r0
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	d168      	bne.n	800a6c6 <__gethex+0x136>
 800a5f4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a5f8:	eb07 060a 	add.w	r6, r7, sl
 800a5fc:	f7ff ffb2 	bl	800a564 <__hexdig_fun>
 800a600:	2800      	cmp	r0, #0
 800a602:	d062      	beq.n	800a6ca <__gethex+0x13a>
 800a604:	4633      	mov	r3, r6
 800a606:	7818      	ldrb	r0, [r3, #0]
 800a608:	2830      	cmp	r0, #48	; 0x30
 800a60a:	461f      	mov	r7, r3
 800a60c:	f103 0301 	add.w	r3, r3, #1
 800a610:	d0f9      	beq.n	800a606 <__gethex+0x76>
 800a612:	f7ff ffa7 	bl	800a564 <__hexdig_fun>
 800a616:	2301      	movs	r3, #1
 800a618:	fab0 f480 	clz	r4, r0
 800a61c:	0964      	lsrs	r4, r4, #5
 800a61e:	4635      	mov	r5, r6
 800a620:	9300      	str	r3, [sp, #0]
 800a622:	463a      	mov	r2, r7
 800a624:	4616      	mov	r6, r2
 800a626:	3201      	adds	r2, #1
 800a628:	7830      	ldrb	r0, [r6, #0]
 800a62a:	f7ff ff9b 	bl	800a564 <__hexdig_fun>
 800a62e:	2800      	cmp	r0, #0
 800a630:	d1f8      	bne.n	800a624 <__gethex+0x94>
 800a632:	9901      	ldr	r1, [sp, #4]
 800a634:	4652      	mov	r2, sl
 800a636:	4630      	mov	r0, r6
 800a638:	f000 ffa2 	bl	800b580 <strncmp>
 800a63c:	b980      	cbnz	r0, 800a660 <__gethex+0xd0>
 800a63e:	b94d      	cbnz	r5, 800a654 <__gethex+0xc4>
 800a640:	eb06 050a 	add.w	r5, r6, sl
 800a644:	462a      	mov	r2, r5
 800a646:	4616      	mov	r6, r2
 800a648:	3201      	adds	r2, #1
 800a64a:	7830      	ldrb	r0, [r6, #0]
 800a64c:	f7ff ff8a 	bl	800a564 <__hexdig_fun>
 800a650:	2800      	cmp	r0, #0
 800a652:	d1f8      	bne.n	800a646 <__gethex+0xb6>
 800a654:	1bad      	subs	r5, r5, r6
 800a656:	00ad      	lsls	r5, r5, #2
 800a658:	e004      	b.n	800a664 <__gethex+0xd4>
 800a65a:	2400      	movs	r4, #0
 800a65c:	4625      	mov	r5, r4
 800a65e:	e7e0      	b.n	800a622 <__gethex+0x92>
 800a660:	2d00      	cmp	r5, #0
 800a662:	d1f7      	bne.n	800a654 <__gethex+0xc4>
 800a664:	7833      	ldrb	r3, [r6, #0]
 800a666:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a66a:	2b50      	cmp	r3, #80	; 0x50
 800a66c:	d13b      	bne.n	800a6e6 <__gethex+0x156>
 800a66e:	7873      	ldrb	r3, [r6, #1]
 800a670:	2b2b      	cmp	r3, #43	; 0x2b
 800a672:	d02c      	beq.n	800a6ce <__gethex+0x13e>
 800a674:	2b2d      	cmp	r3, #45	; 0x2d
 800a676:	d02e      	beq.n	800a6d6 <__gethex+0x146>
 800a678:	1c71      	adds	r1, r6, #1
 800a67a:	f04f 0900 	mov.w	r9, #0
 800a67e:	7808      	ldrb	r0, [r1, #0]
 800a680:	f7ff ff70 	bl	800a564 <__hexdig_fun>
 800a684:	1e43      	subs	r3, r0, #1
 800a686:	b2db      	uxtb	r3, r3
 800a688:	2b18      	cmp	r3, #24
 800a68a:	d82c      	bhi.n	800a6e6 <__gethex+0x156>
 800a68c:	f1a0 0210 	sub.w	r2, r0, #16
 800a690:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a694:	f7ff ff66 	bl	800a564 <__hexdig_fun>
 800a698:	1e43      	subs	r3, r0, #1
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	2b18      	cmp	r3, #24
 800a69e:	d91d      	bls.n	800a6dc <__gethex+0x14c>
 800a6a0:	f1b9 0f00 	cmp.w	r9, #0
 800a6a4:	d000      	beq.n	800a6a8 <__gethex+0x118>
 800a6a6:	4252      	negs	r2, r2
 800a6a8:	4415      	add	r5, r2
 800a6aa:	f8cb 1000 	str.w	r1, [fp]
 800a6ae:	b1e4      	cbz	r4, 800a6ea <__gethex+0x15a>
 800a6b0:	9b00      	ldr	r3, [sp, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	bf14      	ite	ne
 800a6b6:	2700      	movne	r7, #0
 800a6b8:	2706      	moveq	r7, #6
 800a6ba:	4638      	mov	r0, r7
 800a6bc:	b009      	add	sp, #36	; 0x24
 800a6be:	ecbd 8b02 	vpop	{d8}
 800a6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c6:	463e      	mov	r6, r7
 800a6c8:	4625      	mov	r5, r4
 800a6ca:	2401      	movs	r4, #1
 800a6cc:	e7ca      	b.n	800a664 <__gethex+0xd4>
 800a6ce:	f04f 0900 	mov.w	r9, #0
 800a6d2:	1cb1      	adds	r1, r6, #2
 800a6d4:	e7d3      	b.n	800a67e <__gethex+0xee>
 800a6d6:	f04f 0901 	mov.w	r9, #1
 800a6da:	e7fa      	b.n	800a6d2 <__gethex+0x142>
 800a6dc:	230a      	movs	r3, #10
 800a6de:	fb03 0202 	mla	r2, r3, r2, r0
 800a6e2:	3a10      	subs	r2, #16
 800a6e4:	e7d4      	b.n	800a690 <__gethex+0x100>
 800a6e6:	4631      	mov	r1, r6
 800a6e8:	e7df      	b.n	800a6aa <__gethex+0x11a>
 800a6ea:	1bf3      	subs	r3, r6, r7
 800a6ec:	3b01      	subs	r3, #1
 800a6ee:	4621      	mov	r1, r4
 800a6f0:	2b07      	cmp	r3, #7
 800a6f2:	dc0b      	bgt.n	800a70c <__gethex+0x17c>
 800a6f4:	ee18 0a10 	vmov	r0, s16
 800a6f8:	f000 fa70 	bl	800abdc <_Balloc>
 800a6fc:	4604      	mov	r4, r0
 800a6fe:	b940      	cbnz	r0, 800a712 <__gethex+0x182>
 800a700:	4b65      	ldr	r3, [pc, #404]	; (800a898 <__gethex+0x308>)
 800a702:	4602      	mov	r2, r0
 800a704:	21de      	movs	r1, #222	; 0xde
 800a706:	4865      	ldr	r0, [pc, #404]	; (800a89c <__gethex+0x30c>)
 800a708:	f000 ff5a 	bl	800b5c0 <__assert_func>
 800a70c:	3101      	adds	r1, #1
 800a70e:	105b      	asrs	r3, r3, #1
 800a710:	e7ee      	b.n	800a6f0 <__gethex+0x160>
 800a712:	f100 0914 	add.w	r9, r0, #20
 800a716:	f04f 0b00 	mov.w	fp, #0
 800a71a:	f1ca 0301 	rsb	r3, sl, #1
 800a71e:	f8cd 9008 	str.w	r9, [sp, #8]
 800a722:	f8cd b000 	str.w	fp, [sp]
 800a726:	9306      	str	r3, [sp, #24]
 800a728:	42b7      	cmp	r7, r6
 800a72a:	d340      	bcc.n	800a7ae <__gethex+0x21e>
 800a72c:	9802      	ldr	r0, [sp, #8]
 800a72e:	9b00      	ldr	r3, [sp, #0]
 800a730:	f840 3b04 	str.w	r3, [r0], #4
 800a734:	eba0 0009 	sub.w	r0, r0, r9
 800a738:	1080      	asrs	r0, r0, #2
 800a73a:	0146      	lsls	r6, r0, #5
 800a73c:	6120      	str	r0, [r4, #16]
 800a73e:	4618      	mov	r0, r3
 800a740:	f000 fb42 	bl	800adc8 <__hi0bits>
 800a744:	1a30      	subs	r0, r6, r0
 800a746:	f8d8 6000 	ldr.w	r6, [r8]
 800a74a:	42b0      	cmp	r0, r6
 800a74c:	dd63      	ble.n	800a816 <__gethex+0x286>
 800a74e:	1b87      	subs	r7, r0, r6
 800a750:	4639      	mov	r1, r7
 800a752:	4620      	mov	r0, r4
 800a754:	f000 fedc 	bl	800b510 <__any_on>
 800a758:	4682      	mov	sl, r0
 800a75a:	b1a8      	cbz	r0, 800a788 <__gethex+0x1f8>
 800a75c:	1e7b      	subs	r3, r7, #1
 800a75e:	1159      	asrs	r1, r3, #5
 800a760:	f003 021f 	and.w	r2, r3, #31
 800a764:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a768:	f04f 0a01 	mov.w	sl, #1
 800a76c:	fa0a f202 	lsl.w	r2, sl, r2
 800a770:	420a      	tst	r2, r1
 800a772:	d009      	beq.n	800a788 <__gethex+0x1f8>
 800a774:	4553      	cmp	r3, sl
 800a776:	dd05      	ble.n	800a784 <__gethex+0x1f4>
 800a778:	1eb9      	subs	r1, r7, #2
 800a77a:	4620      	mov	r0, r4
 800a77c:	f000 fec8 	bl	800b510 <__any_on>
 800a780:	2800      	cmp	r0, #0
 800a782:	d145      	bne.n	800a810 <__gethex+0x280>
 800a784:	f04f 0a02 	mov.w	sl, #2
 800a788:	4639      	mov	r1, r7
 800a78a:	4620      	mov	r0, r4
 800a78c:	f7ff fe98 	bl	800a4c0 <rshift>
 800a790:	443d      	add	r5, r7
 800a792:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a796:	42ab      	cmp	r3, r5
 800a798:	da4c      	bge.n	800a834 <__gethex+0x2a4>
 800a79a:	ee18 0a10 	vmov	r0, s16
 800a79e:	4621      	mov	r1, r4
 800a7a0:	f000 fa5c 	bl	800ac5c <_Bfree>
 800a7a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	6013      	str	r3, [r2, #0]
 800a7aa:	27a3      	movs	r7, #163	; 0xa3
 800a7ac:	e785      	b.n	800a6ba <__gethex+0x12a>
 800a7ae:	1e73      	subs	r3, r6, #1
 800a7b0:	9a05      	ldr	r2, [sp, #20]
 800a7b2:	9303      	str	r3, [sp, #12]
 800a7b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d019      	beq.n	800a7f0 <__gethex+0x260>
 800a7bc:	f1bb 0f20 	cmp.w	fp, #32
 800a7c0:	d107      	bne.n	800a7d2 <__gethex+0x242>
 800a7c2:	9b02      	ldr	r3, [sp, #8]
 800a7c4:	9a00      	ldr	r2, [sp, #0]
 800a7c6:	f843 2b04 	str.w	r2, [r3], #4
 800a7ca:	9302      	str	r3, [sp, #8]
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	9300      	str	r3, [sp, #0]
 800a7d0:	469b      	mov	fp, r3
 800a7d2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a7d6:	f7ff fec5 	bl	800a564 <__hexdig_fun>
 800a7da:	9b00      	ldr	r3, [sp, #0]
 800a7dc:	f000 000f 	and.w	r0, r0, #15
 800a7e0:	fa00 f00b 	lsl.w	r0, r0, fp
 800a7e4:	4303      	orrs	r3, r0
 800a7e6:	9300      	str	r3, [sp, #0]
 800a7e8:	f10b 0b04 	add.w	fp, fp, #4
 800a7ec:	9b03      	ldr	r3, [sp, #12]
 800a7ee:	e00d      	b.n	800a80c <__gethex+0x27c>
 800a7f0:	9b03      	ldr	r3, [sp, #12]
 800a7f2:	9a06      	ldr	r2, [sp, #24]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	42bb      	cmp	r3, r7
 800a7f8:	d3e0      	bcc.n	800a7bc <__gethex+0x22c>
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	9901      	ldr	r1, [sp, #4]
 800a7fe:	9307      	str	r3, [sp, #28]
 800a800:	4652      	mov	r2, sl
 800a802:	f000 febd 	bl	800b580 <strncmp>
 800a806:	9b07      	ldr	r3, [sp, #28]
 800a808:	2800      	cmp	r0, #0
 800a80a:	d1d7      	bne.n	800a7bc <__gethex+0x22c>
 800a80c:	461e      	mov	r6, r3
 800a80e:	e78b      	b.n	800a728 <__gethex+0x198>
 800a810:	f04f 0a03 	mov.w	sl, #3
 800a814:	e7b8      	b.n	800a788 <__gethex+0x1f8>
 800a816:	da0a      	bge.n	800a82e <__gethex+0x29e>
 800a818:	1a37      	subs	r7, r6, r0
 800a81a:	4621      	mov	r1, r4
 800a81c:	ee18 0a10 	vmov	r0, s16
 800a820:	463a      	mov	r2, r7
 800a822:	f000 fc37 	bl	800b094 <__lshift>
 800a826:	1bed      	subs	r5, r5, r7
 800a828:	4604      	mov	r4, r0
 800a82a:	f100 0914 	add.w	r9, r0, #20
 800a82e:	f04f 0a00 	mov.w	sl, #0
 800a832:	e7ae      	b.n	800a792 <__gethex+0x202>
 800a834:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a838:	42a8      	cmp	r0, r5
 800a83a:	dd72      	ble.n	800a922 <__gethex+0x392>
 800a83c:	1b45      	subs	r5, r0, r5
 800a83e:	42ae      	cmp	r6, r5
 800a840:	dc36      	bgt.n	800a8b0 <__gethex+0x320>
 800a842:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a846:	2b02      	cmp	r3, #2
 800a848:	d02a      	beq.n	800a8a0 <__gethex+0x310>
 800a84a:	2b03      	cmp	r3, #3
 800a84c:	d02c      	beq.n	800a8a8 <__gethex+0x318>
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d115      	bne.n	800a87e <__gethex+0x2ee>
 800a852:	42ae      	cmp	r6, r5
 800a854:	d113      	bne.n	800a87e <__gethex+0x2ee>
 800a856:	2e01      	cmp	r6, #1
 800a858:	d10b      	bne.n	800a872 <__gethex+0x2e2>
 800a85a:	9a04      	ldr	r2, [sp, #16]
 800a85c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a860:	6013      	str	r3, [r2, #0]
 800a862:	2301      	movs	r3, #1
 800a864:	6123      	str	r3, [r4, #16]
 800a866:	f8c9 3000 	str.w	r3, [r9]
 800a86a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a86c:	2762      	movs	r7, #98	; 0x62
 800a86e:	601c      	str	r4, [r3, #0]
 800a870:	e723      	b.n	800a6ba <__gethex+0x12a>
 800a872:	1e71      	subs	r1, r6, #1
 800a874:	4620      	mov	r0, r4
 800a876:	f000 fe4b 	bl	800b510 <__any_on>
 800a87a:	2800      	cmp	r0, #0
 800a87c:	d1ed      	bne.n	800a85a <__gethex+0x2ca>
 800a87e:	ee18 0a10 	vmov	r0, s16
 800a882:	4621      	mov	r1, r4
 800a884:	f000 f9ea 	bl	800ac5c <_Bfree>
 800a888:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a88a:	2300      	movs	r3, #0
 800a88c:	6013      	str	r3, [r2, #0]
 800a88e:	2750      	movs	r7, #80	; 0x50
 800a890:	e713      	b.n	800a6ba <__gethex+0x12a>
 800a892:	bf00      	nop
 800a894:	0800ca88 	.word	0x0800ca88
 800a898:	0800ca0d 	.word	0x0800ca0d
 800a89c:	0800ca1e 	.word	0x0800ca1e
 800a8a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d1eb      	bne.n	800a87e <__gethex+0x2ee>
 800a8a6:	e7d8      	b.n	800a85a <__gethex+0x2ca>
 800a8a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d1d5      	bne.n	800a85a <__gethex+0x2ca>
 800a8ae:	e7e6      	b.n	800a87e <__gethex+0x2ee>
 800a8b0:	1e6f      	subs	r7, r5, #1
 800a8b2:	f1ba 0f00 	cmp.w	sl, #0
 800a8b6:	d131      	bne.n	800a91c <__gethex+0x38c>
 800a8b8:	b127      	cbz	r7, 800a8c4 <__gethex+0x334>
 800a8ba:	4639      	mov	r1, r7
 800a8bc:	4620      	mov	r0, r4
 800a8be:	f000 fe27 	bl	800b510 <__any_on>
 800a8c2:	4682      	mov	sl, r0
 800a8c4:	117b      	asrs	r3, r7, #5
 800a8c6:	2101      	movs	r1, #1
 800a8c8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a8cc:	f007 071f 	and.w	r7, r7, #31
 800a8d0:	fa01 f707 	lsl.w	r7, r1, r7
 800a8d4:	421f      	tst	r7, r3
 800a8d6:	4629      	mov	r1, r5
 800a8d8:	4620      	mov	r0, r4
 800a8da:	bf18      	it	ne
 800a8dc:	f04a 0a02 	orrne.w	sl, sl, #2
 800a8e0:	1b76      	subs	r6, r6, r5
 800a8e2:	f7ff fded 	bl	800a4c0 <rshift>
 800a8e6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a8ea:	2702      	movs	r7, #2
 800a8ec:	f1ba 0f00 	cmp.w	sl, #0
 800a8f0:	d048      	beq.n	800a984 <__gethex+0x3f4>
 800a8f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a8f6:	2b02      	cmp	r3, #2
 800a8f8:	d015      	beq.n	800a926 <__gethex+0x396>
 800a8fa:	2b03      	cmp	r3, #3
 800a8fc:	d017      	beq.n	800a92e <__gethex+0x39e>
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d109      	bne.n	800a916 <__gethex+0x386>
 800a902:	f01a 0f02 	tst.w	sl, #2
 800a906:	d006      	beq.n	800a916 <__gethex+0x386>
 800a908:	f8d9 0000 	ldr.w	r0, [r9]
 800a90c:	ea4a 0a00 	orr.w	sl, sl, r0
 800a910:	f01a 0f01 	tst.w	sl, #1
 800a914:	d10e      	bne.n	800a934 <__gethex+0x3a4>
 800a916:	f047 0710 	orr.w	r7, r7, #16
 800a91a:	e033      	b.n	800a984 <__gethex+0x3f4>
 800a91c:	f04f 0a01 	mov.w	sl, #1
 800a920:	e7d0      	b.n	800a8c4 <__gethex+0x334>
 800a922:	2701      	movs	r7, #1
 800a924:	e7e2      	b.n	800a8ec <__gethex+0x35c>
 800a926:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a928:	f1c3 0301 	rsb	r3, r3, #1
 800a92c:	9315      	str	r3, [sp, #84]	; 0x54
 800a92e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a930:	2b00      	cmp	r3, #0
 800a932:	d0f0      	beq.n	800a916 <__gethex+0x386>
 800a934:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a938:	f104 0314 	add.w	r3, r4, #20
 800a93c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a940:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a944:	f04f 0c00 	mov.w	ip, #0
 800a948:	4618      	mov	r0, r3
 800a94a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a94e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a952:	d01c      	beq.n	800a98e <__gethex+0x3fe>
 800a954:	3201      	adds	r2, #1
 800a956:	6002      	str	r2, [r0, #0]
 800a958:	2f02      	cmp	r7, #2
 800a95a:	f104 0314 	add.w	r3, r4, #20
 800a95e:	d13f      	bne.n	800a9e0 <__gethex+0x450>
 800a960:	f8d8 2000 	ldr.w	r2, [r8]
 800a964:	3a01      	subs	r2, #1
 800a966:	42b2      	cmp	r2, r6
 800a968:	d10a      	bne.n	800a980 <__gethex+0x3f0>
 800a96a:	1171      	asrs	r1, r6, #5
 800a96c:	2201      	movs	r2, #1
 800a96e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a972:	f006 061f 	and.w	r6, r6, #31
 800a976:	fa02 f606 	lsl.w	r6, r2, r6
 800a97a:	421e      	tst	r6, r3
 800a97c:	bf18      	it	ne
 800a97e:	4617      	movne	r7, r2
 800a980:	f047 0720 	orr.w	r7, r7, #32
 800a984:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a986:	601c      	str	r4, [r3, #0]
 800a988:	9b04      	ldr	r3, [sp, #16]
 800a98a:	601d      	str	r5, [r3, #0]
 800a98c:	e695      	b.n	800a6ba <__gethex+0x12a>
 800a98e:	4299      	cmp	r1, r3
 800a990:	f843 cc04 	str.w	ip, [r3, #-4]
 800a994:	d8d8      	bhi.n	800a948 <__gethex+0x3b8>
 800a996:	68a3      	ldr	r3, [r4, #8]
 800a998:	459b      	cmp	fp, r3
 800a99a:	db19      	blt.n	800a9d0 <__gethex+0x440>
 800a99c:	6861      	ldr	r1, [r4, #4]
 800a99e:	ee18 0a10 	vmov	r0, s16
 800a9a2:	3101      	adds	r1, #1
 800a9a4:	f000 f91a 	bl	800abdc <_Balloc>
 800a9a8:	4681      	mov	r9, r0
 800a9aa:	b918      	cbnz	r0, 800a9b4 <__gethex+0x424>
 800a9ac:	4b1a      	ldr	r3, [pc, #104]	; (800aa18 <__gethex+0x488>)
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	2184      	movs	r1, #132	; 0x84
 800a9b2:	e6a8      	b.n	800a706 <__gethex+0x176>
 800a9b4:	6922      	ldr	r2, [r4, #16]
 800a9b6:	3202      	adds	r2, #2
 800a9b8:	f104 010c 	add.w	r1, r4, #12
 800a9bc:	0092      	lsls	r2, r2, #2
 800a9be:	300c      	adds	r0, #12
 800a9c0:	f7fe fe0e 	bl	80095e0 <memcpy>
 800a9c4:	4621      	mov	r1, r4
 800a9c6:	ee18 0a10 	vmov	r0, s16
 800a9ca:	f000 f947 	bl	800ac5c <_Bfree>
 800a9ce:	464c      	mov	r4, r9
 800a9d0:	6923      	ldr	r3, [r4, #16]
 800a9d2:	1c5a      	adds	r2, r3, #1
 800a9d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a9d8:	6122      	str	r2, [r4, #16]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	615a      	str	r2, [r3, #20]
 800a9de:	e7bb      	b.n	800a958 <__gethex+0x3c8>
 800a9e0:	6922      	ldr	r2, [r4, #16]
 800a9e2:	455a      	cmp	r2, fp
 800a9e4:	dd0b      	ble.n	800a9fe <__gethex+0x46e>
 800a9e6:	2101      	movs	r1, #1
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	f7ff fd69 	bl	800a4c0 <rshift>
 800a9ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a9f2:	3501      	adds	r5, #1
 800a9f4:	42ab      	cmp	r3, r5
 800a9f6:	f6ff aed0 	blt.w	800a79a <__gethex+0x20a>
 800a9fa:	2701      	movs	r7, #1
 800a9fc:	e7c0      	b.n	800a980 <__gethex+0x3f0>
 800a9fe:	f016 061f 	ands.w	r6, r6, #31
 800aa02:	d0fa      	beq.n	800a9fa <__gethex+0x46a>
 800aa04:	449a      	add	sl, r3
 800aa06:	f1c6 0620 	rsb	r6, r6, #32
 800aa0a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800aa0e:	f000 f9db 	bl	800adc8 <__hi0bits>
 800aa12:	42b0      	cmp	r0, r6
 800aa14:	dbe7      	blt.n	800a9e6 <__gethex+0x456>
 800aa16:	e7f0      	b.n	800a9fa <__gethex+0x46a>
 800aa18:	0800ca0d 	.word	0x0800ca0d

0800aa1c <L_shift>:
 800aa1c:	f1c2 0208 	rsb	r2, r2, #8
 800aa20:	0092      	lsls	r2, r2, #2
 800aa22:	b570      	push	{r4, r5, r6, lr}
 800aa24:	f1c2 0620 	rsb	r6, r2, #32
 800aa28:	6843      	ldr	r3, [r0, #4]
 800aa2a:	6804      	ldr	r4, [r0, #0]
 800aa2c:	fa03 f506 	lsl.w	r5, r3, r6
 800aa30:	432c      	orrs	r4, r5
 800aa32:	40d3      	lsrs	r3, r2
 800aa34:	6004      	str	r4, [r0, #0]
 800aa36:	f840 3f04 	str.w	r3, [r0, #4]!
 800aa3a:	4288      	cmp	r0, r1
 800aa3c:	d3f4      	bcc.n	800aa28 <L_shift+0xc>
 800aa3e:	bd70      	pop	{r4, r5, r6, pc}

0800aa40 <__match>:
 800aa40:	b530      	push	{r4, r5, lr}
 800aa42:	6803      	ldr	r3, [r0, #0]
 800aa44:	3301      	adds	r3, #1
 800aa46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa4a:	b914      	cbnz	r4, 800aa52 <__match+0x12>
 800aa4c:	6003      	str	r3, [r0, #0]
 800aa4e:	2001      	movs	r0, #1
 800aa50:	bd30      	pop	{r4, r5, pc}
 800aa52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa56:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aa5a:	2d19      	cmp	r5, #25
 800aa5c:	bf98      	it	ls
 800aa5e:	3220      	addls	r2, #32
 800aa60:	42a2      	cmp	r2, r4
 800aa62:	d0f0      	beq.n	800aa46 <__match+0x6>
 800aa64:	2000      	movs	r0, #0
 800aa66:	e7f3      	b.n	800aa50 <__match+0x10>

0800aa68 <__hexnan>:
 800aa68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa6c:	680b      	ldr	r3, [r1, #0]
 800aa6e:	6801      	ldr	r1, [r0, #0]
 800aa70:	115e      	asrs	r6, r3, #5
 800aa72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aa76:	f013 031f 	ands.w	r3, r3, #31
 800aa7a:	b087      	sub	sp, #28
 800aa7c:	bf18      	it	ne
 800aa7e:	3604      	addne	r6, #4
 800aa80:	2500      	movs	r5, #0
 800aa82:	1f37      	subs	r7, r6, #4
 800aa84:	4682      	mov	sl, r0
 800aa86:	4690      	mov	r8, r2
 800aa88:	9301      	str	r3, [sp, #4]
 800aa8a:	f846 5c04 	str.w	r5, [r6, #-4]
 800aa8e:	46b9      	mov	r9, r7
 800aa90:	463c      	mov	r4, r7
 800aa92:	9502      	str	r5, [sp, #8]
 800aa94:	46ab      	mov	fp, r5
 800aa96:	784a      	ldrb	r2, [r1, #1]
 800aa98:	1c4b      	adds	r3, r1, #1
 800aa9a:	9303      	str	r3, [sp, #12]
 800aa9c:	b342      	cbz	r2, 800aaf0 <__hexnan+0x88>
 800aa9e:	4610      	mov	r0, r2
 800aaa0:	9105      	str	r1, [sp, #20]
 800aaa2:	9204      	str	r2, [sp, #16]
 800aaa4:	f7ff fd5e 	bl	800a564 <__hexdig_fun>
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	d14f      	bne.n	800ab4c <__hexnan+0xe4>
 800aaac:	9a04      	ldr	r2, [sp, #16]
 800aaae:	9905      	ldr	r1, [sp, #20]
 800aab0:	2a20      	cmp	r2, #32
 800aab2:	d818      	bhi.n	800aae6 <__hexnan+0x7e>
 800aab4:	9b02      	ldr	r3, [sp, #8]
 800aab6:	459b      	cmp	fp, r3
 800aab8:	dd13      	ble.n	800aae2 <__hexnan+0x7a>
 800aaba:	454c      	cmp	r4, r9
 800aabc:	d206      	bcs.n	800aacc <__hexnan+0x64>
 800aabe:	2d07      	cmp	r5, #7
 800aac0:	dc04      	bgt.n	800aacc <__hexnan+0x64>
 800aac2:	462a      	mov	r2, r5
 800aac4:	4649      	mov	r1, r9
 800aac6:	4620      	mov	r0, r4
 800aac8:	f7ff ffa8 	bl	800aa1c <L_shift>
 800aacc:	4544      	cmp	r4, r8
 800aace:	d950      	bls.n	800ab72 <__hexnan+0x10a>
 800aad0:	2300      	movs	r3, #0
 800aad2:	f1a4 0904 	sub.w	r9, r4, #4
 800aad6:	f844 3c04 	str.w	r3, [r4, #-4]
 800aada:	f8cd b008 	str.w	fp, [sp, #8]
 800aade:	464c      	mov	r4, r9
 800aae0:	461d      	mov	r5, r3
 800aae2:	9903      	ldr	r1, [sp, #12]
 800aae4:	e7d7      	b.n	800aa96 <__hexnan+0x2e>
 800aae6:	2a29      	cmp	r2, #41	; 0x29
 800aae8:	d156      	bne.n	800ab98 <__hexnan+0x130>
 800aaea:	3102      	adds	r1, #2
 800aaec:	f8ca 1000 	str.w	r1, [sl]
 800aaf0:	f1bb 0f00 	cmp.w	fp, #0
 800aaf4:	d050      	beq.n	800ab98 <__hexnan+0x130>
 800aaf6:	454c      	cmp	r4, r9
 800aaf8:	d206      	bcs.n	800ab08 <__hexnan+0xa0>
 800aafa:	2d07      	cmp	r5, #7
 800aafc:	dc04      	bgt.n	800ab08 <__hexnan+0xa0>
 800aafe:	462a      	mov	r2, r5
 800ab00:	4649      	mov	r1, r9
 800ab02:	4620      	mov	r0, r4
 800ab04:	f7ff ff8a 	bl	800aa1c <L_shift>
 800ab08:	4544      	cmp	r4, r8
 800ab0a:	d934      	bls.n	800ab76 <__hexnan+0x10e>
 800ab0c:	f1a8 0204 	sub.w	r2, r8, #4
 800ab10:	4623      	mov	r3, r4
 800ab12:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab16:	f842 1f04 	str.w	r1, [r2, #4]!
 800ab1a:	429f      	cmp	r7, r3
 800ab1c:	d2f9      	bcs.n	800ab12 <__hexnan+0xaa>
 800ab1e:	1b3b      	subs	r3, r7, r4
 800ab20:	f023 0303 	bic.w	r3, r3, #3
 800ab24:	3304      	adds	r3, #4
 800ab26:	3401      	adds	r4, #1
 800ab28:	3e03      	subs	r6, #3
 800ab2a:	42b4      	cmp	r4, r6
 800ab2c:	bf88      	it	hi
 800ab2e:	2304      	movhi	r3, #4
 800ab30:	4443      	add	r3, r8
 800ab32:	2200      	movs	r2, #0
 800ab34:	f843 2b04 	str.w	r2, [r3], #4
 800ab38:	429f      	cmp	r7, r3
 800ab3a:	d2fb      	bcs.n	800ab34 <__hexnan+0xcc>
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	b91b      	cbnz	r3, 800ab48 <__hexnan+0xe0>
 800ab40:	4547      	cmp	r7, r8
 800ab42:	d127      	bne.n	800ab94 <__hexnan+0x12c>
 800ab44:	2301      	movs	r3, #1
 800ab46:	603b      	str	r3, [r7, #0]
 800ab48:	2005      	movs	r0, #5
 800ab4a:	e026      	b.n	800ab9a <__hexnan+0x132>
 800ab4c:	3501      	adds	r5, #1
 800ab4e:	2d08      	cmp	r5, #8
 800ab50:	f10b 0b01 	add.w	fp, fp, #1
 800ab54:	dd06      	ble.n	800ab64 <__hexnan+0xfc>
 800ab56:	4544      	cmp	r4, r8
 800ab58:	d9c3      	bls.n	800aae2 <__hexnan+0x7a>
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab60:	2501      	movs	r5, #1
 800ab62:	3c04      	subs	r4, #4
 800ab64:	6822      	ldr	r2, [r4, #0]
 800ab66:	f000 000f 	and.w	r0, r0, #15
 800ab6a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ab6e:	6022      	str	r2, [r4, #0]
 800ab70:	e7b7      	b.n	800aae2 <__hexnan+0x7a>
 800ab72:	2508      	movs	r5, #8
 800ab74:	e7b5      	b.n	800aae2 <__hexnan+0x7a>
 800ab76:	9b01      	ldr	r3, [sp, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d0df      	beq.n	800ab3c <__hexnan+0xd4>
 800ab7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab80:	f1c3 0320 	rsb	r3, r3, #32
 800ab84:	fa22 f303 	lsr.w	r3, r2, r3
 800ab88:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ab8c:	401a      	ands	r2, r3
 800ab8e:	f846 2c04 	str.w	r2, [r6, #-4]
 800ab92:	e7d3      	b.n	800ab3c <__hexnan+0xd4>
 800ab94:	3f04      	subs	r7, #4
 800ab96:	e7d1      	b.n	800ab3c <__hexnan+0xd4>
 800ab98:	2004      	movs	r0, #4
 800ab9a:	b007      	add	sp, #28
 800ab9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aba0 <__ascii_mbtowc>:
 800aba0:	b082      	sub	sp, #8
 800aba2:	b901      	cbnz	r1, 800aba6 <__ascii_mbtowc+0x6>
 800aba4:	a901      	add	r1, sp, #4
 800aba6:	b142      	cbz	r2, 800abba <__ascii_mbtowc+0x1a>
 800aba8:	b14b      	cbz	r3, 800abbe <__ascii_mbtowc+0x1e>
 800abaa:	7813      	ldrb	r3, [r2, #0]
 800abac:	600b      	str	r3, [r1, #0]
 800abae:	7812      	ldrb	r2, [r2, #0]
 800abb0:	1e10      	subs	r0, r2, #0
 800abb2:	bf18      	it	ne
 800abb4:	2001      	movne	r0, #1
 800abb6:	b002      	add	sp, #8
 800abb8:	4770      	bx	lr
 800abba:	4610      	mov	r0, r2
 800abbc:	e7fb      	b.n	800abb6 <__ascii_mbtowc+0x16>
 800abbe:	f06f 0001 	mvn.w	r0, #1
 800abc2:	e7f8      	b.n	800abb6 <__ascii_mbtowc+0x16>

0800abc4 <__malloc_lock>:
 800abc4:	4801      	ldr	r0, [pc, #4]	; (800abcc <__malloc_lock+0x8>)
 800abc6:	f000 bd2c 	b.w	800b622 <__retarget_lock_acquire_recursive>
 800abca:	bf00      	nop
 800abcc:	20000564 	.word	0x20000564

0800abd0 <__malloc_unlock>:
 800abd0:	4801      	ldr	r0, [pc, #4]	; (800abd8 <__malloc_unlock+0x8>)
 800abd2:	f000 bd27 	b.w	800b624 <__retarget_lock_release_recursive>
 800abd6:	bf00      	nop
 800abd8:	20000564 	.word	0x20000564

0800abdc <_Balloc>:
 800abdc:	b570      	push	{r4, r5, r6, lr}
 800abde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800abe0:	4604      	mov	r4, r0
 800abe2:	460d      	mov	r5, r1
 800abe4:	b976      	cbnz	r6, 800ac04 <_Balloc+0x28>
 800abe6:	2010      	movs	r0, #16
 800abe8:	f7fe fcf2 	bl	80095d0 <malloc>
 800abec:	4602      	mov	r2, r0
 800abee:	6260      	str	r0, [r4, #36]	; 0x24
 800abf0:	b920      	cbnz	r0, 800abfc <_Balloc+0x20>
 800abf2:	4b18      	ldr	r3, [pc, #96]	; (800ac54 <_Balloc+0x78>)
 800abf4:	4818      	ldr	r0, [pc, #96]	; (800ac58 <_Balloc+0x7c>)
 800abf6:	2166      	movs	r1, #102	; 0x66
 800abf8:	f000 fce2 	bl	800b5c0 <__assert_func>
 800abfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac00:	6006      	str	r6, [r0, #0]
 800ac02:	60c6      	str	r6, [r0, #12]
 800ac04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ac06:	68f3      	ldr	r3, [r6, #12]
 800ac08:	b183      	cbz	r3, 800ac2c <_Balloc+0x50>
 800ac0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac0c:	68db      	ldr	r3, [r3, #12]
 800ac0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac12:	b9b8      	cbnz	r0, 800ac44 <_Balloc+0x68>
 800ac14:	2101      	movs	r1, #1
 800ac16:	fa01 f605 	lsl.w	r6, r1, r5
 800ac1a:	1d72      	adds	r2, r6, #5
 800ac1c:	0092      	lsls	r2, r2, #2
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f000 fc97 	bl	800b552 <_calloc_r>
 800ac24:	b160      	cbz	r0, 800ac40 <_Balloc+0x64>
 800ac26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac2a:	e00e      	b.n	800ac4a <_Balloc+0x6e>
 800ac2c:	2221      	movs	r2, #33	; 0x21
 800ac2e:	2104      	movs	r1, #4
 800ac30:	4620      	mov	r0, r4
 800ac32:	f000 fc8e 	bl	800b552 <_calloc_r>
 800ac36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac38:	60f0      	str	r0, [r6, #12]
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1e4      	bne.n	800ac0a <_Balloc+0x2e>
 800ac40:	2000      	movs	r0, #0
 800ac42:	bd70      	pop	{r4, r5, r6, pc}
 800ac44:	6802      	ldr	r2, [r0, #0]
 800ac46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac50:	e7f7      	b.n	800ac42 <_Balloc+0x66>
 800ac52:	bf00      	nop
 800ac54:	0800ca9c 	.word	0x0800ca9c
 800ac58:	0800cab3 	.word	0x0800cab3

0800ac5c <_Bfree>:
 800ac5c:	b570      	push	{r4, r5, r6, lr}
 800ac5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac60:	4605      	mov	r5, r0
 800ac62:	460c      	mov	r4, r1
 800ac64:	b976      	cbnz	r6, 800ac84 <_Bfree+0x28>
 800ac66:	2010      	movs	r0, #16
 800ac68:	f7fe fcb2 	bl	80095d0 <malloc>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	6268      	str	r0, [r5, #36]	; 0x24
 800ac70:	b920      	cbnz	r0, 800ac7c <_Bfree+0x20>
 800ac72:	4b09      	ldr	r3, [pc, #36]	; (800ac98 <_Bfree+0x3c>)
 800ac74:	4809      	ldr	r0, [pc, #36]	; (800ac9c <_Bfree+0x40>)
 800ac76:	218a      	movs	r1, #138	; 0x8a
 800ac78:	f000 fca2 	bl	800b5c0 <__assert_func>
 800ac7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac80:	6006      	str	r6, [r0, #0]
 800ac82:	60c6      	str	r6, [r0, #12]
 800ac84:	b13c      	cbz	r4, 800ac96 <_Bfree+0x3a>
 800ac86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ac88:	6862      	ldr	r2, [r4, #4]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac90:	6021      	str	r1, [r4, #0]
 800ac92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac96:	bd70      	pop	{r4, r5, r6, pc}
 800ac98:	0800ca9c 	.word	0x0800ca9c
 800ac9c:	0800cab3 	.word	0x0800cab3

0800aca0 <__multadd>:
 800aca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aca4:	690e      	ldr	r6, [r1, #16]
 800aca6:	4607      	mov	r7, r0
 800aca8:	4698      	mov	r8, r3
 800acaa:	460c      	mov	r4, r1
 800acac:	f101 0014 	add.w	r0, r1, #20
 800acb0:	2300      	movs	r3, #0
 800acb2:	6805      	ldr	r5, [r0, #0]
 800acb4:	b2a9      	uxth	r1, r5
 800acb6:	fb02 8101 	mla	r1, r2, r1, r8
 800acba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800acbe:	0c2d      	lsrs	r5, r5, #16
 800acc0:	fb02 c505 	mla	r5, r2, r5, ip
 800acc4:	b289      	uxth	r1, r1
 800acc6:	3301      	adds	r3, #1
 800acc8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800accc:	429e      	cmp	r6, r3
 800acce:	f840 1b04 	str.w	r1, [r0], #4
 800acd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800acd6:	dcec      	bgt.n	800acb2 <__multadd+0x12>
 800acd8:	f1b8 0f00 	cmp.w	r8, #0
 800acdc:	d022      	beq.n	800ad24 <__multadd+0x84>
 800acde:	68a3      	ldr	r3, [r4, #8]
 800ace0:	42b3      	cmp	r3, r6
 800ace2:	dc19      	bgt.n	800ad18 <__multadd+0x78>
 800ace4:	6861      	ldr	r1, [r4, #4]
 800ace6:	4638      	mov	r0, r7
 800ace8:	3101      	adds	r1, #1
 800acea:	f7ff ff77 	bl	800abdc <_Balloc>
 800acee:	4605      	mov	r5, r0
 800acf0:	b928      	cbnz	r0, 800acfe <__multadd+0x5e>
 800acf2:	4602      	mov	r2, r0
 800acf4:	4b0d      	ldr	r3, [pc, #52]	; (800ad2c <__multadd+0x8c>)
 800acf6:	480e      	ldr	r0, [pc, #56]	; (800ad30 <__multadd+0x90>)
 800acf8:	21b5      	movs	r1, #181	; 0xb5
 800acfa:	f000 fc61 	bl	800b5c0 <__assert_func>
 800acfe:	6922      	ldr	r2, [r4, #16]
 800ad00:	3202      	adds	r2, #2
 800ad02:	f104 010c 	add.w	r1, r4, #12
 800ad06:	0092      	lsls	r2, r2, #2
 800ad08:	300c      	adds	r0, #12
 800ad0a:	f7fe fc69 	bl	80095e0 <memcpy>
 800ad0e:	4621      	mov	r1, r4
 800ad10:	4638      	mov	r0, r7
 800ad12:	f7ff ffa3 	bl	800ac5c <_Bfree>
 800ad16:	462c      	mov	r4, r5
 800ad18:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ad1c:	3601      	adds	r6, #1
 800ad1e:	f8c3 8014 	str.w	r8, [r3, #20]
 800ad22:	6126      	str	r6, [r4, #16]
 800ad24:	4620      	mov	r0, r4
 800ad26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad2a:	bf00      	nop
 800ad2c:	0800ca0d 	.word	0x0800ca0d
 800ad30:	0800cab3 	.word	0x0800cab3

0800ad34 <__s2b>:
 800ad34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad38:	460c      	mov	r4, r1
 800ad3a:	4615      	mov	r5, r2
 800ad3c:	461f      	mov	r7, r3
 800ad3e:	2209      	movs	r2, #9
 800ad40:	3308      	adds	r3, #8
 800ad42:	4606      	mov	r6, r0
 800ad44:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad48:	2100      	movs	r1, #0
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	db09      	blt.n	800ad64 <__s2b+0x30>
 800ad50:	4630      	mov	r0, r6
 800ad52:	f7ff ff43 	bl	800abdc <_Balloc>
 800ad56:	b940      	cbnz	r0, 800ad6a <__s2b+0x36>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	4b19      	ldr	r3, [pc, #100]	; (800adc0 <__s2b+0x8c>)
 800ad5c:	4819      	ldr	r0, [pc, #100]	; (800adc4 <__s2b+0x90>)
 800ad5e:	21ce      	movs	r1, #206	; 0xce
 800ad60:	f000 fc2e 	bl	800b5c0 <__assert_func>
 800ad64:	0052      	lsls	r2, r2, #1
 800ad66:	3101      	adds	r1, #1
 800ad68:	e7f0      	b.n	800ad4c <__s2b+0x18>
 800ad6a:	9b08      	ldr	r3, [sp, #32]
 800ad6c:	6143      	str	r3, [r0, #20]
 800ad6e:	2d09      	cmp	r5, #9
 800ad70:	f04f 0301 	mov.w	r3, #1
 800ad74:	6103      	str	r3, [r0, #16]
 800ad76:	dd16      	ble.n	800ada6 <__s2b+0x72>
 800ad78:	f104 0909 	add.w	r9, r4, #9
 800ad7c:	46c8      	mov	r8, r9
 800ad7e:	442c      	add	r4, r5
 800ad80:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ad84:	4601      	mov	r1, r0
 800ad86:	3b30      	subs	r3, #48	; 0x30
 800ad88:	220a      	movs	r2, #10
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	f7ff ff88 	bl	800aca0 <__multadd>
 800ad90:	45a0      	cmp	r8, r4
 800ad92:	d1f5      	bne.n	800ad80 <__s2b+0x4c>
 800ad94:	f1a5 0408 	sub.w	r4, r5, #8
 800ad98:	444c      	add	r4, r9
 800ad9a:	1b2d      	subs	r5, r5, r4
 800ad9c:	1963      	adds	r3, r4, r5
 800ad9e:	42bb      	cmp	r3, r7
 800ada0:	db04      	blt.n	800adac <__s2b+0x78>
 800ada2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ada6:	340a      	adds	r4, #10
 800ada8:	2509      	movs	r5, #9
 800adaa:	e7f6      	b.n	800ad9a <__s2b+0x66>
 800adac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800adb0:	4601      	mov	r1, r0
 800adb2:	3b30      	subs	r3, #48	; 0x30
 800adb4:	220a      	movs	r2, #10
 800adb6:	4630      	mov	r0, r6
 800adb8:	f7ff ff72 	bl	800aca0 <__multadd>
 800adbc:	e7ee      	b.n	800ad9c <__s2b+0x68>
 800adbe:	bf00      	nop
 800adc0:	0800ca0d 	.word	0x0800ca0d
 800adc4:	0800cab3 	.word	0x0800cab3

0800adc8 <__hi0bits>:
 800adc8:	0c03      	lsrs	r3, r0, #16
 800adca:	041b      	lsls	r3, r3, #16
 800adcc:	b9d3      	cbnz	r3, 800ae04 <__hi0bits+0x3c>
 800adce:	0400      	lsls	r0, r0, #16
 800add0:	2310      	movs	r3, #16
 800add2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800add6:	bf04      	itt	eq
 800add8:	0200      	lsleq	r0, r0, #8
 800adda:	3308      	addeq	r3, #8
 800addc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ade0:	bf04      	itt	eq
 800ade2:	0100      	lsleq	r0, r0, #4
 800ade4:	3304      	addeq	r3, #4
 800ade6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800adea:	bf04      	itt	eq
 800adec:	0080      	lsleq	r0, r0, #2
 800adee:	3302      	addeq	r3, #2
 800adf0:	2800      	cmp	r0, #0
 800adf2:	db05      	blt.n	800ae00 <__hi0bits+0x38>
 800adf4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800adf8:	f103 0301 	add.w	r3, r3, #1
 800adfc:	bf08      	it	eq
 800adfe:	2320      	moveq	r3, #32
 800ae00:	4618      	mov	r0, r3
 800ae02:	4770      	bx	lr
 800ae04:	2300      	movs	r3, #0
 800ae06:	e7e4      	b.n	800add2 <__hi0bits+0xa>

0800ae08 <__lo0bits>:
 800ae08:	6803      	ldr	r3, [r0, #0]
 800ae0a:	f013 0207 	ands.w	r2, r3, #7
 800ae0e:	4601      	mov	r1, r0
 800ae10:	d00b      	beq.n	800ae2a <__lo0bits+0x22>
 800ae12:	07da      	lsls	r2, r3, #31
 800ae14:	d424      	bmi.n	800ae60 <__lo0bits+0x58>
 800ae16:	0798      	lsls	r0, r3, #30
 800ae18:	bf49      	itett	mi
 800ae1a:	085b      	lsrmi	r3, r3, #1
 800ae1c:	089b      	lsrpl	r3, r3, #2
 800ae1e:	2001      	movmi	r0, #1
 800ae20:	600b      	strmi	r3, [r1, #0]
 800ae22:	bf5c      	itt	pl
 800ae24:	600b      	strpl	r3, [r1, #0]
 800ae26:	2002      	movpl	r0, #2
 800ae28:	4770      	bx	lr
 800ae2a:	b298      	uxth	r0, r3
 800ae2c:	b9b0      	cbnz	r0, 800ae5c <__lo0bits+0x54>
 800ae2e:	0c1b      	lsrs	r3, r3, #16
 800ae30:	2010      	movs	r0, #16
 800ae32:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ae36:	bf04      	itt	eq
 800ae38:	0a1b      	lsreq	r3, r3, #8
 800ae3a:	3008      	addeq	r0, #8
 800ae3c:	071a      	lsls	r2, r3, #28
 800ae3e:	bf04      	itt	eq
 800ae40:	091b      	lsreq	r3, r3, #4
 800ae42:	3004      	addeq	r0, #4
 800ae44:	079a      	lsls	r2, r3, #30
 800ae46:	bf04      	itt	eq
 800ae48:	089b      	lsreq	r3, r3, #2
 800ae4a:	3002      	addeq	r0, #2
 800ae4c:	07da      	lsls	r2, r3, #31
 800ae4e:	d403      	bmi.n	800ae58 <__lo0bits+0x50>
 800ae50:	085b      	lsrs	r3, r3, #1
 800ae52:	f100 0001 	add.w	r0, r0, #1
 800ae56:	d005      	beq.n	800ae64 <__lo0bits+0x5c>
 800ae58:	600b      	str	r3, [r1, #0]
 800ae5a:	4770      	bx	lr
 800ae5c:	4610      	mov	r0, r2
 800ae5e:	e7e8      	b.n	800ae32 <__lo0bits+0x2a>
 800ae60:	2000      	movs	r0, #0
 800ae62:	4770      	bx	lr
 800ae64:	2020      	movs	r0, #32
 800ae66:	4770      	bx	lr

0800ae68 <__i2b>:
 800ae68:	b510      	push	{r4, lr}
 800ae6a:	460c      	mov	r4, r1
 800ae6c:	2101      	movs	r1, #1
 800ae6e:	f7ff feb5 	bl	800abdc <_Balloc>
 800ae72:	4602      	mov	r2, r0
 800ae74:	b928      	cbnz	r0, 800ae82 <__i2b+0x1a>
 800ae76:	4b05      	ldr	r3, [pc, #20]	; (800ae8c <__i2b+0x24>)
 800ae78:	4805      	ldr	r0, [pc, #20]	; (800ae90 <__i2b+0x28>)
 800ae7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ae7e:	f000 fb9f 	bl	800b5c0 <__assert_func>
 800ae82:	2301      	movs	r3, #1
 800ae84:	6144      	str	r4, [r0, #20]
 800ae86:	6103      	str	r3, [r0, #16]
 800ae88:	bd10      	pop	{r4, pc}
 800ae8a:	bf00      	nop
 800ae8c:	0800ca0d 	.word	0x0800ca0d
 800ae90:	0800cab3 	.word	0x0800cab3

0800ae94 <__multiply>:
 800ae94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae98:	4614      	mov	r4, r2
 800ae9a:	690a      	ldr	r2, [r1, #16]
 800ae9c:	6923      	ldr	r3, [r4, #16]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	bfb8      	it	lt
 800aea2:	460b      	movlt	r3, r1
 800aea4:	460d      	mov	r5, r1
 800aea6:	bfbc      	itt	lt
 800aea8:	4625      	movlt	r5, r4
 800aeaa:	461c      	movlt	r4, r3
 800aeac:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800aeb0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800aeb4:	68ab      	ldr	r3, [r5, #8]
 800aeb6:	6869      	ldr	r1, [r5, #4]
 800aeb8:	eb0a 0709 	add.w	r7, sl, r9
 800aebc:	42bb      	cmp	r3, r7
 800aebe:	b085      	sub	sp, #20
 800aec0:	bfb8      	it	lt
 800aec2:	3101      	addlt	r1, #1
 800aec4:	f7ff fe8a 	bl	800abdc <_Balloc>
 800aec8:	b930      	cbnz	r0, 800aed8 <__multiply+0x44>
 800aeca:	4602      	mov	r2, r0
 800aecc:	4b42      	ldr	r3, [pc, #264]	; (800afd8 <__multiply+0x144>)
 800aece:	4843      	ldr	r0, [pc, #268]	; (800afdc <__multiply+0x148>)
 800aed0:	f240 115d 	movw	r1, #349	; 0x15d
 800aed4:	f000 fb74 	bl	800b5c0 <__assert_func>
 800aed8:	f100 0614 	add.w	r6, r0, #20
 800aedc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800aee0:	4633      	mov	r3, r6
 800aee2:	2200      	movs	r2, #0
 800aee4:	4543      	cmp	r3, r8
 800aee6:	d31e      	bcc.n	800af26 <__multiply+0x92>
 800aee8:	f105 0c14 	add.w	ip, r5, #20
 800aeec:	f104 0314 	add.w	r3, r4, #20
 800aef0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800aef4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800aef8:	9202      	str	r2, [sp, #8]
 800aefa:	ebac 0205 	sub.w	r2, ip, r5
 800aefe:	3a15      	subs	r2, #21
 800af00:	f022 0203 	bic.w	r2, r2, #3
 800af04:	3204      	adds	r2, #4
 800af06:	f105 0115 	add.w	r1, r5, #21
 800af0a:	458c      	cmp	ip, r1
 800af0c:	bf38      	it	cc
 800af0e:	2204      	movcc	r2, #4
 800af10:	9201      	str	r2, [sp, #4]
 800af12:	9a02      	ldr	r2, [sp, #8]
 800af14:	9303      	str	r3, [sp, #12]
 800af16:	429a      	cmp	r2, r3
 800af18:	d808      	bhi.n	800af2c <__multiply+0x98>
 800af1a:	2f00      	cmp	r7, #0
 800af1c:	dc55      	bgt.n	800afca <__multiply+0x136>
 800af1e:	6107      	str	r7, [r0, #16]
 800af20:	b005      	add	sp, #20
 800af22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af26:	f843 2b04 	str.w	r2, [r3], #4
 800af2a:	e7db      	b.n	800aee4 <__multiply+0x50>
 800af2c:	f8b3 a000 	ldrh.w	sl, [r3]
 800af30:	f1ba 0f00 	cmp.w	sl, #0
 800af34:	d020      	beq.n	800af78 <__multiply+0xe4>
 800af36:	f105 0e14 	add.w	lr, r5, #20
 800af3a:	46b1      	mov	r9, r6
 800af3c:	2200      	movs	r2, #0
 800af3e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800af42:	f8d9 b000 	ldr.w	fp, [r9]
 800af46:	b2a1      	uxth	r1, r4
 800af48:	fa1f fb8b 	uxth.w	fp, fp
 800af4c:	fb0a b101 	mla	r1, sl, r1, fp
 800af50:	4411      	add	r1, r2
 800af52:	f8d9 2000 	ldr.w	r2, [r9]
 800af56:	0c24      	lsrs	r4, r4, #16
 800af58:	0c12      	lsrs	r2, r2, #16
 800af5a:	fb0a 2404 	mla	r4, sl, r4, r2
 800af5e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800af62:	b289      	uxth	r1, r1
 800af64:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800af68:	45f4      	cmp	ip, lr
 800af6a:	f849 1b04 	str.w	r1, [r9], #4
 800af6e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800af72:	d8e4      	bhi.n	800af3e <__multiply+0xaa>
 800af74:	9901      	ldr	r1, [sp, #4]
 800af76:	5072      	str	r2, [r6, r1]
 800af78:	9a03      	ldr	r2, [sp, #12]
 800af7a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800af7e:	3304      	adds	r3, #4
 800af80:	f1b9 0f00 	cmp.w	r9, #0
 800af84:	d01f      	beq.n	800afc6 <__multiply+0x132>
 800af86:	6834      	ldr	r4, [r6, #0]
 800af88:	f105 0114 	add.w	r1, r5, #20
 800af8c:	46b6      	mov	lr, r6
 800af8e:	f04f 0a00 	mov.w	sl, #0
 800af92:	880a      	ldrh	r2, [r1, #0]
 800af94:	f8be b002 	ldrh.w	fp, [lr, #2]
 800af98:	fb09 b202 	mla	r2, r9, r2, fp
 800af9c:	4492      	add	sl, r2
 800af9e:	b2a4      	uxth	r4, r4
 800afa0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800afa4:	f84e 4b04 	str.w	r4, [lr], #4
 800afa8:	f851 4b04 	ldr.w	r4, [r1], #4
 800afac:	f8be 2000 	ldrh.w	r2, [lr]
 800afb0:	0c24      	lsrs	r4, r4, #16
 800afb2:	fb09 2404 	mla	r4, r9, r4, r2
 800afb6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800afba:	458c      	cmp	ip, r1
 800afbc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800afc0:	d8e7      	bhi.n	800af92 <__multiply+0xfe>
 800afc2:	9a01      	ldr	r2, [sp, #4]
 800afc4:	50b4      	str	r4, [r6, r2]
 800afc6:	3604      	adds	r6, #4
 800afc8:	e7a3      	b.n	800af12 <__multiply+0x7e>
 800afca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1a5      	bne.n	800af1e <__multiply+0x8a>
 800afd2:	3f01      	subs	r7, #1
 800afd4:	e7a1      	b.n	800af1a <__multiply+0x86>
 800afd6:	bf00      	nop
 800afd8:	0800ca0d 	.word	0x0800ca0d
 800afdc:	0800cab3 	.word	0x0800cab3

0800afe0 <__pow5mult>:
 800afe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afe4:	4615      	mov	r5, r2
 800afe6:	f012 0203 	ands.w	r2, r2, #3
 800afea:	4606      	mov	r6, r0
 800afec:	460f      	mov	r7, r1
 800afee:	d007      	beq.n	800b000 <__pow5mult+0x20>
 800aff0:	4c25      	ldr	r4, [pc, #148]	; (800b088 <__pow5mult+0xa8>)
 800aff2:	3a01      	subs	r2, #1
 800aff4:	2300      	movs	r3, #0
 800aff6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800affa:	f7ff fe51 	bl	800aca0 <__multadd>
 800affe:	4607      	mov	r7, r0
 800b000:	10ad      	asrs	r5, r5, #2
 800b002:	d03d      	beq.n	800b080 <__pow5mult+0xa0>
 800b004:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b006:	b97c      	cbnz	r4, 800b028 <__pow5mult+0x48>
 800b008:	2010      	movs	r0, #16
 800b00a:	f7fe fae1 	bl	80095d0 <malloc>
 800b00e:	4602      	mov	r2, r0
 800b010:	6270      	str	r0, [r6, #36]	; 0x24
 800b012:	b928      	cbnz	r0, 800b020 <__pow5mult+0x40>
 800b014:	4b1d      	ldr	r3, [pc, #116]	; (800b08c <__pow5mult+0xac>)
 800b016:	481e      	ldr	r0, [pc, #120]	; (800b090 <__pow5mult+0xb0>)
 800b018:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b01c:	f000 fad0 	bl	800b5c0 <__assert_func>
 800b020:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b024:	6004      	str	r4, [r0, #0]
 800b026:	60c4      	str	r4, [r0, #12]
 800b028:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b02c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b030:	b94c      	cbnz	r4, 800b046 <__pow5mult+0x66>
 800b032:	f240 2171 	movw	r1, #625	; 0x271
 800b036:	4630      	mov	r0, r6
 800b038:	f7ff ff16 	bl	800ae68 <__i2b>
 800b03c:	2300      	movs	r3, #0
 800b03e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b042:	4604      	mov	r4, r0
 800b044:	6003      	str	r3, [r0, #0]
 800b046:	f04f 0900 	mov.w	r9, #0
 800b04a:	07eb      	lsls	r3, r5, #31
 800b04c:	d50a      	bpl.n	800b064 <__pow5mult+0x84>
 800b04e:	4639      	mov	r1, r7
 800b050:	4622      	mov	r2, r4
 800b052:	4630      	mov	r0, r6
 800b054:	f7ff ff1e 	bl	800ae94 <__multiply>
 800b058:	4639      	mov	r1, r7
 800b05a:	4680      	mov	r8, r0
 800b05c:	4630      	mov	r0, r6
 800b05e:	f7ff fdfd 	bl	800ac5c <_Bfree>
 800b062:	4647      	mov	r7, r8
 800b064:	106d      	asrs	r5, r5, #1
 800b066:	d00b      	beq.n	800b080 <__pow5mult+0xa0>
 800b068:	6820      	ldr	r0, [r4, #0]
 800b06a:	b938      	cbnz	r0, 800b07c <__pow5mult+0x9c>
 800b06c:	4622      	mov	r2, r4
 800b06e:	4621      	mov	r1, r4
 800b070:	4630      	mov	r0, r6
 800b072:	f7ff ff0f 	bl	800ae94 <__multiply>
 800b076:	6020      	str	r0, [r4, #0]
 800b078:	f8c0 9000 	str.w	r9, [r0]
 800b07c:	4604      	mov	r4, r0
 800b07e:	e7e4      	b.n	800b04a <__pow5mult+0x6a>
 800b080:	4638      	mov	r0, r7
 800b082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b086:	bf00      	nop
 800b088:	0800cc08 	.word	0x0800cc08
 800b08c:	0800ca9c 	.word	0x0800ca9c
 800b090:	0800cab3 	.word	0x0800cab3

0800b094 <__lshift>:
 800b094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b098:	460c      	mov	r4, r1
 800b09a:	6849      	ldr	r1, [r1, #4]
 800b09c:	6923      	ldr	r3, [r4, #16]
 800b09e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b0a2:	68a3      	ldr	r3, [r4, #8]
 800b0a4:	4607      	mov	r7, r0
 800b0a6:	4691      	mov	r9, r2
 800b0a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b0ac:	f108 0601 	add.w	r6, r8, #1
 800b0b0:	42b3      	cmp	r3, r6
 800b0b2:	db0b      	blt.n	800b0cc <__lshift+0x38>
 800b0b4:	4638      	mov	r0, r7
 800b0b6:	f7ff fd91 	bl	800abdc <_Balloc>
 800b0ba:	4605      	mov	r5, r0
 800b0bc:	b948      	cbnz	r0, 800b0d2 <__lshift+0x3e>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	4b28      	ldr	r3, [pc, #160]	; (800b164 <__lshift+0xd0>)
 800b0c2:	4829      	ldr	r0, [pc, #164]	; (800b168 <__lshift+0xd4>)
 800b0c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b0c8:	f000 fa7a 	bl	800b5c0 <__assert_func>
 800b0cc:	3101      	adds	r1, #1
 800b0ce:	005b      	lsls	r3, r3, #1
 800b0d0:	e7ee      	b.n	800b0b0 <__lshift+0x1c>
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	f100 0114 	add.w	r1, r0, #20
 800b0d8:	f100 0210 	add.w	r2, r0, #16
 800b0dc:	4618      	mov	r0, r3
 800b0de:	4553      	cmp	r3, sl
 800b0e0:	db33      	blt.n	800b14a <__lshift+0xb6>
 800b0e2:	6920      	ldr	r0, [r4, #16]
 800b0e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b0e8:	f104 0314 	add.w	r3, r4, #20
 800b0ec:	f019 091f 	ands.w	r9, r9, #31
 800b0f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b0f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b0f8:	d02b      	beq.n	800b152 <__lshift+0xbe>
 800b0fa:	f1c9 0e20 	rsb	lr, r9, #32
 800b0fe:	468a      	mov	sl, r1
 800b100:	2200      	movs	r2, #0
 800b102:	6818      	ldr	r0, [r3, #0]
 800b104:	fa00 f009 	lsl.w	r0, r0, r9
 800b108:	4302      	orrs	r2, r0
 800b10a:	f84a 2b04 	str.w	r2, [sl], #4
 800b10e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b112:	459c      	cmp	ip, r3
 800b114:	fa22 f20e 	lsr.w	r2, r2, lr
 800b118:	d8f3      	bhi.n	800b102 <__lshift+0x6e>
 800b11a:	ebac 0304 	sub.w	r3, ip, r4
 800b11e:	3b15      	subs	r3, #21
 800b120:	f023 0303 	bic.w	r3, r3, #3
 800b124:	3304      	adds	r3, #4
 800b126:	f104 0015 	add.w	r0, r4, #21
 800b12a:	4584      	cmp	ip, r0
 800b12c:	bf38      	it	cc
 800b12e:	2304      	movcc	r3, #4
 800b130:	50ca      	str	r2, [r1, r3]
 800b132:	b10a      	cbz	r2, 800b138 <__lshift+0xa4>
 800b134:	f108 0602 	add.w	r6, r8, #2
 800b138:	3e01      	subs	r6, #1
 800b13a:	4638      	mov	r0, r7
 800b13c:	612e      	str	r6, [r5, #16]
 800b13e:	4621      	mov	r1, r4
 800b140:	f7ff fd8c 	bl	800ac5c <_Bfree>
 800b144:	4628      	mov	r0, r5
 800b146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b14a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b14e:	3301      	adds	r3, #1
 800b150:	e7c5      	b.n	800b0de <__lshift+0x4a>
 800b152:	3904      	subs	r1, #4
 800b154:	f853 2b04 	ldr.w	r2, [r3], #4
 800b158:	f841 2f04 	str.w	r2, [r1, #4]!
 800b15c:	459c      	cmp	ip, r3
 800b15e:	d8f9      	bhi.n	800b154 <__lshift+0xc0>
 800b160:	e7ea      	b.n	800b138 <__lshift+0xa4>
 800b162:	bf00      	nop
 800b164:	0800ca0d 	.word	0x0800ca0d
 800b168:	0800cab3 	.word	0x0800cab3

0800b16c <__mcmp>:
 800b16c:	b530      	push	{r4, r5, lr}
 800b16e:	6902      	ldr	r2, [r0, #16]
 800b170:	690c      	ldr	r4, [r1, #16]
 800b172:	1b12      	subs	r2, r2, r4
 800b174:	d10e      	bne.n	800b194 <__mcmp+0x28>
 800b176:	f100 0314 	add.w	r3, r0, #20
 800b17a:	3114      	adds	r1, #20
 800b17c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b180:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b184:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b188:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b18c:	42a5      	cmp	r5, r4
 800b18e:	d003      	beq.n	800b198 <__mcmp+0x2c>
 800b190:	d305      	bcc.n	800b19e <__mcmp+0x32>
 800b192:	2201      	movs	r2, #1
 800b194:	4610      	mov	r0, r2
 800b196:	bd30      	pop	{r4, r5, pc}
 800b198:	4283      	cmp	r3, r0
 800b19a:	d3f3      	bcc.n	800b184 <__mcmp+0x18>
 800b19c:	e7fa      	b.n	800b194 <__mcmp+0x28>
 800b19e:	f04f 32ff 	mov.w	r2, #4294967295
 800b1a2:	e7f7      	b.n	800b194 <__mcmp+0x28>

0800b1a4 <__mdiff>:
 800b1a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a8:	460c      	mov	r4, r1
 800b1aa:	4606      	mov	r6, r0
 800b1ac:	4611      	mov	r1, r2
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	4617      	mov	r7, r2
 800b1b2:	f7ff ffdb 	bl	800b16c <__mcmp>
 800b1b6:	1e05      	subs	r5, r0, #0
 800b1b8:	d110      	bne.n	800b1dc <__mdiff+0x38>
 800b1ba:	4629      	mov	r1, r5
 800b1bc:	4630      	mov	r0, r6
 800b1be:	f7ff fd0d 	bl	800abdc <_Balloc>
 800b1c2:	b930      	cbnz	r0, 800b1d2 <__mdiff+0x2e>
 800b1c4:	4b39      	ldr	r3, [pc, #228]	; (800b2ac <__mdiff+0x108>)
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	f240 2132 	movw	r1, #562	; 0x232
 800b1cc:	4838      	ldr	r0, [pc, #224]	; (800b2b0 <__mdiff+0x10c>)
 800b1ce:	f000 f9f7 	bl	800b5c0 <__assert_func>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b1d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1dc:	bfa4      	itt	ge
 800b1de:	463b      	movge	r3, r7
 800b1e0:	4627      	movge	r7, r4
 800b1e2:	4630      	mov	r0, r6
 800b1e4:	6879      	ldr	r1, [r7, #4]
 800b1e6:	bfa6      	itte	ge
 800b1e8:	461c      	movge	r4, r3
 800b1ea:	2500      	movge	r5, #0
 800b1ec:	2501      	movlt	r5, #1
 800b1ee:	f7ff fcf5 	bl	800abdc <_Balloc>
 800b1f2:	b920      	cbnz	r0, 800b1fe <__mdiff+0x5a>
 800b1f4:	4b2d      	ldr	r3, [pc, #180]	; (800b2ac <__mdiff+0x108>)
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b1fc:	e7e6      	b.n	800b1cc <__mdiff+0x28>
 800b1fe:	693e      	ldr	r6, [r7, #16]
 800b200:	60c5      	str	r5, [r0, #12]
 800b202:	6925      	ldr	r5, [r4, #16]
 800b204:	f107 0114 	add.w	r1, r7, #20
 800b208:	f104 0914 	add.w	r9, r4, #20
 800b20c:	f100 0e14 	add.w	lr, r0, #20
 800b210:	f107 0210 	add.w	r2, r7, #16
 800b214:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b218:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b21c:	46f2      	mov	sl, lr
 800b21e:	2700      	movs	r7, #0
 800b220:	f859 3b04 	ldr.w	r3, [r9], #4
 800b224:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b228:	fa1f f883 	uxth.w	r8, r3
 800b22c:	fa17 f78b 	uxtah	r7, r7, fp
 800b230:	0c1b      	lsrs	r3, r3, #16
 800b232:	eba7 0808 	sub.w	r8, r7, r8
 800b236:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b23a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b23e:	fa1f f888 	uxth.w	r8, r8
 800b242:	141f      	asrs	r7, r3, #16
 800b244:	454d      	cmp	r5, r9
 800b246:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b24a:	f84a 3b04 	str.w	r3, [sl], #4
 800b24e:	d8e7      	bhi.n	800b220 <__mdiff+0x7c>
 800b250:	1b2b      	subs	r3, r5, r4
 800b252:	3b15      	subs	r3, #21
 800b254:	f023 0303 	bic.w	r3, r3, #3
 800b258:	3304      	adds	r3, #4
 800b25a:	3415      	adds	r4, #21
 800b25c:	42a5      	cmp	r5, r4
 800b25e:	bf38      	it	cc
 800b260:	2304      	movcc	r3, #4
 800b262:	4419      	add	r1, r3
 800b264:	4473      	add	r3, lr
 800b266:	469e      	mov	lr, r3
 800b268:	460d      	mov	r5, r1
 800b26a:	4565      	cmp	r5, ip
 800b26c:	d30e      	bcc.n	800b28c <__mdiff+0xe8>
 800b26e:	f10c 0203 	add.w	r2, ip, #3
 800b272:	1a52      	subs	r2, r2, r1
 800b274:	f022 0203 	bic.w	r2, r2, #3
 800b278:	3903      	subs	r1, #3
 800b27a:	458c      	cmp	ip, r1
 800b27c:	bf38      	it	cc
 800b27e:	2200      	movcc	r2, #0
 800b280:	441a      	add	r2, r3
 800b282:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b286:	b17b      	cbz	r3, 800b2a8 <__mdiff+0x104>
 800b288:	6106      	str	r6, [r0, #16]
 800b28a:	e7a5      	b.n	800b1d8 <__mdiff+0x34>
 800b28c:	f855 8b04 	ldr.w	r8, [r5], #4
 800b290:	fa17 f488 	uxtah	r4, r7, r8
 800b294:	1422      	asrs	r2, r4, #16
 800b296:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b29a:	b2a4      	uxth	r4, r4
 800b29c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b2a0:	f84e 4b04 	str.w	r4, [lr], #4
 800b2a4:	1417      	asrs	r7, r2, #16
 800b2a6:	e7e0      	b.n	800b26a <__mdiff+0xc6>
 800b2a8:	3e01      	subs	r6, #1
 800b2aa:	e7ea      	b.n	800b282 <__mdiff+0xde>
 800b2ac:	0800ca0d 	.word	0x0800ca0d
 800b2b0:	0800cab3 	.word	0x0800cab3

0800b2b4 <__ulp>:
 800b2b4:	b082      	sub	sp, #8
 800b2b6:	ed8d 0b00 	vstr	d0, [sp]
 800b2ba:	9b01      	ldr	r3, [sp, #4]
 800b2bc:	4912      	ldr	r1, [pc, #72]	; (800b308 <__ulp+0x54>)
 800b2be:	4019      	ands	r1, r3
 800b2c0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b2c4:	2900      	cmp	r1, #0
 800b2c6:	dd05      	ble.n	800b2d4 <__ulp+0x20>
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	ec43 2b10 	vmov	d0, r2, r3
 800b2d0:	b002      	add	sp, #8
 800b2d2:	4770      	bx	lr
 800b2d4:	4249      	negs	r1, r1
 800b2d6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b2da:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b2de:	f04f 0200 	mov.w	r2, #0
 800b2e2:	f04f 0300 	mov.w	r3, #0
 800b2e6:	da04      	bge.n	800b2f2 <__ulp+0x3e>
 800b2e8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b2ec:	fa41 f300 	asr.w	r3, r1, r0
 800b2f0:	e7ec      	b.n	800b2cc <__ulp+0x18>
 800b2f2:	f1a0 0114 	sub.w	r1, r0, #20
 800b2f6:	291e      	cmp	r1, #30
 800b2f8:	bfda      	itte	le
 800b2fa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b2fe:	fa20 f101 	lsrle.w	r1, r0, r1
 800b302:	2101      	movgt	r1, #1
 800b304:	460a      	mov	r2, r1
 800b306:	e7e1      	b.n	800b2cc <__ulp+0x18>
 800b308:	7ff00000 	.word	0x7ff00000

0800b30c <__b2d>:
 800b30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b30e:	6905      	ldr	r5, [r0, #16]
 800b310:	f100 0714 	add.w	r7, r0, #20
 800b314:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b318:	1f2e      	subs	r6, r5, #4
 800b31a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b31e:	4620      	mov	r0, r4
 800b320:	f7ff fd52 	bl	800adc8 <__hi0bits>
 800b324:	f1c0 0320 	rsb	r3, r0, #32
 800b328:	280a      	cmp	r0, #10
 800b32a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b3a8 <__b2d+0x9c>
 800b32e:	600b      	str	r3, [r1, #0]
 800b330:	dc14      	bgt.n	800b35c <__b2d+0x50>
 800b332:	f1c0 0e0b 	rsb	lr, r0, #11
 800b336:	fa24 f10e 	lsr.w	r1, r4, lr
 800b33a:	42b7      	cmp	r7, r6
 800b33c:	ea41 030c 	orr.w	r3, r1, ip
 800b340:	bf34      	ite	cc
 800b342:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b346:	2100      	movcs	r1, #0
 800b348:	3015      	adds	r0, #21
 800b34a:	fa04 f000 	lsl.w	r0, r4, r0
 800b34e:	fa21 f10e 	lsr.w	r1, r1, lr
 800b352:	ea40 0201 	orr.w	r2, r0, r1
 800b356:	ec43 2b10 	vmov	d0, r2, r3
 800b35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b35c:	42b7      	cmp	r7, r6
 800b35e:	bf3a      	itte	cc
 800b360:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b364:	f1a5 0608 	subcc.w	r6, r5, #8
 800b368:	2100      	movcs	r1, #0
 800b36a:	380b      	subs	r0, #11
 800b36c:	d017      	beq.n	800b39e <__b2d+0x92>
 800b36e:	f1c0 0c20 	rsb	ip, r0, #32
 800b372:	fa04 f500 	lsl.w	r5, r4, r0
 800b376:	42be      	cmp	r6, r7
 800b378:	fa21 f40c 	lsr.w	r4, r1, ip
 800b37c:	ea45 0504 	orr.w	r5, r5, r4
 800b380:	bf8c      	ite	hi
 800b382:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b386:	2400      	movls	r4, #0
 800b388:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b38c:	fa01 f000 	lsl.w	r0, r1, r0
 800b390:	fa24 f40c 	lsr.w	r4, r4, ip
 800b394:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b398:	ea40 0204 	orr.w	r2, r0, r4
 800b39c:	e7db      	b.n	800b356 <__b2d+0x4a>
 800b39e:	ea44 030c 	orr.w	r3, r4, ip
 800b3a2:	460a      	mov	r2, r1
 800b3a4:	e7d7      	b.n	800b356 <__b2d+0x4a>
 800b3a6:	bf00      	nop
 800b3a8:	3ff00000 	.word	0x3ff00000

0800b3ac <__d2b>:
 800b3ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b3b0:	4689      	mov	r9, r1
 800b3b2:	2101      	movs	r1, #1
 800b3b4:	ec57 6b10 	vmov	r6, r7, d0
 800b3b8:	4690      	mov	r8, r2
 800b3ba:	f7ff fc0f 	bl	800abdc <_Balloc>
 800b3be:	4604      	mov	r4, r0
 800b3c0:	b930      	cbnz	r0, 800b3d0 <__d2b+0x24>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	4b25      	ldr	r3, [pc, #148]	; (800b45c <__d2b+0xb0>)
 800b3c6:	4826      	ldr	r0, [pc, #152]	; (800b460 <__d2b+0xb4>)
 800b3c8:	f240 310a 	movw	r1, #778	; 0x30a
 800b3cc:	f000 f8f8 	bl	800b5c0 <__assert_func>
 800b3d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b3d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b3d8:	bb35      	cbnz	r5, 800b428 <__d2b+0x7c>
 800b3da:	2e00      	cmp	r6, #0
 800b3dc:	9301      	str	r3, [sp, #4]
 800b3de:	d028      	beq.n	800b432 <__d2b+0x86>
 800b3e0:	4668      	mov	r0, sp
 800b3e2:	9600      	str	r6, [sp, #0]
 800b3e4:	f7ff fd10 	bl	800ae08 <__lo0bits>
 800b3e8:	9900      	ldr	r1, [sp, #0]
 800b3ea:	b300      	cbz	r0, 800b42e <__d2b+0x82>
 800b3ec:	9a01      	ldr	r2, [sp, #4]
 800b3ee:	f1c0 0320 	rsb	r3, r0, #32
 800b3f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b3f6:	430b      	orrs	r3, r1
 800b3f8:	40c2      	lsrs	r2, r0
 800b3fa:	6163      	str	r3, [r4, #20]
 800b3fc:	9201      	str	r2, [sp, #4]
 800b3fe:	9b01      	ldr	r3, [sp, #4]
 800b400:	61a3      	str	r3, [r4, #24]
 800b402:	2b00      	cmp	r3, #0
 800b404:	bf14      	ite	ne
 800b406:	2202      	movne	r2, #2
 800b408:	2201      	moveq	r2, #1
 800b40a:	6122      	str	r2, [r4, #16]
 800b40c:	b1d5      	cbz	r5, 800b444 <__d2b+0x98>
 800b40e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b412:	4405      	add	r5, r0
 800b414:	f8c9 5000 	str.w	r5, [r9]
 800b418:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b41c:	f8c8 0000 	str.w	r0, [r8]
 800b420:	4620      	mov	r0, r4
 800b422:	b003      	add	sp, #12
 800b424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b428:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b42c:	e7d5      	b.n	800b3da <__d2b+0x2e>
 800b42e:	6161      	str	r1, [r4, #20]
 800b430:	e7e5      	b.n	800b3fe <__d2b+0x52>
 800b432:	a801      	add	r0, sp, #4
 800b434:	f7ff fce8 	bl	800ae08 <__lo0bits>
 800b438:	9b01      	ldr	r3, [sp, #4]
 800b43a:	6163      	str	r3, [r4, #20]
 800b43c:	2201      	movs	r2, #1
 800b43e:	6122      	str	r2, [r4, #16]
 800b440:	3020      	adds	r0, #32
 800b442:	e7e3      	b.n	800b40c <__d2b+0x60>
 800b444:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b448:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b44c:	f8c9 0000 	str.w	r0, [r9]
 800b450:	6918      	ldr	r0, [r3, #16]
 800b452:	f7ff fcb9 	bl	800adc8 <__hi0bits>
 800b456:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b45a:	e7df      	b.n	800b41c <__d2b+0x70>
 800b45c:	0800ca0d 	.word	0x0800ca0d
 800b460:	0800cab3 	.word	0x0800cab3

0800b464 <__ratio>:
 800b464:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b468:	4688      	mov	r8, r1
 800b46a:	4669      	mov	r1, sp
 800b46c:	4681      	mov	r9, r0
 800b46e:	f7ff ff4d 	bl	800b30c <__b2d>
 800b472:	a901      	add	r1, sp, #4
 800b474:	4640      	mov	r0, r8
 800b476:	ec55 4b10 	vmov	r4, r5, d0
 800b47a:	f7ff ff47 	bl	800b30c <__b2d>
 800b47e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b482:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b486:	eba3 0c02 	sub.w	ip, r3, r2
 800b48a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b48e:	1a9b      	subs	r3, r3, r2
 800b490:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b494:	ec51 0b10 	vmov	r0, r1, d0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	bfd6      	itet	le
 800b49c:	460a      	movle	r2, r1
 800b49e:	462a      	movgt	r2, r5
 800b4a0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b4a4:	468b      	mov	fp, r1
 800b4a6:	462f      	mov	r7, r5
 800b4a8:	bfd4      	ite	le
 800b4aa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b4ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	ee10 2a10 	vmov	r2, s0
 800b4b8:	465b      	mov	r3, fp
 800b4ba:	4639      	mov	r1, r7
 800b4bc:	f7f5 f9ce 	bl	800085c <__aeabi_ddiv>
 800b4c0:	ec41 0b10 	vmov	d0, r0, r1
 800b4c4:	b003      	add	sp, #12
 800b4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b4ca <__copybits>:
 800b4ca:	3901      	subs	r1, #1
 800b4cc:	b570      	push	{r4, r5, r6, lr}
 800b4ce:	1149      	asrs	r1, r1, #5
 800b4d0:	6914      	ldr	r4, [r2, #16]
 800b4d2:	3101      	adds	r1, #1
 800b4d4:	f102 0314 	add.w	r3, r2, #20
 800b4d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b4dc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b4e0:	1f05      	subs	r5, r0, #4
 800b4e2:	42a3      	cmp	r3, r4
 800b4e4:	d30c      	bcc.n	800b500 <__copybits+0x36>
 800b4e6:	1aa3      	subs	r3, r4, r2
 800b4e8:	3b11      	subs	r3, #17
 800b4ea:	f023 0303 	bic.w	r3, r3, #3
 800b4ee:	3211      	adds	r2, #17
 800b4f0:	42a2      	cmp	r2, r4
 800b4f2:	bf88      	it	hi
 800b4f4:	2300      	movhi	r3, #0
 800b4f6:	4418      	add	r0, r3
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	4288      	cmp	r0, r1
 800b4fc:	d305      	bcc.n	800b50a <__copybits+0x40>
 800b4fe:	bd70      	pop	{r4, r5, r6, pc}
 800b500:	f853 6b04 	ldr.w	r6, [r3], #4
 800b504:	f845 6f04 	str.w	r6, [r5, #4]!
 800b508:	e7eb      	b.n	800b4e2 <__copybits+0x18>
 800b50a:	f840 3b04 	str.w	r3, [r0], #4
 800b50e:	e7f4      	b.n	800b4fa <__copybits+0x30>

0800b510 <__any_on>:
 800b510:	f100 0214 	add.w	r2, r0, #20
 800b514:	6900      	ldr	r0, [r0, #16]
 800b516:	114b      	asrs	r3, r1, #5
 800b518:	4298      	cmp	r0, r3
 800b51a:	b510      	push	{r4, lr}
 800b51c:	db11      	blt.n	800b542 <__any_on+0x32>
 800b51e:	dd0a      	ble.n	800b536 <__any_on+0x26>
 800b520:	f011 011f 	ands.w	r1, r1, #31
 800b524:	d007      	beq.n	800b536 <__any_on+0x26>
 800b526:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b52a:	fa24 f001 	lsr.w	r0, r4, r1
 800b52e:	fa00 f101 	lsl.w	r1, r0, r1
 800b532:	428c      	cmp	r4, r1
 800b534:	d10b      	bne.n	800b54e <__any_on+0x3e>
 800b536:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d803      	bhi.n	800b546 <__any_on+0x36>
 800b53e:	2000      	movs	r0, #0
 800b540:	bd10      	pop	{r4, pc}
 800b542:	4603      	mov	r3, r0
 800b544:	e7f7      	b.n	800b536 <__any_on+0x26>
 800b546:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b54a:	2900      	cmp	r1, #0
 800b54c:	d0f5      	beq.n	800b53a <__any_on+0x2a>
 800b54e:	2001      	movs	r0, #1
 800b550:	e7f6      	b.n	800b540 <__any_on+0x30>

0800b552 <_calloc_r>:
 800b552:	b513      	push	{r0, r1, r4, lr}
 800b554:	434a      	muls	r2, r1
 800b556:	4611      	mov	r1, r2
 800b558:	9201      	str	r2, [sp, #4]
 800b55a:	f7fe f8a7 	bl	80096ac <_malloc_r>
 800b55e:	4604      	mov	r4, r0
 800b560:	b118      	cbz	r0, 800b56a <_calloc_r+0x18>
 800b562:	9a01      	ldr	r2, [sp, #4]
 800b564:	2100      	movs	r1, #0
 800b566:	f7fe f849 	bl	80095fc <memset>
 800b56a:	4620      	mov	r0, r4
 800b56c:	b002      	add	sp, #8
 800b56e:	bd10      	pop	{r4, pc}

0800b570 <nan>:
 800b570:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b578 <nan+0x8>
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop
 800b578:	00000000 	.word	0x00000000
 800b57c:	7ff80000 	.word	0x7ff80000

0800b580 <strncmp>:
 800b580:	b510      	push	{r4, lr}
 800b582:	b16a      	cbz	r2, 800b5a0 <strncmp+0x20>
 800b584:	3901      	subs	r1, #1
 800b586:	1884      	adds	r4, r0, r2
 800b588:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b58c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b590:	4293      	cmp	r3, r2
 800b592:	d103      	bne.n	800b59c <strncmp+0x1c>
 800b594:	42a0      	cmp	r0, r4
 800b596:	d001      	beq.n	800b59c <strncmp+0x1c>
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d1f5      	bne.n	800b588 <strncmp+0x8>
 800b59c:	1a98      	subs	r0, r3, r2
 800b59e:	bd10      	pop	{r4, pc}
 800b5a0:	4610      	mov	r0, r2
 800b5a2:	e7fc      	b.n	800b59e <strncmp+0x1e>

0800b5a4 <__ascii_wctomb>:
 800b5a4:	b149      	cbz	r1, 800b5ba <__ascii_wctomb+0x16>
 800b5a6:	2aff      	cmp	r2, #255	; 0xff
 800b5a8:	bf85      	ittet	hi
 800b5aa:	238a      	movhi	r3, #138	; 0x8a
 800b5ac:	6003      	strhi	r3, [r0, #0]
 800b5ae:	700a      	strbls	r2, [r1, #0]
 800b5b0:	f04f 30ff 	movhi.w	r0, #4294967295
 800b5b4:	bf98      	it	ls
 800b5b6:	2001      	movls	r0, #1
 800b5b8:	4770      	bx	lr
 800b5ba:	4608      	mov	r0, r1
 800b5bc:	4770      	bx	lr
	...

0800b5c0 <__assert_func>:
 800b5c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5c2:	4614      	mov	r4, r2
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	4b09      	ldr	r3, [pc, #36]	; (800b5ec <__assert_func+0x2c>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4605      	mov	r5, r0
 800b5cc:	68d8      	ldr	r0, [r3, #12]
 800b5ce:	b14c      	cbz	r4, 800b5e4 <__assert_func+0x24>
 800b5d0:	4b07      	ldr	r3, [pc, #28]	; (800b5f0 <__assert_func+0x30>)
 800b5d2:	9100      	str	r1, [sp, #0]
 800b5d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b5d8:	4906      	ldr	r1, [pc, #24]	; (800b5f4 <__assert_func+0x34>)
 800b5da:	462b      	mov	r3, r5
 800b5dc:	f000 f80e 	bl	800b5fc <fiprintf>
 800b5e0:	f000 fbce 	bl	800bd80 <abort>
 800b5e4:	4b04      	ldr	r3, [pc, #16]	; (800b5f8 <__assert_func+0x38>)
 800b5e6:	461c      	mov	r4, r3
 800b5e8:	e7f3      	b.n	800b5d2 <__assert_func+0x12>
 800b5ea:	bf00      	nop
 800b5ec:	20000018 	.word	0x20000018
 800b5f0:	0800cc14 	.word	0x0800cc14
 800b5f4:	0800cc21 	.word	0x0800cc21
 800b5f8:	0800cc4f 	.word	0x0800cc4f

0800b5fc <fiprintf>:
 800b5fc:	b40e      	push	{r1, r2, r3}
 800b5fe:	b503      	push	{r0, r1, lr}
 800b600:	4601      	mov	r1, r0
 800b602:	ab03      	add	r3, sp, #12
 800b604:	4805      	ldr	r0, [pc, #20]	; (800b61c <fiprintf+0x20>)
 800b606:	f853 2b04 	ldr.w	r2, [r3], #4
 800b60a:	6800      	ldr	r0, [r0, #0]
 800b60c:	9301      	str	r3, [sp, #4]
 800b60e:	f000 f833 	bl	800b678 <_vfiprintf_r>
 800b612:	b002      	add	sp, #8
 800b614:	f85d eb04 	ldr.w	lr, [sp], #4
 800b618:	b003      	add	sp, #12
 800b61a:	4770      	bx	lr
 800b61c:	20000018 	.word	0x20000018

0800b620 <__retarget_lock_init_recursive>:
 800b620:	4770      	bx	lr

0800b622 <__retarget_lock_acquire_recursive>:
 800b622:	4770      	bx	lr

0800b624 <__retarget_lock_release_recursive>:
 800b624:	4770      	bx	lr

0800b626 <__sfputc_r>:
 800b626:	6893      	ldr	r3, [r2, #8]
 800b628:	3b01      	subs	r3, #1
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	b410      	push	{r4}
 800b62e:	6093      	str	r3, [r2, #8]
 800b630:	da08      	bge.n	800b644 <__sfputc_r+0x1e>
 800b632:	6994      	ldr	r4, [r2, #24]
 800b634:	42a3      	cmp	r3, r4
 800b636:	db01      	blt.n	800b63c <__sfputc_r+0x16>
 800b638:	290a      	cmp	r1, #10
 800b63a:	d103      	bne.n	800b644 <__sfputc_r+0x1e>
 800b63c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b640:	f000 bade 	b.w	800bc00 <__swbuf_r>
 800b644:	6813      	ldr	r3, [r2, #0]
 800b646:	1c58      	adds	r0, r3, #1
 800b648:	6010      	str	r0, [r2, #0]
 800b64a:	7019      	strb	r1, [r3, #0]
 800b64c:	4608      	mov	r0, r1
 800b64e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b652:	4770      	bx	lr

0800b654 <__sfputs_r>:
 800b654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b656:	4606      	mov	r6, r0
 800b658:	460f      	mov	r7, r1
 800b65a:	4614      	mov	r4, r2
 800b65c:	18d5      	adds	r5, r2, r3
 800b65e:	42ac      	cmp	r4, r5
 800b660:	d101      	bne.n	800b666 <__sfputs_r+0x12>
 800b662:	2000      	movs	r0, #0
 800b664:	e007      	b.n	800b676 <__sfputs_r+0x22>
 800b666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b66a:	463a      	mov	r2, r7
 800b66c:	4630      	mov	r0, r6
 800b66e:	f7ff ffda 	bl	800b626 <__sfputc_r>
 800b672:	1c43      	adds	r3, r0, #1
 800b674:	d1f3      	bne.n	800b65e <__sfputs_r+0xa>
 800b676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b678 <_vfiprintf_r>:
 800b678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b67c:	460d      	mov	r5, r1
 800b67e:	b09d      	sub	sp, #116	; 0x74
 800b680:	4614      	mov	r4, r2
 800b682:	4698      	mov	r8, r3
 800b684:	4606      	mov	r6, r0
 800b686:	b118      	cbz	r0, 800b690 <_vfiprintf_r+0x18>
 800b688:	6983      	ldr	r3, [r0, #24]
 800b68a:	b90b      	cbnz	r3, 800b690 <_vfiprintf_r+0x18>
 800b68c:	f000 fc9a 	bl	800bfc4 <__sinit>
 800b690:	4b89      	ldr	r3, [pc, #548]	; (800b8b8 <_vfiprintf_r+0x240>)
 800b692:	429d      	cmp	r5, r3
 800b694:	d11b      	bne.n	800b6ce <_vfiprintf_r+0x56>
 800b696:	6875      	ldr	r5, [r6, #4]
 800b698:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b69a:	07d9      	lsls	r1, r3, #31
 800b69c:	d405      	bmi.n	800b6aa <_vfiprintf_r+0x32>
 800b69e:	89ab      	ldrh	r3, [r5, #12]
 800b6a0:	059a      	lsls	r2, r3, #22
 800b6a2:	d402      	bmi.n	800b6aa <_vfiprintf_r+0x32>
 800b6a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6a6:	f7ff ffbc 	bl	800b622 <__retarget_lock_acquire_recursive>
 800b6aa:	89ab      	ldrh	r3, [r5, #12]
 800b6ac:	071b      	lsls	r3, r3, #28
 800b6ae:	d501      	bpl.n	800b6b4 <_vfiprintf_r+0x3c>
 800b6b0:	692b      	ldr	r3, [r5, #16]
 800b6b2:	b9eb      	cbnz	r3, 800b6f0 <_vfiprintf_r+0x78>
 800b6b4:	4629      	mov	r1, r5
 800b6b6:	4630      	mov	r0, r6
 800b6b8:	f000 faf4 	bl	800bca4 <__swsetup_r>
 800b6bc:	b1c0      	cbz	r0, 800b6f0 <_vfiprintf_r+0x78>
 800b6be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6c0:	07dc      	lsls	r4, r3, #31
 800b6c2:	d50e      	bpl.n	800b6e2 <_vfiprintf_r+0x6a>
 800b6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c8:	b01d      	add	sp, #116	; 0x74
 800b6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ce:	4b7b      	ldr	r3, [pc, #492]	; (800b8bc <_vfiprintf_r+0x244>)
 800b6d0:	429d      	cmp	r5, r3
 800b6d2:	d101      	bne.n	800b6d8 <_vfiprintf_r+0x60>
 800b6d4:	68b5      	ldr	r5, [r6, #8]
 800b6d6:	e7df      	b.n	800b698 <_vfiprintf_r+0x20>
 800b6d8:	4b79      	ldr	r3, [pc, #484]	; (800b8c0 <_vfiprintf_r+0x248>)
 800b6da:	429d      	cmp	r5, r3
 800b6dc:	bf08      	it	eq
 800b6de:	68f5      	ldreq	r5, [r6, #12]
 800b6e0:	e7da      	b.n	800b698 <_vfiprintf_r+0x20>
 800b6e2:	89ab      	ldrh	r3, [r5, #12]
 800b6e4:	0598      	lsls	r0, r3, #22
 800b6e6:	d4ed      	bmi.n	800b6c4 <_vfiprintf_r+0x4c>
 800b6e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6ea:	f7ff ff9b 	bl	800b624 <__retarget_lock_release_recursive>
 800b6ee:	e7e9      	b.n	800b6c4 <_vfiprintf_r+0x4c>
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b6f4:	2320      	movs	r3, #32
 800b6f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6fe:	2330      	movs	r3, #48	; 0x30
 800b700:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b8c4 <_vfiprintf_r+0x24c>
 800b704:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b708:	f04f 0901 	mov.w	r9, #1
 800b70c:	4623      	mov	r3, r4
 800b70e:	469a      	mov	sl, r3
 800b710:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b714:	b10a      	cbz	r2, 800b71a <_vfiprintf_r+0xa2>
 800b716:	2a25      	cmp	r2, #37	; 0x25
 800b718:	d1f9      	bne.n	800b70e <_vfiprintf_r+0x96>
 800b71a:	ebba 0b04 	subs.w	fp, sl, r4
 800b71e:	d00b      	beq.n	800b738 <_vfiprintf_r+0xc0>
 800b720:	465b      	mov	r3, fp
 800b722:	4622      	mov	r2, r4
 800b724:	4629      	mov	r1, r5
 800b726:	4630      	mov	r0, r6
 800b728:	f7ff ff94 	bl	800b654 <__sfputs_r>
 800b72c:	3001      	adds	r0, #1
 800b72e:	f000 80aa 	beq.w	800b886 <_vfiprintf_r+0x20e>
 800b732:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b734:	445a      	add	r2, fp
 800b736:	9209      	str	r2, [sp, #36]	; 0x24
 800b738:	f89a 3000 	ldrb.w	r3, [sl]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	f000 80a2 	beq.w	800b886 <_vfiprintf_r+0x20e>
 800b742:	2300      	movs	r3, #0
 800b744:	f04f 32ff 	mov.w	r2, #4294967295
 800b748:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b74c:	f10a 0a01 	add.w	sl, sl, #1
 800b750:	9304      	str	r3, [sp, #16]
 800b752:	9307      	str	r3, [sp, #28]
 800b754:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b758:	931a      	str	r3, [sp, #104]	; 0x68
 800b75a:	4654      	mov	r4, sl
 800b75c:	2205      	movs	r2, #5
 800b75e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b762:	4858      	ldr	r0, [pc, #352]	; (800b8c4 <_vfiprintf_r+0x24c>)
 800b764:	f7f4 fd44 	bl	80001f0 <memchr>
 800b768:	9a04      	ldr	r2, [sp, #16]
 800b76a:	b9d8      	cbnz	r0, 800b7a4 <_vfiprintf_r+0x12c>
 800b76c:	06d1      	lsls	r1, r2, #27
 800b76e:	bf44      	itt	mi
 800b770:	2320      	movmi	r3, #32
 800b772:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b776:	0713      	lsls	r3, r2, #28
 800b778:	bf44      	itt	mi
 800b77a:	232b      	movmi	r3, #43	; 0x2b
 800b77c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b780:	f89a 3000 	ldrb.w	r3, [sl]
 800b784:	2b2a      	cmp	r3, #42	; 0x2a
 800b786:	d015      	beq.n	800b7b4 <_vfiprintf_r+0x13c>
 800b788:	9a07      	ldr	r2, [sp, #28]
 800b78a:	4654      	mov	r4, sl
 800b78c:	2000      	movs	r0, #0
 800b78e:	f04f 0c0a 	mov.w	ip, #10
 800b792:	4621      	mov	r1, r4
 800b794:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b798:	3b30      	subs	r3, #48	; 0x30
 800b79a:	2b09      	cmp	r3, #9
 800b79c:	d94e      	bls.n	800b83c <_vfiprintf_r+0x1c4>
 800b79e:	b1b0      	cbz	r0, 800b7ce <_vfiprintf_r+0x156>
 800b7a0:	9207      	str	r2, [sp, #28]
 800b7a2:	e014      	b.n	800b7ce <_vfiprintf_r+0x156>
 800b7a4:	eba0 0308 	sub.w	r3, r0, r8
 800b7a8:	fa09 f303 	lsl.w	r3, r9, r3
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	9304      	str	r3, [sp, #16]
 800b7b0:	46a2      	mov	sl, r4
 800b7b2:	e7d2      	b.n	800b75a <_vfiprintf_r+0xe2>
 800b7b4:	9b03      	ldr	r3, [sp, #12]
 800b7b6:	1d19      	adds	r1, r3, #4
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	9103      	str	r1, [sp, #12]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	bfbb      	ittet	lt
 800b7c0:	425b      	neglt	r3, r3
 800b7c2:	f042 0202 	orrlt.w	r2, r2, #2
 800b7c6:	9307      	strge	r3, [sp, #28]
 800b7c8:	9307      	strlt	r3, [sp, #28]
 800b7ca:	bfb8      	it	lt
 800b7cc:	9204      	strlt	r2, [sp, #16]
 800b7ce:	7823      	ldrb	r3, [r4, #0]
 800b7d0:	2b2e      	cmp	r3, #46	; 0x2e
 800b7d2:	d10c      	bne.n	800b7ee <_vfiprintf_r+0x176>
 800b7d4:	7863      	ldrb	r3, [r4, #1]
 800b7d6:	2b2a      	cmp	r3, #42	; 0x2a
 800b7d8:	d135      	bne.n	800b846 <_vfiprintf_r+0x1ce>
 800b7da:	9b03      	ldr	r3, [sp, #12]
 800b7dc:	1d1a      	adds	r2, r3, #4
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	9203      	str	r2, [sp, #12]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	bfb8      	it	lt
 800b7e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b7ea:	3402      	adds	r4, #2
 800b7ec:	9305      	str	r3, [sp, #20]
 800b7ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b8d4 <_vfiprintf_r+0x25c>
 800b7f2:	7821      	ldrb	r1, [r4, #0]
 800b7f4:	2203      	movs	r2, #3
 800b7f6:	4650      	mov	r0, sl
 800b7f8:	f7f4 fcfa 	bl	80001f0 <memchr>
 800b7fc:	b140      	cbz	r0, 800b810 <_vfiprintf_r+0x198>
 800b7fe:	2340      	movs	r3, #64	; 0x40
 800b800:	eba0 000a 	sub.w	r0, r0, sl
 800b804:	fa03 f000 	lsl.w	r0, r3, r0
 800b808:	9b04      	ldr	r3, [sp, #16]
 800b80a:	4303      	orrs	r3, r0
 800b80c:	3401      	adds	r4, #1
 800b80e:	9304      	str	r3, [sp, #16]
 800b810:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b814:	482c      	ldr	r0, [pc, #176]	; (800b8c8 <_vfiprintf_r+0x250>)
 800b816:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b81a:	2206      	movs	r2, #6
 800b81c:	f7f4 fce8 	bl	80001f0 <memchr>
 800b820:	2800      	cmp	r0, #0
 800b822:	d03f      	beq.n	800b8a4 <_vfiprintf_r+0x22c>
 800b824:	4b29      	ldr	r3, [pc, #164]	; (800b8cc <_vfiprintf_r+0x254>)
 800b826:	bb1b      	cbnz	r3, 800b870 <_vfiprintf_r+0x1f8>
 800b828:	9b03      	ldr	r3, [sp, #12]
 800b82a:	3307      	adds	r3, #7
 800b82c:	f023 0307 	bic.w	r3, r3, #7
 800b830:	3308      	adds	r3, #8
 800b832:	9303      	str	r3, [sp, #12]
 800b834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b836:	443b      	add	r3, r7
 800b838:	9309      	str	r3, [sp, #36]	; 0x24
 800b83a:	e767      	b.n	800b70c <_vfiprintf_r+0x94>
 800b83c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b840:	460c      	mov	r4, r1
 800b842:	2001      	movs	r0, #1
 800b844:	e7a5      	b.n	800b792 <_vfiprintf_r+0x11a>
 800b846:	2300      	movs	r3, #0
 800b848:	3401      	adds	r4, #1
 800b84a:	9305      	str	r3, [sp, #20]
 800b84c:	4619      	mov	r1, r3
 800b84e:	f04f 0c0a 	mov.w	ip, #10
 800b852:	4620      	mov	r0, r4
 800b854:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b858:	3a30      	subs	r2, #48	; 0x30
 800b85a:	2a09      	cmp	r2, #9
 800b85c:	d903      	bls.n	800b866 <_vfiprintf_r+0x1ee>
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d0c5      	beq.n	800b7ee <_vfiprintf_r+0x176>
 800b862:	9105      	str	r1, [sp, #20]
 800b864:	e7c3      	b.n	800b7ee <_vfiprintf_r+0x176>
 800b866:	fb0c 2101 	mla	r1, ip, r1, r2
 800b86a:	4604      	mov	r4, r0
 800b86c:	2301      	movs	r3, #1
 800b86e:	e7f0      	b.n	800b852 <_vfiprintf_r+0x1da>
 800b870:	ab03      	add	r3, sp, #12
 800b872:	9300      	str	r3, [sp, #0]
 800b874:	462a      	mov	r2, r5
 800b876:	4b16      	ldr	r3, [pc, #88]	; (800b8d0 <_vfiprintf_r+0x258>)
 800b878:	a904      	add	r1, sp, #16
 800b87a:	4630      	mov	r0, r6
 800b87c:	f3af 8000 	nop.w
 800b880:	4607      	mov	r7, r0
 800b882:	1c78      	adds	r0, r7, #1
 800b884:	d1d6      	bne.n	800b834 <_vfiprintf_r+0x1bc>
 800b886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b888:	07d9      	lsls	r1, r3, #31
 800b88a:	d405      	bmi.n	800b898 <_vfiprintf_r+0x220>
 800b88c:	89ab      	ldrh	r3, [r5, #12]
 800b88e:	059a      	lsls	r2, r3, #22
 800b890:	d402      	bmi.n	800b898 <_vfiprintf_r+0x220>
 800b892:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b894:	f7ff fec6 	bl	800b624 <__retarget_lock_release_recursive>
 800b898:	89ab      	ldrh	r3, [r5, #12]
 800b89a:	065b      	lsls	r3, r3, #25
 800b89c:	f53f af12 	bmi.w	800b6c4 <_vfiprintf_r+0x4c>
 800b8a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8a2:	e711      	b.n	800b6c8 <_vfiprintf_r+0x50>
 800b8a4:	ab03      	add	r3, sp, #12
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	462a      	mov	r2, r5
 800b8aa:	4b09      	ldr	r3, [pc, #36]	; (800b8d0 <_vfiprintf_r+0x258>)
 800b8ac:	a904      	add	r1, sp, #16
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	f000 f880 	bl	800b9b4 <_printf_i>
 800b8b4:	e7e4      	b.n	800b880 <_vfiprintf_r+0x208>
 800b8b6:	bf00      	nop
 800b8b8:	0800cda4 	.word	0x0800cda4
 800b8bc:	0800cdc4 	.word	0x0800cdc4
 800b8c0:	0800cd84 	.word	0x0800cd84
 800b8c4:	0800cd51 	.word	0x0800cd51
 800b8c8:	0800cd5b 	.word	0x0800cd5b
 800b8cc:	00000000 	.word	0x00000000
 800b8d0:	0800b655 	.word	0x0800b655
 800b8d4:	0800cd57 	.word	0x0800cd57

0800b8d8 <_printf_common>:
 800b8d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8dc:	4616      	mov	r6, r2
 800b8de:	4699      	mov	r9, r3
 800b8e0:	688a      	ldr	r2, [r1, #8]
 800b8e2:	690b      	ldr	r3, [r1, #16]
 800b8e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	bfb8      	it	lt
 800b8ec:	4613      	movlt	r3, r2
 800b8ee:	6033      	str	r3, [r6, #0]
 800b8f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b8f4:	4607      	mov	r7, r0
 800b8f6:	460c      	mov	r4, r1
 800b8f8:	b10a      	cbz	r2, 800b8fe <_printf_common+0x26>
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	6033      	str	r3, [r6, #0]
 800b8fe:	6823      	ldr	r3, [r4, #0]
 800b900:	0699      	lsls	r1, r3, #26
 800b902:	bf42      	ittt	mi
 800b904:	6833      	ldrmi	r3, [r6, #0]
 800b906:	3302      	addmi	r3, #2
 800b908:	6033      	strmi	r3, [r6, #0]
 800b90a:	6825      	ldr	r5, [r4, #0]
 800b90c:	f015 0506 	ands.w	r5, r5, #6
 800b910:	d106      	bne.n	800b920 <_printf_common+0x48>
 800b912:	f104 0a19 	add.w	sl, r4, #25
 800b916:	68e3      	ldr	r3, [r4, #12]
 800b918:	6832      	ldr	r2, [r6, #0]
 800b91a:	1a9b      	subs	r3, r3, r2
 800b91c:	42ab      	cmp	r3, r5
 800b91e:	dc26      	bgt.n	800b96e <_printf_common+0x96>
 800b920:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b924:	1e13      	subs	r3, r2, #0
 800b926:	6822      	ldr	r2, [r4, #0]
 800b928:	bf18      	it	ne
 800b92a:	2301      	movne	r3, #1
 800b92c:	0692      	lsls	r2, r2, #26
 800b92e:	d42b      	bmi.n	800b988 <_printf_common+0xb0>
 800b930:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b934:	4649      	mov	r1, r9
 800b936:	4638      	mov	r0, r7
 800b938:	47c0      	blx	r8
 800b93a:	3001      	adds	r0, #1
 800b93c:	d01e      	beq.n	800b97c <_printf_common+0xa4>
 800b93e:	6823      	ldr	r3, [r4, #0]
 800b940:	68e5      	ldr	r5, [r4, #12]
 800b942:	6832      	ldr	r2, [r6, #0]
 800b944:	f003 0306 	and.w	r3, r3, #6
 800b948:	2b04      	cmp	r3, #4
 800b94a:	bf08      	it	eq
 800b94c:	1aad      	subeq	r5, r5, r2
 800b94e:	68a3      	ldr	r3, [r4, #8]
 800b950:	6922      	ldr	r2, [r4, #16]
 800b952:	bf0c      	ite	eq
 800b954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b958:	2500      	movne	r5, #0
 800b95a:	4293      	cmp	r3, r2
 800b95c:	bfc4      	itt	gt
 800b95e:	1a9b      	subgt	r3, r3, r2
 800b960:	18ed      	addgt	r5, r5, r3
 800b962:	2600      	movs	r6, #0
 800b964:	341a      	adds	r4, #26
 800b966:	42b5      	cmp	r5, r6
 800b968:	d11a      	bne.n	800b9a0 <_printf_common+0xc8>
 800b96a:	2000      	movs	r0, #0
 800b96c:	e008      	b.n	800b980 <_printf_common+0xa8>
 800b96e:	2301      	movs	r3, #1
 800b970:	4652      	mov	r2, sl
 800b972:	4649      	mov	r1, r9
 800b974:	4638      	mov	r0, r7
 800b976:	47c0      	blx	r8
 800b978:	3001      	adds	r0, #1
 800b97a:	d103      	bne.n	800b984 <_printf_common+0xac>
 800b97c:	f04f 30ff 	mov.w	r0, #4294967295
 800b980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b984:	3501      	adds	r5, #1
 800b986:	e7c6      	b.n	800b916 <_printf_common+0x3e>
 800b988:	18e1      	adds	r1, r4, r3
 800b98a:	1c5a      	adds	r2, r3, #1
 800b98c:	2030      	movs	r0, #48	; 0x30
 800b98e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b992:	4422      	add	r2, r4
 800b994:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b998:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b99c:	3302      	adds	r3, #2
 800b99e:	e7c7      	b.n	800b930 <_printf_common+0x58>
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	4622      	mov	r2, r4
 800b9a4:	4649      	mov	r1, r9
 800b9a6:	4638      	mov	r0, r7
 800b9a8:	47c0      	blx	r8
 800b9aa:	3001      	adds	r0, #1
 800b9ac:	d0e6      	beq.n	800b97c <_printf_common+0xa4>
 800b9ae:	3601      	adds	r6, #1
 800b9b0:	e7d9      	b.n	800b966 <_printf_common+0x8e>
	...

0800b9b4 <_printf_i>:
 800b9b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9b8:	460c      	mov	r4, r1
 800b9ba:	4691      	mov	r9, r2
 800b9bc:	7e27      	ldrb	r7, [r4, #24]
 800b9be:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b9c0:	2f78      	cmp	r7, #120	; 0x78
 800b9c2:	4680      	mov	r8, r0
 800b9c4:	469a      	mov	sl, r3
 800b9c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b9ca:	d807      	bhi.n	800b9dc <_printf_i+0x28>
 800b9cc:	2f62      	cmp	r7, #98	; 0x62
 800b9ce:	d80a      	bhi.n	800b9e6 <_printf_i+0x32>
 800b9d0:	2f00      	cmp	r7, #0
 800b9d2:	f000 80d8 	beq.w	800bb86 <_printf_i+0x1d2>
 800b9d6:	2f58      	cmp	r7, #88	; 0x58
 800b9d8:	f000 80a3 	beq.w	800bb22 <_printf_i+0x16e>
 800b9dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b9e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b9e4:	e03a      	b.n	800ba5c <_printf_i+0xa8>
 800b9e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b9ea:	2b15      	cmp	r3, #21
 800b9ec:	d8f6      	bhi.n	800b9dc <_printf_i+0x28>
 800b9ee:	a001      	add	r0, pc, #4	; (adr r0, 800b9f4 <_printf_i+0x40>)
 800b9f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b9f4:	0800ba4d 	.word	0x0800ba4d
 800b9f8:	0800ba61 	.word	0x0800ba61
 800b9fc:	0800b9dd 	.word	0x0800b9dd
 800ba00:	0800b9dd 	.word	0x0800b9dd
 800ba04:	0800b9dd 	.word	0x0800b9dd
 800ba08:	0800b9dd 	.word	0x0800b9dd
 800ba0c:	0800ba61 	.word	0x0800ba61
 800ba10:	0800b9dd 	.word	0x0800b9dd
 800ba14:	0800b9dd 	.word	0x0800b9dd
 800ba18:	0800b9dd 	.word	0x0800b9dd
 800ba1c:	0800b9dd 	.word	0x0800b9dd
 800ba20:	0800bb6d 	.word	0x0800bb6d
 800ba24:	0800ba91 	.word	0x0800ba91
 800ba28:	0800bb4f 	.word	0x0800bb4f
 800ba2c:	0800b9dd 	.word	0x0800b9dd
 800ba30:	0800b9dd 	.word	0x0800b9dd
 800ba34:	0800bb8f 	.word	0x0800bb8f
 800ba38:	0800b9dd 	.word	0x0800b9dd
 800ba3c:	0800ba91 	.word	0x0800ba91
 800ba40:	0800b9dd 	.word	0x0800b9dd
 800ba44:	0800b9dd 	.word	0x0800b9dd
 800ba48:	0800bb57 	.word	0x0800bb57
 800ba4c:	680b      	ldr	r3, [r1, #0]
 800ba4e:	1d1a      	adds	r2, r3, #4
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	600a      	str	r2, [r1, #0]
 800ba54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ba58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e0a3      	b.n	800bba8 <_printf_i+0x1f4>
 800ba60:	6825      	ldr	r5, [r4, #0]
 800ba62:	6808      	ldr	r0, [r1, #0]
 800ba64:	062e      	lsls	r6, r5, #24
 800ba66:	f100 0304 	add.w	r3, r0, #4
 800ba6a:	d50a      	bpl.n	800ba82 <_printf_i+0xce>
 800ba6c:	6805      	ldr	r5, [r0, #0]
 800ba6e:	600b      	str	r3, [r1, #0]
 800ba70:	2d00      	cmp	r5, #0
 800ba72:	da03      	bge.n	800ba7c <_printf_i+0xc8>
 800ba74:	232d      	movs	r3, #45	; 0x2d
 800ba76:	426d      	negs	r5, r5
 800ba78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba7c:	485e      	ldr	r0, [pc, #376]	; (800bbf8 <_printf_i+0x244>)
 800ba7e:	230a      	movs	r3, #10
 800ba80:	e019      	b.n	800bab6 <_printf_i+0x102>
 800ba82:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ba86:	6805      	ldr	r5, [r0, #0]
 800ba88:	600b      	str	r3, [r1, #0]
 800ba8a:	bf18      	it	ne
 800ba8c:	b22d      	sxthne	r5, r5
 800ba8e:	e7ef      	b.n	800ba70 <_printf_i+0xbc>
 800ba90:	680b      	ldr	r3, [r1, #0]
 800ba92:	6825      	ldr	r5, [r4, #0]
 800ba94:	1d18      	adds	r0, r3, #4
 800ba96:	6008      	str	r0, [r1, #0]
 800ba98:	0628      	lsls	r0, r5, #24
 800ba9a:	d501      	bpl.n	800baa0 <_printf_i+0xec>
 800ba9c:	681d      	ldr	r5, [r3, #0]
 800ba9e:	e002      	b.n	800baa6 <_printf_i+0xf2>
 800baa0:	0669      	lsls	r1, r5, #25
 800baa2:	d5fb      	bpl.n	800ba9c <_printf_i+0xe8>
 800baa4:	881d      	ldrh	r5, [r3, #0]
 800baa6:	4854      	ldr	r0, [pc, #336]	; (800bbf8 <_printf_i+0x244>)
 800baa8:	2f6f      	cmp	r7, #111	; 0x6f
 800baaa:	bf0c      	ite	eq
 800baac:	2308      	moveq	r3, #8
 800baae:	230a      	movne	r3, #10
 800bab0:	2100      	movs	r1, #0
 800bab2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bab6:	6866      	ldr	r6, [r4, #4]
 800bab8:	60a6      	str	r6, [r4, #8]
 800baba:	2e00      	cmp	r6, #0
 800babc:	bfa2      	ittt	ge
 800babe:	6821      	ldrge	r1, [r4, #0]
 800bac0:	f021 0104 	bicge.w	r1, r1, #4
 800bac4:	6021      	strge	r1, [r4, #0]
 800bac6:	b90d      	cbnz	r5, 800bacc <_printf_i+0x118>
 800bac8:	2e00      	cmp	r6, #0
 800baca:	d04d      	beq.n	800bb68 <_printf_i+0x1b4>
 800bacc:	4616      	mov	r6, r2
 800bace:	fbb5 f1f3 	udiv	r1, r5, r3
 800bad2:	fb03 5711 	mls	r7, r3, r1, r5
 800bad6:	5dc7      	ldrb	r7, [r0, r7]
 800bad8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800badc:	462f      	mov	r7, r5
 800bade:	42bb      	cmp	r3, r7
 800bae0:	460d      	mov	r5, r1
 800bae2:	d9f4      	bls.n	800bace <_printf_i+0x11a>
 800bae4:	2b08      	cmp	r3, #8
 800bae6:	d10b      	bne.n	800bb00 <_printf_i+0x14c>
 800bae8:	6823      	ldr	r3, [r4, #0]
 800baea:	07df      	lsls	r7, r3, #31
 800baec:	d508      	bpl.n	800bb00 <_printf_i+0x14c>
 800baee:	6923      	ldr	r3, [r4, #16]
 800baf0:	6861      	ldr	r1, [r4, #4]
 800baf2:	4299      	cmp	r1, r3
 800baf4:	bfde      	ittt	le
 800baf6:	2330      	movle	r3, #48	; 0x30
 800baf8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bafc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb00:	1b92      	subs	r2, r2, r6
 800bb02:	6122      	str	r2, [r4, #16]
 800bb04:	f8cd a000 	str.w	sl, [sp]
 800bb08:	464b      	mov	r3, r9
 800bb0a:	aa03      	add	r2, sp, #12
 800bb0c:	4621      	mov	r1, r4
 800bb0e:	4640      	mov	r0, r8
 800bb10:	f7ff fee2 	bl	800b8d8 <_printf_common>
 800bb14:	3001      	adds	r0, #1
 800bb16:	d14c      	bne.n	800bbb2 <_printf_i+0x1fe>
 800bb18:	f04f 30ff 	mov.w	r0, #4294967295
 800bb1c:	b004      	add	sp, #16
 800bb1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb22:	4835      	ldr	r0, [pc, #212]	; (800bbf8 <_printf_i+0x244>)
 800bb24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bb28:	6823      	ldr	r3, [r4, #0]
 800bb2a:	680e      	ldr	r6, [r1, #0]
 800bb2c:	061f      	lsls	r7, r3, #24
 800bb2e:	f856 5b04 	ldr.w	r5, [r6], #4
 800bb32:	600e      	str	r6, [r1, #0]
 800bb34:	d514      	bpl.n	800bb60 <_printf_i+0x1ac>
 800bb36:	07d9      	lsls	r1, r3, #31
 800bb38:	bf44      	itt	mi
 800bb3a:	f043 0320 	orrmi.w	r3, r3, #32
 800bb3e:	6023      	strmi	r3, [r4, #0]
 800bb40:	b91d      	cbnz	r5, 800bb4a <_printf_i+0x196>
 800bb42:	6823      	ldr	r3, [r4, #0]
 800bb44:	f023 0320 	bic.w	r3, r3, #32
 800bb48:	6023      	str	r3, [r4, #0]
 800bb4a:	2310      	movs	r3, #16
 800bb4c:	e7b0      	b.n	800bab0 <_printf_i+0xfc>
 800bb4e:	6823      	ldr	r3, [r4, #0]
 800bb50:	f043 0320 	orr.w	r3, r3, #32
 800bb54:	6023      	str	r3, [r4, #0]
 800bb56:	2378      	movs	r3, #120	; 0x78
 800bb58:	4828      	ldr	r0, [pc, #160]	; (800bbfc <_printf_i+0x248>)
 800bb5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bb5e:	e7e3      	b.n	800bb28 <_printf_i+0x174>
 800bb60:	065e      	lsls	r6, r3, #25
 800bb62:	bf48      	it	mi
 800bb64:	b2ad      	uxthmi	r5, r5
 800bb66:	e7e6      	b.n	800bb36 <_printf_i+0x182>
 800bb68:	4616      	mov	r6, r2
 800bb6a:	e7bb      	b.n	800bae4 <_printf_i+0x130>
 800bb6c:	680b      	ldr	r3, [r1, #0]
 800bb6e:	6826      	ldr	r6, [r4, #0]
 800bb70:	6960      	ldr	r0, [r4, #20]
 800bb72:	1d1d      	adds	r5, r3, #4
 800bb74:	600d      	str	r5, [r1, #0]
 800bb76:	0635      	lsls	r5, r6, #24
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	d501      	bpl.n	800bb80 <_printf_i+0x1cc>
 800bb7c:	6018      	str	r0, [r3, #0]
 800bb7e:	e002      	b.n	800bb86 <_printf_i+0x1d2>
 800bb80:	0671      	lsls	r1, r6, #25
 800bb82:	d5fb      	bpl.n	800bb7c <_printf_i+0x1c8>
 800bb84:	8018      	strh	r0, [r3, #0]
 800bb86:	2300      	movs	r3, #0
 800bb88:	6123      	str	r3, [r4, #16]
 800bb8a:	4616      	mov	r6, r2
 800bb8c:	e7ba      	b.n	800bb04 <_printf_i+0x150>
 800bb8e:	680b      	ldr	r3, [r1, #0]
 800bb90:	1d1a      	adds	r2, r3, #4
 800bb92:	600a      	str	r2, [r1, #0]
 800bb94:	681e      	ldr	r6, [r3, #0]
 800bb96:	6862      	ldr	r2, [r4, #4]
 800bb98:	2100      	movs	r1, #0
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	f7f4 fb28 	bl	80001f0 <memchr>
 800bba0:	b108      	cbz	r0, 800bba6 <_printf_i+0x1f2>
 800bba2:	1b80      	subs	r0, r0, r6
 800bba4:	6060      	str	r0, [r4, #4]
 800bba6:	6863      	ldr	r3, [r4, #4]
 800bba8:	6123      	str	r3, [r4, #16]
 800bbaa:	2300      	movs	r3, #0
 800bbac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbb0:	e7a8      	b.n	800bb04 <_printf_i+0x150>
 800bbb2:	6923      	ldr	r3, [r4, #16]
 800bbb4:	4632      	mov	r2, r6
 800bbb6:	4649      	mov	r1, r9
 800bbb8:	4640      	mov	r0, r8
 800bbba:	47d0      	blx	sl
 800bbbc:	3001      	adds	r0, #1
 800bbbe:	d0ab      	beq.n	800bb18 <_printf_i+0x164>
 800bbc0:	6823      	ldr	r3, [r4, #0]
 800bbc2:	079b      	lsls	r3, r3, #30
 800bbc4:	d413      	bmi.n	800bbee <_printf_i+0x23a>
 800bbc6:	68e0      	ldr	r0, [r4, #12]
 800bbc8:	9b03      	ldr	r3, [sp, #12]
 800bbca:	4298      	cmp	r0, r3
 800bbcc:	bfb8      	it	lt
 800bbce:	4618      	movlt	r0, r3
 800bbd0:	e7a4      	b.n	800bb1c <_printf_i+0x168>
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	4632      	mov	r2, r6
 800bbd6:	4649      	mov	r1, r9
 800bbd8:	4640      	mov	r0, r8
 800bbda:	47d0      	blx	sl
 800bbdc:	3001      	adds	r0, #1
 800bbde:	d09b      	beq.n	800bb18 <_printf_i+0x164>
 800bbe0:	3501      	adds	r5, #1
 800bbe2:	68e3      	ldr	r3, [r4, #12]
 800bbe4:	9903      	ldr	r1, [sp, #12]
 800bbe6:	1a5b      	subs	r3, r3, r1
 800bbe8:	42ab      	cmp	r3, r5
 800bbea:	dcf2      	bgt.n	800bbd2 <_printf_i+0x21e>
 800bbec:	e7eb      	b.n	800bbc6 <_printf_i+0x212>
 800bbee:	2500      	movs	r5, #0
 800bbf0:	f104 0619 	add.w	r6, r4, #25
 800bbf4:	e7f5      	b.n	800bbe2 <_printf_i+0x22e>
 800bbf6:	bf00      	nop
 800bbf8:	0800cd62 	.word	0x0800cd62
 800bbfc:	0800cd73 	.word	0x0800cd73

0800bc00 <__swbuf_r>:
 800bc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc02:	460e      	mov	r6, r1
 800bc04:	4614      	mov	r4, r2
 800bc06:	4605      	mov	r5, r0
 800bc08:	b118      	cbz	r0, 800bc12 <__swbuf_r+0x12>
 800bc0a:	6983      	ldr	r3, [r0, #24]
 800bc0c:	b90b      	cbnz	r3, 800bc12 <__swbuf_r+0x12>
 800bc0e:	f000 f9d9 	bl	800bfc4 <__sinit>
 800bc12:	4b21      	ldr	r3, [pc, #132]	; (800bc98 <__swbuf_r+0x98>)
 800bc14:	429c      	cmp	r4, r3
 800bc16:	d12b      	bne.n	800bc70 <__swbuf_r+0x70>
 800bc18:	686c      	ldr	r4, [r5, #4]
 800bc1a:	69a3      	ldr	r3, [r4, #24]
 800bc1c:	60a3      	str	r3, [r4, #8]
 800bc1e:	89a3      	ldrh	r3, [r4, #12]
 800bc20:	071a      	lsls	r2, r3, #28
 800bc22:	d52f      	bpl.n	800bc84 <__swbuf_r+0x84>
 800bc24:	6923      	ldr	r3, [r4, #16]
 800bc26:	b36b      	cbz	r3, 800bc84 <__swbuf_r+0x84>
 800bc28:	6923      	ldr	r3, [r4, #16]
 800bc2a:	6820      	ldr	r0, [r4, #0]
 800bc2c:	1ac0      	subs	r0, r0, r3
 800bc2e:	6963      	ldr	r3, [r4, #20]
 800bc30:	b2f6      	uxtb	r6, r6
 800bc32:	4283      	cmp	r3, r0
 800bc34:	4637      	mov	r7, r6
 800bc36:	dc04      	bgt.n	800bc42 <__swbuf_r+0x42>
 800bc38:	4621      	mov	r1, r4
 800bc3a:	4628      	mov	r0, r5
 800bc3c:	f000 f92e 	bl	800be9c <_fflush_r>
 800bc40:	bb30      	cbnz	r0, 800bc90 <__swbuf_r+0x90>
 800bc42:	68a3      	ldr	r3, [r4, #8]
 800bc44:	3b01      	subs	r3, #1
 800bc46:	60a3      	str	r3, [r4, #8]
 800bc48:	6823      	ldr	r3, [r4, #0]
 800bc4a:	1c5a      	adds	r2, r3, #1
 800bc4c:	6022      	str	r2, [r4, #0]
 800bc4e:	701e      	strb	r6, [r3, #0]
 800bc50:	6963      	ldr	r3, [r4, #20]
 800bc52:	3001      	adds	r0, #1
 800bc54:	4283      	cmp	r3, r0
 800bc56:	d004      	beq.n	800bc62 <__swbuf_r+0x62>
 800bc58:	89a3      	ldrh	r3, [r4, #12]
 800bc5a:	07db      	lsls	r3, r3, #31
 800bc5c:	d506      	bpl.n	800bc6c <__swbuf_r+0x6c>
 800bc5e:	2e0a      	cmp	r6, #10
 800bc60:	d104      	bne.n	800bc6c <__swbuf_r+0x6c>
 800bc62:	4621      	mov	r1, r4
 800bc64:	4628      	mov	r0, r5
 800bc66:	f000 f919 	bl	800be9c <_fflush_r>
 800bc6a:	b988      	cbnz	r0, 800bc90 <__swbuf_r+0x90>
 800bc6c:	4638      	mov	r0, r7
 800bc6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc70:	4b0a      	ldr	r3, [pc, #40]	; (800bc9c <__swbuf_r+0x9c>)
 800bc72:	429c      	cmp	r4, r3
 800bc74:	d101      	bne.n	800bc7a <__swbuf_r+0x7a>
 800bc76:	68ac      	ldr	r4, [r5, #8]
 800bc78:	e7cf      	b.n	800bc1a <__swbuf_r+0x1a>
 800bc7a:	4b09      	ldr	r3, [pc, #36]	; (800bca0 <__swbuf_r+0xa0>)
 800bc7c:	429c      	cmp	r4, r3
 800bc7e:	bf08      	it	eq
 800bc80:	68ec      	ldreq	r4, [r5, #12]
 800bc82:	e7ca      	b.n	800bc1a <__swbuf_r+0x1a>
 800bc84:	4621      	mov	r1, r4
 800bc86:	4628      	mov	r0, r5
 800bc88:	f000 f80c 	bl	800bca4 <__swsetup_r>
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	d0cb      	beq.n	800bc28 <__swbuf_r+0x28>
 800bc90:	f04f 37ff 	mov.w	r7, #4294967295
 800bc94:	e7ea      	b.n	800bc6c <__swbuf_r+0x6c>
 800bc96:	bf00      	nop
 800bc98:	0800cda4 	.word	0x0800cda4
 800bc9c:	0800cdc4 	.word	0x0800cdc4
 800bca0:	0800cd84 	.word	0x0800cd84

0800bca4 <__swsetup_r>:
 800bca4:	4b32      	ldr	r3, [pc, #200]	; (800bd70 <__swsetup_r+0xcc>)
 800bca6:	b570      	push	{r4, r5, r6, lr}
 800bca8:	681d      	ldr	r5, [r3, #0]
 800bcaa:	4606      	mov	r6, r0
 800bcac:	460c      	mov	r4, r1
 800bcae:	b125      	cbz	r5, 800bcba <__swsetup_r+0x16>
 800bcb0:	69ab      	ldr	r3, [r5, #24]
 800bcb2:	b913      	cbnz	r3, 800bcba <__swsetup_r+0x16>
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	f000 f985 	bl	800bfc4 <__sinit>
 800bcba:	4b2e      	ldr	r3, [pc, #184]	; (800bd74 <__swsetup_r+0xd0>)
 800bcbc:	429c      	cmp	r4, r3
 800bcbe:	d10f      	bne.n	800bce0 <__swsetup_r+0x3c>
 800bcc0:	686c      	ldr	r4, [r5, #4]
 800bcc2:	89a3      	ldrh	r3, [r4, #12]
 800bcc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bcc8:	0719      	lsls	r1, r3, #28
 800bcca:	d42c      	bmi.n	800bd26 <__swsetup_r+0x82>
 800bccc:	06dd      	lsls	r5, r3, #27
 800bcce:	d411      	bmi.n	800bcf4 <__swsetup_r+0x50>
 800bcd0:	2309      	movs	r3, #9
 800bcd2:	6033      	str	r3, [r6, #0]
 800bcd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bcd8:	81a3      	strh	r3, [r4, #12]
 800bcda:	f04f 30ff 	mov.w	r0, #4294967295
 800bcde:	e03e      	b.n	800bd5e <__swsetup_r+0xba>
 800bce0:	4b25      	ldr	r3, [pc, #148]	; (800bd78 <__swsetup_r+0xd4>)
 800bce2:	429c      	cmp	r4, r3
 800bce4:	d101      	bne.n	800bcea <__swsetup_r+0x46>
 800bce6:	68ac      	ldr	r4, [r5, #8]
 800bce8:	e7eb      	b.n	800bcc2 <__swsetup_r+0x1e>
 800bcea:	4b24      	ldr	r3, [pc, #144]	; (800bd7c <__swsetup_r+0xd8>)
 800bcec:	429c      	cmp	r4, r3
 800bcee:	bf08      	it	eq
 800bcf0:	68ec      	ldreq	r4, [r5, #12]
 800bcf2:	e7e6      	b.n	800bcc2 <__swsetup_r+0x1e>
 800bcf4:	0758      	lsls	r0, r3, #29
 800bcf6:	d512      	bpl.n	800bd1e <__swsetup_r+0x7a>
 800bcf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcfa:	b141      	cbz	r1, 800bd0e <__swsetup_r+0x6a>
 800bcfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd00:	4299      	cmp	r1, r3
 800bd02:	d002      	beq.n	800bd0a <__swsetup_r+0x66>
 800bd04:	4630      	mov	r0, r6
 800bd06:	f7fd fc81 	bl	800960c <_free_r>
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	6363      	str	r3, [r4, #52]	; 0x34
 800bd0e:	89a3      	ldrh	r3, [r4, #12]
 800bd10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd14:	81a3      	strh	r3, [r4, #12]
 800bd16:	2300      	movs	r3, #0
 800bd18:	6063      	str	r3, [r4, #4]
 800bd1a:	6923      	ldr	r3, [r4, #16]
 800bd1c:	6023      	str	r3, [r4, #0]
 800bd1e:	89a3      	ldrh	r3, [r4, #12]
 800bd20:	f043 0308 	orr.w	r3, r3, #8
 800bd24:	81a3      	strh	r3, [r4, #12]
 800bd26:	6923      	ldr	r3, [r4, #16]
 800bd28:	b94b      	cbnz	r3, 800bd3e <__swsetup_r+0x9a>
 800bd2a:	89a3      	ldrh	r3, [r4, #12]
 800bd2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bd30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd34:	d003      	beq.n	800bd3e <__swsetup_r+0x9a>
 800bd36:	4621      	mov	r1, r4
 800bd38:	4630      	mov	r0, r6
 800bd3a:	f000 fa05 	bl	800c148 <__smakebuf_r>
 800bd3e:	89a0      	ldrh	r0, [r4, #12]
 800bd40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd44:	f010 0301 	ands.w	r3, r0, #1
 800bd48:	d00a      	beq.n	800bd60 <__swsetup_r+0xbc>
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	60a3      	str	r3, [r4, #8]
 800bd4e:	6963      	ldr	r3, [r4, #20]
 800bd50:	425b      	negs	r3, r3
 800bd52:	61a3      	str	r3, [r4, #24]
 800bd54:	6923      	ldr	r3, [r4, #16]
 800bd56:	b943      	cbnz	r3, 800bd6a <__swsetup_r+0xc6>
 800bd58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bd5c:	d1ba      	bne.n	800bcd4 <__swsetup_r+0x30>
 800bd5e:	bd70      	pop	{r4, r5, r6, pc}
 800bd60:	0781      	lsls	r1, r0, #30
 800bd62:	bf58      	it	pl
 800bd64:	6963      	ldrpl	r3, [r4, #20]
 800bd66:	60a3      	str	r3, [r4, #8]
 800bd68:	e7f4      	b.n	800bd54 <__swsetup_r+0xb0>
 800bd6a:	2000      	movs	r0, #0
 800bd6c:	e7f7      	b.n	800bd5e <__swsetup_r+0xba>
 800bd6e:	bf00      	nop
 800bd70:	20000018 	.word	0x20000018
 800bd74:	0800cda4 	.word	0x0800cda4
 800bd78:	0800cdc4 	.word	0x0800cdc4
 800bd7c:	0800cd84 	.word	0x0800cd84

0800bd80 <abort>:
 800bd80:	b508      	push	{r3, lr}
 800bd82:	2006      	movs	r0, #6
 800bd84:	f000 fa48 	bl	800c218 <raise>
 800bd88:	2001      	movs	r0, #1
 800bd8a:	f7f6 ff69 	bl	8002c60 <_exit>
	...

0800bd90 <__sflush_r>:
 800bd90:	898a      	ldrh	r2, [r1, #12]
 800bd92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd96:	4605      	mov	r5, r0
 800bd98:	0710      	lsls	r0, r2, #28
 800bd9a:	460c      	mov	r4, r1
 800bd9c:	d458      	bmi.n	800be50 <__sflush_r+0xc0>
 800bd9e:	684b      	ldr	r3, [r1, #4]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	dc05      	bgt.n	800bdb0 <__sflush_r+0x20>
 800bda4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	dc02      	bgt.n	800bdb0 <__sflush_r+0x20>
 800bdaa:	2000      	movs	r0, #0
 800bdac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdb2:	2e00      	cmp	r6, #0
 800bdb4:	d0f9      	beq.n	800bdaa <__sflush_r+0x1a>
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bdbc:	682f      	ldr	r7, [r5, #0]
 800bdbe:	602b      	str	r3, [r5, #0]
 800bdc0:	d032      	beq.n	800be28 <__sflush_r+0x98>
 800bdc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bdc4:	89a3      	ldrh	r3, [r4, #12]
 800bdc6:	075a      	lsls	r2, r3, #29
 800bdc8:	d505      	bpl.n	800bdd6 <__sflush_r+0x46>
 800bdca:	6863      	ldr	r3, [r4, #4]
 800bdcc:	1ac0      	subs	r0, r0, r3
 800bdce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bdd0:	b10b      	cbz	r3, 800bdd6 <__sflush_r+0x46>
 800bdd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bdd4:	1ac0      	subs	r0, r0, r3
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	4602      	mov	r2, r0
 800bdda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bddc:	6a21      	ldr	r1, [r4, #32]
 800bdde:	4628      	mov	r0, r5
 800bde0:	47b0      	blx	r6
 800bde2:	1c43      	adds	r3, r0, #1
 800bde4:	89a3      	ldrh	r3, [r4, #12]
 800bde6:	d106      	bne.n	800bdf6 <__sflush_r+0x66>
 800bde8:	6829      	ldr	r1, [r5, #0]
 800bdea:	291d      	cmp	r1, #29
 800bdec:	d82c      	bhi.n	800be48 <__sflush_r+0xb8>
 800bdee:	4a2a      	ldr	r2, [pc, #168]	; (800be98 <__sflush_r+0x108>)
 800bdf0:	40ca      	lsrs	r2, r1
 800bdf2:	07d6      	lsls	r6, r2, #31
 800bdf4:	d528      	bpl.n	800be48 <__sflush_r+0xb8>
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	6062      	str	r2, [r4, #4]
 800bdfa:	04d9      	lsls	r1, r3, #19
 800bdfc:	6922      	ldr	r2, [r4, #16]
 800bdfe:	6022      	str	r2, [r4, #0]
 800be00:	d504      	bpl.n	800be0c <__sflush_r+0x7c>
 800be02:	1c42      	adds	r2, r0, #1
 800be04:	d101      	bne.n	800be0a <__sflush_r+0x7a>
 800be06:	682b      	ldr	r3, [r5, #0]
 800be08:	b903      	cbnz	r3, 800be0c <__sflush_r+0x7c>
 800be0a:	6560      	str	r0, [r4, #84]	; 0x54
 800be0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be0e:	602f      	str	r7, [r5, #0]
 800be10:	2900      	cmp	r1, #0
 800be12:	d0ca      	beq.n	800bdaa <__sflush_r+0x1a>
 800be14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be18:	4299      	cmp	r1, r3
 800be1a:	d002      	beq.n	800be22 <__sflush_r+0x92>
 800be1c:	4628      	mov	r0, r5
 800be1e:	f7fd fbf5 	bl	800960c <_free_r>
 800be22:	2000      	movs	r0, #0
 800be24:	6360      	str	r0, [r4, #52]	; 0x34
 800be26:	e7c1      	b.n	800bdac <__sflush_r+0x1c>
 800be28:	6a21      	ldr	r1, [r4, #32]
 800be2a:	2301      	movs	r3, #1
 800be2c:	4628      	mov	r0, r5
 800be2e:	47b0      	blx	r6
 800be30:	1c41      	adds	r1, r0, #1
 800be32:	d1c7      	bne.n	800bdc4 <__sflush_r+0x34>
 800be34:	682b      	ldr	r3, [r5, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d0c4      	beq.n	800bdc4 <__sflush_r+0x34>
 800be3a:	2b1d      	cmp	r3, #29
 800be3c:	d001      	beq.n	800be42 <__sflush_r+0xb2>
 800be3e:	2b16      	cmp	r3, #22
 800be40:	d101      	bne.n	800be46 <__sflush_r+0xb6>
 800be42:	602f      	str	r7, [r5, #0]
 800be44:	e7b1      	b.n	800bdaa <__sflush_r+0x1a>
 800be46:	89a3      	ldrh	r3, [r4, #12]
 800be48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be4c:	81a3      	strh	r3, [r4, #12]
 800be4e:	e7ad      	b.n	800bdac <__sflush_r+0x1c>
 800be50:	690f      	ldr	r7, [r1, #16]
 800be52:	2f00      	cmp	r7, #0
 800be54:	d0a9      	beq.n	800bdaa <__sflush_r+0x1a>
 800be56:	0793      	lsls	r3, r2, #30
 800be58:	680e      	ldr	r6, [r1, #0]
 800be5a:	bf08      	it	eq
 800be5c:	694b      	ldreq	r3, [r1, #20]
 800be5e:	600f      	str	r7, [r1, #0]
 800be60:	bf18      	it	ne
 800be62:	2300      	movne	r3, #0
 800be64:	eba6 0807 	sub.w	r8, r6, r7
 800be68:	608b      	str	r3, [r1, #8]
 800be6a:	f1b8 0f00 	cmp.w	r8, #0
 800be6e:	dd9c      	ble.n	800bdaa <__sflush_r+0x1a>
 800be70:	6a21      	ldr	r1, [r4, #32]
 800be72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be74:	4643      	mov	r3, r8
 800be76:	463a      	mov	r2, r7
 800be78:	4628      	mov	r0, r5
 800be7a:	47b0      	blx	r6
 800be7c:	2800      	cmp	r0, #0
 800be7e:	dc06      	bgt.n	800be8e <__sflush_r+0xfe>
 800be80:	89a3      	ldrh	r3, [r4, #12]
 800be82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be86:	81a3      	strh	r3, [r4, #12]
 800be88:	f04f 30ff 	mov.w	r0, #4294967295
 800be8c:	e78e      	b.n	800bdac <__sflush_r+0x1c>
 800be8e:	4407      	add	r7, r0
 800be90:	eba8 0800 	sub.w	r8, r8, r0
 800be94:	e7e9      	b.n	800be6a <__sflush_r+0xda>
 800be96:	bf00      	nop
 800be98:	20400001 	.word	0x20400001

0800be9c <_fflush_r>:
 800be9c:	b538      	push	{r3, r4, r5, lr}
 800be9e:	690b      	ldr	r3, [r1, #16]
 800bea0:	4605      	mov	r5, r0
 800bea2:	460c      	mov	r4, r1
 800bea4:	b913      	cbnz	r3, 800beac <_fflush_r+0x10>
 800bea6:	2500      	movs	r5, #0
 800bea8:	4628      	mov	r0, r5
 800beaa:	bd38      	pop	{r3, r4, r5, pc}
 800beac:	b118      	cbz	r0, 800beb6 <_fflush_r+0x1a>
 800beae:	6983      	ldr	r3, [r0, #24]
 800beb0:	b90b      	cbnz	r3, 800beb6 <_fflush_r+0x1a>
 800beb2:	f000 f887 	bl	800bfc4 <__sinit>
 800beb6:	4b14      	ldr	r3, [pc, #80]	; (800bf08 <_fflush_r+0x6c>)
 800beb8:	429c      	cmp	r4, r3
 800beba:	d11b      	bne.n	800bef4 <_fflush_r+0x58>
 800bebc:	686c      	ldr	r4, [r5, #4]
 800bebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d0ef      	beq.n	800bea6 <_fflush_r+0xa>
 800bec6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bec8:	07d0      	lsls	r0, r2, #31
 800beca:	d404      	bmi.n	800bed6 <_fflush_r+0x3a>
 800becc:	0599      	lsls	r1, r3, #22
 800bece:	d402      	bmi.n	800bed6 <_fflush_r+0x3a>
 800bed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bed2:	f7ff fba6 	bl	800b622 <__retarget_lock_acquire_recursive>
 800bed6:	4628      	mov	r0, r5
 800bed8:	4621      	mov	r1, r4
 800beda:	f7ff ff59 	bl	800bd90 <__sflush_r>
 800bede:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bee0:	07da      	lsls	r2, r3, #31
 800bee2:	4605      	mov	r5, r0
 800bee4:	d4e0      	bmi.n	800bea8 <_fflush_r+0xc>
 800bee6:	89a3      	ldrh	r3, [r4, #12]
 800bee8:	059b      	lsls	r3, r3, #22
 800beea:	d4dd      	bmi.n	800bea8 <_fflush_r+0xc>
 800beec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800beee:	f7ff fb99 	bl	800b624 <__retarget_lock_release_recursive>
 800bef2:	e7d9      	b.n	800bea8 <_fflush_r+0xc>
 800bef4:	4b05      	ldr	r3, [pc, #20]	; (800bf0c <_fflush_r+0x70>)
 800bef6:	429c      	cmp	r4, r3
 800bef8:	d101      	bne.n	800befe <_fflush_r+0x62>
 800befa:	68ac      	ldr	r4, [r5, #8]
 800befc:	e7df      	b.n	800bebe <_fflush_r+0x22>
 800befe:	4b04      	ldr	r3, [pc, #16]	; (800bf10 <_fflush_r+0x74>)
 800bf00:	429c      	cmp	r4, r3
 800bf02:	bf08      	it	eq
 800bf04:	68ec      	ldreq	r4, [r5, #12]
 800bf06:	e7da      	b.n	800bebe <_fflush_r+0x22>
 800bf08:	0800cda4 	.word	0x0800cda4
 800bf0c:	0800cdc4 	.word	0x0800cdc4
 800bf10:	0800cd84 	.word	0x0800cd84

0800bf14 <std>:
 800bf14:	2300      	movs	r3, #0
 800bf16:	b510      	push	{r4, lr}
 800bf18:	4604      	mov	r4, r0
 800bf1a:	e9c0 3300 	strd	r3, r3, [r0]
 800bf1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf22:	6083      	str	r3, [r0, #8]
 800bf24:	8181      	strh	r1, [r0, #12]
 800bf26:	6643      	str	r3, [r0, #100]	; 0x64
 800bf28:	81c2      	strh	r2, [r0, #14]
 800bf2a:	6183      	str	r3, [r0, #24]
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	2208      	movs	r2, #8
 800bf30:	305c      	adds	r0, #92	; 0x5c
 800bf32:	f7fd fb63 	bl	80095fc <memset>
 800bf36:	4b05      	ldr	r3, [pc, #20]	; (800bf4c <std+0x38>)
 800bf38:	6263      	str	r3, [r4, #36]	; 0x24
 800bf3a:	4b05      	ldr	r3, [pc, #20]	; (800bf50 <std+0x3c>)
 800bf3c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf3e:	4b05      	ldr	r3, [pc, #20]	; (800bf54 <std+0x40>)
 800bf40:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf42:	4b05      	ldr	r3, [pc, #20]	; (800bf58 <std+0x44>)
 800bf44:	6224      	str	r4, [r4, #32]
 800bf46:	6323      	str	r3, [r4, #48]	; 0x30
 800bf48:	bd10      	pop	{r4, pc}
 800bf4a:	bf00      	nop
 800bf4c:	0800c251 	.word	0x0800c251
 800bf50:	0800c273 	.word	0x0800c273
 800bf54:	0800c2ab 	.word	0x0800c2ab
 800bf58:	0800c2cf 	.word	0x0800c2cf

0800bf5c <_cleanup_r>:
 800bf5c:	4901      	ldr	r1, [pc, #4]	; (800bf64 <_cleanup_r+0x8>)
 800bf5e:	f000 b8af 	b.w	800c0c0 <_fwalk_reent>
 800bf62:	bf00      	nop
 800bf64:	0800be9d 	.word	0x0800be9d

0800bf68 <__sfmoreglue>:
 800bf68:	b570      	push	{r4, r5, r6, lr}
 800bf6a:	1e4a      	subs	r2, r1, #1
 800bf6c:	2568      	movs	r5, #104	; 0x68
 800bf6e:	4355      	muls	r5, r2
 800bf70:	460e      	mov	r6, r1
 800bf72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bf76:	f7fd fb99 	bl	80096ac <_malloc_r>
 800bf7a:	4604      	mov	r4, r0
 800bf7c:	b140      	cbz	r0, 800bf90 <__sfmoreglue+0x28>
 800bf7e:	2100      	movs	r1, #0
 800bf80:	e9c0 1600 	strd	r1, r6, [r0]
 800bf84:	300c      	adds	r0, #12
 800bf86:	60a0      	str	r0, [r4, #8]
 800bf88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bf8c:	f7fd fb36 	bl	80095fc <memset>
 800bf90:	4620      	mov	r0, r4
 800bf92:	bd70      	pop	{r4, r5, r6, pc}

0800bf94 <__sfp_lock_acquire>:
 800bf94:	4801      	ldr	r0, [pc, #4]	; (800bf9c <__sfp_lock_acquire+0x8>)
 800bf96:	f7ff bb44 	b.w	800b622 <__retarget_lock_acquire_recursive>
 800bf9a:	bf00      	nop
 800bf9c:	20000568 	.word	0x20000568

0800bfa0 <__sfp_lock_release>:
 800bfa0:	4801      	ldr	r0, [pc, #4]	; (800bfa8 <__sfp_lock_release+0x8>)
 800bfa2:	f7ff bb3f 	b.w	800b624 <__retarget_lock_release_recursive>
 800bfa6:	bf00      	nop
 800bfa8:	20000568 	.word	0x20000568

0800bfac <__sinit_lock_acquire>:
 800bfac:	4801      	ldr	r0, [pc, #4]	; (800bfb4 <__sinit_lock_acquire+0x8>)
 800bfae:	f7ff bb38 	b.w	800b622 <__retarget_lock_acquire_recursive>
 800bfb2:	bf00      	nop
 800bfb4:	20000563 	.word	0x20000563

0800bfb8 <__sinit_lock_release>:
 800bfb8:	4801      	ldr	r0, [pc, #4]	; (800bfc0 <__sinit_lock_release+0x8>)
 800bfba:	f7ff bb33 	b.w	800b624 <__retarget_lock_release_recursive>
 800bfbe:	bf00      	nop
 800bfc0:	20000563 	.word	0x20000563

0800bfc4 <__sinit>:
 800bfc4:	b510      	push	{r4, lr}
 800bfc6:	4604      	mov	r4, r0
 800bfc8:	f7ff fff0 	bl	800bfac <__sinit_lock_acquire>
 800bfcc:	69a3      	ldr	r3, [r4, #24]
 800bfce:	b11b      	cbz	r3, 800bfd8 <__sinit+0x14>
 800bfd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfd4:	f7ff bff0 	b.w	800bfb8 <__sinit_lock_release>
 800bfd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bfdc:	6523      	str	r3, [r4, #80]	; 0x50
 800bfde:	4b13      	ldr	r3, [pc, #76]	; (800c02c <__sinit+0x68>)
 800bfe0:	4a13      	ldr	r2, [pc, #76]	; (800c030 <__sinit+0x6c>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	62a2      	str	r2, [r4, #40]	; 0x28
 800bfe6:	42a3      	cmp	r3, r4
 800bfe8:	bf04      	itt	eq
 800bfea:	2301      	moveq	r3, #1
 800bfec:	61a3      	streq	r3, [r4, #24]
 800bfee:	4620      	mov	r0, r4
 800bff0:	f000 f820 	bl	800c034 <__sfp>
 800bff4:	6060      	str	r0, [r4, #4]
 800bff6:	4620      	mov	r0, r4
 800bff8:	f000 f81c 	bl	800c034 <__sfp>
 800bffc:	60a0      	str	r0, [r4, #8]
 800bffe:	4620      	mov	r0, r4
 800c000:	f000 f818 	bl	800c034 <__sfp>
 800c004:	2200      	movs	r2, #0
 800c006:	60e0      	str	r0, [r4, #12]
 800c008:	2104      	movs	r1, #4
 800c00a:	6860      	ldr	r0, [r4, #4]
 800c00c:	f7ff ff82 	bl	800bf14 <std>
 800c010:	68a0      	ldr	r0, [r4, #8]
 800c012:	2201      	movs	r2, #1
 800c014:	2109      	movs	r1, #9
 800c016:	f7ff ff7d 	bl	800bf14 <std>
 800c01a:	68e0      	ldr	r0, [r4, #12]
 800c01c:	2202      	movs	r2, #2
 800c01e:	2112      	movs	r1, #18
 800c020:	f7ff ff78 	bl	800bf14 <std>
 800c024:	2301      	movs	r3, #1
 800c026:	61a3      	str	r3, [r4, #24]
 800c028:	e7d2      	b.n	800bfd0 <__sinit+0xc>
 800c02a:	bf00      	nop
 800c02c:	0800c988 	.word	0x0800c988
 800c030:	0800bf5d 	.word	0x0800bf5d

0800c034 <__sfp>:
 800c034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c036:	4607      	mov	r7, r0
 800c038:	f7ff ffac 	bl	800bf94 <__sfp_lock_acquire>
 800c03c:	4b1e      	ldr	r3, [pc, #120]	; (800c0b8 <__sfp+0x84>)
 800c03e:	681e      	ldr	r6, [r3, #0]
 800c040:	69b3      	ldr	r3, [r6, #24]
 800c042:	b913      	cbnz	r3, 800c04a <__sfp+0x16>
 800c044:	4630      	mov	r0, r6
 800c046:	f7ff ffbd 	bl	800bfc4 <__sinit>
 800c04a:	3648      	adds	r6, #72	; 0x48
 800c04c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c050:	3b01      	subs	r3, #1
 800c052:	d503      	bpl.n	800c05c <__sfp+0x28>
 800c054:	6833      	ldr	r3, [r6, #0]
 800c056:	b30b      	cbz	r3, 800c09c <__sfp+0x68>
 800c058:	6836      	ldr	r6, [r6, #0]
 800c05a:	e7f7      	b.n	800c04c <__sfp+0x18>
 800c05c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c060:	b9d5      	cbnz	r5, 800c098 <__sfp+0x64>
 800c062:	4b16      	ldr	r3, [pc, #88]	; (800c0bc <__sfp+0x88>)
 800c064:	60e3      	str	r3, [r4, #12]
 800c066:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c06a:	6665      	str	r5, [r4, #100]	; 0x64
 800c06c:	f7ff fad8 	bl	800b620 <__retarget_lock_init_recursive>
 800c070:	f7ff ff96 	bl	800bfa0 <__sfp_lock_release>
 800c074:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c078:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c07c:	6025      	str	r5, [r4, #0]
 800c07e:	61a5      	str	r5, [r4, #24]
 800c080:	2208      	movs	r2, #8
 800c082:	4629      	mov	r1, r5
 800c084:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c088:	f7fd fab8 	bl	80095fc <memset>
 800c08c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c090:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c094:	4620      	mov	r0, r4
 800c096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c098:	3468      	adds	r4, #104	; 0x68
 800c09a:	e7d9      	b.n	800c050 <__sfp+0x1c>
 800c09c:	2104      	movs	r1, #4
 800c09e:	4638      	mov	r0, r7
 800c0a0:	f7ff ff62 	bl	800bf68 <__sfmoreglue>
 800c0a4:	4604      	mov	r4, r0
 800c0a6:	6030      	str	r0, [r6, #0]
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	d1d5      	bne.n	800c058 <__sfp+0x24>
 800c0ac:	f7ff ff78 	bl	800bfa0 <__sfp_lock_release>
 800c0b0:	230c      	movs	r3, #12
 800c0b2:	603b      	str	r3, [r7, #0]
 800c0b4:	e7ee      	b.n	800c094 <__sfp+0x60>
 800c0b6:	bf00      	nop
 800c0b8:	0800c988 	.word	0x0800c988
 800c0bc:	ffff0001 	.word	0xffff0001

0800c0c0 <_fwalk_reent>:
 800c0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0c4:	4606      	mov	r6, r0
 800c0c6:	4688      	mov	r8, r1
 800c0c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c0cc:	2700      	movs	r7, #0
 800c0ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0d2:	f1b9 0901 	subs.w	r9, r9, #1
 800c0d6:	d505      	bpl.n	800c0e4 <_fwalk_reent+0x24>
 800c0d8:	6824      	ldr	r4, [r4, #0]
 800c0da:	2c00      	cmp	r4, #0
 800c0dc:	d1f7      	bne.n	800c0ce <_fwalk_reent+0xe>
 800c0de:	4638      	mov	r0, r7
 800c0e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0e4:	89ab      	ldrh	r3, [r5, #12]
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d907      	bls.n	800c0fa <_fwalk_reent+0x3a>
 800c0ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	d003      	beq.n	800c0fa <_fwalk_reent+0x3a>
 800c0f2:	4629      	mov	r1, r5
 800c0f4:	4630      	mov	r0, r6
 800c0f6:	47c0      	blx	r8
 800c0f8:	4307      	orrs	r7, r0
 800c0fa:	3568      	adds	r5, #104	; 0x68
 800c0fc:	e7e9      	b.n	800c0d2 <_fwalk_reent+0x12>

0800c0fe <__swhatbuf_r>:
 800c0fe:	b570      	push	{r4, r5, r6, lr}
 800c100:	460e      	mov	r6, r1
 800c102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c106:	2900      	cmp	r1, #0
 800c108:	b096      	sub	sp, #88	; 0x58
 800c10a:	4614      	mov	r4, r2
 800c10c:	461d      	mov	r5, r3
 800c10e:	da07      	bge.n	800c120 <__swhatbuf_r+0x22>
 800c110:	2300      	movs	r3, #0
 800c112:	602b      	str	r3, [r5, #0]
 800c114:	89b3      	ldrh	r3, [r6, #12]
 800c116:	061a      	lsls	r2, r3, #24
 800c118:	d410      	bmi.n	800c13c <__swhatbuf_r+0x3e>
 800c11a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c11e:	e00e      	b.n	800c13e <__swhatbuf_r+0x40>
 800c120:	466a      	mov	r2, sp
 800c122:	f000 f8fb 	bl	800c31c <_fstat_r>
 800c126:	2800      	cmp	r0, #0
 800c128:	dbf2      	blt.n	800c110 <__swhatbuf_r+0x12>
 800c12a:	9a01      	ldr	r2, [sp, #4]
 800c12c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c130:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c134:	425a      	negs	r2, r3
 800c136:	415a      	adcs	r2, r3
 800c138:	602a      	str	r2, [r5, #0]
 800c13a:	e7ee      	b.n	800c11a <__swhatbuf_r+0x1c>
 800c13c:	2340      	movs	r3, #64	; 0x40
 800c13e:	2000      	movs	r0, #0
 800c140:	6023      	str	r3, [r4, #0]
 800c142:	b016      	add	sp, #88	; 0x58
 800c144:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c148 <__smakebuf_r>:
 800c148:	898b      	ldrh	r3, [r1, #12]
 800c14a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c14c:	079d      	lsls	r5, r3, #30
 800c14e:	4606      	mov	r6, r0
 800c150:	460c      	mov	r4, r1
 800c152:	d507      	bpl.n	800c164 <__smakebuf_r+0x1c>
 800c154:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c158:	6023      	str	r3, [r4, #0]
 800c15a:	6123      	str	r3, [r4, #16]
 800c15c:	2301      	movs	r3, #1
 800c15e:	6163      	str	r3, [r4, #20]
 800c160:	b002      	add	sp, #8
 800c162:	bd70      	pop	{r4, r5, r6, pc}
 800c164:	ab01      	add	r3, sp, #4
 800c166:	466a      	mov	r2, sp
 800c168:	f7ff ffc9 	bl	800c0fe <__swhatbuf_r>
 800c16c:	9900      	ldr	r1, [sp, #0]
 800c16e:	4605      	mov	r5, r0
 800c170:	4630      	mov	r0, r6
 800c172:	f7fd fa9b 	bl	80096ac <_malloc_r>
 800c176:	b948      	cbnz	r0, 800c18c <__smakebuf_r+0x44>
 800c178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c17c:	059a      	lsls	r2, r3, #22
 800c17e:	d4ef      	bmi.n	800c160 <__smakebuf_r+0x18>
 800c180:	f023 0303 	bic.w	r3, r3, #3
 800c184:	f043 0302 	orr.w	r3, r3, #2
 800c188:	81a3      	strh	r3, [r4, #12]
 800c18a:	e7e3      	b.n	800c154 <__smakebuf_r+0xc>
 800c18c:	4b0d      	ldr	r3, [pc, #52]	; (800c1c4 <__smakebuf_r+0x7c>)
 800c18e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c190:	89a3      	ldrh	r3, [r4, #12]
 800c192:	6020      	str	r0, [r4, #0]
 800c194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c198:	81a3      	strh	r3, [r4, #12]
 800c19a:	9b00      	ldr	r3, [sp, #0]
 800c19c:	6163      	str	r3, [r4, #20]
 800c19e:	9b01      	ldr	r3, [sp, #4]
 800c1a0:	6120      	str	r0, [r4, #16]
 800c1a2:	b15b      	cbz	r3, 800c1bc <__smakebuf_r+0x74>
 800c1a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	f000 f8c9 	bl	800c340 <_isatty_r>
 800c1ae:	b128      	cbz	r0, 800c1bc <__smakebuf_r+0x74>
 800c1b0:	89a3      	ldrh	r3, [r4, #12]
 800c1b2:	f023 0303 	bic.w	r3, r3, #3
 800c1b6:	f043 0301 	orr.w	r3, r3, #1
 800c1ba:	81a3      	strh	r3, [r4, #12]
 800c1bc:	89a0      	ldrh	r0, [r4, #12]
 800c1be:	4305      	orrs	r5, r0
 800c1c0:	81a5      	strh	r5, [r4, #12]
 800c1c2:	e7cd      	b.n	800c160 <__smakebuf_r+0x18>
 800c1c4:	0800bf5d 	.word	0x0800bf5d

0800c1c8 <_raise_r>:
 800c1c8:	291f      	cmp	r1, #31
 800c1ca:	b538      	push	{r3, r4, r5, lr}
 800c1cc:	4604      	mov	r4, r0
 800c1ce:	460d      	mov	r5, r1
 800c1d0:	d904      	bls.n	800c1dc <_raise_r+0x14>
 800c1d2:	2316      	movs	r3, #22
 800c1d4:	6003      	str	r3, [r0, #0]
 800c1d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1da:	bd38      	pop	{r3, r4, r5, pc}
 800c1dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c1de:	b112      	cbz	r2, 800c1e6 <_raise_r+0x1e>
 800c1e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1e4:	b94b      	cbnz	r3, 800c1fa <_raise_r+0x32>
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f000 f830 	bl	800c24c <_getpid_r>
 800c1ec:	462a      	mov	r2, r5
 800c1ee:	4601      	mov	r1, r0
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1f6:	f000 b817 	b.w	800c228 <_kill_r>
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d00a      	beq.n	800c214 <_raise_r+0x4c>
 800c1fe:	1c59      	adds	r1, r3, #1
 800c200:	d103      	bne.n	800c20a <_raise_r+0x42>
 800c202:	2316      	movs	r3, #22
 800c204:	6003      	str	r3, [r0, #0]
 800c206:	2001      	movs	r0, #1
 800c208:	e7e7      	b.n	800c1da <_raise_r+0x12>
 800c20a:	2400      	movs	r4, #0
 800c20c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c210:	4628      	mov	r0, r5
 800c212:	4798      	blx	r3
 800c214:	2000      	movs	r0, #0
 800c216:	e7e0      	b.n	800c1da <_raise_r+0x12>

0800c218 <raise>:
 800c218:	4b02      	ldr	r3, [pc, #8]	; (800c224 <raise+0xc>)
 800c21a:	4601      	mov	r1, r0
 800c21c:	6818      	ldr	r0, [r3, #0]
 800c21e:	f7ff bfd3 	b.w	800c1c8 <_raise_r>
 800c222:	bf00      	nop
 800c224:	20000018 	.word	0x20000018

0800c228 <_kill_r>:
 800c228:	b538      	push	{r3, r4, r5, lr}
 800c22a:	4d07      	ldr	r5, [pc, #28]	; (800c248 <_kill_r+0x20>)
 800c22c:	2300      	movs	r3, #0
 800c22e:	4604      	mov	r4, r0
 800c230:	4608      	mov	r0, r1
 800c232:	4611      	mov	r1, r2
 800c234:	602b      	str	r3, [r5, #0]
 800c236:	f7f6 fd03 	bl	8002c40 <_kill>
 800c23a:	1c43      	adds	r3, r0, #1
 800c23c:	d102      	bne.n	800c244 <_kill_r+0x1c>
 800c23e:	682b      	ldr	r3, [r5, #0]
 800c240:	b103      	cbz	r3, 800c244 <_kill_r+0x1c>
 800c242:	6023      	str	r3, [r4, #0]
 800c244:	bd38      	pop	{r3, r4, r5, pc}
 800c246:	bf00      	nop
 800c248:	2000055c 	.word	0x2000055c

0800c24c <_getpid_r>:
 800c24c:	f7f6 bcf0 	b.w	8002c30 <_getpid>

0800c250 <__sread>:
 800c250:	b510      	push	{r4, lr}
 800c252:	460c      	mov	r4, r1
 800c254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c258:	f000 f894 	bl	800c384 <_read_r>
 800c25c:	2800      	cmp	r0, #0
 800c25e:	bfab      	itete	ge
 800c260:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c262:	89a3      	ldrhlt	r3, [r4, #12]
 800c264:	181b      	addge	r3, r3, r0
 800c266:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c26a:	bfac      	ite	ge
 800c26c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c26e:	81a3      	strhlt	r3, [r4, #12]
 800c270:	bd10      	pop	{r4, pc}

0800c272 <__swrite>:
 800c272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c276:	461f      	mov	r7, r3
 800c278:	898b      	ldrh	r3, [r1, #12]
 800c27a:	05db      	lsls	r3, r3, #23
 800c27c:	4605      	mov	r5, r0
 800c27e:	460c      	mov	r4, r1
 800c280:	4616      	mov	r6, r2
 800c282:	d505      	bpl.n	800c290 <__swrite+0x1e>
 800c284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c288:	2302      	movs	r3, #2
 800c28a:	2200      	movs	r2, #0
 800c28c:	f000 f868 	bl	800c360 <_lseek_r>
 800c290:	89a3      	ldrh	r3, [r4, #12]
 800c292:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c296:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c29a:	81a3      	strh	r3, [r4, #12]
 800c29c:	4632      	mov	r2, r6
 800c29e:	463b      	mov	r3, r7
 800c2a0:	4628      	mov	r0, r5
 800c2a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2a6:	f000 b817 	b.w	800c2d8 <_write_r>

0800c2aa <__sseek>:
 800c2aa:	b510      	push	{r4, lr}
 800c2ac:	460c      	mov	r4, r1
 800c2ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2b2:	f000 f855 	bl	800c360 <_lseek_r>
 800c2b6:	1c43      	adds	r3, r0, #1
 800c2b8:	89a3      	ldrh	r3, [r4, #12]
 800c2ba:	bf15      	itete	ne
 800c2bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c2be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c2c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c2c6:	81a3      	strheq	r3, [r4, #12]
 800c2c8:	bf18      	it	ne
 800c2ca:	81a3      	strhne	r3, [r4, #12]
 800c2cc:	bd10      	pop	{r4, pc}

0800c2ce <__sclose>:
 800c2ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2d2:	f000 b813 	b.w	800c2fc <_close_r>
	...

0800c2d8 <_write_r>:
 800c2d8:	b538      	push	{r3, r4, r5, lr}
 800c2da:	4d07      	ldr	r5, [pc, #28]	; (800c2f8 <_write_r+0x20>)
 800c2dc:	4604      	mov	r4, r0
 800c2de:	4608      	mov	r0, r1
 800c2e0:	4611      	mov	r1, r2
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	602a      	str	r2, [r5, #0]
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	f7f6 fce1 	bl	8002cae <_write>
 800c2ec:	1c43      	adds	r3, r0, #1
 800c2ee:	d102      	bne.n	800c2f6 <_write_r+0x1e>
 800c2f0:	682b      	ldr	r3, [r5, #0]
 800c2f2:	b103      	cbz	r3, 800c2f6 <_write_r+0x1e>
 800c2f4:	6023      	str	r3, [r4, #0]
 800c2f6:	bd38      	pop	{r3, r4, r5, pc}
 800c2f8:	2000055c 	.word	0x2000055c

0800c2fc <_close_r>:
 800c2fc:	b538      	push	{r3, r4, r5, lr}
 800c2fe:	4d06      	ldr	r5, [pc, #24]	; (800c318 <_close_r+0x1c>)
 800c300:	2300      	movs	r3, #0
 800c302:	4604      	mov	r4, r0
 800c304:	4608      	mov	r0, r1
 800c306:	602b      	str	r3, [r5, #0]
 800c308:	f7f6 fced 	bl	8002ce6 <_close>
 800c30c:	1c43      	adds	r3, r0, #1
 800c30e:	d102      	bne.n	800c316 <_close_r+0x1a>
 800c310:	682b      	ldr	r3, [r5, #0]
 800c312:	b103      	cbz	r3, 800c316 <_close_r+0x1a>
 800c314:	6023      	str	r3, [r4, #0]
 800c316:	bd38      	pop	{r3, r4, r5, pc}
 800c318:	2000055c 	.word	0x2000055c

0800c31c <_fstat_r>:
 800c31c:	b538      	push	{r3, r4, r5, lr}
 800c31e:	4d07      	ldr	r5, [pc, #28]	; (800c33c <_fstat_r+0x20>)
 800c320:	2300      	movs	r3, #0
 800c322:	4604      	mov	r4, r0
 800c324:	4608      	mov	r0, r1
 800c326:	4611      	mov	r1, r2
 800c328:	602b      	str	r3, [r5, #0]
 800c32a:	f7f6 fce8 	bl	8002cfe <_fstat>
 800c32e:	1c43      	adds	r3, r0, #1
 800c330:	d102      	bne.n	800c338 <_fstat_r+0x1c>
 800c332:	682b      	ldr	r3, [r5, #0]
 800c334:	b103      	cbz	r3, 800c338 <_fstat_r+0x1c>
 800c336:	6023      	str	r3, [r4, #0]
 800c338:	bd38      	pop	{r3, r4, r5, pc}
 800c33a:	bf00      	nop
 800c33c:	2000055c 	.word	0x2000055c

0800c340 <_isatty_r>:
 800c340:	b538      	push	{r3, r4, r5, lr}
 800c342:	4d06      	ldr	r5, [pc, #24]	; (800c35c <_isatty_r+0x1c>)
 800c344:	2300      	movs	r3, #0
 800c346:	4604      	mov	r4, r0
 800c348:	4608      	mov	r0, r1
 800c34a:	602b      	str	r3, [r5, #0]
 800c34c:	f7f6 fce7 	bl	8002d1e <_isatty>
 800c350:	1c43      	adds	r3, r0, #1
 800c352:	d102      	bne.n	800c35a <_isatty_r+0x1a>
 800c354:	682b      	ldr	r3, [r5, #0]
 800c356:	b103      	cbz	r3, 800c35a <_isatty_r+0x1a>
 800c358:	6023      	str	r3, [r4, #0]
 800c35a:	bd38      	pop	{r3, r4, r5, pc}
 800c35c:	2000055c 	.word	0x2000055c

0800c360 <_lseek_r>:
 800c360:	b538      	push	{r3, r4, r5, lr}
 800c362:	4d07      	ldr	r5, [pc, #28]	; (800c380 <_lseek_r+0x20>)
 800c364:	4604      	mov	r4, r0
 800c366:	4608      	mov	r0, r1
 800c368:	4611      	mov	r1, r2
 800c36a:	2200      	movs	r2, #0
 800c36c:	602a      	str	r2, [r5, #0]
 800c36e:	461a      	mov	r2, r3
 800c370:	f7f6 fce0 	bl	8002d34 <_lseek>
 800c374:	1c43      	adds	r3, r0, #1
 800c376:	d102      	bne.n	800c37e <_lseek_r+0x1e>
 800c378:	682b      	ldr	r3, [r5, #0]
 800c37a:	b103      	cbz	r3, 800c37e <_lseek_r+0x1e>
 800c37c:	6023      	str	r3, [r4, #0]
 800c37e:	bd38      	pop	{r3, r4, r5, pc}
 800c380:	2000055c 	.word	0x2000055c

0800c384 <_read_r>:
 800c384:	b538      	push	{r3, r4, r5, lr}
 800c386:	4d07      	ldr	r5, [pc, #28]	; (800c3a4 <_read_r+0x20>)
 800c388:	4604      	mov	r4, r0
 800c38a:	4608      	mov	r0, r1
 800c38c:	4611      	mov	r1, r2
 800c38e:	2200      	movs	r2, #0
 800c390:	602a      	str	r2, [r5, #0]
 800c392:	461a      	mov	r2, r3
 800c394:	f7f6 fc6e 	bl	8002c74 <_read>
 800c398:	1c43      	adds	r3, r0, #1
 800c39a:	d102      	bne.n	800c3a2 <_read_r+0x1e>
 800c39c:	682b      	ldr	r3, [r5, #0]
 800c39e:	b103      	cbz	r3, 800c3a2 <_read_r+0x1e>
 800c3a0:	6023      	str	r3, [r4, #0]
 800c3a2:	bd38      	pop	{r3, r4, r5, pc}
 800c3a4:	2000055c 	.word	0x2000055c

0800c3a8 <_init>:
 800c3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3aa:	bf00      	nop
 800c3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ae:	bc08      	pop	{r3}
 800c3b0:	469e      	mov	lr, r3
 800c3b2:	4770      	bx	lr

0800c3b4 <_fini>:
 800c3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3b6:	bf00      	nop
 800c3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ba:	bc08      	pop	{r3}
 800c3bc:	469e      	mov	lr, r3
 800c3be:	4770      	bx	lr

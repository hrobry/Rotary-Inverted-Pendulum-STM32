
KomunikacjaJavaSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008acc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  08008c64  08008c64  00018c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091bc  080091bc  0002012c  2**0
                  CONTENTS
  4 .ARM          00000008  080091bc  080091bc  000191bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091c4  080091c4  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091c4  080091c4  000191c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091c8  080091c8  000191c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  080091cc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  20000130  080092f8  00020130  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  080092f8  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001624c  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d6c  00000000  00000000  000363a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00039118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  0003a1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e69  00000000  00000000  0003b1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174a6  00000000  00000000  00053041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ffb3  00000000  00000000  0006a4e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa49a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ac8  00000000  00000000  000fa4f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000130 	.word	0x20000130
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008c4c 	.word	0x08008c4c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000134 	.word	0x20000134
 80001d4:	08008c4c 	.word	0x08008c4c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad8:	f000 b96e 	b.w	8000db8 <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__udivmoddi4>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	9d08      	ldr	r5, [sp, #32]
 8000afa:	4604      	mov	r4, r0
 8000afc:	468c      	mov	ip, r1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f040 8083 	bne.w	8000c0a <__udivmoddi4+0x116>
 8000b04:	428a      	cmp	r2, r1
 8000b06:	4617      	mov	r7, r2
 8000b08:	d947      	bls.n	8000b9a <__udivmoddi4+0xa6>
 8000b0a:	fab2 f282 	clz	r2, r2
 8000b0e:	b142      	cbz	r2, 8000b22 <__udivmoddi4+0x2e>
 8000b10:	f1c2 0020 	rsb	r0, r2, #32
 8000b14:	fa24 f000 	lsr.w	r0, r4, r0
 8000b18:	4091      	lsls	r1, r2
 8000b1a:	4097      	lsls	r7, r2
 8000b1c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b20:	4094      	lsls	r4, r2
 8000b22:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b26:	0c23      	lsrs	r3, r4, #16
 8000b28:	fbbc f6f8 	udiv	r6, ip, r8
 8000b2c:	fa1f fe87 	uxth.w	lr, r7
 8000b30:	fb08 c116 	mls	r1, r8, r6, ip
 8000b34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b38:	fb06 f10e 	mul.w	r1, r6, lr
 8000b3c:	4299      	cmp	r1, r3
 8000b3e:	d909      	bls.n	8000b54 <__udivmoddi4+0x60>
 8000b40:	18fb      	adds	r3, r7, r3
 8000b42:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b46:	f080 8119 	bcs.w	8000d7c <__udivmoddi4+0x288>
 8000b4a:	4299      	cmp	r1, r3
 8000b4c:	f240 8116 	bls.w	8000d7c <__udivmoddi4+0x288>
 8000b50:	3e02      	subs	r6, #2
 8000b52:	443b      	add	r3, r7
 8000b54:	1a5b      	subs	r3, r3, r1
 8000b56:	b2a4      	uxth	r4, r4
 8000b58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b5c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b68:	45a6      	cmp	lr, r4
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x8c>
 8000b6c:	193c      	adds	r4, r7, r4
 8000b6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b72:	f080 8105 	bcs.w	8000d80 <__udivmoddi4+0x28c>
 8000b76:	45a6      	cmp	lr, r4
 8000b78:	f240 8102 	bls.w	8000d80 <__udivmoddi4+0x28c>
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	443c      	add	r4, r7
 8000b80:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b84:	eba4 040e 	sub.w	r4, r4, lr
 8000b88:	2600      	movs	r6, #0
 8000b8a:	b11d      	cbz	r5, 8000b94 <__udivmoddi4+0xa0>
 8000b8c:	40d4      	lsrs	r4, r2
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e9c5 4300 	strd	r4, r3, [r5]
 8000b94:	4631      	mov	r1, r6
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	b902      	cbnz	r2, 8000b9e <__udivmoddi4+0xaa>
 8000b9c:	deff      	udf	#255	; 0xff
 8000b9e:	fab2 f282 	clz	r2, r2
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	d150      	bne.n	8000c48 <__udivmoddi4+0x154>
 8000ba6:	1bcb      	subs	r3, r1, r7
 8000ba8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bac:	fa1f f887 	uxth.w	r8, r7
 8000bb0:	2601      	movs	r6, #1
 8000bb2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bb6:	0c21      	lsrs	r1, r4, #16
 8000bb8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bbc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bc0:	fb08 f30c 	mul.w	r3, r8, ip
 8000bc4:	428b      	cmp	r3, r1
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0xe4>
 8000bc8:	1879      	adds	r1, r7, r1
 8000bca:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0xe2>
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	f200 80e9 	bhi.w	8000da8 <__udivmoddi4+0x2b4>
 8000bd6:	4684      	mov	ip, r0
 8000bd8:	1ac9      	subs	r1, r1, r3
 8000bda:	b2a3      	uxth	r3, r4
 8000bdc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000be0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000be4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be8:	fb08 f800 	mul.w	r8, r8, r0
 8000bec:	45a0      	cmp	r8, r4
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x10c>
 8000bf0:	193c      	adds	r4, r7, r4
 8000bf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x10a>
 8000bf8:	45a0      	cmp	r8, r4
 8000bfa:	f200 80d9 	bhi.w	8000db0 <__udivmoddi4+0x2bc>
 8000bfe:	4618      	mov	r0, r3
 8000c00:	eba4 0408 	sub.w	r4, r4, r8
 8000c04:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c08:	e7bf      	b.n	8000b8a <__udivmoddi4+0x96>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	d909      	bls.n	8000c22 <__udivmoddi4+0x12e>
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	f000 80b1 	beq.w	8000d76 <__udivmoddi4+0x282>
 8000c14:	2600      	movs	r6, #0
 8000c16:	e9c5 0100 	strd	r0, r1, [r5]
 8000c1a:	4630      	mov	r0, r6
 8000c1c:	4631      	mov	r1, r6
 8000c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c22:	fab3 f683 	clz	r6, r3
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d14a      	bne.n	8000cc0 <__udivmoddi4+0x1cc>
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d302      	bcc.n	8000c34 <__udivmoddi4+0x140>
 8000c2e:	4282      	cmp	r2, r0
 8000c30:	f200 80b8 	bhi.w	8000da4 <__udivmoddi4+0x2b0>
 8000c34:	1a84      	subs	r4, r0, r2
 8000c36:	eb61 0103 	sbc.w	r1, r1, r3
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	468c      	mov	ip, r1
 8000c3e:	2d00      	cmp	r5, #0
 8000c40:	d0a8      	beq.n	8000b94 <__udivmoddi4+0xa0>
 8000c42:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c46:	e7a5      	b.n	8000b94 <__udivmoddi4+0xa0>
 8000c48:	f1c2 0320 	rsb	r3, r2, #32
 8000c4c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c50:	4097      	lsls	r7, r2
 8000c52:	fa01 f002 	lsl.w	r0, r1, r2
 8000c56:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5a:	40d9      	lsrs	r1, r3
 8000c5c:	4330      	orrs	r0, r6
 8000c5e:	0c03      	lsrs	r3, r0, #16
 8000c60:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c64:	fa1f f887 	uxth.w	r8, r7
 8000c68:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c70:	fb06 f108 	mul.w	r1, r6, r8
 8000c74:	4299      	cmp	r1, r3
 8000c76:	fa04 f402 	lsl.w	r4, r4, r2
 8000c7a:	d909      	bls.n	8000c90 <__udivmoddi4+0x19c>
 8000c7c:	18fb      	adds	r3, r7, r3
 8000c7e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c82:	f080 808d 	bcs.w	8000da0 <__udivmoddi4+0x2ac>
 8000c86:	4299      	cmp	r1, r3
 8000c88:	f240 808a 	bls.w	8000da0 <__udivmoddi4+0x2ac>
 8000c8c:	3e02      	subs	r6, #2
 8000c8e:	443b      	add	r3, r7
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	b281      	uxth	r1, r0
 8000c94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca0:	fb00 f308 	mul.w	r3, r0, r8
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x1c4>
 8000ca8:	1879      	adds	r1, r7, r1
 8000caa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cae:	d273      	bcs.n	8000d98 <__udivmoddi4+0x2a4>
 8000cb0:	428b      	cmp	r3, r1
 8000cb2:	d971      	bls.n	8000d98 <__udivmoddi4+0x2a4>
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	4439      	add	r1, r7
 8000cb8:	1acb      	subs	r3, r1, r3
 8000cba:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cbe:	e778      	b.n	8000bb2 <__udivmoddi4+0xbe>
 8000cc0:	f1c6 0c20 	rsb	ip, r6, #32
 8000cc4:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ccc:	431c      	orrs	r4, r3
 8000cce:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cd2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cd6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cda:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cde:	431f      	orrs	r7, r3
 8000ce0:	0c3b      	lsrs	r3, r7, #16
 8000ce2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ce6:	fa1f f884 	uxth.w	r8, r4
 8000cea:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cee:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cf2:	fb09 fa08 	mul.w	sl, r9, r8
 8000cf6:	458a      	cmp	sl, r1
 8000cf8:	fa02 f206 	lsl.w	r2, r2, r6
 8000cfc:	fa00 f306 	lsl.w	r3, r0, r6
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x220>
 8000d02:	1861      	adds	r1, r4, r1
 8000d04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d08:	d248      	bcs.n	8000d9c <__udivmoddi4+0x2a8>
 8000d0a:	458a      	cmp	sl, r1
 8000d0c:	d946      	bls.n	8000d9c <__udivmoddi4+0x2a8>
 8000d0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d12:	4421      	add	r1, r4
 8000d14:	eba1 010a 	sub.w	r1, r1, sl
 8000d18:	b2bf      	uxth	r7, r7
 8000d1a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d1e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d22:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d26:	fb00 f808 	mul.w	r8, r0, r8
 8000d2a:	45b8      	cmp	r8, r7
 8000d2c:	d907      	bls.n	8000d3e <__udivmoddi4+0x24a>
 8000d2e:	19e7      	adds	r7, r4, r7
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d22e      	bcs.n	8000d94 <__udivmoddi4+0x2a0>
 8000d36:	45b8      	cmp	r8, r7
 8000d38:	d92c      	bls.n	8000d94 <__udivmoddi4+0x2a0>
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	4427      	add	r7, r4
 8000d3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d42:	eba7 0708 	sub.w	r7, r7, r8
 8000d46:	fba0 8902 	umull	r8, r9, r0, r2
 8000d4a:	454f      	cmp	r7, r9
 8000d4c:	46c6      	mov	lr, r8
 8000d4e:	4649      	mov	r1, r9
 8000d50:	d31a      	bcc.n	8000d88 <__udivmoddi4+0x294>
 8000d52:	d017      	beq.n	8000d84 <__udivmoddi4+0x290>
 8000d54:	b15d      	cbz	r5, 8000d6e <__udivmoddi4+0x27a>
 8000d56:	ebb3 020e 	subs.w	r2, r3, lr
 8000d5a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d5e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d62:	40f2      	lsrs	r2, r6
 8000d64:	ea4c 0202 	orr.w	r2, ip, r2
 8000d68:	40f7      	lsrs	r7, r6
 8000d6a:	e9c5 2700 	strd	r2, r7, [r5]
 8000d6e:	2600      	movs	r6, #0
 8000d70:	4631      	mov	r1, r6
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	462e      	mov	r6, r5
 8000d78:	4628      	mov	r0, r5
 8000d7a:	e70b      	b.n	8000b94 <__udivmoddi4+0xa0>
 8000d7c:	4606      	mov	r6, r0
 8000d7e:	e6e9      	b.n	8000b54 <__udivmoddi4+0x60>
 8000d80:	4618      	mov	r0, r3
 8000d82:	e6fd      	b.n	8000b80 <__udivmoddi4+0x8c>
 8000d84:	4543      	cmp	r3, r8
 8000d86:	d2e5      	bcs.n	8000d54 <__udivmoddi4+0x260>
 8000d88:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d8c:	eb69 0104 	sbc.w	r1, r9, r4
 8000d90:	3801      	subs	r0, #1
 8000d92:	e7df      	b.n	8000d54 <__udivmoddi4+0x260>
 8000d94:	4608      	mov	r0, r1
 8000d96:	e7d2      	b.n	8000d3e <__udivmoddi4+0x24a>
 8000d98:	4660      	mov	r0, ip
 8000d9a:	e78d      	b.n	8000cb8 <__udivmoddi4+0x1c4>
 8000d9c:	4681      	mov	r9, r0
 8000d9e:	e7b9      	b.n	8000d14 <__udivmoddi4+0x220>
 8000da0:	4666      	mov	r6, ip
 8000da2:	e775      	b.n	8000c90 <__udivmoddi4+0x19c>
 8000da4:	4630      	mov	r0, r6
 8000da6:	e74a      	b.n	8000c3e <__udivmoddi4+0x14a>
 8000da8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dac:	4439      	add	r1, r7
 8000dae:	e713      	b.n	8000bd8 <__udivmoddi4+0xe4>
 8000db0:	3802      	subs	r0, #2
 8000db2:	443c      	add	r4, r7
 8000db4:	e724      	b.n	8000c00 <__udivmoddi4+0x10c>
 8000db6:	bf00      	nop

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <GFX_draw_char>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b087      	sub	sp, #28
 8000dc0:	af02      	add	r7, sp, #8
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4623      	mov	r3, r4
 8000dcc:	80fb      	strh	r3, [r7, #6]
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80bb      	strh	r3, [r7, #4]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	70fb      	strb	r3, [r7, #3]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	803b      	strh	r3, [r7, #0]
	int8_t i, j;
	uint8_t line;

	if((x >= WIDTH) || (y >= HEIGHT) || ((x + 6 * size_x - 1) < 0) || ((y + 8 * size_y - 1) < 0))
 8000dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dde:	2b7f      	cmp	r3, #127	; 0x7f
 8000de0:	f300 8100 	bgt.w	8000fe4 <GFX_draw_char+0x228>
 8000de4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000de8:	2b3f      	cmp	r3, #63	; 0x3f
 8000dea:	f300 80fb 	bgt.w	8000fe4 <GFX_draw_char+0x228>
 8000dee:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000df2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000df6:	4613      	mov	r3, r2
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	4413      	add	r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	440b      	add	r3, r1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f340 80ef 	ble.w	8000fe4 <GFX_draw_char+0x228>
 8000e06:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	4413      	add	r3, r2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f340 80e6 	ble.w	8000fe4 <GFX_draw_char+0x228>
	{
		return;
	}

	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000e18:	2300      	movs	r3, #0
 8000e1a:	73fb      	strb	r3, [r7, #15]
 8000e1c:	e0aa      	b.n	8000f74 <GFX_draw_char+0x1b8>
	{
		line = (*(const unsigned char *)(&font[c * 5 + i]));
 8000e1e:	78fa      	ldrb	r2, [r7, #3]
 8000e20:	4613      	mov	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	441a      	add	r2, r3
 8000e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a6f      	ldr	r2, [pc, #444]	; (8000fec <GFX_draw_char+0x230>)
 8000e2e:	5cd3      	ldrb	r3, [r2, r3]
 8000e30:	737b      	strb	r3, [r7, #13]
		for(j = 7; j >= 0; j--, line >>= 1)
 8000e32:	2307      	movs	r3, #7
 8000e34:	73bb      	strb	r3, [r7, #14]
 8000e36:	e092      	b.n	8000f5e <GFX_draw_char+0x1a2>
		{
			if(line & 1)
 8000e38:	7b7b      	ldrb	r3, [r7, #13]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d040      	beq.n	8000ec4 <GFX_draw_char+0x108>
			{
				if(size_x == 1 && size_y == 1)
 8000e42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d116      	bne.n	8000e78 <GFX_draw_char+0xbc>
 8000e4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d112      	bne.n	8000e78 <GFX_draw_char+0xbc>
				{
					SSD1306_draw_pixel(x + i, y + j, color);
 8000e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	88fb      	ldrh	r3, [r7, #6]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	b218      	sxth	r0, r3
 8000e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	88bb      	ldrh	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	b21b      	sxth	r3, r3
 8000e6e:	883a      	ldrh	r2, [r7, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f000 f9f7 	bl	8001264 <SSD1306_draw_pixel>
 8000e76:	e069      	b.n	8000f4c <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, color);
 8000e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	fb12 f303 	smulbb	r3, r2, r3
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	b218      	sxth	r0, r3
 8000e92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	fb12 f303 	smulbb	r3, r2, r3
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	88bb      	ldrh	r3, [r7, #4]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	b219      	sxth	r1, r3
 8000eac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000eb0:	b21a      	sxth	r2, r3
 8000eb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000eb6:	b21c      	sxth	r4, r3
 8000eb8:	883b      	ldrh	r3, [r7, #0]
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	4623      	mov	r3, r4
 8000ebe:	f000 f8d0 	bl	8001062 <GFX_draw_fill_rect>
 8000ec2:	e043      	b.n	8000f4c <GFX_draw_char+0x190>
				}
			}
			else if(bg != color)
 8000ec4:	8c3a      	ldrh	r2, [r7, #32]
 8000ec6:	883b      	ldrh	r3, [r7, #0]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d03f      	beq.n	8000f4c <GFX_draw_char+0x190>
			{
				if(size_x == 1 && size_y == 1)
 8000ecc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d116      	bne.n	8000f02 <GFX_draw_char+0x146>
 8000ed4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d112      	bne.n	8000f02 <GFX_draw_char+0x146>
				{
					SSD1306_draw_pixel(x + i, y + j, bg);
 8000edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	b218      	sxth	r0, r3
 8000eea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	88bb      	ldrh	r3, [r7, #4]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	b21b      	sxth	r3, r3
 8000ef8:	8c3a      	ldrh	r2, [r7, #32]
 8000efa:	4619      	mov	r1, r3
 8000efc:	f000 f9b2 	bl	8001264 <SSD1306_draw_pixel>
 8000f00:	e024      	b.n	8000f4c <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8000f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	fb12 f303 	smulbb	r3, r2, r3
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	4413      	add	r3, r2
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	b218      	sxth	r0, r3
 8000f1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	fb12 f303 	smulbb	r3, r2, r3
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	88bb      	ldrh	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	b219      	sxth	r1, r3
 8000f36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f3a:	b21a      	sxth	r2, r3
 8000f3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f40:	b21c      	sxth	r4, r3
 8000f42:	8c3b      	ldrh	r3, [r7, #32]
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	4623      	mov	r3, r4
 8000f48:	f000 f88b 	bl	8001062 <GFX_draw_fill_rect>
		for(j = 7; j >= 0; j--, line >>= 1)
 8000f4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	3b01      	subs	r3, #1
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	73bb      	strb	r3, [r7, #14]
 8000f58:	7b7b      	ldrb	r3, [r7, #13]
 8000f5a:	085b      	lsrs	r3, r3, #1
 8000f5c:	737b      	strb	r3, [r7, #13]
 8000f5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f6bf af68 	bge.w	8000e38 <GFX_draw_char+0x7c>
	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000f68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	3301      	adds	r3, #1
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	73fb      	strb	r3, [r7, #15]
 8000f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f78:	2b04      	cmp	r3, #4
 8000f7a:	f77f af50 	ble.w	8000e1e <GFX_draw_char+0x62>
				}
			}
		}
	}

	if(bg != color) // If opaque, draw vertical line for last column
 8000f7e:	8c3a      	ldrh	r2, [r7, #32]
 8000f80:	883b      	ldrh	r3, [r7, #0]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d02f      	beq.n	8000fe6 <GFX_draw_char+0x22a>
	{
		if(size_x == 1 && size_y == 1)
 8000f86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d10e      	bne.n	8000fac <GFX_draw_char+0x1f0>
 8000f8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d10a      	bne.n	8000fac <GFX_draw_char+0x1f0>
		{
			SSD1306_draw_fast_vline(x + 5, y, 8, bg);
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	3305      	adds	r3, #5
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	b218      	sxth	r0, r3
 8000f9e:	8c3b      	ldrh	r3, [r7, #32]
 8000fa0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000fa4:	2208      	movs	r2, #8
 8000fa6:	f000 fb4f 	bl	8001648 <SSD1306_draw_fast_vline>
 8000faa:	e01c      	b.n	8000fe6 <GFX_draw_char+0x22a>
		}
		else
		{
			GFX_draw_fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 8000fac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	0092      	lsls	r2, r2, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	b218      	sxth	r0, r3
 8000fc2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000fc6:	b21a      	sxth	r2, r3
 8000fc8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	b21c      	sxth	r4, r3
 8000fd4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000fd8:	8c3b      	ldrh	r3, [r7, #32]
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	4623      	mov	r3, r4
 8000fde:	f000 f840 	bl	8001062 <GFX_draw_fill_rect>
 8000fe2:	e000      	b.n	8000fe6 <GFX_draw_char+0x22a>
		return;
 8000fe4:	bf00      	nop
		}
	}
}
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd90      	pop	{r4, r7, pc}
 8000fec:	08008c64 	.word	0x08008c64

08000ff0 <GFX_draw_string>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_string(int16_t x, int16_t y, unsigned char * c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b08b      	sub	sp, #44	; 0x2c
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	60ba      	str	r2, [r7, #8]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	81fb      	strh	r3, [r7, #14]
 8000ffe:	460b      	mov	r3, r1
 8001000:	81bb      	strh	r3, [r7, #12]
 8001002:	4613      	mov	r3, r2
 8001004:	80fb      	strh	r3, [r7, #6]
	uint8_t offset = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	75fb      	strb	r3, [r7, #23]
	while(*c)
 800100a:	e021      	b.n	8001050 <GFX_draw_string+0x60>
	{
		GFX_draw_char(x+offset, y, *c, color, bg, size_x, size_y);
 800100c:	7dfb      	ldrb	r3, [r7, #23]
 800100e:	b29a      	uxth	r2, r3
 8001010:	89fb      	ldrh	r3, [r7, #14]
 8001012:	4413      	add	r3, r2
 8001014:	b29b      	uxth	r3, r3
 8001016:	b218      	sxth	r0, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	781a      	ldrb	r2, [r3, #0]
 800101c:	88fc      	ldrh	r4, [r7, #6]
 800101e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001022:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	4623      	mov	r3, r4
 8001034:	f7ff fec2 	bl	8000dbc <GFX_draw_char>
		offset += (5 + 2) * size_x;
 8001038:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800103c:	461a      	mov	r2, r3
 800103e:	00d2      	lsls	r2, r2, #3
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	b2da      	uxtb	r2, r3
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	4413      	add	r3, r2
 8001048:	75fb      	strb	r3, [r7, #23]
		c++;
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	3301      	adds	r3, #1
 800104e:	60bb      	str	r3, [r7, #8]
	while(*c)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1d9      	bne.n	800100c <GFX_draw_string+0x1c>
	}
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	371c      	adds	r7, #28
 800105e:	46bd      	mov	sp, r7
 8001060:	bd90      	pop	{r4, r7, pc}

08001062 <GFX_draw_fill_rect>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void GFX_draw_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8001062:	b590      	push	{r4, r7, lr}
 8001064:	b085      	sub	sp, #20
 8001066:	af00      	add	r7, sp, #0
 8001068:	4604      	mov	r4, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4611      	mov	r1, r2
 800106e:	461a      	mov	r2, r3
 8001070:	4623      	mov	r3, r4
 8001072:	80fb      	strh	r3, [r7, #6]
 8001074:	4603      	mov	r3, r0
 8001076:	80bb      	strh	r3, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
 800107c:	4613      	mov	r3, r2
 800107e:	803b      	strh	r3, [r7, #0]
	for(int16_t i = x; i < x + w; i++)
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	81fb      	strh	r3, [r7, #14]
 8001084:	e00e      	b.n	80010a4 <GFX_draw_fill_rect+0x42>
	{
		SSD1306_draw_fast_vline(i, y, h, color);
 8001086:	8c3b      	ldrh	r3, [r7, #32]
 8001088:	f9b7 2000 	ldrsh.w	r2, [r7]
 800108c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001090:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001094:	f000 fad8 	bl	8001648 <SSD1306_draw_fast_vline>
	for(int16_t i = x; i < x + w; i++)
 8001098:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800109c:	b29b      	uxth	r3, r3
 800109e:	3301      	adds	r3, #1
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	81fb      	strh	r3, [r7, #14]
 80010a4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80010a8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80010ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010b0:	440b      	add	r3, r1
 80010b2:	429a      	cmp	r2, r3
 80010b4:	dbe7      	blt.n	8001086 <GFX_draw_fill_rect+0x24>
	}
}
 80010b6:	bf00      	nop
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd90      	pop	{r4, r7, pc}

080010c0 <platform_write>:

static uint8_t * buffer;
static uint8_t rotation;

static uint8_t platform_write(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af04      	add	r7, sp, #16
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	71fb      	strb	r3, [r7, #7]
 80010cc:	4613      	mov	r3, r2
 80010ce:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len, 100);
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	2364      	movs	r3, #100	; 0x64
 80010d6:	9302      	str	r3, [sp, #8]
 80010d8:	88bb      	ldrh	r3, [r7, #4]
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2301      	movs	r3, #1
 80010e2:	2178      	movs	r1, #120	; 0x78
 80010e4:	4803      	ldr	r0, [pc, #12]	; (80010f4 <platform_write+0x34>)
 80010e6:	f002 ff73 	bl	8003fd0 <HAL_I2C_Mem_Write>
	return 0;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200001f0 	.word	0x200001f0

080010f8 <platform_write_dma>:

static uint8_t platform_write_dma(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
 8001104:	4613      	mov	r3, r2
 8001106:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len);
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	b29a      	uxth	r2, r3
 800110c:	88bb      	ldrh	r3, [r7, #4]
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2301      	movs	r3, #1
 8001116:	2178      	movs	r1, #120	; 0x78
 8001118:	4803      	ldr	r0, [pc, #12]	; (8001128 <platform_write_dma+0x30>)
 800111a:	f003 f853 	bl	80041c4 <HAL_I2C_Mem_Write_DMA>
	return 0;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200001f0 	.word	0x200001f0

0800112c <SSD1306_send_com>:

static void SSD1306_send_com(uint8_t c)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	platform_write(0x00, &c, 1);
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	2201      	movs	r2, #1
 800113a:	4619      	mov	r1, r3
 800113c:	2000      	movs	r0, #0
 800113e:	f7ff ffbf 	bl	80010c0 <platform_write>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <SSD1306_init>:

bool SSD1306_init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
  uint8_t comPins = 0x02, contrast = 0x8F, vccstate = SSD1306_SWITCHCAPVCC;
 8001152:	2302      	movs	r3, #2
 8001154:	71fb      	strb	r3, [r7, #7]
 8001156:	238f      	movs	r3, #143	; 0x8f
 8001158:	71bb      	strb	r3, [r7, #6]
 800115a:	2302      	movs	r3, #2
 800115c:	717b      	strb	r3, [r7, #5]

  if ((!buffer) && !(buffer = (uint8_t *)malloc(SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8))))
 800115e:	4b40      	ldr	r3, [pc, #256]	; (8001260 <SSD1306_init+0x114>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d10d      	bne.n	8001182 <SSD1306_init+0x36>
 8001166:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800116a:	f007 fc97 	bl	8008a9c <malloc>
 800116e:	4603      	mov	r3, r0
 8001170:	461a      	mov	r2, r3
 8001172:	4b3b      	ldr	r3, [pc, #236]	; (8001260 <SSD1306_init+0x114>)
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	4b3a      	ldr	r3, [pc, #232]	; (8001260 <SSD1306_init+0x114>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <SSD1306_init+0x36>
  {
    return false;
 800117e:	2300      	movs	r3, #0
 8001180:	e06a      	b.n	8001258 <SSD1306_init+0x10c>
  }

  SSD1306_display_clear();
 8001182:	f000 f949 	bl	8001418 <SSD1306_display_clear>

  // Init sequence
  SSD1306_send_com(SSD1306_DISPLAYOFF);
 8001186:	20ae      	movs	r0, #174	; 0xae
 8001188:	f7ff ffd0 	bl	800112c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETDISPLAYCLOCKDIV);
 800118c:	20d5      	movs	r0, #213	; 0xd5
 800118e:	f7ff ffcd 	bl	800112c <SSD1306_send_com>
  SSD1306_send_com(0xE0);
 8001192:	20e0      	movs	r0, #224	; 0xe0
 8001194:	f7ff ffca 	bl	800112c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETMULTIPLEX);
 8001198:	20a8      	movs	r0, #168	; 0xa8
 800119a:	f7ff ffc7 	bl	800112c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_HEIGHT - 1);
 800119e:	203f      	movs	r0, #63	; 0x3f
 80011a0:	f7ff ffc4 	bl	800112c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETDISPLAYOFFSET);
 80011a4:	20d3      	movs	r0, #211	; 0xd3
 80011a6:	f7ff ffc1 	bl	800112c <SSD1306_send_com>
  SSD1306_send_com(0x00);
 80011aa:	2000      	movs	r0, #0
 80011ac:	f7ff ffbe 	bl	800112c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETSTARTLINE | 0x00);
 80011b0:	2040      	movs	r0, #64	; 0x40
 80011b2:	f7ff ffbb 	bl	800112c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_CHARGEPUMP);
 80011b6:	208d      	movs	r0, #141	; 0x8d
 80011b8:	f7ff ffb8 	bl	800112c <SSD1306_send_com>

  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 80011bc:	797b      	ldrb	r3, [r7, #5]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d101      	bne.n	80011c6 <SSD1306_init+0x7a>
 80011c2:	2310      	movs	r3, #16
 80011c4:	e000      	b.n	80011c8 <SSD1306_init+0x7c>
 80011c6:	2314      	movs	r3, #20
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ffaf 	bl	800112c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_MEMORYMODE);
 80011ce:	2020      	movs	r0, #32
 80011d0:	f7ff ffac 	bl	800112c <SSD1306_send_com>
  SSD1306_send_com(0x00);
 80011d4:	2000      	movs	r0, #0
 80011d6:	f7ff ffa9 	bl	800112c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SEGREMAP | 0x10);
 80011da:	20b0      	movs	r0, #176	; 0xb0
 80011dc:	f7ff ffa6 	bl	800112c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_COMSCANDEC);
 80011e0:	20c8      	movs	r0, #200	; 0xc8
 80011e2:	f7ff ffa3 	bl	800112c <SSD1306_send_com>
    comPins = 0x02;
    contrast = 0x8F;
  }
  else if ((SSD1306_WIDTH == 128) && (SSD1306_HEIGHT == 64))
  {
    comPins = 0x12;
 80011e6:	2312      	movs	r3, #18
 80011e8:	71fb      	strb	r3, [r7, #7]
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 80011ea:	797b      	ldrb	r3, [r7, #5]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d101      	bne.n	80011f4 <SSD1306_init+0xa8>
 80011f0:	239f      	movs	r3, #159	; 0x9f
 80011f2:	e000      	b.n	80011f6 <SSD1306_init+0xaa>
 80011f4:	23cf      	movs	r3, #207	; 0xcf
 80011f6:	71bb      	strb	r3, [r7, #6]
  {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  }

  SSD1306_send_com(SSD1306_SETCOMPINS);
 80011f8:	20da      	movs	r0, #218	; 0xda
 80011fa:	f7ff ff97 	bl	800112c <SSD1306_send_com>
  SSD1306_send_com(comPins);
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff93 	bl	800112c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETCONTRAST);
 8001206:	2081      	movs	r0, #129	; 0x81
 8001208:	f7ff ff90 	bl	800112c <SSD1306_send_com>
  SSD1306_send_com(contrast);
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff8c 	bl	800112c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETPRECHARGE);
 8001214:	20d9      	movs	r0, #217	; 0xd9
 8001216:	f7ff ff89 	bl	800112c <SSD1306_send_com>
  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 800121a:	797b      	ldrb	r3, [r7, #5]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d101      	bne.n	8001224 <SSD1306_init+0xd8>
 8001220:	2322      	movs	r3, #34	; 0x22
 8001222:	e000      	b.n	8001226 <SSD1306_init+0xda>
 8001224:	23f1      	movs	r3, #241	; 0xf1
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ff80 	bl	800112c <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETVCOMDETECT);
 800122c:	20db      	movs	r0, #219	; 0xdb
 800122e:	f7ff ff7d 	bl	800112c <SSD1306_send_com>
  SSD1306_send_com(0x40);
 8001232:	2040      	movs	r0, #64	; 0x40
 8001234:	f7ff ff7a 	bl	800112c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYALLON_RESUME);
 8001238:	20a4      	movs	r0, #164	; 0xa4
 800123a:	f7ff ff77 	bl	800112c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_NORMALDISPLAY);
 800123e:	20a6      	movs	r0, #166	; 0xa6
 8001240:	f7ff ff74 	bl	800112c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DEACTIVATE_SCROLL);
 8001244:	202e      	movs	r0, #46	; 0x2e
 8001246:	f7ff ff71 	bl	800112c <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYON);
 800124a:	20af      	movs	r0, #175	; 0xaf
 800124c:	f7ff ff6e 	bl	800112c <SSD1306_send_com>

  SSD1306_set_rotation(SSD1306_HORIZONTAL_MODE2);
 8001250:	2002      	movs	r0, #2
 8001252:	f000 fb91 	bl	8001978 <SSD1306_set_rotation>
  return true;
 8001256:	2301      	movs	r3, #1
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2000014c 	.word	0x2000014c

08001264 <SSD1306_draw_pixel>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_pixel(int16_t x, int16_t y, uint16_t color)
{
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	80fb      	strh	r3, [r7, #6]
 800126e:	460b      	mov	r3, r1
 8001270:	80bb      	strh	r3, [r7, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	807b      	strh	r3, [r7, #2]
	if ((x >= 0) && (x < SSD1306_WIDTH) && (y >= 0) && (y < SSD1306_HEIGHT))
 8001276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f2c0 80c4 	blt.w	8001408 <SSD1306_draw_pixel+0x1a4>
 8001280:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001284:	2b7f      	cmp	r3, #127	; 0x7f
 8001286:	f300 80bf 	bgt.w	8001408 <SSD1306_draw_pixel+0x1a4>
 800128a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	f2c0 80ba 	blt.w	8001408 <SSD1306_draw_pixel+0x1a4>
 8001294:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001298:	2b3f      	cmp	r3, #63	; 0x3f
 800129a:	f300 80b5 	bgt.w	8001408 <SSD1306_draw_pixel+0x1a4>
	{
		/* Pixel is in-bounds. Rotate coordinates if needed. */
		switch (SSD1306_get_rotation())
 800129e:	f000 fb7b 	bl	8001998 <SSD1306_get_rotation>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d023      	beq.n	80012f0 <SSD1306_draw_pixel+0x8c>
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	dc33      	bgt.n	8001314 <SSD1306_draw_pixel+0xb0>
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d002      	beq.n	80012b6 <SSD1306_draw_pixel+0x52>
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d012      	beq.n	80012da <SSD1306_draw_pixel+0x76>
 80012b4:	e02e      	b.n	8001314 <SSD1306_draw_pixel+0xb0>
		{
			case 1:
				ssd1306_swap(x, y);
 80012b6:	88fa      	ldrh	r2, [r7, #6]
 80012b8:	88bb      	ldrh	r3, [r7, #4]
 80012ba:	4053      	eors	r3, r2
 80012bc:	80fb      	strh	r3, [r7, #6]
 80012be:	88ba      	ldrh	r2, [r7, #4]
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	4053      	eors	r3, r2
 80012c4:	80bb      	strh	r3, [r7, #4]
 80012c6:	88fa      	ldrh	r2, [r7, #6]
 80012c8:	88bb      	ldrh	r3, [r7, #4]
 80012ca:	4053      	eors	r3, r2
 80012cc:	80fb      	strh	r3, [r7, #6]
				x = SSD1306_WIDTH - x - 1;
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	80fb      	strh	r3, [r7, #6]
				break;
 80012d8:	e01c      	b.n	8001314 <SSD1306_draw_pixel+0xb0>
			case 2:
				x = SSD1306_WIDTH - x - 1;
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 80012e4:	88bb      	ldrh	r3, [r7, #4]
 80012e6:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	80bb      	strh	r3, [r7, #4]
				break;
 80012ee:	e011      	b.n	8001314 <SSD1306_draw_pixel+0xb0>
			case 3:
				ssd1306_swap(x, y);
 80012f0:	88fa      	ldrh	r2, [r7, #6]
 80012f2:	88bb      	ldrh	r3, [r7, #4]
 80012f4:	4053      	eors	r3, r2
 80012f6:	80fb      	strh	r3, [r7, #6]
 80012f8:	88ba      	ldrh	r2, [r7, #4]
 80012fa:	88fb      	ldrh	r3, [r7, #6]
 80012fc:	4053      	eors	r3, r2
 80012fe:	80bb      	strh	r3, [r7, #4]
 8001300:	88fa      	ldrh	r2, [r7, #6]
 8001302:	88bb      	ldrh	r3, [r7, #4]
 8001304:	4053      	eors	r3, r2
 8001306:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 8001308:	88bb      	ldrh	r3, [r7, #4]
 800130a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800130e:	b29b      	uxth	r3, r3
 8001310:	80bb      	strh	r3, [r7, #4]
				break;
 8001312:	bf00      	nop
		}

		switch (color)
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d051      	beq.n	80013be <SSD1306_draw_pixel+0x15a>
 800131a:	2b02      	cmp	r3, #2
 800131c:	dc75      	bgt.n	800140a <SSD1306_draw_pixel+0x1a6>
 800131e:	2b00      	cmp	r3, #0
 8001320:	d026      	beq.n	8001370 <SSD1306_draw_pixel+0x10c>
 8001322:	2b01      	cmp	r3, #1
 8001324:	d171      	bne.n	800140a <SSD1306_draw_pixel+0x1a6>
		{
			case SSD1306_WHITE:
				buffer[x + (y / 8) * SSD1306_WIDTH] |= (1 << (y & 7));
 8001326:	4b3b      	ldr	r3, [pc, #236]	; (8001414 <SSD1306_draw_pixel+0x1b0>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800132e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	da00      	bge.n	8001338 <SSD1306_draw_pixel+0xd4>
 8001336:	3307      	adds	r3, #7
 8001338:	10db      	asrs	r3, r3, #3
 800133a:	b218      	sxth	r0, r3
 800133c:	4603      	mov	r3, r0
 800133e:	01db      	lsls	r3, r3, #7
 8001340:	440b      	add	r3, r1
 8001342:	4413      	add	r3, r2
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	b25a      	sxtb	r2, r3
 8001348:	88bb      	ldrh	r3, [r7, #4]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	2101      	movs	r1, #1
 8001350:	fa01 f303 	lsl.w	r3, r1, r3
 8001354:	b25b      	sxtb	r3, r3
 8001356:	4313      	orrs	r3, r2
 8001358:	b25c      	sxtb	r4, r3
 800135a:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <SSD1306_draw_pixel+0x1b0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001362:	4602      	mov	r2, r0
 8001364:	01d2      	lsls	r2, r2, #7
 8001366:	440a      	add	r2, r1
 8001368:	4413      	add	r3, r2
 800136a:	b2e2      	uxtb	r2, r4
 800136c:	701a      	strb	r2, [r3, #0]
				break;
 800136e:	e04c      	b.n	800140a <SSD1306_draw_pixel+0x1a6>
			case SSD1306_BLACK:
				buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y & 7));
 8001370:	4b28      	ldr	r3, [pc, #160]	; (8001414 <SSD1306_draw_pixel+0x1b0>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001378:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	da00      	bge.n	8001382 <SSD1306_draw_pixel+0x11e>
 8001380:	3307      	adds	r3, #7
 8001382:	10db      	asrs	r3, r3, #3
 8001384:	b218      	sxth	r0, r3
 8001386:	4603      	mov	r3, r0
 8001388:	01db      	lsls	r3, r3, #7
 800138a:	440b      	add	r3, r1
 800138c:	4413      	add	r3, r2
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b25a      	sxtb	r2, r3
 8001392:	88bb      	ldrh	r3, [r7, #4]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	2101      	movs	r1, #1
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	b25b      	sxtb	r3, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	b25b      	sxtb	r3, r3
 80013a4:	4013      	ands	r3, r2
 80013a6:	b25c      	sxtb	r4, r3
 80013a8:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <SSD1306_draw_pixel+0x1b0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80013b0:	4602      	mov	r2, r0
 80013b2:	01d2      	lsls	r2, r2, #7
 80013b4:	440a      	add	r2, r1
 80013b6:	4413      	add	r3, r2
 80013b8:	b2e2      	uxtb	r2, r4
 80013ba:	701a      	strb	r2, [r3, #0]
				break;
 80013bc:	e025      	b.n	800140a <SSD1306_draw_pixel+0x1a6>
			case SSD1306_INVERSE:
				buffer[x + (y / 8) * SSD1306_WIDTH] ^= (1 << (y & 7));
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <SSD1306_draw_pixel+0x1b0>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80013c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	da00      	bge.n	80013d0 <SSD1306_draw_pixel+0x16c>
 80013ce:	3307      	adds	r3, #7
 80013d0:	10db      	asrs	r3, r3, #3
 80013d2:	b218      	sxth	r0, r3
 80013d4:	4603      	mov	r3, r0
 80013d6:	01db      	lsls	r3, r3, #7
 80013d8:	440b      	add	r3, r1
 80013da:	4413      	add	r3, r2
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b25a      	sxtb	r2, r3
 80013e0:	88bb      	ldrh	r3, [r7, #4]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	2101      	movs	r1, #1
 80013e8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	4053      	eors	r3, r2
 80013f0:	b25c      	sxtb	r4, r3
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <SSD1306_draw_pixel+0x1b0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80013fa:	4602      	mov	r2, r0
 80013fc:	01d2      	lsls	r2, r2, #7
 80013fe:	440a      	add	r2, r1
 8001400:	4413      	add	r3, r2
 8001402:	b2e2      	uxtb	r2, r4
 8001404:	701a      	strb	r2, [r3, #0]
				break;
 8001406:	e000      	b.n	800140a <SSD1306_draw_pixel+0x1a6>
		}
	}
 8001408:	bf00      	nop
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bd90      	pop	{r4, r7, pc}
 8001412:	bf00      	nop
 8001414:	2000014c 	.word	0x2000014c

08001418 <SSD1306_display_clear>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_display_clear(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	memset(buffer, 0, SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8));
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <SSD1306_display_clear+0x18>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f007 fb4e 	bl	8008ac8 <memset>
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	2000014c 	.word	0x2000014c

08001434 <SSD1306_draw_fast_hline>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_fast_hline(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	4604      	mov	r4, r0
 800143c:	4608      	mov	r0, r1
 800143e:	4611      	mov	r1, r2
 8001440:	461a      	mov	r2, r3
 8001442:	4623      	mov	r3, r4
 8001444:	80fb      	strh	r3, [r7, #6]
 8001446:	4603      	mov	r3, r0
 8001448:	80bb      	strh	r3, [r7, #4]
 800144a:	460b      	mov	r3, r1
 800144c:	807b      	strh	r3, [r7, #2]
 800144e:	4613      	mov	r3, r2
 8001450:	803b      	strh	r3, [r7, #0]
	bool bSwap = false;
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]

	switch (SSD1306_get_rotation())
 8001456:	f000 fa9f 	bl	8001998 <SSD1306_get_rotation>
 800145a:	4603      	mov	r3, r0
 800145c:	2b03      	cmp	r3, #3
 800145e:	d02c      	beq.n	80014ba <SSD1306_draw_fast_hline+0x86>
 8001460:	2b03      	cmp	r3, #3
 8001462:	dc45      	bgt.n	80014f0 <SSD1306_draw_fast_hline+0xbc>
 8001464:	2b01      	cmp	r3, #1
 8001466:	d002      	beq.n	800146e <SSD1306_draw_fast_hline+0x3a>
 8001468:	2b02      	cmp	r3, #2
 800146a:	d014      	beq.n	8001496 <SSD1306_draw_fast_hline+0x62>
 800146c:	e040      	b.n	80014f0 <SSD1306_draw_fast_hline+0xbc>
	{
		case 1:
			// 90 degree rotation, swap x & y for rotation, then invert x
			bSwap = true;
 800146e:	2301      	movs	r3, #1
 8001470:	73fb      	strb	r3, [r7, #15]
			ssd1306_swap(x, y);
 8001472:	88fa      	ldrh	r2, [r7, #6]
 8001474:	88bb      	ldrh	r3, [r7, #4]
 8001476:	4053      	eors	r3, r2
 8001478:	80fb      	strh	r3, [r7, #6]
 800147a:	88ba      	ldrh	r2, [r7, #4]
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	4053      	eors	r3, r2
 8001480:	80bb      	strh	r3, [r7, #4]
 8001482:	88fa      	ldrh	r2, [r7, #6]
 8001484:	88bb      	ldrh	r3, [r7, #4]
 8001486:	4053      	eors	r3, r2
 8001488:	80fb      	strh	r3, [r7, #6]
			x = SSD1306_WIDTH - x - 1;
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001490:	b29b      	uxth	r3, r3
 8001492:	80fb      	strh	r3, [r7, #6]
			break;
 8001494:	e02c      	b.n	80014f0 <SSD1306_draw_fast_hline+0xbc>
		case 2:
			// 180 degree rotation, invert x and y, then shift y around for height.
			x = SSD1306_WIDTH - x - 1;
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800149c:	b29b      	uxth	r3, r3
 800149e:	80fb      	strh	r3, [r7, #6]
			y = SSD1306_HEIGHT - y - 1;
 80014a0:	88bb      	ldrh	r3, [r7, #4]
 80014a2:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	80bb      	strh	r3, [r7, #4]
			x -= (w - 1);
 80014aa:	88fa      	ldrh	r2, [r7, #6]
 80014ac:	887b      	ldrh	r3, [r7, #2]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	3301      	adds	r3, #1
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	80fb      	strh	r3, [r7, #6]
			break;
 80014b8:	e01a      	b.n	80014f0 <SSD1306_draw_fast_hline+0xbc>
		case 3:
			// 270 degree rotation, swap x & y for rotation,
			// then invert y and adjust y for w (not to become h)
			bSwap = true;
 80014ba:	2301      	movs	r3, #1
 80014bc:	73fb      	strb	r3, [r7, #15]
			ssd1306_swap(x, y);
 80014be:	88fa      	ldrh	r2, [r7, #6]
 80014c0:	88bb      	ldrh	r3, [r7, #4]
 80014c2:	4053      	eors	r3, r2
 80014c4:	80fb      	strh	r3, [r7, #6]
 80014c6:	88ba      	ldrh	r2, [r7, #4]
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	4053      	eors	r3, r2
 80014cc:	80bb      	strh	r3, [r7, #4]
 80014ce:	88fa      	ldrh	r2, [r7, #6]
 80014d0:	88bb      	ldrh	r3, [r7, #4]
 80014d2:	4053      	eors	r3, r2
 80014d4:	80fb      	strh	r3, [r7, #6]
			y = SSD1306_HEIGHT - y - 1;
 80014d6:	88bb      	ldrh	r3, [r7, #4]
 80014d8:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80014dc:	b29b      	uxth	r3, r3
 80014de:	80bb      	strh	r3, [r7, #4]
			y -= (w - 1);
 80014e0:	88ba      	ldrh	r2, [r7, #4]
 80014e2:	887b      	ldrh	r3, [r7, #2]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	3301      	adds	r3, #1
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	80bb      	strh	r3, [r7, #4]
			break;
 80014ee:	bf00      	nop
	}

	if (bSwap)
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d009      	beq.n	800150a <SSD1306_draw_fast_hline+0xd6>
	{
		SSD1306_draw_fast_vline_internal(x, y, w, color);
 80014f6:	883b      	ldrh	r3, [r7, #0]
 80014f8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80014fc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001500:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001504:	f000 f918 	bl	8001738 <SSD1306_draw_fast_vline_internal>
	}
	else
	{
		SSD1306_draw_fast_hline_internal(x, y, w, color);
	}
}
 8001508:	e008      	b.n	800151c <SSD1306_draw_fast_hline+0xe8>
		SSD1306_draw_fast_hline_internal(x, y, w, color);
 800150a:	883b      	ldrh	r3, [r7, #0]
 800150c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001510:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001514:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001518:	f000 f804 	bl	8001524 <SSD1306_draw_fast_hline_internal>
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	bd90      	pop	{r4, r7, pc}

08001524 <SSD1306_draw_fast_hline_internal>:

void SSD1306_draw_fast_hline_internal(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8001524:	b490      	push	{r4, r7}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	4604      	mov	r4, r0
 800152c:	4608      	mov	r0, r1
 800152e:	4611      	mov	r1, r2
 8001530:	461a      	mov	r2, r3
 8001532:	4623      	mov	r3, r4
 8001534:	80fb      	strh	r3, [r7, #6]
 8001536:	4603      	mov	r3, r0
 8001538:	80bb      	strh	r3, [r7, #4]
 800153a:	460b      	mov	r3, r1
 800153c:	807b      	strh	r3, [r7, #2]
 800153e:	4613      	mov	r3, r2
 8001540:	803b      	strh	r3, [r7, #0]
	if ((y >= 0) && (y < SSD1306_HEIGHT))
 8001542:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	db75      	blt.n	8001636 <SSD1306_draw_fast_hline_internal+0x112>
 800154a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800154e:	2b3f      	cmp	r3, #63	; 0x3f
 8001550:	dc71      	bgt.n	8001636 <SSD1306_draw_fast_hline_internal+0x112>
	{
		// Y coord in bounds?
		if (x < 0)
 8001552:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001556:	2b00      	cmp	r3, #0
 8001558:	da06      	bge.n	8001568 <SSD1306_draw_fast_hline_internal+0x44>
		{
			// Clip left
			w += x;
 800155a:	887a      	ldrh	r2, [r7, #2]
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	4413      	add	r3, r2
 8001560:	b29b      	uxth	r3, r3
 8001562:	807b      	strh	r3, [r7, #2]
			x = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	80fb      	strh	r3, [r7, #6]
		}
		if ((x + w) > SSD1306_WIDTH)
 8001568:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800156c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001570:	4413      	add	r3, r2
 8001572:	2b80      	cmp	r3, #128	; 0x80
 8001574:	dd04      	ble.n	8001580 <SSD1306_draw_fast_hline_internal+0x5c>
		{
			// Clip right
			w = (SSD1306_WIDTH - x);
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800157c:	b29b      	uxth	r3, r3
 800157e:	807b      	strh	r3, [r7, #2]
		}
		if (w > 0)
 8001580:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001584:	2b00      	cmp	r3, #0
 8001586:	dd56      	ble.n	8001636 <SSD1306_draw_fast_hline_internal+0x112>
		{
			// Proceed only if width is positive
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x], mask = 1 << (y & 7);
 8001588:	4b2e      	ldr	r3, [pc, #184]	; (8001644 <SSD1306_draw_fast_hline_internal+0x120>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	da00      	bge.n	8001596 <SSD1306_draw_fast_hline_internal+0x72>
 8001594:	3307      	adds	r3, #7
 8001596:	10db      	asrs	r3, r3, #3
 8001598:	b21b      	sxth	r3, r3
 800159a:	01d9      	lsls	r1, r3, #7
 800159c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a0:	440b      	add	r3, r1
 80015a2:	4413      	add	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	88bb      	ldrh	r3, [r7, #4]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	2201      	movs	r2, #1
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	72fb      	strb	r3, [r7, #11]
			switch (color)
 80015b4:	883b      	ldrh	r3, [r7, #0]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d034      	beq.n	8001624 <SSD1306_draw_fast_hline_internal+0x100>
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	dc3c      	bgt.n	8001638 <SSD1306_draw_fast_hline_internal+0x114>
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d013      	beq.n	80015ea <SSD1306_draw_fast_hline_internal+0xc6>
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d138      	bne.n	8001638 <SSD1306_draw_fast_hline_internal+0x114>
			{
				case SSD1306_WHITE:
					while (w--)
 80015c6:	e007      	b.n	80015d8 <SSD1306_draw_fast_hline_internal+0xb4>
					{
						*pBuf++ |= mask;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	60fa      	str	r2, [r7, #12]
 80015ce:	7819      	ldrb	r1, [r3, #0]
 80015d0:	7afa      	ldrb	r2, [r7, #11]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	701a      	strb	r2, [r3, #0]
					while (w--)
 80015d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80015dc:	b29a      	uxth	r2, r3
 80015de:	3a01      	subs	r2, #1
 80015e0:	b292      	uxth	r2, r2
 80015e2:	807a      	strh	r2, [r7, #2]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1ef      	bne.n	80015c8 <SSD1306_draw_fast_hline_internal+0xa4>
					};
					break;
 80015e8:	e026      	b.n	8001638 <SSD1306_draw_fast_hline_internal+0x114>
				case SSD1306_BLACK:
					mask = ~mask;
 80015ea:	7afb      	ldrb	r3, [r7, #11]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	72fb      	strb	r3, [r7, #11]
					while (w--)
 80015f0:	e007      	b.n	8001602 <SSD1306_draw_fast_hline_internal+0xde>
					{
						*pBuf++ &= mask;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	60fa      	str	r2, [r7, #12]
 80015f8:	7819      	ldrb	r1, [r3, #0]
 80015fa:	7afa      	ldrb	r2, [r7, #11]
 80015fc:	400a      	ands	r2, r1
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	701a      	strb	r2, [r3, #0]
					while (w--)
 8001602:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001606:	b29a      	uxth	r2, r3
 8001608:	3a01      	subs	r2, #1
 800160a:	b292      	uxth	r2, r2
 800160c:	807a      	strh	r2, [r7, #2]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1ef      	bne.n	80015f2 <SSD1306_draw_fast_hline_internal+0xce>
					};
					break;
 8001612:	e011      	b.n	8001638 <SSD1306_draw_fast_hline_internal+0x114>
				case SSD1306_INVERSE:
					while (w--)
					{
						*pBuf++ ^= mask;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	60fa      	str	r2, [r7, #12]
 800161a:	7819      	ldrb	r1, [r3, #0]
 800161c:	7afa      	ldrb	r2, [r7, #11]
 800161e:	404a      	eors	r2, r1
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	701a      	strb	r2, [r3, #0]
					while (w--)
 8001624:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001628:	b29a      	uxth	r2, r3
 800162a:	3a01      	subs	r2, #1
 800162c:	b292      	uxth	r2, r2
 800162e:	807a      	strh	r2, [r7, #2]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1ef      	bne.n	8001614 <SSD1306_draw_fast_hline_internal+0xf0>
					};
					break;
 8001634:	e000      	b.n	8001638 <SSD1306_draw_fast_hline_internal+0x114>
			}
		}
 8001636:	bf00      	nop
	}
}
 8001638:	bf00      	nop
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bc90      	pop	{r4, r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	2000014c 	.word	0x2000014c

08001648 <SSD1306_draw_fast_vline>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_fast_vline(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	4604      	mov	r4, r0
 8001650:	4608      	mov	r0, r1
 8001652:	4611      	mov	r1, r2
 8001654:	461a      	mov	r2, r3
 8001656:	4623      	mov	r3, r4
 8001658:	80fb      	strh	r3, [r7, #6]
 800165a:	4603      	mov	r3, r0
 800165c:	80bb      	strh	r3, [r7, #4]
 800165e:	460b      	mov	r3, r1
 8001660:	807b      	strh	r3, [r7, #2]
 8001662:	4613      	mov	r3, r2
 8001664:	803b      	strh	r3, [r7, #0]
	bool bSwap = false;
 8001666:	2300      	movs	r3, #0
 8001668:	73fb      	strb	r3, [r7, #15]
	switch (SSD1306_get_rotation())
 800166a:	f000 f995 	bl	8001998 <SSD1306_get_rotation>
 800166e:	4603      	mov	r3, r0
 8001670:	2b03      	cmp	r3, #3
 8001672:	d033      	beq.n	80016dc <SSD1306_draw_fast_vline+0x94>
 8001674:	2b03      	cmp	r3, #3
 8001676:	dc45      	bgt.n	8001704 <SSD1306_draw_fast_vline+0xbc>
 8001678:	2b01      	cmp	r3, #1
 800167a:	d002      	beq.n	8001682 <SSD1306_draw_fast_vline+0x3a>
 800167c:	2b02      	cmp	r3, #2
 800167e:	d01b      	beq.n	80016b8 <SSD1306_draw_fast_vline+0x70>
 8001680:	e040      	b.n	8001704 <SSD1306_draw_fast_vline+0xbc>
	{
		case 1:
			// 90 degree rotation, swap x & y for rotation,
			// then invert x and adjust x for h (now to become w)
			bSwap = true;
 8001682:	2301      	movs	r3, #1
 8001684:	73fb      	strb	r3, [r7, #15]
  			ssd1306_swap(x, y);
 8001686:	88fa      	ldrh	r2, [r7, #6]
 8001688:	88bb      	ldrh	r3, [r7, #4]
 800168a:	4053      	eors	r3, r2
 800168c:	80fb      	strh	r3, [r7, #6]
 800168e:	88ba      	ldrh	r2, [r7, #4]
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	4053      	eors	r3, r2
 8001694:	80bb      	strh	r3, [r7, #4]
 8001696:	88fa      	ldrh	r2, [r7, #6]
 8001698:	88bb      	ldrh	r3, [r7, #4]
 800169a:	4053      	eors	r3, r2
 800169c:	80fb      	strh	r3, [r7, #6]
  			x = SSD1306_WIDTH - x - 1;
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	80fb      	strh	r3, [r7, #6]
  			x -= (h - 1);
 80016a8:	88fa      	ldrh	r2, [r7, #6]
 80016aa:	887b      	ldrh	r3, [r7, #2]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	3301      	adds	r3, #1
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	80fb      	strh	r3, [r7, #6]
  			break;
 80016b6:	e025      	b.n	8001704 <SSD1306_draw_fast_vline+0xbc>
  	    case 2:
  	    	// 180 degree rotation, invert x and y, then shift y around for height.
  	    	x = SSD1306_WIDTH - x - 1;
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80016be:	b29b      	uxth	r3, r3
 80016c0:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 80016c2:	88bb      	ldrh	r3, [r7, #4]
 80016c4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	80bb      	strh	r3, [r7, #4]
  	    	y -= (h - 1);
 80016cc:	88ba      	ldrh	r2, [r7, #4]
 80016ce:	887b      	ldrh	r3, [r7, #2]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	3301      	adds	r3, #1
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	80bb      	strh	r3, [r7, #4]
  	    	break;
 80016da:	e013      	b.n	8001704 <SSD1306_draw_fast_vline+0xbc>
  	    case 3:
  	    	// 270 degree rotation, swap x & y for rotation, then invert y
  	    	bSwap = true;
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
  	    	ssd1306_swap(x, y);
 80016e0:	88fa      	ldrh	r2, [r7, #6]
 80016e2:	88bb      	ldrh	r3, [r7, #4]
 80016e4:	4053      	eors	r3, r2
 80016e6:	80fb      	strh	r3, [r7, #6]
 80016e8:	88ba      	ldrh	r2, [r7, #4]
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	4053      	eors	r3, r2
 80016ee:	80bb      	strh	r3, [r7, #4]
 80016f0:	88fa      	ldrh	r2, [r7, #6]
 80016f2:	88bb      	ldrh	r3, [r7, #4]
 80016f4:	4053      	eors	r3, r2
 80016f6:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 80016f8:	88bb      	ldrh	r3, [r7, #4]
 80016fa:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80016fe:	b29b      	uxth	r3, r3
 8001700:	80bb      	strh	r3, [r7, #4]
  	    	break;
 8001702:	bf00      	nop
	}

	if (bSwap)
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d009      	beq.n	800171e <SSD1306_draw_fast_vline+0xd6>
	{
		SSD1306_draw_fast_hline_internal(x, y, h, color);
 800170a:	883b      	ldrh	r3, [r7, #0]
 800170c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001710:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001714:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001718:	f7ff ff04 	bl	8001524 <SSD1306_draw_fast_hline_internal>
	}
	else
	{
		SSD1306_draw_fast_vline_internal(x, y, h, color);
	}
}
 800171c:	e008      	b.n	8001730 <SSD1306_draw_fast_vline+0xe8>
		SSD1306_draw_fast_vline_internal(x, y, h, color);
 800171e:	883b      	ldrh	r3, [r7, #0]
 8001720:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001724:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001728:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800172c:	f000 f804 	bl	8001738 <SSD1306_draw_fast_vline_internal>
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	bd90      	pop	{r4, r7, pc}

08001738 <SSD1306_draw_fast_vline_internal>:

void SSD1306_draw_fast_vline_internal(int16_t x, int16_t __y, int16_t __h, uint16_t color)
{
 8001738:	b490      	push	{r4, r7}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	4604      	mov	r4, r0
 8001740:	4608      	mov	r0, r1
 8001742:	4611      	mov	r1, r2
 8001744:	461a      	mov	r2, r3
 8001746:	4623      	mov	r3, r4
 8001748:	80fb      	strh	r3, [r7, #6]
 800174a:	4603      	mov	r3, r0
 800174c:	80bb      	strh	r3, [r7, #4]
 800174e:	460b      	mov	r3, r1
 8001750:	807b      	strh	r3, [r7, #2]
 8001752:	4613      	mov	r3, r2
 8001754:	803b      	strh	r3, [r7, #0]
	if ((x >= 0) && (x < SSD1306_WIDTH))
 8001756:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800175a:	2b00      	cmp	r3, #0
 800175c:	f2c0 80da 	blt.w	8001914 <SSD1306_draw_fast_vline_internal+0x1dc>
 8001760:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001764:	2b7f      	cmp	r3, #127	; 0x7f
 8001766:	f300 80d5 	bgt.w	8001914 <SSD1306_draw_fast_vline_internal+0x1dc>
	{
		// X coord in bounds?
		if (__y < 0)
 800176a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	da06      	bge.n	8001780 <SSD1306_draw_fast_vline_internal+0x48>
		{
			// Clip top
			__h += __y;
 8001772:	887a      	ldrh	r2, [r7, #2]
 8001774:	88bb      	ldrh	r3, [r7, #4]
 8001776:	4413      	add	r3, r2
 8001778:	b29b      	uxth	r3, r3
 800177a:	807b      	strh	r3, [r7, #2]
			__y = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	80bb      	strh	r3, [r7, #4]
		}
		if ((__y + __h) > SSD1306_HEIGHT)
 8001780:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001784:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001788:	4413      	add	r3, r2
 800178a:	2b40      	cmp	r3, #64	; 0x40
 800178c:	dd04      	ble.n	8001798 <SSD1306_draw_fast_vline_internal+0x60>
		{
			// Clip bottom
			__h = (SSD1306_HEIGHT - __y);
 800178e:	88bb      	ldrh	r3, [r7, #4]
 8001790:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001794:	b29b      	uxth	r3, r3
 8001796:	807b      	strh	r3, [r7, #2]
		}
		if (__h > 0)
 8001798:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800179c:	2b00      	cmp	r3, #0
 800179e:	f340 80b9 	ble.w	8001914 <SSD1306_draw_fast_vline_internal+0x1dc>
		{
			// Proceed only if height is now positive
			// this display doesn't need ints for coordinates,
			// use local byte registers for faster juggling
			uint8_t y = __y, h = __h;
 80017a2:	88bb      	ldrh	r3, [r7, #4]
 80017a4:	737b      	strb	r3, [r7, #13]
 80017a6:	887b      	ldrh	r3, [r7, #2]
 80017a8:	75fb      	strb	r3, [r7, #23]
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x];
 80017aa:	4b5d      	ldr	r3, [pc, #372]	; (8001920 <SSD1306_draw_fast_vline_internal+0x1e8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	7b7a      	ldrb	r2, [r7, #13]
 80017b0:	08d2      	lsrs	r2, r2, #3
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	01d1      	lsls	r1, r2, #7
 80017b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80017ba:	440a      	add	r2, r1
 80017bc:	4413      	add	r3, r2
 80017be:	613b      	str	r3, [r7, #16]

			// do the first partial byte, if necessary - this requires some masking
			uint8_t mod = (y & 7);
 80017c0:	7b7b      	ldrb	r3, [r7, #13]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	73fb      	strb	r3, [r7, #15]
			if (mod)
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d040      	beq.n	8001850 <SSD1306_draw_fast_vline_internal+0x118>
			{
				// mask off the high n bits we want to set
				mod = 8 - mod;
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	f1c3 0308 	rsb	r3, r3, #8
 80017d4:	73fb      	strb	r3, [r7, #15]
				// note - lookup table results in a nearly 10% performance
				// improvement in fill* functions
				// uint8_t mask = ~(0xFF >> mod);
				static const uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE};
				uint8_t mask = (*(const unsigned char *)(&premask[mod]));
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	4a52      	ldr	r2, [pc, #328]	; (8001924 <SSD1306_draw_fast_vline_internal+0x1ec>)
 80017da:	5cd3      	ldrb	r3, [r2, r3]
 80017dc:	73bb      	strb	r3, [r7, #14]
				// adjust the mask if we're not going to reach the end of this byte
				if (h < mod)
 80017de:	7dfa      	ldrb	r2, [r7, #23]
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d20b      	bcs.n	80017fe <SSD1306_draw_fast_vline_internal+0xc6>
				{
					mask &= (0XFF >> (mod - h));
 80017e6:	7bfa      	ldrb	r2, [r7, #15]
 80017e8:	7dfb      	ldrb	r3, [r7, #23]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	22ff      	movs	r2, #255	; 0xff
 80017ee:	fa42 f303 	asr.w	r3, r2, r3
 80017f2:	b25a      	sxtb	r2, r3
 80017f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017f8:	4013      	ands	r3, r2
 80017fa:	b25b      	sxtb	r3, r3
 80017fc:	73bb      	strb	r3, [r7, #14]
				}

				switch (color)
 80017fe:	883b      	ldrh	r3, [r7, #0]
 8001800:	2b02      	cmp	r3, #2
 8001802:	d01a      	beq.n	800183a <SSD1306_draw_fast_vline_internal+0x102>
 8001804:	2b02      	cmp	r3, #2
 8001806:	dc20      	bgt.n	800184a <SSD1306_draw_fast_vline_internal+0x112>
 8001808:	2b00      	cmp	r3, #0
 800180a:	d009      	beq.n	8001820 <SSD1306_draw_fast_vline_internal+0xe8>
 800180c:	2b01      	cmp	r3, #1
 800180e:	d11c      	bne.n	800184a <SSD1306_draw_fast_vline_internal+0x112>
				{
					case SSD1306_WHITE:
						*pBuf |= mask;
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	781a      	ldrb	r2, [r3, #0]
 8001814:	7bbb      	ldrb	r3, [r7, #14]
 8001816:	4313      	orrs	r3, r2
 8001818:	b2da      	uxtb	r2, r3
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	701a      	strb	r2, [r3, #0]
						break;
 800181e:	e014      	b.n	800184a <SSD1306_draw_fast_vline_internal+0x112>
					case SSD1306_BLACK:
						*pBuf &= ~mask;
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b25a      	sxtb	r2, r3
 8001826:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800182a:	43db      	mvns	r3, r3
 800182c:	b25b      	sxtb	r3, r3
 800182e:	4013      	ands	r3, r2
 8001830:	b25b      	sxtb	r3, r3
 8001832:	b2da      	uxtb	r2, r3
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	701a      	strb	r2, [r3, #0]
						break;
 8001838:	e007      	b.n	800184a <SSD1306_draw_fast_vline_internal+0x112>
					case SSD1306_INVERSE:
						*pBuf ^= mask;
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	781a      	ldrb	r2, [r3, #0]
 800183e:	7bbb      	ldrb	r3, [r7, #14]
 8001840:	4053      	eors	r3, r2
 8001842:	b2da      	uxtb	r2, r3
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	701a      	strb	r2, [r3, #0]
						break;
 8001848:	bf00      	nop
				}
				pBuf += SSD1306_WIDTH;
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	3380      	adds	r3, #128	; 0x80
 800184e:	613b      	str	r3, [r7, #16]
			}

			if (h >= mod)
 8001850:	7dfa      	ldrb	r2, [r7, #23]
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	429a      	cmp	r2, r3
 8001856:	d35d      	bcc.n	8001914 <SSD1306_draw_fast_vline_internal+0x1dc>
			{
				// More to go?
				h -= mod;
 8001858:	7dfa      	ldrb	r2, [r7, #23]
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	75fb      	strb	r3, [r7, #23]
				// Write solid bytes while we can - effectively 8 rows at a time
				if (h >= 8)
 8001860:	7dfb      	ldrb	r3, [r7, #23]
 8001862:	2b07      	cmp	r3, #7
 8001864:	d925      	bls.n	80018b2 <SSD1306_draw_fast_vline_internal+0x17a>
				{
					if (color == SSD1306_INVERSE)
 8001866:	883b      	ldrh	r3, [r7, #0]
 8001868:	2b02      	cmp	r3, #2
 800186a:	d10f      	bne.n	800188c <SSD1306_draw_fast_vline_internal+0x154>
					{
						// separate copy of the code so we don't impact performance of
						// black/white write version with an extra comparison per loop
						do
						{
							*pBuf ^= 0xFF; // Invert byte
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	43db      	mvns	r3, r3
 8001872:	b2da      	uxtb	r2, r3
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	3380      	adds	r3, #128	; 0x80
 800187c:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 800187e:	7dfb      	ldrb	r3, [r7, #23]
 8001880:	3b08      	subs	r3, #8
 8001882:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8001884:	7dfb      	ldrb	r3, [r7, #23]
 8001886:	2b07      	cmp	r3, #7
 8001888:	d8f0      	bhi.n	800186c <SSD1306_draw_fast_vline_internal+0x134>
 800188a:	e012      	b.n	80018b2 <SSD1306_draw_fast_vline_internal+0x17a>
					}
					else
					{
						// store a local value to work with
						uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
 800188c:	883b      	ldrh	r3, [r7, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <SSD1306_draw_fast_vline_internal+0x15e>
 8001892:	23ff      	movs	r3, #255	; 0xff
 8001894:	e000      	b.n	8001898 <SSD1306_draw_fast_vline_internal+0x160>
 8001896:	2300      	movs	r3, #0
 8001898:	733b      	strb	r3, [r7, #12]
						do
						{
							*pBuf = val;   // Set byte
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	7b3a      	ldrb	r2, [r7, #12]
 800189e:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	3380      	adds	r3, #128	; 0x80
 80018a4:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 80018a6:	7dfb      	ldrb	r3, [r7, #23]
 80018a8:	3b08      	subs	r3, #8
 80018aa:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 80018ac:	7dfb      	ldrb	r3, [r7, #23]
 80018ae:	2b07      	cmp	r3, #7
 80018b0:	d8f3      	bhi.n	800189a <SSD1306_draw_fast_vline_internal+0x162>
					}
				}

				if (h)
 80018b2:	7dfb      	ldrb	r3, [r7, #23]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d02d      	beq.n	8001914 <SSD1306_draw_fast_vline_internal+0x1dc>
				{
					// Do the final partial byte, if necessary
					mod = h & 7;
 80018b8:	7dfb      	ldrb	r3, [r7, #23]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	73fb      	strb	r3, [r7, #15]
					// uint8_t mask = (1 << mod) - 1;
					// note - lookup table results in a nearly 10% performance
					// improvement in fill* functions
					static const uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
					uint8_t mask = (*(const unsigned char *)(&postmask[mod]));
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	4a19      	ldr	r2, [pc, #100]	; (8001928 <SSD1306_draw_fast_vline_internal+0x1f0>)
 80018c4:	5cd3      	ldrb	r3, [r2, r3]
 80018c6:	72fb      	strb	r3, [r7, #11]
					switch (color)
 80018c8:	883b      	ldrh	r3, [r7, #0]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d01a      	beq.n	8001904 <SSD1306_draw_fast_vline_internal+0x1cc>
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	dc21      	bgt.n	8001916 <SSD1306_draw_fast_vline_internal+0x1de>
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d009      	beq.n	80018ea <SSD1306_draw_fast_vline_internal+0x1b2>
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d11d      	bne.n	8001916 <SSD1306_draw_fast_vline_internal+0x1de>
					{
						case SSD1306_WHITE:
							*pBuf |= mask;
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	781a      	ldrb	r2, [r3, #0]
 80018de:	7afb      	ldrb	r3, [r7, #11]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	701a      	strb	r2, [r3, #0]
							break;
 80018e8:	e015      	b.n	8001916 <SSD1306_draw_fast_vline_internal+0x1de>
						case SSD1306_BLACK:
							*pBuf &= ~mask;
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	b25a      	sxtb	r2, r3
 80018f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	b25b      	sxtb	r3, r3
 80018f8:	4013      	ands	r3, r2
 80018fa:	b25b      	sxtb	r3, r3
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	701a      	strb	r2, [r3, #0]
							break;
 8001902:	e008      	b.n	8001916 <SSD1306_draw_fast_vline_internal+0x1de>
						case SSD1306_INVERSE:
							*pBuf ^= mask;
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	781a      	ldrb	r2, [r3, #0]
 8001908:	7afb      	ldrb	r3, [r7, #11]
 800190a:	4053      	eors	r3, r2
 800190c:	b2da      	uxtb	r2, r3
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	701a      	strb	r2, [r3, #0]
							break;
 8001912:	e000      	b.n	8001916 <SSD1306_draw_fast_vline_internal+0x1de>
					}
				}
 8001914:	bf00      	nop
			}
		} // endif positive height
	}   // endif x in bounds
}
 8001916:	bf00      	nop
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bc90      	pop	{r4, r7}
 800191e:	4770      	bx	lr
 8001920:	2000014c 	.word	0x2000014c
 8001924:	08009164 	.word	0x08009164
 8001928:	0800916c 	.word	0x0800916c

0800192c <SSD1306_display_repaint>:
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void SSD1306_display_repaint(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
	uint16_t buf_len = SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8);
 8001932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001936:	80fb      	strh	r3, [r7, #6]

	SSD1306_send_com(SSD1306_PAGEADDR);
 8001938:	2022      	movs	r0, #34	; 0x22
 800193a:	f7ff fbf7 	bl	800112c <SSD1306_send_com>
	SSD1306_send_com(0x00);
 800193e:	2000      	movs	r0, #0
 8001940:	f7ff fbf4 	bl	800112c <SSD1306_send_com>
	SSD1306_send_com(0xFF);
 8001944:	20ff      	movs	r0, #255	; 0xff
 8001946:	f7ff fbf1 	bl	800112c <SSD1306_send_com>
	SSD1306_send_com(SSD1306_COLUMNADDR);
 800194a:	2021      	movs	r0, #33	; 0x21
 800194c:	f7ff fbee 	bl	800112c <SSD1306_send_com>
	SSD1306_send_com(0x00);
 8001950:	2000      	movs	r0, #0
 8001952:	f7ff fbeb 	bl	800112c <SSD1306_send_com>

	SSD1306_send_com(SSD1306_WIDTH - 1); // Column end address
 8001956:	207f      	movs	r0, #127	; 0x7f
 8001958:	f7ff fbe8 	bl	800112c <SSD1306_send_com>

	platform_write_dma(SSD1306_SETSTARTLINE, buffer, buf_len);
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <SSD1306_display_repaint+0x48>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	88fa      	ldrh	r2, [r7, #6]
 8001962:	4619      	mov	r1, r3
 8001964:	2040      	movs	r0, #64	; 0x40
 8001966:	f7ff fbc7 	bl	80010f8 <platform_write_dma>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	2000014c 	.word	0x2000014c

08001978 <SSD1306_set_rotation>:
    SSD1306_send_com(SSD1306_SETCONTRAST);
    SSD1306_send_com(contrast);
}

void SSD1306_set_rotation(uint8_t rot)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
	rotation = rot;
 8001982:	4a04      	ldr	r2, [pc, #16]	; (8001994 <SSD1306_set_rotation+0x1c>)
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	7013      	strb	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	20000150 	.word	0x20000150

08001998 <SSD1306_get_rotation>:

uint8_t SSD1306_get_rotation(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
	return rotation;
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <SSD1306_get_rotation+0x14>)
 800199e:	781b      	ldrb	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000150 	.word	0x20000150

080019b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <MX_DMA_Init+0x4c>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a0f      	ldr	r2, [pc, #60]	; (80019fc <MX_DMA_Init+0x4c>)
 80019c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <MX_DMA_Init+0x4c>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	2010      	movs	r0, #16
 80019d8:	f001 fbab 	bl	8003132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80019dc:	2010      	movs	r0, #16
 80019de:	f001 fbc4 	bl	800316a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	202f      	movs	r0, #47	; 0x2f
 80019e8:	f001 fba3 	bl	8003132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80019ec:	202f      	movs	r0, #47	; 0x2f
 80019ee:	f001 fbbc 	bl	800316a <HAL_NVIC_EnableIRQ>

}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800

08001a00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	; 0x28
 8001a04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
 8001a14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	4b44      	ldr	r3, [pc, #272]	; (8001b2c <MX_GPIO_Init+0x12c>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a43      	ldr	r2, [pc, #268]	; (8001b2c <MX_GPIO_Init+0x12c>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <MX_GPIO_Init+0x12c>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b3d      	ldr	r3, [pc, #244]	; (8001b2c <MX_GPIO_Init+0x12c>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a3c      	ldr	r2, [pc, #240]	; (8001b2c <MX_GPIO_Init+0x12c>)
 8001a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b3a      	ldr	r3, [pc, #232]	; (8001b2c <MX_GPIO_Init+0x12c>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	4b36      	ldr	r3, [pc, #216]	; (8001b2c <MX_GPIO_Init+0x12c>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a35      	ldr	r2, [pc, #212]	; (8001b2c <MX_GPIO_Init+0x12c>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b33      	ldr	r3, [pc, #204]	; (8001b2c <MX_GPIO_Init+0x12c>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	4b2f      	ldr	r3, [pc, #188]	; (8001b2c <MX_GPIO_Init+0x12c>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a2e      	ldr	r2, [pc, #184]	; (8001b2c <MX_GPIO_Init+0x12c>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b2c      	ldr	r3, [pc, #176]	; (8001b2c <MX_GPIO_Init+0x12c>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2120      	movs	r1, #32
 8001a8a:	4829      	ldr	r0, [pc, #164]	; (8001b30 <MX_GPIO_Init+0x130>)
 8001a8c:	f002 f928 	bl	8003ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001a90:	2200      	movs	r2, #0
 8001a92:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001a96:	4827      	ldr	r0, [pc, #156]	; (8001b34 <MX_GPIO_Init+0x134>)
 8001a98:	f002 f922 	bl	8003ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001aa2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4820      	ldr	r0, [pc, #128]	; (8001b34 <MX_GPIO_Init+0x134>)
 8001ab4:	f001 ff90 	bl	80039d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ab8:	2320      	movs	r3, #32
 8001aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abc:	2301      	movs	r3, #1
 8001abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	4619      	mov	r1, r3
 8001ace:	4818      	ldr	r0, [pc, #96]	; (8001b30 <MX_GPIO_Init+0x130>)
 8001ad0:	f001 ff82 	bl	80039d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ad4:	23f0      	movs	r3, #240	; 0xf0
 8001ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4813      	ldr	r0, [pc, #76]	; (8001b34 <MX_GPIO_Init+0x134>)
 8001ae8:	f001 ff76 	bl	80039d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001aec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af2:	2301      	movs	r3, #1
 8001af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	480b      	ldr	r0, [pc, #44]	; (8001b34 <MX_GPIO_Init+0x134>)
 8001b06:	f001 ff67 	bl	80039d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b14:	2301      	movs	r3, #1
 8001b16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4804      	ldr	r0, [pc, #16]	; (8001b30 <MX_GPIO_Init+0x130>)
 8001b20:	f001 ff5a 	bl	80039d8 <HAL_GPIO_Init>

}
 8001b24:	bf00      	nop
 8001b26:	3728      	adds	r7, #40	; 0x28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40020000 	.word	0x40020000
 8001b34:	40020800 	.word	0x40020800

08001b38 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b3e:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <MX_I2C1_Init+0x54>)
 8001b40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b44:	4a12      	ldr	r2, [pc, #72]	; (8001b90 <MX_I2C1_Init+0x58>)
 8001b46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b68:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b74:	4804      	ldr	r0, [pc, #16]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b76:	f002 f8e7 	bl	8003d48 <HAL_I2C_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b80:	f000 fd94 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	200001f0 	.word	0x200001f0
 8001b8c:	40005400 	.word	0x40005400
 8001b90:	00061a80 	.word	0x00061a80

08001b94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a34      	ldr	r2, [pc, #208]	; (8001c84 <HAL_I2C_MspInit+0xf0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d162      	bne.n	8001c7c <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	4b33      	ldr	r3, [pc, #204]	; (8001c88 <HAL_I2C_MspInit+0xf4>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a32      	ldr	r2, [pc, #200]	; (8001c88 <HAL_I2C_MspInit+0xf4>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b30      	ldr	r3, [pc, #192]	; (8001c88 <HAL_I2C_MspInit+0xf4>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd8:	2312      	movs	r3, #18
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001be4:	2304      	movs	r3, #4
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	4827      	ldr	r0, [pc, #156]	; (8001c8c <HAL_I2C_MspInit+0xf8>)
 8001bf0:	f001 fef2 	bl	80039d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <HAL_I2C_MspInit+0xf4>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	4a22      	ldr	r2, [pc, #136]	; (8001c88 <HAL_I2C_MspInit+0xf4>)
 8001bfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c02:	6413      	str	r3, [r2, #64]	; 0x40
 8001c04:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <HAL_I2C_MspInit+0xf4>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8001c10:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <HAL_I2C_MspInit+0xfc>)
 8001c12:	4a20      	ldr	r2, [pc, #128]	; (8001c94 <HAL_I2C_MspInit+0x100>)
 8001c14:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001c16:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <HAL_I2C_MspInit+0xfc>)
 8001c18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c1c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c1e:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <HAL_I2C_MspInit+0xfc>)
 8001c20:	2240      	movs	r2, #64	; 0x40
 8001c22:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c24:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <HAL_I2C_MspInit+0xfc>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c2a:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <HAL_I2C_MspInit+0xfc>)
 8001c2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c30:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c32:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <HAL_I2C_MspInit+0xfc>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c38:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <HAL_I2C_MspInit+0xfc>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001c3e:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <HAL_I2C_MspInit+0xfc>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_I2C_MspInit+0xfc>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <HAL_I2C_MspInit+0xfc>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001c50:	480f      	ldr	r0, [pc, #60]	; (8001c90 <HAL_I2C_MspInit+0xfc>)
 8001c52:	f001 faa5 	bl	80031a0 <HAL_DMA_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001c5c:	f000 fd26 	bl	80026ac <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <HAL_I2C_MspInit+0xfc>)
 8001c64:	635a      	str	r2, [r3, #52]	; 0x34
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <HAL_I2C_MspInit+0xfc>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2100      	movs	r1, #0
 8001c70:	201f      	movs	r0, #31
 8001c72:	f001 fa5e 	bl	8003132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c76:	201f      	movs	r0, #31
 8001c78:	f001 fa77 	bl	800316a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	3728      	adds	r7, #40	; 0x28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40005400 	.word	0x40005400
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40020400 	.word	0x40020400
 8001c90:	20000190 	.word	0x20000190
 8001c94:	400260b8 	.word	0x400260b8

08001c98 <frameTransform>:

	}

}
void frameTransform()
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0

	for(int i=0;i<13;i++)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	e00d      	b.n	8001cc0 <frameTransform+0x28>
	{
		sendFrame[i]=communicationFrame[i]+48;
 8001ca4:	4a0b      	ldr	r2, [pc, #44]	; (8001cd4 <frameTransform+0x3c>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	3330      	adds	r3, #48	; 0x30
 8001cae:	b2d9      	uxtb	r1, r3
 8001cb0:	4a09      	ldr	r2, [pc, #36]	; (8001cd8 <frameTransform+0x40>)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	460a      	mov	r2, r1
 8001cb8:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<13;i++)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b0c      	cmp	r3, #12
 8001cc4:	ddee      	ble.n	8001ca4 <frameTransform+0xc>
	}




}
 8001cc6:	bf00      	nop
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	2000009c 	.word	0x2000009c
 8001cd8:	20000314 	.word	0x20000314

08001cdc <errorCheck>:

void errorCheck()
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0

	if(communicationFrame[0] != 1 && communicationFrame[13]!=1)
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <errorCheck+0x40>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d013      	beq.n	8001d12 <errorCheck+0x36>
 8001cea:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <errorCheck+0x40>)
 8001cec:	7b5b      	ldrb	r3, [r3, #13]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d00f      	beq.n	8001d12 <errorCheck+0x36>
	{int i=0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
		do{

			HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin );
 8001cf6:	2120      	movs	r1, #32
 8001cf8:	4809      	ldr	r0, [pc, #36]	; (8001d20 <errorCheck+0x44>)
 8001cfa:	f002 f80a 	bl	8003d12 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 8001cfe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d02:	f001 f917 	bl	8002f34 <HAL_Delay>
			i++;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	607b      	str	r3, [r7, #4]
		}while(i<10);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b09      	cmp	r3, #9
 8001d10:	ddf1      	ble.n	8001cf6 <errorCheck+0x1a>


	}
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	2000009c 	.word	0x2000009c
 8001d20:	40020000 	.word	0x40020000

08001d24 <frameToName>:

 void frameToName(){
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
		P = communicationFrame [1];
 8001d2a:	4b2c      	ldr	r3, [pc, #176]	; (8001ddc <frameToName+0xb8>)
 8001d2c:	785a      	ldrb	r2, [r3, #1]
 8001d2e:	4b2c      	ldr	r3, [pc, #176]	; (8001de0 <frameToName+0xbc>)
 8001d30:	701a      	strb	r2, [r3, #0]
		I = communicationFrame [2];
 8001d32:	4b2a      	ldr	r3, [pc, #168]	; (8001ddc <frameToName+0xb8>)
 8001d34:	789a      	ldrb	r2, [r3, #2]
 8001d36:	4b2b      	ldr	r3, [pc, #172]	; (8001de4 <frameToName+0xc0>)
 8001d38:	701a      	strb	r2, [r3, #0]
		D = communicationFrame [3];
 8001d3a:	4b28      	ldr	r3, [pc, #160]	; (8001ddc <frameToName+0xb8>)
 8001d3c:	78da      	ldrb	r2, [r3, #3]
 8001d3e:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <frameToName+0xc4>)
 8001d40:	701a      	strb	r2, [r3, #0]
		START = communicationFrame [4];
 8001d42:	4b26      	ldr	r3, [pc, #152]	; (8001ddc <frameToName+0xb8>)
 8001d44:	791a      	ldrb	r2, [r3, #4]
 8001d46:	4b29      	ldr	r3, [pc, #164]	; (8001dec <frameToName+0xc8>)
 8001d48:	701a      	strb	r2, [r3, #0]
		STOP = communicationFrame [5];
 8001d4a:	4b24      	ldr	r3, [pc, #144]	; (8001ddc <frameToName+0xb8>)
 8001d4c:	795a      	ldrb	r2, [r3, #5]
 8001d4e:	4b28      	ldr	r3, [pc, #160]	; (8001df0 <frameToName+0xcc>)
 8001d50:	701a      	strb	r2, [r3, #0]
		leftButton = communicationFrame [6];
 8001d52:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <frameToName+0xb8>)
 8001d54:	799a      	ldrb	r2, [r3, #6]
 8001d56:	4b27      	ldr	r3, [pc, #156]	; (8001df4 <frameToName+0xd0>)
 8001d58:	701a      	strb	r2, [r3, #0]
		rightButton = communicationFrame [7];
 8001d5a:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <frameToName+0xb8>)
 8001d5c:	79da      	ldrb	r2, [r3, #7]
 8001d5e:	4b26      	ldr	r3, [pc, #152]	; (8001df8 <frameToName+0xd4>)
 8001d60:	701a      	strb	r2, [r3, #0]
		manual = communicationFrame [8];
 8001d62:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <frameToName+0xb8>)
 8001d64:	7a1a      	ldrb	r2, [r3, #8]
 8001d66:	4b25      	ldr	r3, [pc, #148]	; (8001dfc <frameToName+0xd8>)
 8001d68:	701a      	strb	r2, [r3, #0]
        communicationFrame [9] = (uint8_t)encoderUp/3;
 8001d6a:	4b25      	ldr	r3, [pc, #148]	; (8001e00 <frameToName+0xdc>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	4a25      	ldr	r2, [pc, #148]	; (8001e04 <frameToName+0xe0>)
 8001d70:	fba2 2303 	umull	r2, r3, r2, r3
 8001d74:	085b      	lsrs	r3, r3, #1
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <frameToName+0xb8>)
 8001d7a:	725a      	strb	r2, [r3, #9]
		communicationFrame [10] =(uint8_t) encoderDown/3;
 8001d7c:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <frameToName+0xe4>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	4a20      	ldr	r2, [pc, #128]	; (8001e04 <frameToName+0xe0>)
 8001d82:	fba2 2303 	umull	r2, r3, r2, r3
 8001d86:	085b      	lsrs	r3, r3, #1
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <frameToName+0xb8>)
 8001d8c:	729a      	strb	r2, [r3, #10]
		communicationFrame [11] =(uint8_t) PWM/3;
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <frameToName+0xe8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	4a1b      	ldr	r2, [pc, #108]	; (8001e04 <frameToName+0xe0>)
 8001d96:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9a:	085b      	lsrs	r3, r3, #1
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <frameToName+0xb8>)
 8001da0:	72da      	strb	r2, [r3, #11]





if(counter ==100){
 8001da2:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <frameToName+0xec>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b64      	cmp	r3, #100	; 0x64
 8001da8:	d10b      	bne.n	8001dc2 <frameToName+0x9e>
	for (int i =0 ;i<13;i++){
 8001daa:	2300      	movs	r3, #0
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	e002      	b.n	8001db6 <frameToName+0x92>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3301      	adds	r3, #1
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b0c      	cmp	r3, #12
 8001dba:	ddf9      	ble.n	8001db0 <frameToName+0x8c>
	//	uint8_t *temp = &communicationFrame[i];
			//HAL_UART_Transmit(&huart2,temp, 1, 1000);

	}

		counter=0;
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <frameToName+0xec>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]


		}
counter++;
 8001dc2:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <frameToName+0xec>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <frameToName+0xec>)
 8001dcc:	701a      	strb	r2, [r3, #0]
   }
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	2000009c 	.word	0x2000009c
 8001de0:	200003d1 	.word	0x200003d1
 8001de4:	20000351 	.word	0x20000351
 8001de8:	20000248 	.word	0x20000248
 8001dec:	200003d2 	.word	0x200003d2
 8001df0:	20000321 	.word	0x20000321
 8001df4:	20000330 	.word	0x20000330
 8001df8:	200002e0 	.word	0x200002e0
 8001dfc:	200003d0 	.word	0x200003d0
 8001e00:	20000151 	.word	0x20000151
 8001e04:	aaaaaaab 	.word	0xaaaaaaab
 8001e08:	20000152 	.word	0x20000152
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	20000153 	.word	0x20000153

08001e14 <calculatePID>:
	double Pout,Iout,Dout;
	uint32_t outPWM;
	 uint32_t output;
	 double Doutput;

uint32_t calculatePID( int input, int setpoint ,double P, double I, double D ) {
 8001e14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e18:	b088      	sub	sp, #32
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	61f8      	str	r0, [r7, #28]
 8001e1e:	61b9      	str	r1, [r7, #24]
 8001e20:	ed87 0b04 	vstr	d0, [r7, #16]
 8001e24:	ed87 1b02 	vstr	d1, [r7, #8]
 8001e28:	ed87 2b00 	vstr	d2, [r7]

	    now = HAL_GetTick ();
 8001e2c:	f001 f876 	bl	8002f1c <HAL_GetTick>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4a76      	ldr	r2, [pc, #472]	; (800200c <calculatePID+0x1f8>)
 8001e34:	6013      	str	r3, [r2, #0]
		timechange = (now - lasttime);
 8001e36:	4b75      	ldr	r3, [pc, #468]	; (800200c <calculatePID+0x1f8>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	4b75      	ldr	r3, [pc, #468]	; (8002010 <calculatePID+0x1fc>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	4a74      	ldr	r2, [pc, #464]	; (8002014 <calculatePID+0x200>)
 8001e42:	6013      	str	r3, [r2, #0]
		if(timechange >=setTime)
 8001e44:	4b73      	ldr	r3, [pc, #460]	; (8002014 <calculatePID+0x200>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b73      	ldr	r3, [pc, #460]	; (8002018 <calculatePID+0x204>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	f0c0 80d6 	bcc.w	8001ffe <calculatePID+0x1ea>
		{

			     error = setpoint - input;
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fb0f 	bl	800047c <__aeabi_i2d>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	496e      	ldr	r1, [pc, #440]	; (800201c <calculatePID+0x208>)
 8001e64:	e9c1 2300 	strd	r2, r3, [r1]

			    // Proportional term
			     Pout = P * error;
 8001e68:	4b6c      	ldr	r3, [pc, #432]	; (800201c <calculatePID+0x208>)
 8001e6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e72:	f7fe fb6d 	bl	8000550 <__aeabi_dmul>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4969      	ldr	r1, [pc, #420]	; (8002020 <calculatePID+0x20c>)
 8001e7c:	e9c1 2300 	strd	r2, r3, [r1]

			    // Integral term
			     _integral += error * setTime;
 8001e80:	4b65      	ldr	r3, [pc, #404]	; (8002018 <calculatePID+0x204>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fae9 	bl	800045c <__aeabi_ui2d>
 8001e8a:	4b64      	ldr	r3, [pc, #400]	; (800201c <calculatePID+0x208>)
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e90:	f7fe fb5e 	bl	8000550 <__aeabi_dmul>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4b61      	ldr	r3, [pc, #388]	; (8002024 <calculatePID+0x210>)
 8001e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea2:	f7fe f99f 	bl	80001e4 <__adddf3>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	495e      	ldr	r1, [pc, #376]	; (8002024 <calculatePID+0x210>)
 8001eac:	e9c1 2300 	strd	r2, r3, [r1]
			     Iout = I * _integral;
 8001eb0:	4b5c      	ldr	r3, [pc, #368]	; (8002024 <calculatePID+0x210>)
 8001eb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001eba:	f7fe fb49 	bl	8000550 <__aeabi_dmul>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4959      	ldr	r1, [pc, #356]	; (8002028 <calculatePID+0x214>)
 8001ec4:	e9c1 2300 	strd	r2, r3, [r1]

			    // Derivative term
			     derivative = (error - _pre_error) / setTime;
 8001ec8:	4b54      	ldr	r3, [pc, #336]	; (800201c <calculatePID+0x208>)
 8001eca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ece:	4b57      	ldr	r3, [pc, #348]	; (800202c <calculatePID+0x218>)
 8001ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed4:	f7fe f984 	bl	80001e0 <__aeabi_dsub>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4690      	mov	r8, r2
 8001ede:	4699      	mov	r9, r3
 8001ee0:	4b4d      	ldr	r3, [pc, #308]	; (8002018 <calculatePID+0x204>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe fab9 	bl	800045c <__aeabi_ui2d>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4640      	mov	r0, r8
 8001ef0:	4649      	mov	r1, r9
 8001ef2:	f7fe fc57 	bl	80007a4 <__aeabi_ddiv>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	494d      	ldr	r1, [pc, #308]	; (8002030 <calculatePID+0x21c>)
 8001efc:	e9c1 2300 	strd	r2, r3, [r1]
			     Dout = D * derivative;
 8001f00:	4b4b      	ldr	r3, [pc, #300]	; (8002030 <calculatePID+0x21c>)
 8001f02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f0a:	f7fe fb21 	bl	8000550 <__aeabi_dmul>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4948      	ldr	r1, [pc, #288]	; (8002034 <calculatePID+0x220>)
 8001f14:	e9c1 2300 	strd	r2, r3, [r1]

			    // Calculate total output
			      Doutput = Pout + Iout + Dout; //110+1000+0
 8001f18:	4b41      	ldr	r3, [pc, #260]	; (8002020 <calculatePID+0x20c>)
 8001f1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f1e:	4b42      	ldr	r3, [pc, #264]	; (8002028 <calculatePID+0x214>)
 8001f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f24:	f7fe f95e 	bl	80001e4 <__adddf3>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4b40      	ldr	r3, [pc, #256]	; (8002034 <calculatePID+0x220>)
 8001f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f36:	f7fe f955 	bl	80001e4 <__adddf3>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	493e      	ldr	r1, [pc, #248]	; (8002038 <calculatePID+0x224>)
 8001f40:	e9c1 2300 	strd	r2, r3, [r1]
			    	if (Doutput<0)
 8001f44:	4b3c      	ldr	r3, [pc, #240]	; (8002038 <calculatePID+0x224>)
 8001f46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	f7fe fd6f 	bl	8000a34 <__aeabi_dcmplt>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <calculatePID+0x150>
							{

								kierunek = false;
 8001f5c:	4b37      	ldr	r3, [pc, #220]	; (800203c <calculatePID+0x228>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
 8001f62:	e00e      	b.n	8001f82 <calculatePID+0x16e>
							}else if(Doutput>0){
 8001f64:	4b34      	ldr	r3, [pc, #208]	; (8002038 <calculatePID+0x224>)
 8001f66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	f7fe fd7d 	bl	8000a70 <__aeabi_dcmpgt>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d002      	beq.n	8001f82 <calculatePID+0x16e>


								kierunek = true;
 8001f7c:	4b2f      	ldr	r3, [pc, #188]	; (800203c <calculatePID+0x228>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
							}

			    if( Doutput < _min )
 8001f82:	4b2d      	ldr	r3, [pc, #180]	; (8002038 <calculatePID+0x224>)
 8001f84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f88:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <calculatePID+0x22c>)
 8001f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8e:	f7fe fd51 	bl	8000a34 <__aeabi_dcmplt>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d009      	beq.n	8001fac <calculatePID+0x198>
			        {Doutput =Doutput * -1;}
 8001f98:	4b27      	ldr	r3, [pc, #156]	; (8002038 <calculatePID+0x224>)
 8001f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9e:	4614      	mov	r4, r2
 8001fa0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001fa4:	4b24      	ldr	r3, [pc, #144]	; (8002038 <calculatePID+0x224>)
 8001fa6:	e9c3 4500 	strd	r4, r5, [r3]
 8001faa:	e014      	b.n	8001fd6 <calculatePID+0x1c2>
			    else if( Doutput > _max )
 8001fac:	4b22      	ldr	r3, [pc, #136]	; (8002038 <calculatePID+0x224>)
 8001fae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fb2:	4b24      	ldr	r3, [pc, #144]	; (8002044 <calculatePID+0x230>)
 8001fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb8:	f7fe fd5a 	bl	8000a70 <__aeabi_dcmpgt>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d009      	beq.n	8001fd6 <calculatePID+0x1c2>
			    { output = _max;}
 8001fc2:	4b20      	ldr	r3, [pc, #128]	; (8002044 <calculatePID+0x230>)
 8001fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f7fe fd5a 	bl	8000a84 <__aeabi_d2uiz>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4a1d      	ldr	r2, [pc, #116]	; (8002048 <calculatePID+0x234>)
 8001fd4:	6013      	str	r3, [r2, #0]





			    	output=(uint32_t)Doutput;
 8001fd6:	4b18      	ldr	r3, [pc, #96]	; (8002038 <calculatePID+0x224>)
 8001fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fdc:	4610      	mov	r0, r2
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f7fe fd50 	bl	8000a84 <__aeabi_d2uiz>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4a18      	ldr	r2, [pc, #96]	; (8002048 <calculatePID+0x234>)
 8001fe8:	6013      	str	r3, [r2, #0]




			    // Save error to previous error
			    _pre_error = error;
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <calculatePID+0x208>)
 8001fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff0:	490e      	ldr	r1, [pc, #56]	; (800202c <calculatePID+0x218>)
 8001ff2:	e9c1 2300 	strd	r2, r3, [r1]
				lasttime = now;
 8001ff6:	4b05      	ldr	r3, [pc, #20]	; (800200c <calculatePID+0x1f8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a05      	ldr	r2, [pc, #20]	; (8002010 <calculatePID+0x1fc>)
 8001ffc:	6013      	str	r3, [r2, #0]




		}
 return output;
 8001ffe:	4b12      	ldr	r3, [pc, #72]	; (8002048 <calculatePID+0x234>)
 8002000:	681b      	ldr	r3, [r3, #0]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3720      	adds	r7, #32
 8002006:	46bd      	mov	sp, r7
 8002008:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800200c:	200002c8 	.word	0x200002c8
 8002010:	20000180 	.word	0x20000180
 8002014:	200002f8 	.word	0x200002f8
 8002018:	200000b8 	.word	0x200000b8
 800201c:	20000328 	.word	0x20000328
 8002020:	200002f0 	.word	0x200002f0
 8002024:	20000170 	.word	0x20000170
 8002028:	200002d8 	.word	0x200002d8
 800202c:	20000168 	.word	0x20000168
 8002030:	20000178 	.word	0x20000178
 8002034:	20000250 	.word	0x20000250
 8002038:	200002e8 	.word	0x200002e8
 800203c:	20000154 	.word	0x20000154
 8002040:	20000160 	.word	0x20000160
 8002044:	200000b0 	.word	0x200000b0
 8002048:	200002d4 	.word	0x200002d4

0800204c <initWork>:
			}


*/
void initWork()
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
	int i=0;
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
	do{

		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin );
 8002056:	2120      	movs	r1, #32
 8002058:	4808      	ldr	r0, [pc, #32]	; (800207c <initWork+0x30>)
 800205a:	f001 fe5a 	bl	8003d12 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 800205e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002062:	f000 ff67 	bl	8002f34 <HAL_Delay>
		i++;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3301      	adds	r3, #1
 800206a:	607b      	str	r3, [r7, #4]
	}while(i<10);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b09      	cmp	r3, #9
 8002070:	ddf1      	ble.n	8002056 <initWork+0xa>


}
 8002072:	bf00      	nop
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40020000 	.word	0x40020000

08002080 <HAL_UARTEx_RxEventCallback>:




void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart , uint16_t Size)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	807b      	strh	r3, [r7, #2]
	if(huart->Instance==USART2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a08      	ldr	r2, [pc, #32]	; (80020b4 <HAL_UARTEx_RxEventCallback+0x34>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d10a      	bne.n	80020ac <HAL_UARTEx_RxEventCallback+0x2c>
	{

		memcpy( communicationFrame,RxBuf ,Size);
 8002096:	887b      	ldrh	r3, [r7, #2]
 8002098:	461a      	mov	r2, r3
 800209a:	4907      	ldr	r1, [pc, #28]	; (80020b8 <HAL_UARTEx_RxEventCallback+0x38>)
 800209c:	4807      	ldr	r0, [pc, #28]	; (80020bc <HAL_UARTEx_RxEventCallback+0x3c>)
 800209e:	f006 fd05 	bl	8008aac <memcpy>

		HAL_UARTEx_ReceiveToIdle_DMA(&huart2,RxBuf,RxBuf_SIZE);
 80020a2:	220d      	movs	r2, #13
 80020a4:	4904      	ldr	r1, [pc, #16]	; (80020b8 <HAL_UARTEx_RxEventCallback+0x38>)
 80020a6:	4806      	ldr	r0, [pc, #24]	; (80020c0 <HAL_UARTEx_RxEventCallback+0x40>)
 80020a8:	f005 fc7d 	bl	80079a6 <HAL_UARTEx_ReceiveToIdle_DMA>

	}

}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40004400 	.word	0x40004400
 80020b8:	20000334 	.word	0x20000334
 80020bc:	2000009c 	.word	0x2000009c
 80020c0:	20000354 	.word	0x20000354

080020c4 <firstScreenOled>:
	HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s), 1000);
}



void firstScreenOled(){
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af04      	add	r7, sp, #16

	//  send_string(mesage);


              unsigned char* OledString;
		      OledString =( unsigned char*)sendFrame;
 80020ca:	4b75      	ldr	r3, [pc, #468]	; (80022a0 <firstScreenOled+0x1dc>)
 80020cc:	607b      	str	r3, [r7, #4]
		     // GFX_draw_string(0, 0, OledString, WHITE,BLACK, 1, 1);
		      GFX_draw_string(25, 25, OledString, WHITE,BLACK, 0, 0);
 80020ce:	2300      	movs	r3, #0
 80020d0:	9302      	str	r3, [sp, #8]
 80020d2:	2300      	movs	r3, #0
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	2300      	movs	r3, #0
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2301      	movs	r3, #1
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	2119      	movs	r1, #25
 80020e0:	2019      	movs	r0, #25
 80020e2:	f7fe ff85 	bl	8000ff0 <GFX_draw_string>
		      GFX_draw_string(0, 45, OledString, WHITE,BLACK, 1, 1);
 80020e6:	2301      	movs	r3, #1
 80020e8:	9302      	str	r3, [sp, #8]
 80020ea:	2301      	movs	r3, #1
 80020ec:	9301      	str	r3, [sp, #4]
 80020ee:	2300      	movs	r3, #0
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	2301      	movs	r3, #1
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	212d      	movs	r1, #45	; 0x2d
 80020f8:	2000      	movs	r0, #0
 80020fa:	f7fe ff79 	bl	8000ff0 <GFX_draw_string>
		      SSD1306_draw_fast_hline(0,43,200,WHITE);
 80020fe:	2301      	movs	r3, #1
 8002100:	22c8      	movs	r2, #200	; 0xc8
 8002102:	212b      	movs	r1, #43	; 0x2b
 8002104:	2000      	movs	r0, #0
 8002106:	f7ff f995 	bl	8001434 <SSD1306_draw_fast_hline>
		      GFX_draw_string(0, 33, EncUpMessage , WHITE,BLACK, 1, 1);
 800210a:	2301      	movs	r3, #1
 800210c:	9302      	str	r3, [sp, #8]
 800210e:	2301      	movs	r3, #1
 8002110:	9301      	str	r3, [sp, #4]
 8002112:	2300      	movs	r3, #0
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	2301      	movs	r3, #1
 8002118:	4a62      	ldr	r2, [pc, #392]	; (80022a4 <firstScreenOled+0x1e0>)
 800211a:	2121      	movs	r1, #33	; 0x21
 800211c:	2000      	movs	r0, #0
 800211e:	f7fe ff67 	bl	8000ff0 <GFX_draw_string>

		      if (encoderCounterUp >=1000)
 8002122:	4b61      	ldr	r3, [pc, #388]	; (80022a8 <firstScreenOled+0x1e4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800212a:	db13      	blt.n	8002154 <firstScreenOled+0x90>
		     		      {
		     		    	  itoa(encoderCounterUp,itoaBuffer,10);
 800212c:	4b5e      	ldr	r3, [pc, #376]	; (80022a8 <firstScreenOled+0x1e4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	220a      	movs	r2, #10
 8002132:	495e      	ldr	r1, [pc, #376]	; (80022ac <firstScreenOled+0x1e8>)
 8002134:	4618      	mov	r0, r3
 8002136:	f006 fcaf 	bl	8008a98 <itoa>
		     		    	  		      GFX_draw_string(60, 33, ( unsigned char*)itoaBuffer, WHITE,BLACK, 1, 1);
 800213a:	2301      	movs	r3, #1
 800213c:	9302      	str	r3, [sp, #8]
 800213e:	2301      	movs	r3, #1
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	2300      	movs	r3, #0
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	2301      	movs	r3, #1
 8002148:	4a58      	ldr	r2, [pc, #352]	; (80022ac <firstScreenOled+0x1e8>)
 800214a:	2121      	movs	r1, #33	; 0x21
 800214c:	203c      	movs	r0, #60	; 0x3c
 800214e:	f7fe ff4f 	bl	8000ff0 <GFX_draw_string>
 8002152:	e01e      	b.n	8002192 <firstScreenOled+0xce>


		     		      }else
		     		      {
		     		    	   GFX_draw_string(60, 33,( unsigned char*)blank, WHITE,BLACK, 1, 1);
 8002154:	2301      	movs	r3, #1
 8002156:	9302      	str	r3, [sp, #8]
 8002158:	2301      	movs	r3, #1
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	2300      	movs	r3, #0
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2301      	movs	r3, #1
 8002162:	4a53      	ldr	r2, [pc, #332]	; (80022b0 <firstScreenOled+0x1ec>)
 8002164:	2121      	movs	r1, #33	; 0x21
 8002166:	203c      	movs	r0, #60	; 0x3c
 8002168:	f7fe ff42 	bl	8000ff0 <GFX_draw_string>
		     		    	  itoa(encoderCounterUp,itoaBuffer,10);
 800216c:	4b4e      	ldr	r3, [pc, #312]	; (80022a8 <firstScreenOled+0x1e4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	220a      	movs	r2, #10
 8002172:	494e      	ldr	r1, [pc, #312]	; (80022ac <firstScreenOled+0x1e8>)
 8002174:	4618      	mov	r0, r3
 8002176:	f006 fc8f 	bl	8008a98 <itoa>
		     		    	   GFX_draw_string(60, 33, ( unsigned char*)itoaBuffer, WHITE,BLACK, 1, 1);
 800217a:	2301      	movs	r3, #1
 800217c:	9302      	str	r3, [sp, #8]
 800217e:	2301      	movs	r3, #1
 8002180:	9301      	str	r3, [sp, #4]
 8002182:	2300      	movs	r3, #0
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	2301      	movs	r3, #1
 8002188:	4a48      	ldr	r2, [pc, #288]	; (80022ac <firstScreenOled+0x1e8>)
 800218a:	2121      	movs	r1, #33	; 0x21
 800218c:	203c      	movs	r0, #60	; 0x3c
 800218e:	f7fe ff2f 	bl	8000ff0 <GFX_draw_string>


		     		      }


		      SSD1306_draw_fast_hline(0,32,200,WHITE);
 8002192:	2301      	movs	r3, #1
 8002194:	22c8      	movs	r2, #200	; 0xc8
 8002196:	2120      	movs	r1, #32
 8002198:	2000      	movs	r0, #0
 800219a:	f7ff f94b 	bl	8001434 <SSD1306_draw_fast_hline>
		      GFX_draw_string(0, 22, EncDownMessage, WHITE,BLACK, 1, 1);
 800219e:	2301      	movs	r3, #1
 80021a0:	9302      	str	r3, [sp, #8]
 80021a2:	2301      	movs	r3, #1
 80021a4:	9301      	str	r3, [sp, #4]
 80021a6:	2300      	movs	r3, #0
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	2301      	movs	r3, #1
 80021ac:	4a41      	ldr	r2, [pc, #260]	; (80022b4 <firstScreenOled+0x1f0>)
 80021ae:	2116      	movs	r1, #22
 80021b0:	2000      	movs	r0, #0
 80021b2:	f7fe ff1d 	bl	8000ff0 <GFX_draw_string>

		      if (encoderCounterDown >=1000)
 80021b6:	4b40      	ldr	r3, [pc, #256]	; (80022b8 <firstScreenOled+0x1f4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021be:	db13      	blt.n	80021e8 <firstScreenOled+0x124>
		  		     		      {
		    	    itoa(encoderCounterDown,itoaBuffer,10);
 80021c0:	4b3d      	ldr	r3, [pc, #244]	; (80022b8 <firstScreenOled+0x1f4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	220a      	movs	r2, #10
 80021c6:	4939      	ldr	r1, [pc, #228]	; (80022ac <firstScreenOled+0x1e8>)
 80021c8:	4618      	mov	r0, r3
 80021ca:	f006 fc65 	bl	8008a98 <itoa>
		    			      GFX_draw_string(60, 22, ( unsigned char*)itoaBuffer, WHITE,BLACK, 1, 1);
 80021ce:	2301      	movs	r3, #1
 80021d0:	9302      	str	r3, [sp, #8]
 80021d2:	2301      	movs	r3, #1
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	2300      	movs	r3, #0
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2301      	movs	r3, #1
 80021dc:	4a33      	ldr	r2, [pc, #204]	; (80022ac <firstScreenOled+0x1e8>)
 80021de:	2116      	movs	r1, #22
 80021e0:	203c      	movs	r0, #60	; 0x3c
 80021e2:	f7fe ff05 	bl	8000ff0 <GFX_draw_string>
 80021e6:	e01e      	b.n	8002226 <firstScreenOled+0x162>


		  		     		      }else
		  		     		      {
		  		     		    	   GFX_draw_string(60, 22,( unsigned char*)blank, WHITE,BLACK, 1, 1);
 80021e8:	2301      	movs	r3, #1
 80021ea:	9302      	str	r3, [sp, #8]
 80021ec:	2301      	movs	r3, #1
 80021ee:	9301      	str	r3, [sp, #4]
 80021f0:	2300      	movs	r3, #0
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	2301      	movs	r3, #1
 80021f6:	4a2e      	ldr	r2, [pc, #184]	; (80022b0 <firstScreenOled+0x1ec>)
 80021f8:	2116      	movs	r1, #22
 80021fa:	203c      	movs	r0, #60	; 0x3c
 80021fc:	f7fe fef8 	bl	8000ff0 <GFX_draw_string>
		  		     		        itoa(encoderCounterDown,itoaBuffer,10);
 8002200:	4b2d      	ldr	r3, [pc, #180]	; (80022b8 <firstScreenOled+0x1f4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	220a      	movs	r2, #10
 8002206:	4929      	ldr	r1, [pc, #164]	; (80022ac <firstScreenOled+0x1e8>)
 8002208:	4618      	mov	r0, r3
 800220a:	f006 fc45 	bl	8008a98 <itoa>
		  		     		    		      GFX_draw_string(60, 22, ( unsigned char*)itoaBuffer, WHITE,BLACK, 1, 1);
 800220e:	2301      	movs	r3, #1
 8002210:	9302      	str	r3, [sp, #8]
 8002212:	2301      	movs	r3, #1
 8002214:	9301      	str	r3, [sp, #4]
 8002216:	2300      	movs	r3, #0
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	2301      	movs	r3, #1
 800221c:	4a23      	ldr	r2, [pc, #140]	; (80022ac <firstScreenOled+0x1e8>)
 800221e:	2116      	movs	r1, #22
 8002220:	203c      	movs	r0, #60	; 0x3c
 8002222:	f7fe fee5 	bl	8000ff0 <GFX_draw_string>


		  		     		      }


		      SSD1306_draw_fast_hline(0,21,200,WHITE);
 8002226:	2301      	movs	r3, #1
 8002228:	22c8      	movs	r2, #200	; 0xc8
 800222a:	2115      	movs	r1, #21
 800222c:	2000      	movs	r0, #0
 800222e:	f7ff f901 	bl	8001434 <SSD1306_draw_fast_hline>
		      GFX_draw_string(0, 11,PWMMessage , WHITE,BLACK, 1, 1);
 8002232:	2301      	movs	r3, #1
 8002234:	9302      	str	r3, [sp, #8]
 8002236:	2301      	movs	r3, #1
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	2300      	movs	r3, #0
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2301      	movs	r3, #1
 8002240:	4a1e      	ldr	r2, [pc, #120]	; (80022bc <firstScreenOled+0x1f8>)
 8002242:	210b      	movs	r1, #11
 8002244:	2000      	movs	r0, #0
 8002246:	f7fe fed3 	bl	8000ff0 <GFX_draw_string>
		      itoa(PWM,itoaBuffer,10);
 800224a:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <firstScreenOled+0x1fc>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	220a      	movs	r2, #10
 8002250:	4916      	ldr	r1, [pc, #88]	; (80022ac <firstScreenOled+0x1e8>)
 8002252:	4618      	mov	r0, r3
 8002254:	f006 fc20 	bl	8008a98 <itoa>
		      GFX_draw_string(60, 11, ( unsigned char*)itoaBuffer, WHITE,BLACK, 1, 1);
 8002258:	2301      	movs	r3, #1
 800225a:	9302      	str	r3, [sp, #8]
 800225c:	2301      	movs	r3, #1
 800225e:	9301      	str	r3, [sp, #4]
 8002260:	2300      	movs	r3, #0
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	2301      	movs	r3, #1
 8002266:	4a11      	ldr	r2, [pc, #68]	; (80022ac <firstScreenOled+0x1e8>)
 8002268:	210b      	movs	r1, #11
 800226a:	203c      	movs	r0, #60	; 0x3c
 800226c:	f7fe fec0 	bl	8000ff0 <GFX_draw_string>
		      SSD1306_draw_fast_hline(0,10,200,WHITE);
 8002270:	2301      	movs	r3, #1
 8002272:	22c8      	movs	r2, #200	; 0xc8
 8002274:	210a      	movs	r1, #10
 8002276:	2000      	movs	r0, #0
 8002278:	f7ff f8dc 	bl	8001434 <SSD1306_draw_fast_hline>
		      GFX_draw_string(0, 0, MODEMessage, WHITE,BLACK, 1, 1);
 800227c:	2301      	movs	r3, #1
 800227e:	9302      	str	r3, [sp, #8]
 8002280:	2301      	movs	r3, #1
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	2300      	movs	r3, #0
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	2301      	movs	r3, #1
 800228a:	4a0e      	ldr	r2, [pc, #56]	; (80022c4 <firstScreenOled+0x200>)
 800228c:	2100      	movs	r1, #0
 800228e:	2000      	movs	r0, #0
 8002290:	f7fe feae 	bl	8000ff0 <GFX_draw_string>



			  SSD1306_display_repaint();
 8002294:	f7ff fb4a 	bl	800192c <SSD1306_display_repaint>

}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000314 	.word	0x20000314
 80022a4:	20000080 	.word	0x20000080
 80022a8:	20000158 	.word	0x20000158
 80022ac:	20000300 	.word	0x20000300
 80022b0:	20000004 	.word	0x20000004
 80022b4:	20000074 	.word	0x20000074
 80022b8:	2000015c 	.word	0x2000015c
 80022bc:	2000008c 	.word	0x2000008c
 80022c0:	20000000 	.word	0x20000000
 80022c4:	20000094 	.word	0x20000094

080022c8 <engineControl>:




void engineControl()
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af04      	add	r7, sp, #16

	 encoderCounterUp = htim3.Instance->CNT;
 80022ce:	4b82      	ldr	r3, [pc, #520]	; (80024d8 <engineControl+0x210>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	461a      	mov	r2, r3
 80022d6:	4b81      	ldr	r3, [pc, #516]	; (80024dc <engineControl+0x214>)
 80022d8:	601a      	str	r2, [r3, #0]



	if (START == 1&& STOP == 0 && manual == 0)
 80022da:	4b81      	ldr	r3, [pc, #516]	; (80024e0 <engineControl+0x218>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d165      	bne.n	80023ae <engineControl+0xe6>
 80022e2:	4b80      	ldr	r3, [pc, #512]	; (80024e4 <engineControl+0x21c>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d161      	bne.n	80023ae <engineControl+0xe6>
 80022ea:	4b7f      	ldr	r3, [pc, #508]	; (80024e8 <engineControl+0x220>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d15d      	bne.n	80023ae <engineControl+0xe6>
		{

		   GFX_draw_string(0, 0,messageStart, WHITE,BLACK, 1, 1);
 80022f2:	2301      	movs	r3, #1
 80022f4:	9302      	str	r3, [sp, #8]
 80022f6:	2301      	movs	r3, #1
 80022f8:	9301      	str	r3, [sp, #4]
 80022fa:	2300      	movs	r3, #0
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	2301      	movs	r3, #1
 8002300:	4a7a      	ldr	r2, [pc, #488]	; (80024ec <engineControl+0x224>)
 8002302:	2100      	movs	r1, #0
 8002304:	2000      	movs	r0, #0
 8002306:	f7fe fe73 	bl	8000ff0 <GFX_draw_string>
		      SSD1306_display_repaint();
 800230a:	f7ff fb0f 	bl	800192c <SSD1306_display_repaint>

if (encoderCounterUp>500 && encoderCounterUp <700)
 800230e:	4b73      	ldr	r3, [pc, #460]	; (80024dc <engineControl+0x214>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002316:	dd42      	ble.n	800239e <engineControl+0xd6>
 8002318:	4b70      	ldr	r3, [pc, #448]	; (80024dc <engineControl+0x214>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002320:	da3d      	bge.n	800239e <engineControl+0xd6>
{

        PWM=calculatePID( encoderCounterUp, 600 , 4.5, 0,  0.);
 8002322:	4b6e      	ldr	r3, [pc, #440]	; (80024dc <engineControl+0x214>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	ed9f 2b68 	vldr	d2, [pc, #416]	; 80024c8 <engineControl+0x200>
 800232a:	ed9f 1b67 	vldr	d1, [pc, #412]	; 80024c8 <engineControl+0x200>
 800232e:	ed9f 0b68 	vldr	d0, [pc, #416]	; 80024d0 <engineControl+0x208>
 8002332:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fd6c 	bl	8001e14 <calculatePID>
 800233c:	4603      	mov	r3, r0
 800233e:	4a6c      	ldr	r2, [pc, #432]	; (80024f0 <engineControl+0x228>)
 8002340:	6013      	str	r3, [r2, #0]


			//PWM =calculatePID(0,encoderCounterUp);
			 if(kierunek)
 8002342:	4b6c      	ldr	r3, [pc, #432]	; (80024f4 <engineControl+0x22c>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d014      	beq.n	8002374 <engineControl+0xac>
						            {


						             HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  GPIO_PIN_SET);//podlaczenie sterowania silnikiem
 800234a:	2201      	movs	r2, #1
 800234c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002350:	4869      	ldr	r0, [pc, #420]	; (80024f8 <engineControl+0x230>)
 8002352:	f001 fcc5 	bl	8003ce0 <HAL_GPIO_WritePin>
						             HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,  GPIO_PIN_RESET);//podlaczenie sterowania silnikiem
 8002356:	2200      	movs	r2, #0
 8002358:	f44f 7100 	mov.w	r1, #512	; 0x200
 800235c:	4866      	ldr	r0, [pc, #408]	; (80024f8 <engineControl+0x230>)
 800235e:	f001 fcbf 	bl	8003ce0 <HAL_GPIO_WritePin>
						             HAL_Delay(10);
 8002362:	200a      	movs	r0, #10
 8002364:	f000 fde6 	bl	8002f34 <HAL_Delay>
						             __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM);
 8002368:	4b64      	ldr	r3, [pc, #400]	; (80024fc <engineControl+0x234>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a60      	ldr	r2, [pc, #384]	; (80024f0 <engineControl+0x228>)
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	635a      	str	r2, [r3, #52]	; 0x34
			 if(kierunek)
 8002372:	e01c      	b.n	80023ae <engineControl+0xe6>
						            }else{



						            	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  GPIO_PIN_RESET);
 8002374:	2200      	movs	r2, #0
 8002376:	f44f 7180 	mov.w	r1, #256	; 0x100
 800237a:	485f      	ldr	r0, [pc, #380]	; (80024f8 <engineControl+0x230>)
 800237c:	f001 fcb0 	bl	8003ce0 <HAL_GPIO_WritePin>
						            	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,  GPIO_PIN_SET);
 8002380:	2201      	movs	r2, #1
 8002382:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002386:	485c      	ldr	r0, [pc, #368]	; (80024f8 <engineControl+0x230>)
 8002388:	f001 fcaa 	bl	8003ce0 <HAL_GPIO_WritePin>
						            	HAL_Delay(10);
 800238c:	200a      	movs	r0, #10
 800238e:	f000 fdd1 	bl	8002f34 <HAL_Delay>
						            	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM);
 8002392:	4b5a      	ldr	r3, [pc, #360]	; (80024fc <engineControl+0x234>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a56      	ldr	r2, [pc, #344]	; (80024f0 <engineControl+0x228>)
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	635a      	str	r2, [r3, #52]	; 0x34
			 if(kierunek)
 800239c:	e007      	b.n	80023ae <engineControl+0xe6>
						            }

}else{
	PWM=0;
 800239e:	4b54      	ldr	r3, [pc, #336]	; (80024f0 <engineControl+0x228>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM);
 80023a4:	4b55      	ldr	r3, [pc, #340]	; (80024fc <engineControl+0x234>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a51      	ldr	r2, [pc, #324]	; (80024f0 <engineControl+0x228>)
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	635a      	str	r2, [r3, #52]	; 0x34




		}
		if (START == 0 && STOP == 1 && manual == 0)
 80023ae:	4b4c      	ldr	r3, [pc, #304]	; (80024e0 <engineControl+0x218>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d128      	bne.n	8002408 <engineControl+0x140>
 80023b6:	4b4b      	ldr	r3, [pc, #300]	; (80024e4 <engineControl+0x21c>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d124      	bne.n	8002408 <engineControl+0x140>
 80023be:	4b4a      	ldr	r3, [pc, #296]	; (80024e8 <engineControl+0x220>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d120      	bne.n	8002408 <engineControl+0x140>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  GPIO_PIN_RESET);
 80023c6:	2200      	movs	r2, #0
 80023c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023cc:	484a      	ldr	r0, [pc, #296]	; (80024f8 <engineControl+0x230>)
 80023ce:	f001 fc87 	bl	8003ce0 <HAL_GPIO_WritePin>
									            	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80023d2:	2200      	movs	r2, #0
 80023d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023d8:	4847      	ldr	r0, [pc, #284]	; (80024f8 <engineControl+0x230>)
 80023da:	f001 fc81 	bl	8003ce0 <HAL_GPIO_WritePin>
									            	HAL_Delay(10);
 80023de:	200a      	movs	r0, #10
 80023e0:	f000 fda8 	bl	8002f34 <HAL_Delay>
									            	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80023e4:	4b45      	ldr	r3, [pc, #276]	; (80024fc <engineControl+0x234>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2200      	movs	r2, #0
 80023ea:	635a      	str	r2, [r3, #52]	; 0x34
			 GFX_draw_string(0, 0, stopMessage, WHITE,BLACK, 1, 1);
 80023ec:	2301      	movs	r3, #1
 80023ee:	9302      	str	r3, [sp, #8]
 80023f0:	2301      	movs	r3, #1
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	2300      	movs	r3, #0
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	2301      	movs	r3, #1
 80023fa:	4a41      	ldr	r2, [pc, #260]	; (8002500 <engineControl+0x238>)
 80023fc:	2100      	movs	r1, #0
 80023fe:	2000      	movs	r0, #0
 8002400:	f7fe fdf6 	bl	8000ff0 <GFX_draw_string>

			         SSD1306_display_repaint();
 8002404:	f7ff fa92 	bl	800192c <SSD1306_display_repaint>
		}
		if (manual == 1 && leftButton==1 && rightButton == 0)
 8002408:	4b37      	ldr	r3, [pc, #220]	; (80024e8 <engineControl+0x220>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d129      	bne.n	8002464 <engineControl+0x19c>
 8002410:	4b3c      	ldr	r3, [pc, #240]	; (8002504 <engineControl+0x23c>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d125      	bne.n	8002464 <engineControl+0x19c>
 8002418:	4b3b      	ldr	r3, [pc, #236]	; (8002508 <engineControl+0x240>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d121      	bne.n	8002464 <engineControl+0x19c>
				{

			 GFX_draw_string(0, 0, messageManualLeft, WHITE,BLACK, 1, 1);
 8002420:	2301      	movs	r3, #1
 8002422:	9302      	str	r3, [sp, #8]
 8002424:	2301      	movs	r3, #1
 8002426:	9301      	str	r3, [sp, #4]
 8002428:	2300      	movs	r3, #0
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	2301      	movs	r3, #1
 800242e:	4a37      	ldr	r2, [pc, #220]	; (800250c <engineControl+0x244>)
 8002430:	2100      	movs	r1, #0
 8002432:	2000      	movs	r0, #0
 8002434:	f7fe fddc 	bl	8000ff0 <GFX_draw_string>
					      SSD1306_display_repaint();
 8002438:	f7ff fa78 	bl	800192c <SSD1306_display_repaint>

					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  GPIO_PIN_RESET);
 800243c:	2200      	movs	r2, #0
 800243e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002442:	482d      	ldr	r0, [pc, #180]	; (80024f8 <engineControl+0x230>)
 8002444:	f001 fc4c 	bl	8003ce0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,  GPIO_PIN_SET);
 8002448:	2201      	movs	r2, #1
 800244a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800244e:	482a      	ldr	r0, [pc, #168]	; (80024f8 <engineControl+0x230>)
 8002450:	f001 fc46 	bl	8003ce0 <HAL_GPIO_WritePin>
					HAL_Delay(10);
 8002454:	200a      	movs	r0, #10
 8002456:	f000 fd6d 	bl	8002f34 <HAL_Delay>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 400);
 800245a:	4b28      	ldr	r3, [pc, #160]	; (80024fc <engineControl+0x234>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002462:	635a      	str	r2, [r3, #52]	; 0x34
				}
		if (manual == 1 && leftButton==0 && rightButton == 1)
 8002464:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <engineControl+0x220>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d129      	bne.n	80024c0 <engineControl+0x1f8>
 800246c:	4b25      	ldr	r3, [pc, #148]	; (8002504 <engineControl+0x23c>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d125      	bne.n	80024c0 <engineControl+0x1f8>
 8002474:	4b24      	ldr	r3, [pc, #144]	; (8002508 <engineControl+0x240>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d121      	bne.n	80024c0 <engineControl+0x1f8>
						{


			GFX_draw_string(0, 0, messageManualRight, WHITE,BLACK, 1, 1);
 800247c:	2301      	movs	r3, #1
 800247e:	9302      	str	r3, [sp, #8]
 8002480:	2301      	movs	r3, #1
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	2300      	movs	r3, #0
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	2301      	movs	r3, #1
 800248a:	4a21      	ldr	r2, [pc, #132]	; (8002510 <engineControl+0x248>)
 800248c:	2100      	movs	r1, #0
 800248e:	2000      	movs	r0, #0
 8002490:	f7fe fdae 	bl	8000ff0 <GFX_draw_string>
								      SSD1306_display_repaint();
 8002494:	f7ff fa4a 	bl	800192c <SSD1306_display_repaint>

					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,  GPIO_PIN_SET);
 8002498:	2201      	movs	r2, #1
 800249a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800249e:	4816      	ldr	r0, [pc, #88]	; (80024f8 <engineControl+0x230>)
 80024a0:	f001 fc1e 	bl	8003ce0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,  GPIO_PIN_RESET);
 80024a4:	2200      	movs	r2, #0
 80024a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024aa:	4813      	ldr	r0, [pc, #76]	; (80024f8 <engineControl+0x230>)
 80024ac:	f001 fc18 	bl	8003ce0 <HAL_GPIO_WritePin>
					HAL_Delay(10);
 80024b0:	200a      	movs	r0, #10
 80024b2:	f000 fd3f 	bl	8002f34 <HAL_Delay>
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 400);
 80024b6:	4b11      	ldr	r3, [pc, #68]	; (80024fc <engineControl+0x234>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80024be:	635a      	str	r2, [r3, #52]	; 0x34
						}




		}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
	...
 80024d4:	40120000 	.word	0x40120000
 80024d8:	2000041c 	.word	0x2000041c
 80024dc:	20000158 	.word	0x20000158
 80024e0:	200003d2 	.word	0x200003d2
 80024e4:	20000321 	.word	0x20000321
 80024e8:	200003d0 	.word	0x200003d0
 80024ec:	20000060 	.word	0x20000060
 80024f0:	20000000 	.word	0x20000000
 80024f4:	20000154 	.word	0x20000154
 80024f8:	40020800 	.word	0x40020800
 80024fc:	20000464 	.word	0x20000464
 8002500:	20000018 	.word	0x20000018
 8002504:	20000330 	.word	0x20000330
 8002508:	200002e0 	.word	0x200002e0
 800250c:	20000048 	.word	0x20000048
 8002510:	2000002c 	.word	0x2000002c

08002514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002518:	f000 fc9a 	bl	8002e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800251c:	f000 f85c 	bl	80025d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002520:	f7ff fa6e 	bl	8001a00 <MX_GPIO_Init>
  MX_DMA_Init();
 8002524:	f7ff fa44 	bl	80019b0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002528:	f000 fbbc 	bl	8002ca4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800252c:	f000 f99a 	bl	8002864 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002530:	f000 fa08 	bl	8002944 <MX_TIM3_Init>

  MX_TIM4_Init();
 8002534:	f000 fa5a 	bl	80029ec <MX_TIM4_Init>
  MX_I2C1_Init();
 8002538:	f7ff fafe 	bl	8001b38 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
 //SSD1306_init();
  SSD1306_init();
 800253c:	f7fe fe06 	bl	800114c <SSD1306_init>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2,RxBuf,RxBuf_SIZE);
 8002540:	220d      	movs	r2, #13
 8002542:	491d      	ldr	r1, [pc, #116]	; (80025b8 <main+0xa4>)
 8002544:	481d      	ldr	r0, [pc, #116]	; (80025bc <main+0xa8>)
 8002546:	f005 fa2e 	bl	80079a6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 800254a:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <main+0xac>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <main+0xac>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0208 	bic.w	r2, r2, #8
 8002558:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // enkoder dol
 800255a:	213c      	movs	r1, #60	; 0x3c
 800255c:	4819      	ldr	r0, [pc, #100]	; (80025c4 <main+0xb0>)
 800255e:	f004 fc97 	bl	8006e90 <HAL_TIM_Encoder_Start>
  	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // enkoder gora
 8002562:	213c      	movs	r1, #60	; 0x3c
 8002564:	4818      	ldr	r0, [pc, #96]	; (80025c8 <main+0xb4>)
 8002566:	f004 fc93 	bl	8006e90 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // wysterowanie silnika
 800256a:	2100      	movs	r1, #0
 800256c:	4817      	ldr	r0, [pc, #92]	; (80025cc <main+0xb8>)
 800256e:	f004 fb39 	bl	8006be4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002572:	2104      	movs	r1, #4
 8002574:	4815      	ldr	r0, [pc, #84]	; (80025cc <main+0xb8>)
 8002576:	f004 fb35 	bl	8006be4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800257a:	2108      	movs	r1, #8
 800257c:	4813      	ldr	r0, [pc, #76]	; (80025cc <main+0xb8>)
 800257e:	f004 fb31 	bl	8006be4 <HAL_TIM_PWM_Start>
    initWork();
 8002582:	f7ff fd63 	bl	800204c <initWork>
    firstScreenOled();
 8002586:	f7ff fd9d 	bl	80020c4 <firstScreenOled>


  while (1)
  {

	  encoderCounterUp = htim3.Instance->CNT;
 800258a:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <main+0xb0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	461a      	mov	r2, r3
 8002592:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <main+0xbc>)
 8002594:	601a      	str	r2, [r3, #0]
	   encoderCounterDown = htim4.Instance->CNT;
 8002596:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <main+0xb4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	461a      	mov	r2, r3
 800259e:	4b0d      	ldr	r3, [pc, #52]	; (80025d4 <main+0xc0>)
 80025a0:	601a      	str	r2, [r3, #0]
	   // encoderCounterUp = data1;


	  frameToName();
 80025a2:	f7ff fbbf 	bl	8001d24 <frameToName>
	  errorCheck();
 80025a6:	f7ff fb99 	bl	8001cdc <errorCheck>
	  frameTransform();
 80025aa:	f7ff fb75 	bl	8001c98 <frameTransform>
	  firstScreenOled();
 80025ae:	f7ff fd89 	bl	80020c4 <firstScreenOled>


	    engineControl();
 80025b2:	f7ff fe89 	bl	80022c8 <engineControl>
	  encoderCounterUp = htim3.Instance->CNT;
 80025b6:	e7e8      	b.n	800258a <main+0x76>
 80025b8:	20000334 	.word	0x20000334
 80025bc:	20000354 	.word	0x20000354
 80025c0:	20000268 	.word	0x20000268
 80025c4:	2000041c 	.word	0x2000041c
 80025c8:	200003d4 	.word	0x200003d4
 80025cc:	20000464 	.word	0x20000464
 80025d0:	20000158 	.word	0x20000158
 80025d4:	2000015c 	.word	0x2000015c

080025d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b094      	sub	sp, #80	; 0x50
 80025dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025de:	f107 0320 	add.w	r3, r7, #32
 80025e2:	2230      	movs	r2, #48	; 0x30
 80025e4:	2100      	movs	r1, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f006 fa6e 	bl	8008ac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025ec:	f107 030c 	add.w	r3, r7, #12
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	60da      	str	r2, [r3, #12]
 80025fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025fc:	2300      	movs	r3, #0
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	4b28      	ldr	r3, [pc, #160]	; (80026a4 <SystemClock_Config+0xcc>)
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	4a27      	ldr	r2, [pc, #156]	; (80026a4 <SystemClock_Config+0xcc>)
 8002606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260a:	6413      	str	r3, [r2, #64]	; 0x40
 800260c:	4b25      	ldr	r3, [pc, #148]	; (80026a4 <SystemClock_Config+0xcc>)
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002618:	2300      	movs	r3, #0
 800261a:	607b      	str	r3, [r7, #4]
 800261c:	4b22      	ldr	r3, [pc, #136]	; (80026a8 <SystemClock_Config+0xd0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002624:	4a20      	ldr	r2, [pc, #128]	; (80026a8 <SystemClock_Config+0xd0>)
 8002626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	4b1e      	ldr	r3, [pc, #120]	; (80026a8 <SystemClock_Config+0xd0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002638:	2302      	movs	r3, #2
 800263a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800263c:	2301      	movs	r3, #1
 800263e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002640:	2310      	movs	r3, #16
 8002642:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002644:	2302      	movs	r3, #2
 8002646:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002648:	2300      	movs	r3, #0
 800264a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800264c:	2308      	movs	r3, #8
 800264e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002650:	2354      	movs	r3, #84	; 0x54
 8002652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002654:	2302      	movs	r3, #2
 8002656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002658:	2307      	movs	r3, #7
 800265a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800265c:	f107 0320 	add.w	r3, r7, #32
 8002660:	4618      	mov	r0, r3
 8002662:	f003 fdfb 	bl	800625c <HAL_RCC_OscConfig>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800266c:	f000 f81e 	bl	80026ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002670:	230f      	movs	r3, #15
 8002672:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002674:	2302      	movs	r3, #2
 8002676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800267c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002680:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002686:	f107 030c 	add.w	r3, r7, #12
 800268a:	2102      	movs	r1, #2
 800268c:	4618      	mov	r0, r3
 800268e:	f004 f85d 	bl	800674c <HAL_RCC_ClockConfig>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002698:	f000 f808 	bl	80026ac <Error_Handler>
  }
}
 800269c:	bf00      	nop
 800269e:	3750      	adds	r7, #80	; 0x50
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40007000 	.word	0x40007000

080026ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026b0:	b672      	cpsid	i
}
 80026b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026b4:	e7fe      	b.n	80026b4 <Error_Handler+0x8>
	...

080026b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	607b      	str	r3, [r7, #4]
 80026c2:	4b10      	ldr	r3, [pc, #64]	; (8002704 <HAL_MspInit+0x4c>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	4a0f      	ldr	r2, [pc, #60]	; (8002704 <HAL_MspInit+0x4c>)
 80026c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026cc:	6453      	str	r3, [r2, #68]	; 0x44
 80026ce:	4b0d      	ldr	r3, [pc, #52]	; (8002704 <HAL_MspInit+0x4c>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d6:	607b      	str	r3, [r7, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	603b      	str	r3, [r7, #0]
 80026de:	4b09      	ldr	r3, [pc, #36]	; (8002704 <HAL_MspInit+0x4c>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	4a08      	ldr	r2, [pc, #32]	; (8002704 <HAL_MspInit+0x4c>)
 80026e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_MspInit+0x4c>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80026f6:	2007      	movs	r0, #7
 80026f8:	f000 fd10 	bl	800311c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40023800 	.word	0x40023800

08002708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800270c:	e7fe      	b.n	800270c <NMI_Handler+0x4>

0800270e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002712:	e7fe      	b.n	8002712 <HardFault_Handler+0x4>

08002714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002718:	e7fe      	b.n	8002718 <MemManage_Handler+0x4>

0800271a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800271e:	e7fe      	b.n	800271e <BusFault_Handler+0x4>

08002720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002724:	e7fe      	b.n	8002724 <UsageFault_Handler+0x4>

08002726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002726:	b480      	push	{r7}
 8002728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800272a:	bf00      	nop
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002754:	f000 fbce 	bl	8002ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002758:	bf00      	nop
 800275a:	bd80      	pop	{r7, pc}

0800275c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002760:	4802      	ldr	r0, [pc, #8]	; (800276c <DMA1_Stream5_IRQHandler+0x10>)
 8002762:	f000 feb5 	bl	80034d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000268 	.word	0x20000268

08002770 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002774:	4802      	ldr	r0, [pc, #8]	; (8002780 <TIM3_IRQHandler+0x10>)
 8002776:	f004 fc19 	bl	8006fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	2000041c 	.word	0x2000041c

08002784 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002788:	4802      	ldr	r0, [pc, #8]	; (8002794 <TIM4_IRQHandler+0x10>)
 800278a:	f004 fc0f 	bl	8006fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	200003d4 	.word	0x200003d4

08002798 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800279c:	4802      	ldr	r0, [pc, #8]	; (80027a8 <I2C1_EV_IRQHandler+0x10>)
 800279e:	f001 fe73 	bl	8004488 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	200001f0 	.word	0x200001f0

080027ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027b0:	4802      	ldr	r0, [pc, #8]	; (80027bc <USART2_IRQHandler+0x10>)
 80027b2:	f005 f95d 	bl	8007a70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000354 	.word	0x20000354

080027c0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80027c4:	4802      	ldr	r0, [pc, #8]	; (80027d0 <DMA1_Stream7_IRQHandler+0x10>)
 80027c6:	f000 fe83 	bl	80034d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000190 	.word	0x20000190

080027d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027dc:	4a14      	ldr	r2, [pc, #80]	; (8002830 <_sbrk+0x5c>)
 80027de:	4b15      	ldr	r3, [pc, #84]	; (8002834 <_sbrk+0x60>)
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027e8:	4b13      	ldr	r3, [pc, #76]	; (8002838 <_sbrk+0x64>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d102      	bne.n	80027f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027f0:	4b11      	ldr	r3, [pc, #68]	; (8002838 <_sbrk+0x64>)
 80027f2:	4a12      	ldr	r2, [pc, #72]	; (800283c <_sbrk+0x68>)
 80027f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027f6:	4b10      	ldr	r3, [pc, #64]	; (8002838 <_sbrk+0x64>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4413      	add	r3, r2
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	429a      	cmp	r2, r3
 8002802:	d207      	bcs.n	8002814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002804:	f006 f906 	bl	8008a14 <__errno>
 8002808:	4603      	mov	r3, r0
 800280a:	220c      	movs	r2, #12
 800280c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800280e:	f04f 33ff 	mov.w	r3, #4294967295
 8002812:	e009      	b.n	8002828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <_sbrk+0x64>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800281a:	4b07      	ldr	r3, [pc, #28]	; (8002838 <_sbrk+0x64>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	4a05      	ldr	r2, [pc, #20]	; (8002838 <_sbrk+0x64>)
 8002824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002826:	68fb      	ldr	r3, [r7, #12]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20018000 	.word	0x20018000
 8002834:	00000400 	.word	0x00000400
 8002838:	20000184 	.word	0x20000184
 800283c:	200004c0 	.word	0x200004c0

08002840 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <SystemInit+0x20>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284a:	4a05      	ldr	r2, [pc, #20]	; (8002860 <SystemInit+0x20>)
 800284c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08a      	sub	sp, #40	; 0x28
 8002868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800286a:	f107 0320 	add.w	r3, r7, #32
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002874:	1d3b      	adds	r3, r7, #4
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	605a      	str	r2, [r3, #4]
 800287c:	609a      	str	r2, [r3, #8]
 800287e:	60da      	str	r2, [r3, #12]
 8002880:	611a      	str	r2, [r3, #16]
 8002882:	615a      	str	r2, [r3, #20]
 8002884:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002886:	4b2e      	ldr	r3, [pc, #184]	; (8002940 <MX_TIM2_Init+0xdc>)
 8002888:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800288c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800288e:	4b2c      	ldr	r3, [pc, #176]	; (8002940 <MX_TIM2_Init+0xdc>)
 8002890:	2200      	movs	r2, #0
 8002892:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002894:	4b2a      	ldr	r3, [pc, #168]	; (8002940 <MX_TIM2_Init+0xdc>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 800289a:	4b29      	ldr	r3, [pc, #164]	; (8002940 <MX_TIM2_Init+0xdc>)
 800289c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028a2:	4b27      	ldr	r3, [pc, #156]	; (8002940 <MX_TIM2_Init+0xdc>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028a8:	4b25      	ldr	r3, [pc, #148]	; (8002940 <MX_TIM2_Init+0xdc>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80028ae:	4824      	ldr	r0, [pc, #144]	; (8002940 <MX_TIM2_Init+0xdc>)
 80028b0:	f004 f948 	bl	8006b44 <HAL_TIM_PWM_Init>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80028ba:	f7ff fef7 	bl	80026ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028be:	2300      	movs	r3, #0
 80028c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028c6:	f107 0320 	add.w	r3, r7, #32
 80028ca:	4619      	mov	r1, r3
 80028cc:	481c      	ldr	r0, [pc, #112]	; (8002940 <MX_TIM2_Init+0xdc>)
 80028ce:	f004 ff9b 	bl	8007808 <HAL_TIMEx_MasterConfigSynchronization>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80028d8:	f7ff fee8 	bl	80026ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028dc:	2360      	movs	r3, #96	; 0x60
 80028de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80028e8:	2304      	movs	r3, #4
 80028ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028ec:	1d3b      	adds	r3, r7, #4
 80028ee:	2200      	movs	r2, #0
 80028f0:	4619      	mov	r1, r3
 80028f2:	4813      	ldr	r0, [pc, #76]	; (8002940 <MX_TIM2_Init+0xdc>)
 80028f4:	f004 fc62 	bl	80071bc <HAL_TIM_PWM_ConfigChannel>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80028fe:	f7ff fed5 	bl	80026ac <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	2204      	movs	r2, #4
 800290a:	4619      	mov	r1, r3
 800290c:	480c      	ldr	r0, [pc, #48]	; (8002940 <MX_TIM2_Init+0xdc>)
 800290e:	f004 fc55 	bl	80071bc <HAL_TIM_PWM_ConfigChannel>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8002918:	f7ff fec8 	bl	80026ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800291c:	1d3b      	adds	r3, r7, #4
 800291e:	2208      	movs	r2, #8
 8002920:	4619      	mov	r1, r3
 8002922:	4807      	ldr	r0, [pc, #28]	; (8002940 <MX_TIM2_Init+0xdc>)
 8002924:	f004 fc4a 	bl	80071bc <HAL_TIM_PWM_ConfigChannel>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 800292e:	f7ff febd 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002932:	4803      	ldr	r0, [pc, #12]	; (8002940 <MX_TIM2_Init+0xdc>)
 8002934:	f000 f95e 	bl	8002bf4 <HAL_TIM_MspPostInit>

}
 8002938:	bf00      	nop
 800293a:	3728      	adds	r7, #40	; 0x28
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20000464 	.word	0x20000464

08002944 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08c      	sub	sp, #48	; 0x30
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800294a:	f107 030c 	add.w	r3, r7, #12
 800294e:	2224      	movs	r2, #36	; 0x24
 8002950:	2100      	movs	r1, #0
 8002952:	4618      	mov	r0, r3
 8002954:	f006 f8b8 	bl	8008ac8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002958:	1d3b      	adds	r3, r7, #4
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002960:	4b20      	ldr	r3, [pc, #128]	; (80029e4 <MX_TIM3_Init+0xa0>)
 8002962:	4a21      	ldr	r2, [pc, #132]	; (80029e8 <MX_TIM3_Init+0xa4>)
 8002964:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002966:	4b1f      	ldr	r3, [pc, #124]	; (80029e4 <MX_TIM3_Init+0xa0>)
 8002968:	2200      	movs	r2, #0
 800296a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800296c:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <MX_TIM3_Init+0xa0>)
 800296e:	2200      	movs	r2, #0
 8002970:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1199;
 8002972:	4b1c      	ldr	r3, [pc, #112]	; (80029e4 <MX_TIM3_Init+0xa0>)
 8002974:	f240 42af 	movw	r2, #1199	; 0x4af
 8002978:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800297a:	4b1a      	ldr	r3, [pc, #104]	; (80029e4 <MX_TIM3_Init+0xa0>)
 800297c:	2200      	movs	r2, #0
 800297e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002980:	4b18      	ldr	r3, [pc, #96]	; (80029e4 <MX_TIM3_Init+0xa0>)
 8002982:	2200      	movs	r2, #0
 8002984:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002986:	2301      	movs	r3, #1
 8002988:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800298e:	2301      	movs	r3, #1
 8002990:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002992:	2300      	movs	r3, #0
 8002994:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8002996:	2301      	movs	r3, #1
 8002998:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800299a:	2300      	movs	r3, #0
 800299c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800299e:	2301      	movs	r3, #1
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029a2:	2300      	movs	r3, #0
 80029a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 80029a6:	2301      	movs	r3, #1
 80029a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80029aa:	f107 030c 	add.w	r3, r7, #12
 80029ae:	4619      	mov	r1, r3
 80029b0:	480c      	ldr	r0, [pc, #48]	; (80029e4 <MX_TIM3_Init+0xa0>)
 80029b2:	f004 f9c7 	bl	8006d44 <HAL_TIM_Encoder_Init>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80029bc:	f7ff fe76 	bl	80026ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029c0:	2300      	movs	r3, #0
 80029c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029c8:	1d3b      	adds	r3, r7, #4
 80029ca:	4619      	mov	r1, r3
 80029cc:	4805      	ldr	r0, [pc, #20]	; (80029e4 <MX_TIM3_Init+0xa0>)
 80029ce:	f004 ff1b 	bl	8007808 <HAL_TIMEx_MasterConfigSynchronization>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80029d8:	f7ff fe68 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80029dc:	bf00      	nop
 80029de:	3730      	adds	r7, #48	; 0x30
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	2000041c 	.word	0x2000041c
 80029e8:	40000400 	.word	0x40000400

080029ec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08c      	sub	sp, #48	; 0x30
 80029f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029f2:	f107 030c 	add.w	r3, r7, #12
 80029f6:	2224      	movs	r2, #36	; 0x24
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f006 f864 	bl	8008ac8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a00:	1d3b      	adds	r3, r7, #4
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a08:	4b21      	ldr	r3, [pc, #132]	; (8002a90 <MX_TIM4_Init+0xa4>)
 8002a0a:	4a22      	ldr	r2, [pc, #136]	; (8002a94 <MX_TIM4_Init+0xa8>)
 8002a0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002a0e:	4b20      	ldr	r3, [pc, #128]	; (8002a90 <MX_TIM4_Init+0xa4>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a14:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <MX_TIM4_Init+0xa4>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1023;
 8002a1a:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <MX_TIM4_Init+0xa4>)
 8002a1c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002a20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002a22:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <MX_TIM4_Init+0xa4>)
 8002a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a28:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a2a:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <MX_TIM4_Init+0xa4>)
 8002a2c:	2280      	movs	r2, #128	; 0x80
 8002a2e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002a30:	2301      	movs	r3, #1
 8002a32:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002a34:	2302      	movs	r3, #2
 8002a36:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002a40:	230f      	movs	r3, #15
 8002a42:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002a44:	2302      	movs	r3, #2
 8002a46:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002a50:	230f      	movs	r3, #15
 8002a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002a54:	f107 030c 	add.w	r3, r7, #12
 8002a58:	4619      	mov	r1, r3
 8002a5a:	480d      	ldr	r0, [pc, #52]	; (8002a90 <MX_TIM4_Init+0xa4>)
 8002a5c:	f004 f972 	bl	8006d44 <HAL_TIM_Encoder_Init>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002a66:	f7ff fe21 	bl	80026ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a72:	1d3b      	adds	r3, r7, #4
 8002a74:	4619      	mov	r1, r3
 8002a76:	4806      	ldr	r0, [pc, #24]	; (8002a90 <MX_TIM4_Init+0xa4>)
 8002a78:	f004 fec6 	bl	8007808 <HAL_TIMEx_MasterConfigSynchronization>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002a82:	f7ff fe13 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a86:	bf00      	nop
 8002a88:	3730      	adds	r7, #48	; 0x30
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	200003d4 	.word	0x200003d4
 8002a94:	40000800 	.word	0x40000800

08002a98 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa8:	d10d      	bne.n	8002ac6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	4a08      	ldr	r2, [pc, #32]	; (8002ad4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002ac6:	bf00      	nop
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40023800 	.word	0x40023800

08002ad8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08c      	sub	sp, #48	; 0x30
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae0:	f107 031c 	add.w	r3, r7, #28
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a3a      	ldr	r2, [pc, #232]	; (8002be0 <HAL_TIM_Encoder_MspInit+0x108>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d134      	bne.n	8002b64 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	61bb      	str	r3, [r7, #24]
 8002afe:	4b39      	ldr	r3, [pc, #228]	; (8002be4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	4a38      	ldr	r2, [pc, #224]	; (8002be4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b04:	f043 0302 	orr.w	r3, r3, #2
 8002b08:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0a:	4b36      	ldr	r3, [pc, #216]	; (8002be4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	61bb      	str	r3, [r7, #24]
 8002b14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	4b32      	ldr	r3, [pc, #200]	; (8002be4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	4a31      	ldr	r2, [pc, #196]	; (8002be4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	6313      	str	r3, [r2, #48]	; 0x30
 8002b26:	4b2f      	ldr	r3, [pc, #188]	; (8002be4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b32:	23c0      	movs	r3, #192	; 0xc0
 8002b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b36:	2302      	movs	r3, #2
 8002b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b42:	2302      	movs	r3, #2
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b46:	f107 031c 	add.w	r3, r7, #28
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4826      	ldr	r0, [pc, #152]	; (8002be8 <HAL_TIM_Encoder_MspInit+0x110>)
 8002b4e:	f000 ff43 	bl	80039d8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b52:	2200      	movs	r2, #0
 8002b54:	2100      	movs	r1, #0
 8002b56:	201d      	movs	r0, #29
 8002b58:	f000 faeb 	bl	8003132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b5c:	201d      	movs	r0, #29
 8002b5e:	f000 fb04 	bl	800316a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002b62:	e038      	b.n	8002bd6 <HAL_TIM_Encoder_MspInit+0xfe>
  else if(tim_encoderHandle->Instance==TIM4)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a20      	ldr	r2, [pc, #128]	; (8002bec <HAL_TIM_Encoder_MspInit+0x114>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d133      	bne.n	8002bd6 <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	4b1c      	ldr	r3, [pc, #112]	; (8002be4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	4a1b      	ldr	r2, [pc, #108]	; (8002be4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b78:	f043 0304 	orr.w	r3, r3, #4
 8002b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b7e:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4a14      	ldr	r2, [pc, #80]	; (8002be4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b94:	f043 0302 	orr.w	r3, r3, #2
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ba6:	23c0      	movs	r3, #192	; 0xc0
 8002ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002baa:	2302      	movs	r3, #2
 8002bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bba:	f107 031c 	add.w	r3, r7, #28
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	480b      	ldr	r0, [pc, #44]	; (8002bf0 <HAL_TIM_Encoder_MspInit+0x118>)
 8002bc2:	f000 ff09 	bl	80039d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2100      	movs	r1, #0
 8002bca:	201e      	movs	r0, #30
 8002bcc:	f000 fab1 	bl	8003132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002bd0:	201e      	movs	r0, #30
 8002bd2:	f000 faca 	bl	800316a <HAL_NVIC_EnableIRQ>
}
 8002bd6:	bf00      	nop
 8002bd8:	3730      	adds	r7, #48	; 0x30
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40000400 	.word	0x40000400
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40020000 	.word	0x40020000
 8002bec:	40000800 	.word	0x40000800
 8002bf0:	40020400 	.word	0x40020400

08002bf4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08a      	sub	sp, #40	; 0x28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfc:	f107 0314 	add.w	r3, r7, #20
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c14:	d13c      	bne.n	8002c90 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	4b1f      	ldr	r3, [pc, #124]	; (8002c98 <HAL_TIM_MspPostInit+0xa4>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	4a1e      	ldr	r2, [pc, #120]	; (8002c98 <HAL_TIM_MspPostInit+0xa4>)
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	6313      	str	r3, [r2, #48]	; 0x30
 8002c26:	4b1c      	ldr	r3, [pc, #112]	; (8002c98 <HAL_TIM_MspPostInit+0xa4>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	4b18      	ldr	r3, [pc, #96]	; (8002c98 <HAL_TIM_MspPostInit+0xa4>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	4a17      	ldr	r2, [pc, #92]	; (8002c98 <HAL_TIM_MspPostInit+0xa4>)
 8002c3c:	f043 0302 	orr.w	r3, r3, #2
 8002c40:	6313      	str	r3, [r2, #48]	; 0x30
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <HAL_TIM_MspPostInit+0xa4>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c52:	2302      	movs	r3, #2
 8002c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c62:	f107 0314 	add.w	r3, r7, #20
 8002c66:	4619      	mov	r1, r3
 8002c68:	480c      	ldr	r0, [pc, #48]	; (8002c9c <HAL_TIM_MspPostInit+0xa8>)
 8002c6a:	f000 feb5 	bl	80039d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c74:	2302      	movs	r3, #2
 8002c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c80:	2301      	movs	r3, #1
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c84:	f107 0314 	add.w	r3, r7, #20
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4805      	ldr	r0, [pc, #20]	; (8002ca0 <HAL_TIM_MspPostInit+0xac>)
 8002c8c:	f000 fea4 	bl	80039d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c90:	bf00      	nop
 8002c92:	3728      	adds	r7, #40	; 0x28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40020000 	.word	0x40020000
 8002ca0:	40020400 	.word	0x40020400

08002ca4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ca8:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <MX_USART2_UART_Init+0x4c>)
 8002caa:	4a12      	ldr	r2, [pc, #72]	; (8002cf4 <MX_USART2_UART_Init+0x50>)
 8002cac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002cae:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <MX_USART2_UART_Init+0x4c>)
 8002cb0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002cb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cb6:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <MX_USART2_UART_Init+0x4c>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <MX_USART2_UART_Init+0x4c>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <MX_USART2_UART_Init+0x4c>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cc8:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <MX_USART2_UART_Init+0x4c>)
 8002cca:	220c      	movs	r2, #12
 8002ccc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cce:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <MX_USART2_UART_Init+0x4c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <MX_USART2_UART_Init+0x4c>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cda:	4805      	ldr	r0, [pc, #20]	; (8002cf0 <MX_USART2_UART_Init+0x4c>)
 8002cdc:	f004 fe16 	bl	800790c <HAL_UART_Init>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002ce6:	f7ff fce1 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000354 	.word	0x20000354
 8002cf4:	40004400 	.word	0x40004400

08002cf8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08a      	sub	sp, #40	; 0x28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a34      	ldr	r2, [pc, #208]	; (8002de8 <HAL_UART_MspInit+0xf0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d161      	bne.n	8002dde <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	4b33      	ldr	r3, [pc, #204]	; (8002dec <HAL_UART_MspInit+0xf4>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	4a32      	ldr	r2, [pc, #200]	; (8002dec <HAL_UART_MspInit+0xf4>)
 8002d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d28:	6413      	str	r3, [r2, #64]	; 0x40
 8002d2a:	4b30      	ldr	r3, [pc, #192]	; (8002dec <HAL_UART_MspInit+0xf4>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	4b2c      	ldr	r3, [pc, #176]	; (8002dec <HAL_UART_MspInit+0xf4>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	4a2b      	ldr	r2, [pc, #172]	; (8002dec <HAL_UART_MspInit+0xf4>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	6313      	str	r3, [r2, #48]	; 0x30
 8002d46:	4b29      	ldr	r3, [pc, #164]	; (8002dec <HAL_UART_MspInit+0xf4>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d52:	230c      	movs	r3, #12
 8002d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d56:	2302      	movs	r3, #2
 8002d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d62:	2307      	movs	r3, #7
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d66:	f107 0314 	add.w	r3, r7, #20
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4820      	ldr	r0, [pc, #128]	; (8002df0 <HAL_UART_MspInit+0xf8>)
 8002d6e:	f000 fe33 	bl	80039d8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002d72:	4b20      	ldr	r3, [pc, #128]	; (8002df4 <HAL_UART_MspInit+0xfc>)
 8002d74:	4a20      	ldr	r2, [pc, #128]	; (8002df8 <HAL_UART_MspInit+0x100>)
 8002d76:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002d78:	4b1e      	ldr	r3, [pc, #120]	; (8002df4 <HAL_UART_MspInit+0xfc>)
 8002d7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d7e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d80:	4b1c      	ldr	r3, [pc, #112]	; (8002df4 <HAL_UART_MspInit+0xfc>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d86:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <HAL_UART_MspInit+0xfc>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d8c:	4b19      	ldr	r3, [pc, #100]	; (8002df4 <HAL_UART_MspInit+0xfc>)
 8002d8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d92:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d94:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <HAL_UART_MspInit+0xfc>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d9a:	4b16      	ldr	r3, [pc, #88]	; (8002df4 <HAL_UART_MspInit+0xfc>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002da0:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <HAL_UART_MspInit+0xfc>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002da6:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <HAL_UART_MspInit+0xfc>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dac:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <HAL_UART_MspInit+0xfc>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002db2:	4810      	ldr	r0, [pc, #64]	; (8002df4 <HAL_UART_MspInit+0xfc>)
 8002db4:	f000 f9f4 	bl	80031a0 <HAL_DMA_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002dbe:	f7ff fc75 	bl	80026ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a0b      	ldr	r2, [pc, #44]	; (8002df4 <HAL_UART_MspInit+0xfc>)
 8002dc6:	639a      	str	r2, [r3, #56]	; 0x38
 8002dc8:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <HAL_UART_MspInit+0xfc>)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	2026      	movs	r0, #38	; 0x26
 8002dd4:	f000 f9ad 	bl	8003132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002dd8:	2026      	movs	r0, #38	; 0x26
 8002dda:	f000 f9c6 	bl	800316a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002dde:	bf00      	nop
 8002de0:	3728      	adds	r7, #40	; 0x28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40004400 	.word	0x40004400
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40020000 	.word	0x40020000
 8002df4:	20000268 	.word	0x20000268
 8002df8:	40026088 	.word	0x40026088

08002dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e00:	480d      	ldr	r0, [pc, #52]	; (8002e38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e02:	490e      	ldr	r1, [pc, #56]	; (8002e3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e04:	4a0e      	ldr	r2, [pc, #56]	; (8002e40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e08:	e002      	b.n	8002e10 <LoopCopyDataInit>

08002e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e0e:	3304      	adds	r3, #4

08002e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e14:	d3f9      	bcc.n	8002e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e16:	4a0b      	ldr	r2, [pc, #44]	; (8002e44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e18:	4c0b      	ldr	r4, [pc, #44]	; (8002e48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e1c:	e001      	b.n	8002e22 <LoopFillZerobss>

08002e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e20:	3204      	adds	r2, #4

08002e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e24:	d3fb      	bcc.n	8002e1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e26:	f7ff fd0b 	bl	8002840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e2a:	f005 fdf9 	bl	8008a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e2e:	f7ff fb71 	bl	8002514 <main>
  bx  lr    
 8002e32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e3c:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8002e40:	080091cc 	.word	0x080091cc
  ldr r2, =_sbss
 8002e44:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8002e48:	200004c0 	.word	0x200004c0

08002e4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e4c:	e7fe      	b.n	8002e4c <ADC_IRQHandler>
	...

08002e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e54:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <HAL_Init+0x40>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a0d      	ldr	r2, [pc, #52]	; (8002e90 <HAL_Init+0x40>)
 8002e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <HAL_Init+0x40>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <HAL_Init+0x40>)
 8002e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e6c:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <HAL_Init+0x40>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a07      	ldr	r2, [pc, #28]	; (8002e90 <HAL_Init+0x40>)
 8002e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e78:	2003      	movs	r0, #3
 8002e7a:	f000 f94f 	bl	800311c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e7e:	2000      	movs	r0, #0
 8002e80:	f000 f808 	bl	8002e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e84:	f7ff fc18 	bl	80026b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40023c00 	.word	0x40023c00

08002e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e9c:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <HAL_InitTick+0x54>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4b12      	ldr	r3, [pc, #72]	; (8002eec <HAL_InitTick+0x58>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 f967 	bl	8003186 <HAL_SYSTICK_Config>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e00e      	b.n	8002ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b0f      	cmp	r3, #15
 8002ec6:	d80a      	bhi.n	8002ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed0:	f000 f92f 	bl	8003132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ed4:	4a06      	ldr	r2, [pc, #24]	; (8002ef0 <HAL_InitTick+0x5c>)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e000      	b.n	8002ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	200000bc 	.word	0x200000bc
 8002eec:	200000c4 	.word	0x200000c4
 8002ef0:	200000c0 	.word	0x200000c0

08002ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ef8:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <HAL_IncTick+0x20>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_IncTick+0x24>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4413      	add	r3, r2
 8002f04:	4a04      	ldr	r2, [pc, #16]	; (8002f18 <HAL_IncTick+0x24>)
 8002f06:	6013      	str	r3, [r2, #0]
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	200000c4 	.word	0x200000c4
 8002f18:	200004ac 	.word	0x200004ac

08002f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <HAL_GetTick+0x14>)
 8002f22:	681b      	ldr	r3, [r3, #0]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	200004ac 	.word	0x200004ac

08002f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f3c:	f7ff ffee 	bl	8002f1c <HAL_GetTick>
 8002f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4c:	d005      	beq.n	8002f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <HAL_Delay+0x44>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	461a      	mov	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4413      	add	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f5a:	bf00      	nop
 8002f5c:	f7ff ffde 	bl	8002f1c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d8f7      	bhi.n	8002f5c <HAL_Delay+0x28>
  {
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	200000c4 	.word	0x200000c4

08002f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f98:	4013      	ands	r3, r2
 8002f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fae:	4a04      	ldr	r2, [pc, #16]	; (8002fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	60d3      	str	r3, [r2, #12]
}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc8:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <__NVIC_GetPriorityGrouping+0x18>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	0a1b      	lsrs	r3, r3, #8
 8002fce:	f003 0307 	and.w	r3, r3, #7
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	db0b      	blt.n	800300a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	f003 021f 	and.w	r2, r3, #31
 8002ff8:	4907      	ldr	r1, [pc, #28]	; (8003018 <__NVIC_EnableIRQ+0x38>)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	2001      	movs	r0, #1
 8003002:	fa00 f202 	lsl.w	r2, r0, r2
 8003006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	e000e100 	.word	0xe000e100

0800301c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	6039      	str	r1, [r7, #0]
 8003026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302c:	2b00      	cmp	r3, #0
 800302e:	db0a      	blt.n	8003046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	b2da      	uxtb	r2, r3
 8003034:	490c      	ldr	r1, [pc, #48]	; (8003068 <__NVIC_SetPriority+0x4c>)
 8003036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303a:	0112      	lsls	r2, r2, #4
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	440b      	add	r3, r1
 8003040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003044:	e00a      	b.n	800305c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	b2da      	uxtb	r2, r3
 800304a:	4908      	ldr	r1, [pc, #32]	; (800306c <__NVIC_SetPriority+0x50>)
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	3b04      	subs	r3, #4
 8003054:	0112      	lsls	r2, r2, #4
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	440b      	add	r3, r1
 800305a:	761a      	strb	r2, [r3, #24]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	e000e100 	.word	0xe000e100
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003070:	b480      	push	{r7}
 8003072:	b089      	sub	sp, #36	; 0x24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f1c3 0307 	rsb	r3, r3, #7
 800308a:	2b04      	cmp	r3, #4
 800308c:	bf28      	it	cs
 800308e:	2304      	movcs	r3, #4
 8003090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3304      	adds	r3, #4
 8003096:	2b06      	cmp	r3, #6
 8003098:	d902      	bls.n	80030a0 <NVIC_EncodePriority+0x30>
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3b03      	subs	r3, #3
 800309e:	e000      	b.n	80030a2 <NVIC_EncodePriority+0x32>
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a4:	f04f 32ff 	mov.w	r2, #4294967295
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43da      	mvns	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	401a      	ands	r2, r3
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b8:	f04f 31ff 	mov.w	r1, #4294967295
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	fa01 f303 	lsl.w	r3, r1, r3
 80030c2:	43d9      	mvns	r1, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c8:	4313      	orrs	r3, r2
         );
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3724      	adds	r7, #36	; 0x24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030e8:	d301      	bcc.n	80030ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ea:	2301      	movs	r3, #1
 80030ec:	e00f      	b.n	800310e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ee:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <SysTick_Config+0x40>)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030f6:	210f      	movs	r1, #15
 80030f8:	f04f 30ff 	mov.w	r0, #4294967295
 80030fc:	f7ff ff8e 	bl	800301c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <SysTick_Config+0x40>)
 8003102:	2200      	movs	r2, #0
 8003104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003106:	4b04      	ldr	r3, [pc, #16]	; (8003118 <SysTick_Config+0x40>)
 8003108:	2207      	movs	r2, #7
 800310a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	e000e010 	.word	0xe000e010

0800311c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff ff29 	bl	8002f7c <__NVIC_SetPriorityGrouping>
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003132:	b580      	push	{r7, lr}
 8003134:	b086      	sub	sp, #24
 8003136:	af00      	add	r7, sp, #0
 8003138:	4603      	mov	r3, r0
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003144:	f7ff ff3e 	bl	8002fc4 <__NVIC_GetPriorityGrouping>
 8003148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	6978      	ldr	r0, [r7, #20]
 8003150:	f7ff ff8e 	bl	8003070 <NVIC_EncodePriority>
 8003154:	4602      	mov	r2, r0
 8003156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800315a:	4611      	mov	r1, r2
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff ff5d 	bl	800301c <__NVIC_SetPriority>
}
 8003162:	bf00      	nop
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b082      	sub	sp, #8
 800316e:	af00      	add	r7, sp, #0
 8003170:	4603      	mov	r3, r0
 8003172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff ff31 	bl	8002fe0 <__NVIC_EnableIRQ>
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff ffa2 	bl	80030d8 <SysTick_Config>
 8003194:	4603      	mov	r3, r0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031ac:	f7ff feb6 	bl	8002f1c <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e099      	b.n	80032f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0201 	bic.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031dc:	e00f      	b.n	80031fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031de:	f7ff fe9d 	bl	8002f1c <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b05      	cmp	r3, #5
 80031ea:	d908      	bls.n	80031fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2220      	movs	r2, #32
 80031f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2203      	movs	r2, #3
 80031f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e078      	b.n	80032f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1e8      	bne.n	80031de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	4b38      	ldr	r3, [pc, #224]	; (80032f8 <HAL_DMA_Init+0x158>)
 8003218:	4013      	ands	r3, r2
 800321a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800322a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003236:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003242:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4313      	orrs	r3, r2
 800324e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	2b04      	cmp	r3, #4
 8003256:	d107      	bne.n	8003268 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	4313      	orrs	r3, r2
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	4313      	orrs	r3, r2
 8003266:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f023 0307 	bic.w	r3, r3, #7
 800327e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	4313      	orrs	r3, r2
 8003288:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	2b04      	cmp	r3, #4
 8003290:	d117      	bne.n	80032c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	4313      	orrs	r3, r2
 800329a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00e      	beq.n	80032c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 fb1b 	bl	80038e0 <DMA_CheckFifoParam>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2240      	movs	r2, #64	; 0x40
 80032b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032be:	2301      	movs	r3, #1
 80032c0:	e016      	b.n	80032f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fad2 	bl	8003874 <DMA_CalcBaseAndBitshift>
 80032d0:	4603      	mov	r3, r0
 80032d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d8:	223f      	movs	r2, #63	; 0x3f
 80032da:	409a      	lsls	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	f010803f 	.word	0xf010803f

080032fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
 8003308:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003312:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_DMA_Start_IT+0x26>
 800331e:	2302      	movs	r3, #2
 8003320:	e040      	b.n	80033a4 <HAL_DMA_Start_IT+0xa8>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b01      	cmp	r3, #1
 8003334:	d12f      	bne.n	8003396 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2202      	movs	r2, #2
 800333a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	68b9      	ldr	r1, [r7, #8]
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 fa64 	bl	8003818 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003354:	223f      	movs	r2, #63	; 0x3f
 8003356:	409a      	lsls	r2, r3
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0216 	orr.w	r2, r2, #22
 800336a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d007      	beq.n	8003384 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0208 	orr.w	r2, r2, #8
 8003382:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0201 	orr.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	e005      	b.n	80033a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800339e:	2302      	movs	r3, #2
 80033a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033ba:	f7ff fdaf 	bl	8002f1c <HAL_GetTick>
 80033be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d008      	beq.n	80033de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2280      	movs	r2, #128	; 0x80
 80033d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e052      	b.n	8003484 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0216 	bic.w	r2, r2, #22
 80033ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695a      	ldr	r2, [r3, #20]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	2b00      	cmp	r3, #0
 8003404:	d103      	bne.n	800340e <HAL_DMA_Abort+0x62>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800340a:	2b00      	cmp	r3, #0
 800340c:	d007      	beq.n	800341e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0208 	bic.w	r2, r2, #8
 800341c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0201 	bic.w	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800342e:	e013      	b.n	8003458 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003430:	f7ff fd74 	bl	8002f1c <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b05      	cmp	r3, #5
 800343c:	d90c      	bls.n	8003458 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2220      	movs	r2, #32
 8003442:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2203      	movs	r2, #3
 8003448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e015      	b.n	8003484 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1e4      	bne.n	8003430 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346a:	223f      	movs	r2, #63	; 0x3f
 800346c:	409a      	lsls	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d004      	beq.n	80034aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2280      	movs	r2, #128	; 0x80
 80034a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e00c      	b.n	80034c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2205      	movs	r2, #5
 80034ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0201 	bic.w	r2, r2, #1
 80034c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034dc:	4b92      	ldr	r3, [pc, #584]	; (8003728 <HAL_DMA_IRQHandler+0x258>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a92      	ldr	r2, [pc, #584]	; (800372c <HAL_DMA_IRQHandler+0x25c>)
 80034e2:	fba2 2303 	umull	r2, r3, r2, r3
 80034e6:	0a9b      	lsrs	r3, r3, #10
 80034e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fa:	2208      	movs	r2, #8
 80034fc:	409a      	lsls	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4013      	ands	r3, r2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d01a      	beq.n	800353c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d013      	beq.n	800353c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0204 	bic.w	r2, r2, #4
 8003522:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003528:	2208      	movs	r2, #8
 800352a:	409a      	lsls	r2, r3
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003534:	f043 0201 	orr.w	r2, r3, #1
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003540:	2201      	movs	r2, #1
 8003542:	409a      	lsls	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4013      	ands	r3, r2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d012      	beq.n	8003572 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00b      	beq.n	8003572 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355e:	2201      	movs	r2, #1
 8003560:	409a      	lsls	r2, r3
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356a:	f043 0202 	orr.w	r2, r3, #2
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003576:	2204      	movs	r2, #4
 8003578:	409a      	lsls	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d012      	beq.n	80035a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00b      	beq.n	80035a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003594:	2204      	movs	r2, #4
 8003596:	409a      	lsls	r2, r3
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a0:	f043 0204 	orr.w	r2, r3, #4
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ac:	2210      	movs	r2, #16
 80035ae:	409a      	lsls	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d043      	beq.n	8003640 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d03c      	beq.n	8003640 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ca:	2210      	movs	r2, #16
 80035cc:	409a      	lsls	r2, r3
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d018      	beq.n	8003612 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d108      	bne.n	8003600 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d024      	beq.n	8003640 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	4798      	blx	r3
 80035fe:	e01f      	b.n	8003640 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003604:	2b00      	cmp	r3, #0
 8003606:	d01b      	beq.n	8003640 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	4798      	blx	r3
 8003610:	e016      	b.n	8003640 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361c:	2b00      	cmp	r3, #0
 800361e:	d107      	bne.n	8003630 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0208 	bic.w	r2, r2, #8
 800362e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003644:	2220      	movs	r2, #32
 8003646:	409a      	lsls	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4013      	ands	r3, r2
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 808e 	beq.w	800376e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0310 	and.w	r3, r3, #16
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 8086 	beq.w	800376e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003666:	2220      	movs	r2, #32
 8003668:	409a      	lsls	r2, r3
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b05      	cmp	r3, #5
 8003678:	d136      	bne.n	80036e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0216 	bic.w	r2, r2, #22
 8003688:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695a      	ldr	r2, [r3, #20]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003698:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d103      	bne.n	80036aa <HAL_DMA_IRQHandler+0x1da>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d007      	beq.n	80036ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0208 	bic.w	r2, r2, #8
 80036b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036be:	223f      	movs	r2, #63	; 0x3f
 80036c0:	409a      	lsls	r2, r3
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d07d      	beq.n	80037da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	4798      	blx	r3
        }
        return;
 80036e6:	e078      	b.n	80037da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d01c      	beq.n	8003730 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d108      	bne.n	8003716 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003708:	2b00      	cmp	r3, #0
 800370a:	d030      	beq.n	800376e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	4798      	blx	r3
 8003714:	e02b      	b.n	800376e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371a:	2b00      	cmp	r3, #0
 800371c:	d027      	beq.n	800376e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	4798      	blx	r3
 8003726:	e022      	b.n	800376e <HAL_DMA_IRQHandler+0x29e>
 8003728:	200000bc 	.word	0x200000bc
 800372c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10f      	bne.n	800375e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0210 	bic.w	r2, r2, #16
 800374c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003772:	2b00      	cmp	r3, #0
 8003774:	d032      	beq.n	80037dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d022      	beq.n	80037c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2205      	movs	r2, #5
 8003786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0201 	bic.w	r2, r2, #1
 8003798:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	3301      	adds	r3, #1
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d307      	bcc.n	80037b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1f2      	bne.n	800379a <HAL_DMA_IRQHandler+0x2ca>
 80037b4:	e000      	b.n	80037b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80037b6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	4798      	blx	r3
 80037d8:	e000      	b.n	80037dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80037da:	bf00      	nop
    }
  }
}
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop

080037e4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037f2:	b2db      	uxtb	r3, r3
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800380c:	4618      	mov	r0, r3
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003834:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b40      	cmp	r3, #64	; 0x40
 8003844:	d108      	bne.n	8003858 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003856:	e007      	b.n	8003868 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	60da      	str	r2, [r3, #12]
}
 8003868:	bf00      	nop
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	b2db      	uxtb	r3, r3
 8003882:	3b10      	subs	r3, #16
 8003884:	4a14      	ldr	r2, [pc, #80]	; (80038d8 <DMA_CalcBaseAndBitshift+0x64>)
 8003886:	fba2 2303 	umull	r2, r3, r2, r3
 800388a:	091b      	lsrs	r3, r3, #4
 800388c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800388e:	4a13      	ldr	r2, [pc, #76]	; (80038dc <DMA_CalcBaseAndBitshift+0x68>)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4413      	add	r3, r2
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d909      	bls.n	80038b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	1d1a      	adds	r2, r3, #4
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	659a      	str	r2, [r3, #88]	; 0x58
 80038b4:	e007      	b.n	80038c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038be:	f023 0303 	bic.w	r3, r3, #3
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	aaaaaaab 	.word	0xaaaaaaab
 80038dc:	0800918c 	.word	0x0800918c

080038e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d11f      	bne.n	800393a <DMA_CheckFifoParam+0x5a>
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d856      	bhi.n	80039ae <DMA_CheckFifoParam+0xce>
 8003900:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <DMA_CheckFifoParam+0x28>)
 8003902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003906:	bf00      	nop
 8003908:	08003919 	.word	0x08003919
 800390c:	0800392b 	.word	0x0800392b
 8003910:	08003919 	.word	0x08003919
 8003914:	080039af 	.word	0x080039af
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d046      	beq.n	80039b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003928:	e043      	b.n	80039b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003932:	d140      	bne.n	80039b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003938:	e03d      	b.n	80039b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003942:	d121      	bne.n	8003988 <DMA_CheckFifoParam+0xa8>
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b03      	cmp	r3, #3
 8003948:	d837      	bhi.n	80039ba <DMA_CheckFifoParam+0xda>
 800394a:	a201      	add	r2, pc, #4	; (adr r2, 8003950 <DMA_CheckFifoParam+0x70>)
 800394c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003950:	08003961 	.word	0x08003961
 8003954:	08003967 	.word	0x08003967
 8003958:	08003961 	.word	0x08003961
 800395c:	08003979 	.word	0x08003979
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
      break;
 8003964:	e030      	b.n	80039c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d025      	beq.n	80039be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003976:	e022      	b.n	80039be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003980:	d11f      	bne.n	80039c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003986:	e01c      	b.n	80039c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d903      	bls.n	8003996 <DMA_CheckFifoParam+0xb6>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b03      	cmp	r3, #3
 8003992:	d003      	beq.n	800399c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003994:	e018      	b.n	80039c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	73fb      	strb	r3, [r7, #15]
      break;
 800399a:	e015      	b.n	80039c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00e      	beq.n	80039c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	73fb      	strb	r3, [r7, #15]
      break;
 80039ac:	e00b      	b.n	80039c6 <DMA_CheckFifoParam+0xe6>
      break;
 80039ae:	bf00      	nop
 80039b0:	e00a      	b.n	80039c8 <DMA_CheckFifoParam+0xe8>
      break;
 80039b2:	bf00      	nop
 80039b4:	e008      	b.n	80039c8 <DMA_CheckFifoParam+0xe8>
      break;
 80039b6:	bf00      	nop
 80039b8:	e006      	b.n	80039c8 <DMA_CheckFifoParam+0xe8>
      break;
 80039ba:	bf00      	nop
 80039bc:	e004      	b.n	80039c8 <DMA_CheckFifoParam+0xe8>
      break;
 80039be:	bf00      	nop
 80039c0:	e002      	b.n	80039c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80039c2:	bf00      	nop
 80039c4:	e000      	b.n	80039c8 <DMA_CheckFifoParam+0xe8>
      break;
 80039c6:	bf00      	nop
    }
  } 
  
  return status; 
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop

080039d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039d8:	b480      	push	{r7}
 80039da:	b089      	sub	sp, #36	; 0x24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ee:	2300      	movs	r3, #0
 80039f0:	61fb      	str	r3, [r7, #28]
 80039f2:	e159      	b.n	8003ca8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039f4:	2201      	movs	r2, #1
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4013      	ands	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	f040 8148 	bne.w	8003ca2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d005      	beq.n	8003a2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d130      	bne.n	8003a8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	2203      	movs	r2, #3
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a60:	2201      	movs	r2, #1
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	091b      	lsrs	r3, r3, #4
 8003a76:	f003 0201 	and.w	r2, r3, #1
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 0303 	and.w	r3, r3, #3
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d017      	beq.n	8003ac8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	2203      	movs	r2, #3
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4013      	ands	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d123      	bne.n	8003b1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	08da      	lsrs	r2, r3, #3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3208      	adds	r2, #8
 8003adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	220f      	movs	r2, #15
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	43db      	mvns	r3, r3
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	4013      	ands	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	08da      	lsrs	r2, r3, #3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3208      	adds	r2, #8
 8003b16:	69b9      	ldr	r1, [r7, #24]
 8003b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	2203      	movs	r2, #3
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4013      	ands	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f003 0203 	and.w	r2, r3, #3
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80a2 	beq.w	8003ca2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	4b57      	ldr	r3, [pc, #348]	; (8003cc0 <HAL_GPIO_Init+0x2e8>)
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	4a56      	ldr	r2, [pc, #344]	; (8003cc0 <HAL_GPIO_Init+0x2e8>)
 8003b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b6e:	4b54      	ldr	r3, [pc, #336]	; (8003cc0 <HAL_GPIO_Init+0x2e8>)
 8003b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b7a:	4a52      	ldr	r2, [pc, #328]	; (8003cc4 <HAL_GPIO_Init+0x2ec>)
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	089b      	lsrs	r3, r3, #2
 8003b80:	3302      	adds	r3, #2
 8003b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	220f      	movs	r2, #15
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43db      	mvns	r3, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a49      	ldr	r2, [pc, #292]	; (8003cc8 <HAL_GPIO_Init+0x2f0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d019      	beq.n	8003bda <HAL_GPIO_Init+0x202>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a48      	ldr	r2, [pc, #288]	; (8003ccc <HAL_GPIO_Init+0x2f4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d013      	beq.n	8003bd6 <HAL_GPIO_Init+0x1fe>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a47      	ldr	r2, [pc, #284]	; (8003cd0 <HAL_GPIO_Init+0x2f8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00d      	beq.n	8003bd2 <HAL_GPIO_Init+0x1fa>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a46      	ldr	r2, [pc, #280]	; (8003cd4 <HAL_GPIO_Init+0x2fc>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d007      	beq.n	8003bce <HAL_GPIO_Init+0x1f6>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a45      	ldr	r2, [pc, #276]	; (8003cd8 <HAL_GPIO_Init+0x300>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d101      	bne.n	8003bca <HAL_GPIO_Init+0x1f2>
 8003bc6:	2304      	movs	r3, #4
 8003bc8:	e008      	b.n	8003bdc <HAL_GPIO_Init+0x204>
 8003bca:	2307      	movs	r3, #7
 8003bcc:	e006      	b.n	8003bdc <HAL_GPIO_Init+0x204>
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e004      	b.n	8003bdc <HAL_GPIO_Init+0x204>
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	e002      	b.n	8003bdc <HAL_GPIO_Init+0x204>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <HAL_GPIO_Init+0x204>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	69fa      	ldr	r2, [r7, #28]
 8003bde:	f002 0203 	and.w	r2, r2, #3
 8003be2:	0092      	lsls	r2, r2, #2
 8003be4:	4093      	lsls	r3, r2
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bec:	4935      	ldr	r1, [pc, #212]	; (8003cc4 <HAL_GPIO_Init+0x2ec>)
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	089b      	lsrs	r3, r3, #2
 8003bf2:	3302      	adds	r3, #2
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bfa:	4b38      	ldr	r3, [pc, #224]	; (8003cdc <HAL_GPIO_Init+0x304>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	43db      	mvns	r3, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4013      	ands	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c1e:	4a2f      	ldr	r2, [pc, #188]	; (8003cdc <HAL_GPIO_Init+0x304>)
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c24:	4b2d      	ldr	r3, [pc, #180]	; (8003cdc <HAL_GPIO_Init+0x304>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4013      	ands	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c48:	4a24      	ldr	r2, [pc, #144]	; (8003cdc <HAL_GPIO_Init+0x304>)
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c4e:	4b23      	ldr	r3, [pc, #140]	; (8003cdc <HAL_GPIO_Init+0x304>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	43db      	mvns	r3, r3
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c72:	4a1a      	ldr	r2, [pc, #104]	; (8003cdc <HAL_GPIO_Init+0x304>)
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c78:	4b18      	ldr	r3, [pc, #96]	; (8003cdc <HAL_GPIO_Init+0x304>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	43db      	mvns	r3, r3
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	4013      	ands	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c9c:	4a0f      	ldr	r2, [pc, #60]	; (8003cdc <HAL_GPIO_Init+0x304>)
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	61fb      	str	r3, [r7, #28]
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	2b0f      	cmp	r3, #15
 8003cac:	f67f aea2 	bls.w	80039f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cb0:	bf00      	nop
 8003cb2:	bf00      	nop
 8003cb4:	3724      	adds	r7, #36	; 0x24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	40013800 	.word	0x40013800
 8003cc8:	40020000 	.word	0x40020000
 8003ccc:	40020400 	.word	0x40020400
 8003cd0:	40020800 	.word	0x40020800
 8003cd4:	40020c00 	.word	0x40020c00
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	40013c00 	.word	0x40013c00

08003ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	807b      	strh	r3, [r7, #2]
 8003cec:	4613      	mov	r3, r2
 8003cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cf0:	787b      	ldrb	r3, [r7, #1]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cf6:	887a      	ldrh	r2, [r7, #2]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cfc:	e003      	b.n	8003d06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cfe:	887b      	ldrh	r3, [r7, #2]
 8003d00:	041a      	lsls	r2, r3, #16
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	619a      	str	r2, [r3, #24]
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b085      	sub	sp, #20
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d24:	887a      	ldrh	r2, [r7, #2]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	041a      	lsls	r2, r3, #16
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	43d9      	mvns	r1, r3
 8003d30:	887b      	ldrh	r3, [r7, #2]
 8003d32:	400b      	ands	r3, r1
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	619a      	str	r2, [r3, #24]
}
 8003d3a:	bf00      	nop
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e12b      	b.n	8003fb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fd ff10 	bl	8001b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2224      	movs	r2, #36	; 0x24
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0201 	bic.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003daa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003dac:	f002 fea2 	bl	8006af4 <HAL_RCC_GetPCLK1Freq>
 8003db0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	4a81      	ldr	r2, [pc, #516]	; (8003fbc <HAL_I2C_Init+0x274>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d807      	bhi.n	8003dcc <HAL_I2C_Init+0x84>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4a80      	ldr	r2, [pc, #512]	; (8003fc0 <HAL_I2C_Init+0x278>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	bf94      	ite	ls
 8003dc4:	2301      	movls	r3, #1
 8003dc6:	2300      	movhi	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	e006      	b.n	8003dda <HAL_I2C_Init+0x92>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4a7d      	ldr	r2, [pc, #500]	; (8003fc4 <HAL_I2C_Init+0x27c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	bf94      	ite	ls
 8003dd4:	2301      	movls	r3, #1
 8003dd6:	2300      	movhi	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e0e7      	b.n	8003fb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4a78      	ldr	r2, [pc, #480]	; (8003fc8 <HAL_I2C_Init+0x280>)
 8003de6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dea:	0c9b      	lsrs	r3, r3, #18
 8003dec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	4a6a      	ldr	r2, [pc, #424]	; (8003fbc <HAL_I2C_Init+0x274>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d802      	bhi.n	8003e1c <HAL_I2C_Init+0xd4>
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	e009      	b.n	8003e30 <HAL_I2C_Init+0xe8>
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e22:	fb02 f303 	mul.w	r3, r2, r3
 8003e26:	4a69      	ldr	r2, [pc, #420]	; (8003fcc <HAL_I2C_Init+0x284>)
 8003e28:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2c:	099b      	lsrs	r3, r3, #6
 8003e2e:	3301      	adds	r3, #1
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	430b      	orrs	r3, r1
 8003e36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	495c      	ldr	r1, [pc, #368]	; (8003fbc <HAL_I2C_Init+0x274>)
 8003e4c:	428b      	cmp	r3, r1
 8003e4e:	d819      	bhi.n	8003e84 <HAL_I2C_Init+0x13c>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	1e59      	subs	r1, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e5e:	1c59      	adds	r1, r3, #1
 8003e60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e64:	400b      	ands	r3, r1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_I2C_Init+0x138>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	1e59      	subs	r1, r3, #1
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e78:	3301      	adds	r3, #1
 8003e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e7e:	e051      	b.n	8003f24 <HAL_I2C_Init+0x1dc>
 8003e80:	2304      	movs	r3, #4
 8003e82:	e04f      	b.n	8003f24 <HAL_I2C_Init+0x1dc>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d111      	bne.n	8003eb0 <HAL_I2C_Init+0x168>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	1e58      	subs	r0, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6859      	ldr	r1, [r3, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	440b      	add	r3, r1
 8003e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	bf0c      	ite	eq
 8003ea8:	2301      	moveq	r3, #1
 8003eaa:	2300      	movne	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	e012      	b.n	8003ed6 <HAL_I2C_Init+0x18e>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	1e58      	subs	r0, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6859      	ldr	r1, [r3, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	0099      	lsls	r1, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	bf0c      	ite	eq
 8003ed0:	2301      	moveq	r3, #1
 8003ed2:	2300      	movne	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_I2C_Init+0x196>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e022      	b.n	8003f24 <HAL_I2C_Init+0x1dc>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10e      	bne.n	8003f04 <HAL_I2C_Init+0x1bc>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	1e58      	subs	r0, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6859      	ldr	r1, [r3, #4]
 8003eee:	460b      	mov	r3, r1
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	440b      	add	r3, r1
 8003ef4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef8:	3301      	adds	r3, #1
 8003efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f02:	e00f      	b.n	8003f24 <HAL_I2C_Init+0x1dc>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	1e58      	subs	r0, r3, #1
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6859      	ldr	r1, [r3, #4]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	0099      	lsls	r1, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	6809      	ldr	r1, [r1, #0]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69da      	ldr	r2, [r3, #28]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6911      	ldr	r1, [r2, #16]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	68d2      	ldr	r2, [r2, #12]
 8003f5e:	4311      	orrs	r1, r2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	430b      	orrs	r3, r1
 8003f66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	000186a0 	.word	0x000186a0
 8003fc0:	001e847f 	.word	0x001e847f
 8003fc4:	003d08ff 	.word	0x003d08ff
 8003fc8:	431bde83 	.word	0x431bde83
 8003fcc:	10624dd3 	.word	0x10624dd3

08003fd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	4608      	mov	r0, r1
 8003fda:	4611      	mov	r1, r2
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4603      	mov	r3, r0
 8003fe0:	817b      	strh	r3, [r7, #10]
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	813b      	strh	r3, [r7, #8]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fea:	f7fe ff97 	bl	8002f1c <HAL_GetTick>
 8003fee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	f040 80d9 	bne.w	80041b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	2319      	movs	r3, #25
 8004004:	2201      	movs	r2, #1
 8004006:	496d      	ldr	r1, [pc, #436]	; (80041bc <HAL_I2C_Mem_Write+0x1ec>)
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f001 ff53 	bl	8005eb4 <I2C_WaitOnFlagUntilTimeout>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004014:	2302      	movs	r3, #2
 8004016:	e0cc      	b.n	80041b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800401e:	2b01      	cmp	r3, #1
 8004020:	d101      	bne.n	8004026 <HAL_I2C_Mem_Write+0x56>
 8004022:	2302      	movs	r3, #2
 8004024:	e0c5      	b.n	80041b2 <HAL_I2C_Mem_Write+0x1e2>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b01      	cmp	r3, #1
 800403a:	d007      	beq.n	800404c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800405a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2221      	movs	r2, #33	; 0x21
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2240      	movs	r2, #64	; 0x40
 8004068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a3a      	ldr	r2, [r7, #32]
 8004076:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800407c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4a4d      	ldr	r2, [pc, #308]	; (80041c0 <HAL_I2C_Mem_Write+0x1f0>)
 800408c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800408e:	88f8      	ldrh	r0, [r7, #6]
 8004090:	893a      	ldrh	r2, [r7, #8]
 8004092:	8979      	ldrh	r1, [r7, #10]
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	9301      	str	r3, [sp, #4]
 8004098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	4603      	mov	r3, r0
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f001 fcb8 	bl	8005a14 <I2C_RequestMemoryWrite>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d052      	beq.n	8004150 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e081      	b.n	80041b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f001 ffd4 	bl	8006060 <I2C_WaitOnTXEFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00d      	beq.n	80040da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d107      	bne.n	80040d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e06b      	b.n	80041b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	781a      	ldrb	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b04      	cmp	r3, #4
 8004116:	d11b      	bne.n	8004150 <HAL_I2C_Mem_Write+0x180>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411c:	2b00      	cmp	r3, #0
 800411e:	d017      	beq.n	8004150 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	781a      	ldrb	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1aa      	bne.n	80040ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f001 ffc0 	bl	80060e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00d      	beq.n	8004184 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	2b04      	cmp	r3, #4
 800416e:	d107      	bne.n	8004180 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800417e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e016      	b.n	80041b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	e000      	b.n	80041b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80041b0:	2302      	movs	r3, #2
  }
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	00100002 	.word	0x00100002
 80041c0:	ffff0000 	.word	0xffff0000

080041c4 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08a      	sub	sp, #40	; 0x28
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	4608      	mov	r0, r1
 80041ce:	4611      	mov	r1, r2
 80041d0:	461a      	mov	r2, r3
 80041d2:	4603      	mov	r3, r0
 80041d4:	817b      	strh	r3, [r7, #10]
 80041d6:	460b      	mov	r3, r1
 80041d8:	813b      	strh	r3, [r7, #8]
 80041da:	4613      	mov	r3, r2
 80041dc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041e2:	f7fe fe9b 	bl	8002f1c <HAL_GetTick>
 80041e6:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b20      	cmp	r3, #32
 80041f2:	f040 813a 	bne.w	800446a <HAL_I2C_Mem_Write_DMA+0x2a6>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80041f6:	4b9f      	ldr	r3, [pc, #636]	; (8004474 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	08db      	lsrs	r3, r3, #3
 80041fc:	4a9e      	ldr	r2, [pc, #632]	; (8004478 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 80041fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004202:	0a1a      	lsrs	r2, r3, #8
 8004204:	4613      	mov	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	009a      	lsls	r2, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	3b01      	subs	r3, #1
 8004214:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d116      	bne.n	800424a <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	f043 0220 	orr.w	r2, r3, #32
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e110      	b.n	800446c <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b02      	cmp	r3, #2
 8004256:	d0db      	beq.n	8004210 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800425e:	2b01      	cmp	r3, #1
 8004260:	d101      	bne.n	8004266 <HAL_I2C_Mem_Write_DMA+0xa2>
 8004262:	2302      	movs	r3, #2
 8004264:	e102      	b.n	800446c <HAL_I2C_Mem_Write_DMA+0x2a8>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b01      	cmp	r3, #1
 800427a:	d007      	beq.n	800428c <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800429a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2221      	movs	r2, #33	; 0x21
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2240      	movs	r2, #64	; 0x40
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80042bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4a6c      	ldr	r2, [pc, #432]	; (800447c <HAL_I2C_Mem_Write_DMA+0x2b8>)
 80042cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80042ce:	897a      	ldrh	r2, [r7, #10]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80042d4:	893a      	ldrh	r2, [r7, #8]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80042da:	88fa      	ldrh	r2, [r7, #6]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 80a9 	beq.w	8004442 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d02a      	beq.n	800434e <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fc:	4a60      	ldr	r2, [pc, #384]	; (8004480 <HAL_I2C_Mem_Write_DMA+0x2bc>)
 80042fe:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004304:	4a5f      	ldr	r2, [pc, #380]	; (8004484 <HAL_I2C_Mem_Write_DMA+0x2c0>)
 8004306:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430c:	2200      	movs	r2, #0
 800430e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004314:	2200      	movs	r2, #0
 8004316:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431c:	2200      	movs	r2, #0
 800431e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004324:	2200      	movs	r2, #0
 8004326:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	4619      	mov	r1, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3310      	adds	r3, #16
 8004338:	461a      	mov	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433e:	f7fe ffdd 	bl	80032fc <HAL_DMA_Start_IT>
 8004342:	4603      	mov	r3, r0
 8004344:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004346:	7efb      	ldrb	r3, [r7, #27]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d166      	bne.n	800441a <HAL_I2C_Mem_Write_DMA+0x256>
 800434c:	e013      	b.n	8004376 <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e07a      	b.n	800446c <HAL_I2C_Mem_Write_DMA+0x2a8>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004376:	88f8      	ldrh	r0, [r7, #6]
 8004378:	893a      	ldrh	r2, [r7, #8]
 800437a:	8979      	ldrh	r1, [r7, #10]
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	9301      	str	r3, [sp, #4]
 8004380:	2323      	movs	r3, #35	; 0x23
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	4603      	mov	r3, r0
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f001 fb44 	bl	8005a14 <I2C_RequestMemoryWrite>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d022      	beq.n	80043d8 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff f878 	bl	800348c <HAL_DMA_Abort_IT>
 800439c:	4603      	mov	r3, r0
 800439e:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a4:	2200      	movs	r2, #0
 80043a6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b6:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0201 	bic.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e049      	b.n	800446c <HAL_I2C_Mem_Write_DMA+0x2a8>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d8:	2300      	movs	r3, #0
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	613b      	str	r3, [r7, #16]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004404:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004414:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	e028      	b.n	800446c <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2220      	movs	r2, #32
 800441e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f043 0210 	orr.w	r2, r3, #16
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e014      	b.n	800446c <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <HAL_I2C_Mem_Write_DMA+0x2a8>
    }
  }
  else
  {
    return HAL_BUSY;
 800446a:	2302      	movs	r3, #2
  }
}
 800446c:	4618      	mov	r0, r3
 800446e:	3720      	adds	r7, #32
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	200000bc 	.word	0x200000bc
 8004478:	14f8b589 	.word	0x14f8b589
 800447c:	ffff0000 	.word	0xffff0000
 8004480:	08005b41 	.word	0x08005b41
 8004484:	08005ceb 	.word	0x08005ceb

08004488 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	d003      	beq.n	80044c0 <HAL_I2C_EV_IRQHandler+0x38>
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	2b40      	cmp	r3, #64	; 0x40
 80044bc:	f040 80c1 	bne.w	8004642 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10d      	bne.n	80044f6 <HAL_I2C_EV_IRQHandler+0x6e>
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80044e0:	d003      	beq.n	80044ea <HAL_I2C_EV_IRQHandler+0x62>
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80044e8:	d101      	bne.n	80044ee <HAL_I2C_EV_IRQHandler+0x66>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <HAL_I2C_EV_IRQHandler+0x68>
 80044ee:	2300      	movs	r3, #0
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	f000 8132 	beq.w	800475a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00c      	beq.n	800451a <HAL_I2C_EV_IRQHandler+0x92>
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	0a5b      	lsrs	r3, r3, #9
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d006      	beq.n	800451a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f001 fe8a 	bl	8006226 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fcd2 	bl	8004ebc <I2C_Master_SB>
 8004518:	e092      	b.n	8004640 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	08db      	lsrs	r3, r3, #3
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d009      	beq.n	800453a <HAL_I2C_EV_IRQHandler+0xb2>
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	0a5b      	lsrs	r3, r3, #9
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fd48 	bl	8004fc8 <I2C_Master_ADD10>
 8004538:	e082      	b.n	8004640 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	085b      	lsrs	r3, r3, #1
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d009      	beq.n	800455a <HAL_I2C_EV_IRQHandler+0xd2>
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	0a5b      	lsrs	r3, r3, #9
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fd62 	bl	800501c <I2C_Master_ADDR>
 8004558:	e072      	b.n	8004640 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	089b      	lsrs	r3, r3, #2
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d03b      	beq.n	80045de <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004574:	f000 80f3 	beq.w	800475e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	09db      	lsrs	r3, r3, #7
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00f      	beq.n	80045a4 <HAL_I2C_EV_IRQHandler+0x11c>
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	0a9b      	lsrs	r3, r3, #10
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d009      	beq.n	80045a4 <HAL_I2C_EV_IRQHandler+0x11c>
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	089b      	lsrs	r3, r3, #2
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d103      	bne.n	80045a4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f94c 	bl	800483a <I2C_MasterTransmit_TXE>
 80045a2:	e04d      	b.n	8004640 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	089b      	lsrs	r3, r3, #2
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 80d6 	beq.w	800475e <HAL_I2C_EV_IRQHandler+0x2d6>
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	0a5b      	lsrs	r3, r3, #9
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 80cf 	beq.w	800475e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80045c0:	7bbb      	ldrb	r3, [r7, #14]
 80045c2:	2b21      	cmp	r3, #33	; 0x21
 80045c4:	d103      	bne.n	80045ce <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f9d3 	bl	8004972 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045cc:	e0c7      	b.n	800475e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80045ce:	7bfb      	ldrb	r3, [r7, #15]
 80045d0:	2b40      	cmp	r3, #64	; 0x40
 80045d2:	f040 80c4 	bne.w	800475e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fa41 	bl	8004a5e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045dc:	e0bf      	b.n	800475e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ec:	f000 80b7 	beq.w	800475e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	099b      	lsrs	r3, r3, #6
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00f      	beq.n	800461c <HAL_I2C_EV_IRQHandler+0x194>
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	0a9b      	lsrs	r3, r3, #10
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d009      	beq.n	800461c <HAL_I2C_EV_IRQHandler+0x194>
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	089b      	lsrs	r3, r3, #2
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d103      	bne.n	800461c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 fab6 	bl	8004b86 <I2C_MasterReceive_RXNE>
 800461a:	e011      	b.n	8004640 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	089b      	lsrs	r3, r3, #2
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 809a 	beq.w	800475e <HAL_I2C_EV_IRQHandler+0x2d6>
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	0a5b      	lsrs	r3, r3, #9
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 8093 	beq.w	800475e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 fb55 	bl	8004ce8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800463e:	e08e      	b.n	800475e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004640:	e08d      	b.n	800475e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	2b00      	cmp	r3, #0
 8004648:	d004      	beq.n	8004654 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	61fb      	str	r3, [r7, #28]
 8004652:	e007      	b.n	8004664 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	085b      	lsrs	r3, r3, #1
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	d012      	beq.n	8004696 <HAL_I2C_EV_IRQHandler+0x20e>
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	0a5b      	lsrs	r3, r3, #9
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00c      	beq.n	8004696 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800468c:	69b9      	ldr	r1, [r7, #24]
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 ff13 	bl	80054ba <I2C_Slave_ADDR>
 8004694:	e066      	b.n	8004764 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	091b      	lsrs	r3, r3, #4
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d009      	beq.n	80046b6 <HAL_I2C_EV_IRQHandler+0x22e>
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	0a5b      	lsrs	r3, r3, #9
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 ff4e 	bl	8005550 <I2C_Slave_STOPF>
 80046b4:	e056      	b.n	8004764 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80046b6:	7bbb      	ldrb	r3, [r7, #14]
 80046b8:	2b21      	cmp	r3, #33	; 0x21
 80046ba:	d002      	beq.n	80046c2 <HAL_I2C_EV_IRQHandler+0x23a>
 80046bc:	7bbb      	ldrb	r3, [r7, #14]
 80046be:	2b29      	cmp	r3, #41	; 0x29
 80046c0:	d125      	bne.n	800470e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	09db      	lsrs	r3, r3, #7
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00f      	beq.n	80046ee <HAL_I2C_EV_IRQHandler+0x266>
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	0a9b      	lsrs	r3, r3, #10
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d009      	beq.n	80046ee <HAL_I2C_EV_IRQHandler+0x266>
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	089b      	lsrs	r3, r3, #2
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d103      	bne.n	80046ee <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fe29 	bl	800533e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046ec:	e039      	b.n	8004762 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	089b      	lsrs	r3, r3, #2
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d033      	beq.n	8004762 <HAL_I2C_EV_IRQHandler+0x2da>
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	0a5b      	lsrs	r3, r3, #9
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d02d      	beq.n	8004762 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fe56 	bl	80053b8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800470c:	e029      	b.n	8004762 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	099b      	lsrs	r3, r3, #6
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00f      	beq.n	800473a <HAL_I2C_EV_IRQHandler+0x2b2>
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	0a9b      	lsrs	r3, r3, #10
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d009      	beq.n	800473a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	089b      	lsrs	r3, r3, #2
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d103      	bne.n	800473a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fe61 	bl	80053fa <I2C_SlaveReceive_RXNE>
 8004738:	e014      	b.n	8004764 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	089b      	lsrs	r3, r3, #2
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00e      	beq.n	8004764 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	0a5b      	lsrs	r3, r3, #9
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d008      	beq.n	8004764 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fe8f 	bl	8005476 <I2C_SlaveReceive_BTF>
 8004758:	e004      	b.n	8004764 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800475a:	bf00      	nop
 800475c:	e002      	b.n	8004764 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800475e:	bf00      	nop
 8004760:	e000      	b.n	8004764 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004762:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004764:	3720      	adds	r7, #32
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	460b      	mov	r3, r1
 80047c4:	70fb      	strb	r3, [r7, #3]
 80047c6:	4613      	mov	r3, r2
 80047c8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b084      	sub	sp, #16
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004848:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004850:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004856:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485c:	2b00      	cmp	r3, #0
 800485e:	d150      	bne.n	8004902 <I2C_MasterTransmit_TXE+0xc8>
 8004860:	7bfb      	ldrb	r3, [r7, #15]
 8004862:	2b21      	cmp	r3, #33	; 0x21
 8004864:	d14d      	bne.n	8004902 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b08      	cmp	r3, #8
 800486a:	d01d      	beq.n	80048a8 <I2C_MasterTransmit_TXE+0x6e>
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2b20      	cmp	r3, #32
 8004870:	d01a      	beq.n	80048a8 <I2C_MasterTransmit_TXE+0x6e>
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004878:	d016      	beq.n	80048a8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004888:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2211      	movs	r2, #17
 800488e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7ff ff62 	bl	800476a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048a6:	e060      	b.n	800496a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048b6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b40      	cmp	r3, #64	; 0x40
 80048e0:	d107      	bne.n	80048f2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7ff ff7d 	bl	80047ea <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048f0:	e03b      	b.n	800496a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff ff35 	bl	800476a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004900:	e033      	b.n	800496a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004902:	7bfb      	ldrb	r3, [r7, #15]
 8004904:	2b21      	cmp	r3, #33	; 0x21
 8004906:	d005      	beq.n	8004914 <I2C_MasterTransmit_TXE+0xda>
 8004908:	7bbb      	ldrb	r3, [r7, #14]
 800490a:	2b40      	cmp	r3, #64	; 0x40
 800490c:	d12d      	bne.n	800496a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800490e:	7bfb      	ldrb	r3, [r7, #15]
 8004910:	2b22      	cmp	r3, #34	; 0x22
 8004912:	d12a      	bne.n	800496a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004918:	b29b      	uxth	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d108      	bne.n	8004930 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800492c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800492e:	e01c      	b.n	800496a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b40      	cmp	r3, #64	; 0x40
 800493a:	d103      	bne.n	8004944 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f88e 	bl	8004a5e <I2C_MemoryTransmit_TXE_BTF>
}
 8004942:	e012      	b.n	800496a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	781a      	ldrb	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495e:	b29b      	uxth	r3, r3
 8004960:	3b01      	subs	r3, #1
 8004962:	b29a      	uxth	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004968:	e7ff      	b.n	800496a <I2C_MasterTransmit_TXE+0x130>
 800496a:	bf00      	nop
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b084      	sub	sp, #16
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b21      	cmp	r3, #33	; 0x21
 800498a:	d164      	bne.n	8004a56 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004990:	b29b      	uxth	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d012      	beq.n	80049bc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	781a      	ldrb	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80049ba:	e04c      	b.n	8004a56 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b08      	cmp	r3, #8
 80049c0:	d01d      	beq.n	80049fe <I2C_MasterTransmit_BTF+0x8c>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	d01a      	beq.n	80049fe <I2C_MasterTransmit_BTF+0x8c>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049ce:	d016      	beq.n	80049fe <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049de:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2211      	movs	r2, #17
 80049e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff feb7 	bl	800476a <HAL_I2C_MasterTxCpltCallback>
}
 80049fc:	e02b      	b.n	8004a56 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a0c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a1c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b40      	cmp	r3, #64	; 0x40
 8004a36:	d107      	bne.n	8004a48 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7ff fed2 	bl	80047ea <HAL_I2C_MemTxCpltCallback>
}
 8004a46:	e006      	b.n	8004a56 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7ff fe8a 	bl	800476a <HAL_I2C_MasterTxCpltCallback>
}
 8004a56:	bf00      	nop
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b084      	sub	sp, #16
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a6c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d11d      	bne.n	8004ab2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d10b      	bne.n	8004a96 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8e:	1c9a      	adds	r2, r3, #2
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004a94:	e073      	b.n	8004b7e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	121b      	asrs	r3, r3, #8
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ab0:	e065      	b.n	8004b7e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d10b      	bne.n	8004ad2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ad0:	e055      	b.n	8004b7e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d151      	bne.n	8004b7e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
 8004adc:	2b22      	cmp	r3, #34	; 0x22
 8004ade:	d10d      	bne.n	8004afc <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aee:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004afa:	e040      	b.n	8004b7e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d015      	beq.n	8004b32 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
 8004b08:	2b21      	cmp	r3, #33	; 0x21
 8004b0a:	d112      	bne.n	8004b32 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	781a      	ldrb	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b30:	e025      	b.n	8004b7e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d120      	bne.n	8004b7e <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
 8004b3e:	2b21      	cmp	r3, #33	; 0x21
 8004b40:	d11d      	bne.n	8004b7e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b50:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b60:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7ff fe36 	bl	80047ea <HAL_I2C_MemTxCpltCallback>
}
 8004b7e:	bf00      	nop
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b084      	sub	sp, #16
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b22      	cmp	r3, #34	; 0x22
 8004b98:	f040 80a2 	bne.w	8004ce0 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d921      	bls.n	8004bee <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	f040 8082 	bne.w	8004ce0 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bea:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004bec:	e078      	b.n	8004ce0 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d074      	beq.n	8004ce0 <I2C_MasterReceive_RXNE+0x15a>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d002      	beq.n	8004c02 <I2C_MasterReceive_RXNE+0x7c>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d16e      	bne.n	8004ce0 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f001 faae 	bl	8006164 <I2C_WaitOnSTOPRequestThroughIT>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d142      	bne.n	8004c94 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c1c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c2c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	691a      	ldr	r2, [r3, #16]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2220      	movs	r2, #32
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	d10a      	bne.n	8004c7e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7ff fdc1 	bl	80047fe <HAL_I2C_MemRxCpltCallback>
}
 8004c7c:	e030      	b.n	8004ce0 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2212      	movs	r2, #18
 8004c8a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7ff fd76 	bl	800477e <HAL_I2C_MasterRxCpltCallback>
}
 8004c92:	e025      	b.n	8004ce0 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ca2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff fd99 	bl	8004812 <HAL_I2C_ErrorCallback>
}
 8004ce0:	bf00      	nop
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	d11b      	bne.n	8004d38 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d0e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691a      	ldr	r2, [r3, #16]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004d36:	e0bd      	b.n	8004eb4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d129      	bne.n	8004d96 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d50:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2b04      	cmp	r3, #4
 8004d56:	d00a      	beq.n	8004d6e <I2C_MasterReceive_BTF+0x86>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d007      	beq.n	8004d6e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d6c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d94:	e08e      	b.n	8004eb4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d176      	bne.n	8004e8e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d002      	beq.n	8004dac <I2C_MasterReceive_BTF+0xc4>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b10      	cmp	r3, #16
 8004daa:	d108      	bne.n	8004dbe <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	e019      	b.n	8004df2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d002      	beq.n	8004dca <I2C_MasterReceive_BTF+0xe2>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d108      	bne.n	8004ddc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	e00a      	b.n	8004df2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b10      	cmp	r3, #16
 8004de0:	d007      	beq.n	8004df2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691a      	ldr	r2, [r3, #16]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e4c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b40      	cmp	r3, #64	; 0x40
 8004e60:	d10a      	bne.n	8004e78 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff fcc4 	bl	80047fe <HAL_I2C_MemRxCpltCallback>
}
 8004e76:	e01d      	b.n	8004eb4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2212      	movs	r2, #18
 8004e84:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7ff fc79 	bl	800477e <HAL_I2C_MasterRxCpltCallback>
}
 8004e8c:	e012      	b.n	8004eb4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	691a      	ldr	r2, [r3, #16]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	3b01      	subs	r3, #1
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004eb4:	bf00      	nop
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b40      	cmp	r3, #64	; 0x40
 8004ece:	d117      	bne.n	8004f00 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d109      	bne.n	8004eec <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	461a      	mov	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ee8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004eea:	e067      	b.n	8004fbc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	f043 0301 	orr.w	r3, r3, #1
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	611a      	str	r2, [r3, #16]
}
 8004efe:	e05d      	b.n	8004fbc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f08:	d133      	bne.n	8004f72 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b21      	cmp	r3, #33	; 0x21
 8004f14:	d109      	bne.n	8004f2a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f26:	611a      	str	r2, [r3, #16]
 8004f28:	e008      	b.n	8004f3c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	f043 0301 	orr.w	r3, r3, #1
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d004      	beq.n	8004f4e <I2C_Master_SB+0x92>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d108      	bne.n	8004f60 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d032      	beq.n	8004fbc <I2C_Master_SB+0x100>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d02d      	beq.n	8004fbc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f6e:	605a      	str	r2, [r3, #4]
}
 8004f70:	e024      	b.n	8004fbc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10e      	bne.n	8004f98 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	11db      	asrs	r3, r3, #7
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	f003 0306 	and.w	r3, r3, #6
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	f063 030f 	orn	r3, r3, #15
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	611a      	str	r2, [r3, #16]
}
 8004f96:	e011      	b.n	8004fbc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d10d      	bne.n	8004fbc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	11db      	asrs	r3, r3, #7
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	f003 0306 	and.w	r3, r3, #6
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	f063 030e 	orn	r3, r3, #14
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	611a      	str	r2, [r3, #16]
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d004      	beq.n	8004fee <I2C_Master_ADD10+0x26>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d108      	bne.n	8005000 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00c      	beq.n	8005010 <I2C_Master_ADD10+0x48>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d007      	beq.n	8005010 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800500e:	605a      	str	r2, [r3, #4]
  }
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800501c:	b480      	push	{r7}
 800501e:	b091      	sub	sp, #68	; 0x44
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800502a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005032:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005038:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b22      	cmp	r3, #34	; 0x22
 8005044:	f040 8169 	bne.w	800531a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10f      	bne.n	8005070 <I2C_Master_ADDR+0x54>
 8005050:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005054:	2b40      	cmp	r3, #64	; 0x40
 8005056:	d10b      	bne.n	8005070 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005058:	2300      	movs	r3, #0
 800505a:	633b      	str	r3, [r7, #48]	; 0x30
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	633b      	str	r3, [r7, #48]	; 0x30
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	633b      	str	r3, [r7, #48]	; 0x30
 800506c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506e:	e160      	b.n	8005332 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005074:	2b00      	cmp	r3, #0
 8005076:	d11d      	bne.n	80050b4 <I2C_Master_ADDR+0x98>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005080:	d118      	bne.n	80050b4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005082:	2300      	movs	r3, #0
 8005084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005096:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050a6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ac:	1c5a      	adds	r2, r3, #1
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	651a      	str	r2, [r3, #80]	; 0x50
 80050b2:	e13e      	b.n	8005332 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d113      	bne.n	80050e6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050be:	2300      	movs	r3, #0
 80050c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80050d2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	e115      	b.n	8005312 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	f040 808a 	bne.w	8005206 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80050f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050f8:	d137      	bne.n	800516a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005108:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005118:	d113      	bne.n	8005142 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005128:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800512a:	2300      	movs	r3, #0
 800512c:	627b      	str	r3, [r7, #36]	; 0x24
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	627b      	str	r3, [r7, #36]	; 0x24
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	e0e7      	b.n	8005312 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005142:	2300      	movs	r3, #0
 8005144:	623b      	str	r3, [r7, #32]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	623b      	str	r3, [r7, #32]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	623b      	str	r3, [r7, #32]
 8005156:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	e0d3      	b.n	8005312 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800516a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516c:	2b08      	cmp	r3, #8
 800516e:	d02e      	beq.n	80051ce <I2C_Master_ADDR+0x1b2>
 8005170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005172:	2b20      	cmp	r3, #32
 8005174:	d02b      	beq.n	80051ce <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005178:	2b12      	cmp	r3, #18
 800517a:	d102      	bne.n	8005182 <I2C_Master_ADDR+0x166>
 800517c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517e:	2b01      	cmp	r3, #1
 8005180:	d125      	bne.n	80051ce <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005184:	2b04      	cmp	r3, #4
 8005186:	d00e      	beq.n	80051a6 <I2C_Master_ADDR+0x18a>
 8005188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518a:	2b02      	cmp	r3, #2
 800518c:	d00b      	beq.n	80051a6 <I2C_Master_ADDR+0x18a>
 800518e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005190:	2b10      	cmp	r3, #16
 8005192:	d008      	beq.n	80051a6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	e007      	b.n	80051b6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051b6:	2300      	movs	r3, #0
 80051b8:	61fb      	str	r3, [r7, #28]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	61fb      	str	r3, [r7, #28]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	61fb      	str	r3, [r7, #28]
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	e0a1      	b.n	8005312 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051dc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051de:	2300      	movs	r3, #0
 80051e0:	61bb      	str	r3, [r7, #24]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	61bb      	str	r3, [r7, #24]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	61bb      	str	r3, [r7, #24]
 80051f2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	e085      	b.n	8005312 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520a:	b29b      	uxth	r3, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d14d      	bne.n	80052ac <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005212:	2b04      	cmp	r3, #4
 8005214:	d016      	beq.n	8005244 <I2C_Master_ADDR+0x228>
 8005216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005218:	2b02      	cmp	r3, #2
 800521a:	d013      	beq.n	8005244 <I2C_Master_ADDR+0x228>
 800521c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521e:	2b10      	cmp	r3, #16
 8005220:	d010      	beq.n	8005244 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005230:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	e007      	b.n	8005254 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005252:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800525e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005262:	d117      	bne.n	8005294 <I2C_Master_ADDR+0x278>
 8005264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005266:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800526a:	d00b      	beq.n	8005284 <I2C_Master_ADDR+0x268>
 800526c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526e:	2b01      	cmp	r3, #1
 8005270:	d008      	beq.n	8005284 <I2C_Master_ADDR+0x268>
 8005272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005274:	2b08      	cmp	r3, #8
 8005276:	d005      	beq.n	8005284 <I2C_Master_ADDR+0x268>
 8005278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527a:	2b10      	cmp	r3, #16
 800527c:	d002      	beq.n	8005284 <I2C_Master_ADDR+0x268>
 800527e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005280:	2b20      	cmp	r3, #32
 8005282:	d107      	bne.n	8005294 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005292:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005294:	2300      	movs	r3, #0
 8005296:	617b      	str	r3, [r7, #20]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	617b      	str	r3, [r7, #20]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	e032      	b.n	8005312 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052ba:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ca:	d117      	bne.n	80052fc <I2C_Master_ADDR+0x2e0>
 80052cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052d2:	d00b      	beq.n	80052ec <I2C_Master_ADDR+0x2d0>
 80052d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d008      	beq.n	80052ec <I2C_Master_ADDR+0x2d0>
 80052da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052dc:	2b08      	cmp	r3, #8
 80052de:	d005      	beq.n	80052ec <I2C_Master_ADDR+0x2d0>
 80052e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d002      	beq.n	80052ec <I2C_Master_ADDR+0x2d0>
 80052e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e8:	2b20      	cmp	r3, #32
 80052ea:	d107      	bne.n	80052fc <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052fa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052fc:	2300      	movs	r3, #0
 80052fe:	613b      	str	r3, [r7, #16]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	613b      	str	r3, [r7, #16]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	613b      	str	r3, [r7, #16]
 8005310:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005318:	e00b      	b.n	8005332 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800531a:	2300      	movs	r3, #0
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	68fb      	ldr	r3, [r7, #12]
}
 8005330:	e7ff      	b.n	8005332 <I2C_Master_ADDR+0x316>
 8005332:	bf00      	nop
 8005334:	3744      	adds	r7, #68	; 0x44
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b084      	sub	sp, #16
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800534c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005352:	b29b      	uxth	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d02b      	beq.n	80053b0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	781a      	ldrb	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005372:	b29b      	uxth	r3, r3
 8005374:	3b01      	subs	r3, #1
 8005376:	b29a      	uxth	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d114      	bne.n	80053b0 <I2C_SlaveTransmit_TXE+0x72>
 8005386:	7bfb      	ldrb	r3, [r7, #15]
 8005388:	2b29      	cmp	r3, #41	; 0x29
 800538a:	d111      	bne.n	80053b0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800539a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2221      	movs	r2, #33	; 0x21
 80053a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2228      	movs	r2, #40	; 0x28
 80053a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7ff f9f1 	bl	8004792 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80053b0:	bf00      	nop
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d011      	beq.n	80053ee <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	781a      	ldrb	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	1c5a      	adds	r2, r3, #1
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b084      	sub	sp, #16
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005408:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540e:	b29b      	uxth	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	d02c      	beq.n	800546e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	691a      	ldr	r2, [r3, #16]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541e:	b2d2      	uxtb	r2, r2
 8005420:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005430:	b29b      	uxth	r3, r3
 8005432:	3b01      	subs	r3, #1
 8005434:	b29a      	uxth	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543e:	b29b      	uxth	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	d114      	bne.n	800546e <I2C_SlaveReceive_RXNE+0x74>
 8005444:	7bfb      	ldrb	r3, [r7, #15]
 8005446:	2b2a      	cmp	r3, #42	; 0x2a
 8005448:	d111      	bne.n	800546e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005458:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2222      	movs	r2, #34	; 0x22
 800545e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2228      	movs	r2, #40	; 0x28
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7ff f99c 	bl	80047a6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800546e:	bf00      	nop
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005476:	b480      	push	{r7}
 8005478:	b083      	sub	sp, #12
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005482:	b29b      	uxth	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d012      	beq.n	80054ae <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	691a      	ldr	r2, [r3, #16]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	b2d2      	uxtb	r2, r2
 8005494:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	3b01      	subs	r3, #1
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b084      	sub	sp, #16
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80054c4:	2300      	movs	r3, #0
 80054c6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054d4:	2b28      	cmp	r3, #40	; 0x28
 80054d6:	d127      	bne.n	8005528 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	089b      	lsrs	r3, r3, #2
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80054f4:	2301      	movs	r3, #1
 80054f6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	09db      	lsrs	r3, r3, #7
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	d103      	bne.n	800550c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	81bb      	strh	r3, [r7, #12]
 800550a:	e002      	b.n	8005512 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800551a:	89ba      	ldrh	r2, [r7, #12]
 800551c:	7bfb      	ldrb	r3, [r7, #15]
 800551e:	4619      	mov	r1, r3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7ff f94a 	bl	80047ba <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005526:	e00e      	b.n	8005546 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005528:	2300      	movs	r3, #0
 800552a:	60bb      	str	r3, [r7, #8]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	60bb      	str	r3, [r7, #8]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	60bb      	str	r3, [r7, #8]
 800553c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005546:	bf00      	nop
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
	...

08005550 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800556e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005570:	2300      	movs	r3, #0
 8005572:	60bb      	str	r3, [r7, #8]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	60bb      	str	r3, [r7, #8]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0201 	orr.w	r2, r2, #1
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800559c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ac:	d172      	bne.n	8005694 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
 80055b0:	2b22      	cmp	r3, #34	; 0x22
 80055b2:	d002      	beq.n	80055ba <I2C_Slave_STOPF+0x6a>
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	2b2a      	cmp	r3, #42	; 0x2a
 80055b8:	d135      	bne.n	8005626 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	f043 0204 	orr.w	r2, r3, #4
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fe f8f6 	bl	80037e4 <HAL_DMA_GetState>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d049      	beq.n	8005692 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005602:	4a69      	ldr	r2, [pc, #420]	; (80057a8 <I2C_Slave_STOPF+0x258>)
 8005604:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560a:	4618      	mov	r0, r3
 800560c:	f7fd ff3e 	bl	800348c <HAL_DMA_Abort_IT>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d03d      	beq.n	8005692 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005620:	4610      	mov	r0, r2
 8005622:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005624:	e035      	b.n	8005692 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	b29a      	uxth	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d005      	beq.n	800564a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	f043 0204 	orr.w	r2, r3, #4
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005658:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565e:	4618      	mov	r0, r3
 8005660:	f7fe f8c0 	bl	80037e4 <HAL_DMA_GetState>
 8005664:	4603      	mov	r3, r0
 8005666:	2b01      	cmp	r3, #1
 8005668:	d014      	beq.n	8005694 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800566e:	4a4e      	ldr	r2, [pc, #312]	; (80057a8 <I2C_Slave_STOPF+0x258>)
 8005670:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005676:	4618      	mov	r0, r3
 8005678:	f7fd ff08 	bl	800348c <HAL_DMA_Abort_IT>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d008      	beq.n	8005694 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800568c:	4610      	mov	r0, r2
 800568e:	4798      	blx	r3
 8005690:	e000      	b.n	8005694 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005692:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d03e      	beq.n	800571c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d112      	bne.n	80056d2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	691a      	ldr	r2, [r3, #16]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	3b01      	subs	r3, #1
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056dc:	2b40      	cmp	r3, #64	; 0x40
 80056de:	d112      	bne.n	8005706 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691a      	ldr	r2, [r3, #16]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	b2d2      	uxtb	r2, r2
 80056ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	3b01      	subs	r3, #1
 8005700:	b29a      	uxth	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800570a:	b29b      	uxth	r3, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	d005      	beq.n	800571c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005714:	f043 0204 	orr.w	r2, r3, #4
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005720:	2b00      	cmp	r3, #0
 8005722:	d003      	beq.n	800572c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f843 	bl	80057b0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800572a:	e039      	b.n	80057a0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	2b2a      	cmp	r3, #42	; 0x2a
 8005730:	d109      	bne.n	8005746 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2228      	movs	r2, #40	; 0x28
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff f830 	bl	80047a6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b28      	cmp	r3, #40	; 0x28
 8005750:	d111      	bne.n	8005776 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a15      	ldr	r2, [pc, #84]	; (80057ac <I2C_Slave_STOPF+0x25c>)
 8005756:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7ff f831 	bl	80047d6 <HAL_I2C_ListenCpltCallback>
}
 8005774:	e014      	b.n	80057a0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577a:	2b22      	cmp	r3, #34	; 0x22
 800577c:	d002      	beq.n	8005784 <I2C_Slave_STOPF+0x234>
 800577e:	7bfb      	ldrb	r3, [r7, #15]
 8005780:	2b22      	cmp	r3, #34	; 0x22
 8005782:	d10d      	bne.n	80057a0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2220      	movs	r2, #32
 800578e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7ff f803 	bl	80047a6 <HAL_I2C_SlaveRxCpltCallback>
}
 80057a0:	bf00      	nop
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	08005d65 	.word	0x08005d65
 80057ac:	ffff0000 	.word	0xffff0000

080057b0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057be:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057c6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80057c8:	7bbb      	ldrb	r3, [r7, #14]
 80057ca:	2b10      	cmp	r3, #16
 80057cc:	d002      	beq.n	80057d4 <I2C_ITError+0x24>
 80057ce:	7bbb      	ldrb	r3, [r7, #14]
 80057d0:	2b40      	cmp	r3, #64	; 0x40
 80057d2:	d10a      	bne.n	80057ea <I2C_ITError+0x3a>
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
 80057d6:	2b22      	cmp	r3, #34	; 0x22
 80057d8:	d107      	bne.n	80057ea <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057e8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80057f0:	2b28      	cmp	r3, #40	; 0x28
 80057f2:	d107      	bne.n	8005804 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2228      	movs	r2, #40	; 0x28
 80057fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005802:	e015      	b.n	8005830 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800580e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005812:	d00a      	beq.n	800582a <I2C_ITError+0x7a>
 8005814:	7bfb      	ldrb	r3, [r7, #15]
 8005816:	2b60      	cmp	r3, #96	; 0x60
 8005818:	d007      	beq.n	800582a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2220      	movs	r2, #32
 800581e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800583a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800583e:	d162      	bne.n	8005906 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800584e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005854:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b01      	cmp	r3, #1
 800585c:	d020      	beq.n	80058a0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005862:	4a6a      	ldr	r2, [pc, #424]	; (8005a0c <I2C_ITError+0x25c>)
 8005864:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800586a:	4618      	mov	r0, r3
 800586c:	f7fd fe0e 	bl	800348c <HAL_DMA_Abort_IT>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 8089 	beq.w	800598a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0201 	bic.w	r2, r2, #1
 8005886:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800589a:	4610      	mov	r0, r2
 800589c:	4798      	blx	r3
 800589e:	e074      	b.n	800598a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	4a59      	ldr	r2, [pc, #356]	; (8005a0c <I2C_ITError+0x25c>)
 80058a6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7fd fded 	bl	800348c <HAL_DMA_Abort_IT>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d068      	beq.n	800598a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c2:	2b40      	cmp	r3, #64	; 0x40
 80058c4:	d10b      	bne.n	80058de <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	691a      	ldr	r2, [r3, #16]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0201 	bic.w	r2, r2, #1
 80058ec:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005900:	4610      	mov	r0, r2
 8005902:	4798      	blx	r3
 8005904:	e041      	b.n	800598a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b60      	cmp	r3, #96	; 0x60
 8005910:	d125      	bne.n	800595e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2220      	movs	r2, #32
 8005916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592a:	2b40      	cmp	r3, #64	; 0x40
 800592c:	d10b      	bne.n	8005946 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	691a      	ldr	r2, [r3, #16]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	b2d2      	uxtb	r2, r2
 800593a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 0201 	bic.w	r2, r2, #1
 8005954:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7fe ff65 	bl	8004826 <HAL_I2C_AbortCpltCallback>
 800595c:	e015      	b.n	800598a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005968:	2b40      	cmp	r3, #64	; 0x40
 800596a:	d10b      	bne.n	8005984 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691a      	ldr	r2, [r3, #16]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7fe ff44 	bl	8004812 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10e      	bne.n	80059b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d109      	bne.n	80059b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d104      	bne.n	80059b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d007      	beq.n	80059c8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059c6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ce:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b04      	cmp	r3, #4
 80059da:	d113      	bne.n	8005a04 <I2C_ITError+0x254>
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
 80059de:	2b28      	cmp	r3, #40	; 0x28
 80059e0:	d110      	bne.n	8005a04 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a0a      	ldr	r2, [pc, #40]	; (8005a10 <I2C_ITError+0x260>)
 80059e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fe fee9 	bl	80047d6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a04:	bf00      	nop
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	08005d65 	.word	0x08005d65
 8005a10:	ffff0000 	.word	0xffff0000

08005a14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af02      	add	r7, sp, #8
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	4608      	mov	r0, r1
 8005a1e:	4611      	mov	r1, r2
 8005a20:	461a      	mov	r2, r3
 8005a22:	4603      	mov	r3, r0
 8005a24:	817b      	strh	r3, [r7, #10]
 8005a26:	460b      	mov	r3, r1
 8005a28:	813b      	strh	r3, [r7, #8]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 fa32 	bl	8005eb4 <I2C_WaitOnFlagUntilTimeout>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00d      	beq.n	8005a72 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a64:	d103      	bne.n	8005a6e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e05f      	b.n	8005b32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a72:	897b      	ldrh	r3, [r7, #10]
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	461a      	mov	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	6a3a      	ldr	r2, [r7, #32]
 8005a86:	492d      	ldr	r1, [pc, #180]	; (8005b3c <I2C_RequestMemoryWrite+0x128>)
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 fa6a 	bl	8005f62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e04c      	b.n	8005b32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a98:	2300      	movs	r3, #0
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab0:	6a39      	ldr	r1, [r7, #32]
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 fad4 	bl	8006060 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00d      	beq.n	8005ada <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	d107      	bne.n	8005ad6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ad4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e02b      	b.n	8005b32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ada:	88fb      	ldrh	r3, [r7, #6]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d105      	bne.n	8005aec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ae0:	893b      	ldrh	r3, [r7, #8]
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	611a      	str	r2, [r3, #16]
 8005aea:	e021      	b.n	8005b30 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005aec:	893b      	ldrh	r3, [r7, #8]
 8005aee:	0a1b      	lsrs	r3, r3, #8
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005afc:	6a39      	ldr	r1, [r7, #32]
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 faae 	bl	8006060 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00d      	beq.n	8005b26 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d107      	bne.n	8005b22 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e005      	b.n	8005b32 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b26:	893b      	ldrh	r3, [r7, #8]
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3718      	adds	r7, #24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	00010002 	.word	0x00010002

08005b40 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b54:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b5c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005b72:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b80:	2200      	movs	r2, #0
 8005b82:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b90:	2200      	movs	r2, #0
 8005b92:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005b94:	7cfb      	ldrb	r3, [r7, #19]
 8005b96:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005b9a:	2b21      	cmp	r3, #33	; 0x21
 8005b9c:	d007      	beq.n	8005bae <I2C_DMAXferCplt+0x6e>
 8005b9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ba0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005ba4:	2b22      	cmp	r3, #34	; 0x22
 8005ba6:	d131      	bne.n	8005c0c <I2C_DMAXferCplt+0xcc>
 8005ba8:	7cbb      	ldrb	r3, [r7, #18]
 8005baa:	2b20      	cmp	r3, #32
 8005bac:	d12e      	bne.n	8005c0c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bbc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005bc4:	7cfb      	ldrb	r3, [r7, #19]
 8005bc6:	2b29      	cmp	r3, #41	; 0x29
 8005bc8:	d10a      	bne.n	8005be0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2221      	movs	r2, #33	; 0x21
 8005bce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	2228      	movs	r2, #40	; 0x28
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005bd8:	6978      	ldr	r0, [r7, #20]
 8005bda:	f7fe fdda 	bl	8004792 <HAL_I2C_SlaveTxCpltCallback>
 8005bde:	e00c      	b.n	8005bfa <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005be0:	7cfb      	ldrb	r3, [r7, #19]
 8005be2:	2b2a      	cmp	r3, #42	; 0x2a
 8005be4:	d109      	bne.n	8005bfa <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2222      	movs	r2, #34	; 0x22
 8005bea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	2228      	movs	r2, #40	; 0x28
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005bf4:	6978      	ldr	r0, [r7, #20]
 8005bf6:	f7fe fdd6 	bl	80047a6 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005c08:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005c0a:	e06a      	b.n	8005ce2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d064      	beq.n	8005ce2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d107      	bne.n	8005c32 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c30:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005c40:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c48:	d009      	beq.n	8005c5e <I2C_DMAXferCplt+0x11e>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d006      	beq.n	8005c5e <I2C_DMAXferCplt+0x11e>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005c56:	d002      	beq.n	8005c5e <I2C_DMAXferCplt+0x11e>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2b20      	cmp	r3, #32
 8005c5c:	d107      	bne.n	8005c6e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c6c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c7c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c8c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2200      	movs	r2, #0
 8005c92:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d003      	beq.n	8005ca4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005c9c:	6978      	ldr	r0, [r7, #20]
 8005c9e:	f7fe fdb8 	bl	8004812 <HAL_I2C_ErrorCallback>
}
 8005ca2:	e01e      	b.n	8005ce2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b40      	cmp	r3, #64	; 0x40
 8005cb6:	d10a      	bne.n	8005cce <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005cc6:	6978      	ldr	r0, [r7, #20]
 8005cc8:	f7fe fd99 	bl	80047fe <HAL_I2C_MemRxCpltCallback>
}
 8005ccc:	e009      	b.n	8005ce2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2212      	movs	r2, #18
 8005cda:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005cdc:	6978      	ldr	r0, [r7, #20]
 8005cde:	f7fe fd4e 	bl	800477e <HAL_I2C_MasterRxCpltCallback>
}
 8005ce2:	bf00      	nop
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d003      	beq.n	8005d08 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d04:	2200      	movs	r2, #0
 8005d06:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d14:	2200      	movs	r2, #0
 8005d16:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7fd fd71 	bl	8003800 <HAL_DMA_GetError>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d01b      	beq.n	8005d5c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d32:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	f043 0210 	orr.w	r2, r3, #16
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f7fe fd5b 	bl	8004812 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d5c:	bf00      	nop
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d74:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d7c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d7e:	4b4b      	ldr	r3, [pc, #300]	; (8005eac <I2C_DMAAbort+0x148>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	08db      	lsrs	r3, r3, #3
 8005d84:	4a4a      	ldr	r2, [pc, #296]	; (8005eb0 <I2C_DMAAbort+0x14c>)
 8005d86:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8a:	0a1a      	lsrs	r2, r3, #8
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	00da      	lsls	r2, r3, #3
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d106      	bne.n	8005dac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da2:	f043 0220 	orr.w	r2, r3, #32
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005daa:	e00a      	b.n	8005dc2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	3b01      	subs	r3, #1
 8005db0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dc0:	d0ea      	beq.n	8005d98 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dce:	2200      	movs	r2, #0
 8005dd0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dde:	2200      	movs	r2, #0
 8005de0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005df0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	2200      	movs	r2, #0
 8005df6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d003      	beq.n	8005e08 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e04:	2200      	movs	r2, #0
 8005e06:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e14:	2200      	movs	r2, #0
 8005e16:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0201 	bic.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b60      	cmp	r3, #96	; 0x60
 8005e32:	d10e      	bne.n	8005e52 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	2220      	movs	r2, #32
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	2200      	movs	r2, #0
 8005e48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005e4a:	6978      	ldr	r0, [r7, #20]
 8005e4c:	f7fe fceb 	bl	8004826 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e50:	e027      	b.n	8005ea2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e52:	7cfb      	ldrb	r3, [r7, #19]
 8005e54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e58:	2b28      	cmp	r3, #40	; 0x28
 8005e5a:	d117      	bne.n	8005e8c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0201 	orr.w	r2, r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e7a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2228      	movs	r2, #40	; 0x28
 8005e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005e8a:	e007      	b.n	8005e9c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005e9c:	6978      	ldr	r0, [r7, #20]
 8005e9e:	f7fe fcb8 	bl	8004812 <HAL_I2C_ErrorCallback>
}
 8005ea2:	bf00      	nop
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	200000bc 	.word	0x200000bc
 8005eb0:	14f8b589 	.word	0x14f8b589

08005eb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	603b      	str	r3, [r7, #0]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ec4:	e025      	b.n	8005f12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ecc:	d021      	beq.n	8005f12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ece:	f7fd f825 	bl	8002f1c <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d302      	bcc.n	8005ee4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d116      	bne.n	8005f12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2220      	movs	r2, #32
 8005eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	f043 0220 	orr.w	r2, r3, #32
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e023      	b.n	8005f5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	0c1b      	lsrs	r3, r3, #16
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d10d      	bne.n	8005f38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	43da      	mvns	r2, r3
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4013      	ands	r3, r2
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	bf0c      	ite	eq
 8005f2e:	2301      	moveq	r3, #1
 8005f30:	2300      	movne	r3, #0
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	461a      	mov	r2, r3
 8005f36:	e00c      	b.n	8005f52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	43da      	mvns	r2, r3
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	4013      	ands	r3, r2
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	bf0c      	ite	eq
 8005f4a:	2301      	moveq	r3, #1
 8005f4c:	2300      	movne	r3, #0
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	79fb      	ldrb	r3, [r7, #7]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d0b6      	beq.n	8005ec6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	607a      	str	r2, [r7, #4]
 8005f6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f70:	e051      	b.n	8006016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f80:	d123      	bne.n	8005fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	f043 0204 	orr.w	r2, r3, #4
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e046      	b.n	8006058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd0:	d021      	beq.n	8006016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fd2:	f7fc ffa3 	bl	8002f1c <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d302      	bcc.n	8005fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d116      	bne.n	8006016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	f043 0220 	orr.w	r2, r3, #32
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e020      	b.n	8006058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	0c1b      	lsrs	r3, r3, #16
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b01      	cmp	r3, #1
 800601e:	d10c      	bne.n	800603a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	43da      	mvns	r2, r3
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	4013      	ands	r3, r2
 800602c:	b29b      	uxth	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	bf14      	ite	ne
 8006032:	2301      	movne	r3, #1
 8006034:	2300      	moveq	r3, #0
 8006036:	b2db      	uxtb	r3, r3
 8006038:	e00b      	b.n	8006052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	43da      	mvns	r2, r3
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	4013      	ands	r3, r2
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	bf14      	ite	ne
 800604c:	2301      	movne	r3, #1
 800604e:	2300      	moveq	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d18d      	bne.n	8005f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800606c:	e02d      	b.n	80060ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 f8aa 	bl	80061c8 <I2C_IsAcknowledgeFailed>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e02d      	b.n	80060da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006084:	d021      	beq.n	80060ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006086:	f7fc ff49 	bl	8002f1c <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	429a      	cmp	r2, r3
 8006094:	d302      	bcc.n	800609c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d116      	bne.n	80060ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	f043 0220 	orr.w	r2, r3, #32
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e007      	b.n	80060da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d4:	2b80      	cmp	r3, #128	; 0x80
 80060d6:	d1ca      	bne.n	800606e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b084      	sub	sp, #16
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	60f8      	str	r0, [r7, #12]
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060ee:	e02d      	b.n	800614c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 f869 	bl	80061c8 <I2C_IsAcknowledgeFailed>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e02d      	b.n	800615c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006106:	d021      	beq.n	800614c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006108:	f7fc ff08 	bl	8002f1c <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	429a      	cmp	r2, r3
 8006116:	d302      	bcc.n	800611e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d116      	bne.n	800614c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2220      	movs	r2, #32
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006138:	f043 0220 	orr.w	r2, r3, #32
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e007      	b.n	800615c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	f003 0304 	and.w	r3, r3, #4
 8006156:	2b04      	cmp	r3, #4
 8006158:	d1ca      	bne.n	80060f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006170:	4b13      	ldr	r3, [pc, #76]	; (80061c0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	08db      	lsrs	r3, r3, #3
 8006176:	4a13      	ldr	r2, [pc, #76]	; (80061c4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006178:	fba2 2303 	umull	r2, r3, r2, r3
 800617c:	0a1a      	lsrs	r2, r3, #8
 800617e:	4613      	mov	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4413      	add	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3b01      	subs	r3, #1
 800618a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d107      	bne.n	80061a2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006196:	f043 0220 	orr.w	r2, r3, #32
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e008      	b.n	80061b4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061b0:	d0e9      	beq.n	8006186 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	200000bc 	.word	0x200000bc
 80061c4:	14f8b589 	.word	0x14f8b589

080061c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061de:	d11b      	bne.n	8006218 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2220      	movs	r2, #32
 80061f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	f043 0204 	orr.w	r2, r3, #4
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e000      	b.n	800621a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006226:	b480      	push	{r7}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006232:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006236:	d103      	bne.n	8006240 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800623e:	e007      	b.n	8006250 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006244:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006248:	d102      	bne.n	8006250 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2208      	movs	r2, #8
 800624e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e264      	b.n	8006738 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d075      	beq.n	8006366 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800627a:	4ba3      	ldr	r3, [pc, #652]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f003 030c 	and.w	r3, r3, #12
 8006282:	2b04      	cmp	r3, #4
 8006284:	d00c      	beq.n	80062a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006286:	4ba0      	ldr	r3, [pc, #640]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800628e:	2b08      	cmp	r3, #8
 8006290:	d112      	bne.n	80062b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006292:	4b9d      	ldr	r3, [pc, #628]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800629a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800629e:	d10b      	bne.n	80062b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062a0:	4b99      	ldr	r3, [pc, #612]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d05b      	beq.n	8006364 <HAL_RCC_OscConfig+0x108>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d157      	bne.n	8006364 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e23f      	b.n	8006738 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c0:	d106      	bne.n	80062d0 <HAL_RCC_OscConfig+0x74>
 80062c2:	4b91      	ldr	r3, [pc, #580]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a90      	ldr	r2, [pc, #576]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 80062c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062cc:	6013      	str	r3, [r2, #0]
 80062ce:	e01d      	b.n	800630c <HAL_RCC_OscConfig+0xb0>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062d8:	d10c      	bne.n	80062f4 <HAL_RCC_OscConfig+0x98>
 80062da:	4b8b      	ldr	r3, [pc, #556]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a8a      	ldr	r2, [pc, #552]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 80062e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062e4:	6013      	str	r3, [r2, #0]
 80062e6:	4b88      	ldr	r3, [pc, #544]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a87      	ldr	r2, [pc, #540]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 80062ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	e00b      	b.n	800630c <HAL_RCC_OscConfig+0xb0>
 80062f4:	4b84      	ldr	r3, [pc, #528]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a83      	ldr	r2, [pc, #524]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 80062fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062fe:	6013      	str	r3, [r2, #0]
 8006300:	4b81      	ldr	r3, [pc, #516]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a80      	ldr	r2, [pc, #512]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 8006306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800630a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d013      	beq.n	800633c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006314:	f7fc fe02 	bl	8002f1c <HAL_GetTick>
 8006318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800631a:	e008      	b.n	800632e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800631c:	f7fc fdfe 	bl	8002f1c <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	2b64      	cmp	r3, #100	; 0x64
 8006328:	d901      	bls.n	800632e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e204      	b.n	8006738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800632e:	4b76      	ldr	r3, [pc, #472]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d0f0      	beq.n	800631c <HAL_RCC_OscConfig+0xc0>
 800633a:	e014      	b.n	8006366 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800633c:	f7fc fdee 	bl	8002f1c <HAL_GetTick>
 8006340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006342:	e008      	b.n	8006356 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006344:	f7fc fdea 	bl	8002f1c <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b64      	cmp	r3, #100	; 0x64
 8006350:	d901      	bls.n	8006356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e1f0      	b.n	8006738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006356:	4b6c      	ldr	r3, [pc, #432]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1f0      	bne.n	8006344 <HAL_RCC_OscConfig+0xe8>
 8006362:	e000      	b.n	8006366 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	2b00      	cmp	r3, #0
 8006370:	d063      	beq.n	800643a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006372:	4b65      	ldr	r3, [pc, #404]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f003 030c 	and.w	r3, r3, #12
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00b      	beq.n	8006396 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800637e:	4b62      	ldr	r3, [pc, #392]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006386:	2b08      	cmp	r3, #8
 8006388:	d11c      	bne.n	80063c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800638a:	4b5f      	ldr	r3, [pc, #380]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d116      	bne.n	80063c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006396:	4b5c      	ldr	r3, [pc, #368]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d005      	beq.n	80063ae <HAL_RCC_OscConfig+0x152>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d001      	beq.n	80063ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e1c4      	b.n	8006738 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ae:	4b56      	ldr	r3, [pc, #344]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	00db      	lsls	r3, r3, #3
 80063bc:	4952      	ldr	r1, [pc, #328]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063c2:	e03a      	b.n	800643a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d020      	beq.n	800640e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063cc:	4b4f      	ldr	r3, [pc, #316]	; (800650c <HAL_RCC_OscConfig+0x2b0>)
 80063ce:	2201      	movs	r2, #1
 80063d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d2:	f7fc fda3 	bl	8002f1c <HAL_GetTick>
 80063d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063d8:	e008      	b.n	80063ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063da:	f7fc fd9f 	bl	8002f1c <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d901      	bls.n	80063ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e1a5      	b.n	8006738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ec:	4b46      	ldr	r3, [pc, #280]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d0f0      	beq.n	80063da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063f8:	4b43      	ldr	r3, [pc, #268]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	4940      	ldr	r1, [pc, #256]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 8006408:	4313      	orrs	r3, r2
 800640a:	600b      	str	r3, [r1, #0]
 800640c:	e015      	b.n	800643a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800640e:	4b3f      	ldr	r3, [pc, #252]	; (800650c <HAL_RCC_OscConfig+0x2b0>)
 8006410:	2200      	movs	r2, #0
 8006412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006414:	f7fc fd82 	bl	8002f1c <HAL_GetTick>
 8006418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800641a:	e008      	b.n	800642e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800641c:	f7fc fd7e 	bl	8002f1c <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b02      	cmp	r3, #2
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e184      	b.n	8006738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800642e:	4b36      	ldr	r3, [pc, #216]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1f0      	bne.n	800641c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0308 	and.w	r3, r3, #8
 8006442:	2b00      	cmp	r3, #0
 8006444:	d030      	beq.n	80064a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d016      	beq.n	800647c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800644e:	4b30      	ldr	r3, [pc, #192]	; (8006510 <HAL_RCC_OscConfig+0x2b4>)
 8006450:	2201      	movs	r2, #1
 8006452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006454:	f7fc fd62 	bl	8002f1c <HAL_GetTick>
 8006458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800645a:	e008      	b.n	800646e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800645c:	f7fc fd5e 	bl	8002f1c <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b02      	cmp	r3, #2
 8006468:	d901      	bls.n	800646e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e164      	b.n	8006738 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800646e:	4b26      	ldr	r3, [pc, #152]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 8006470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d0f0      	beq.n	800645c <HAL_RCC_OscConfig+0x200>
 800647a:	e015      	b.n	80064a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800647c:	4b24      	ldr	r3, [pc, #144]	; (8006510 <HAL_RCC_OscConfig+0x2b4>)
 800647e:	2200      	movs	r2, #0
 8006480:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006482:	f7fc fd4b 	bl	8002f1c <HAL_GetTick>
 8006486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006488:	e008      	b.n	800649c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800648a:	f7fc fd47 	bl	8002f1c <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	2b02      	cmp	r3, #2
 8006496:	d901      	bls.n	800649c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e14d      	b.n	8006738 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800649c:	4b1a      	ldr	r3, [pc, #104]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 800649e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1f0      	bne.n	800648a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0304 	and.w	r3, r3, #4
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 80a0 	beq.w	80065f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064b6:	2300      	movs	r3, #0
 80064b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064ba:	4b13      	ldr	r3, [pc, #76]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10f      	bne.n	80064e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064c6:	2300      	movs	r3, #0
 80064c8:	60bb      	str	r3, [r7, #8]
 80064ca:	4b0f      	ldr	r3, [pc, #60]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 80064cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ce:	4a0e      	ldr	r2, [pc, #56]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 80064d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064d4:	6413      	str	r3, [r2, #64]	; 0x40
 80064d6:	4b0c      	ldr	r3, [pc, #48]	; (8006508 <HAL_RCC_OscConfig+0x2ac>)
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064de:	60bb      	str	r3, [r7, #8]
 80064e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064e2:	2301      	movs	r3, #1
 80064e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064e6:	4b0b      	ldr	r3, [pc, #44]	; (8006514 <HAL_RCC_OscConfig+0x2b8>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d121      	bne.n	8006536 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064f2:	4b08      	ldr	r3, [pc, #32]	; (8006514 <HAL_RCC_OscConfig+0x2b8>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a07      	ldr	r2, [pc, #28]	; (8006514 <HAL_RCC_OscConfig+0x2b8>)
 80064f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064fe:	f7fc fd0d 	bl	8002f1c <HAL_GetTick>
 8006502:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006504:	e011      	b.n	800652a <HAL_RCC_OscConfig+0x2ce>
 8006506:	bf00      	nop
 8006508:	40023800 	.word	0x40023800
 800650c:	42470000 	.word	0x42470000
 8006510:	42470e80 	.word	0x42470e80
 8006514:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006518:	f7fc fd00 	bl	8002f1c <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e106      	b.n	8006738 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800652a:	4b85      	ldr	r3, [pc, #532]	; (8006740 <HAL_RCC_OscConfig+0x4e4>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006532:	2b00      	cmp	r3, #0
 8006534:	d0f0      	beq.n	8006518 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d106      	bne.n	800654c <HAL_RCC_OscConfig+0x2f0>
 800653e:	4b81      	ldr	r3, [pc, #516]	; (8006744 <HAL_RCC_OscConfig+0x4e8>)
 8006540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006542:	4a80      	ldr	r2, [pc, #512]	; (8006744 <HAL_RCC_OscConfig+0x4e8>)
 8006544:	f043 0301 	orr.w	r3, r3, #1
 8006548:	6713      	str	r3, [r2, #112]	; 0x70
 800654a:	e01c      	b.n	8006586 <HAL_RCC_OscConfig+0x32a>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	2b05      	cmp	r3, #5
 8006552:	d10c      	bne.n	800656e <HAL_RCC_OscConfig+0x312>
 8006554:	4b7b      	ldr	r3, [pc, #492]	; (8006744 <HAL_RCC_OscConfig+0x4e8>)
 8006556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006558:	4a7a      	ldr	r2, [pc, #488]	; (8006744 <HAL_RCC_OscConfig+0x4e8>)
 800655a:	f043 0304 	orr.w	r3, r3, #4
 800655e:	6713      	str	r3, [r2, #112]	; 0x70
 8006560:	4b78      	ldr	r3, [pc, #480]	; (8006744 <HAL_RCC_OscConfig+0x4e8>)
 8006562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006564:	4a77      	ldr	r2, [pc, #476]	; (8006744 <HAL_RCC_OscConfig+0x4e8>)
 8006566:	f043 0301 	orr.w	r3, r3, #1
 800656a:	6713      	str	r3, [r2, #112]	; 0x70
 800656c:	e00b      	b.n	8006586 <HAL_RCC_OscConfig+0x32a>
 800656e:	4b75      	ldr	r3, [pc, #468]	; (8006744 <HAL_RCC_OscConfig+0x4e8>)
 8006570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006572:	4a74      	ldr	r2, [pc, #464]	; (8006744 <HAL_RCC_OscConfig+0x4e8>)
 8006574:	f023 0301 	bic.w	r3, r3, #1
 8006578:	6713      	str	r3, [r2, #112]	; 0x70
 800657a:	4b72      	ldr	r3, [pc, #456]	; (8006744 <HAL_RCC_OscConfig+0x4e8>)
 800657c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657e:	4a71      	ldr	r2, [pc, #452]	; (8006744 <HAL_RCC_OscConfig+0x4e8>)
 8006580:	f023 0304 	bic.w	r3, r3, #4
 8006584:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d015      	beq.n	80065ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800658e:	f7fc fcc5 	bl	8002f1c <HAL_GetTick>
 8006592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006594:	e00a      	b.n	80065ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006596:	f7fc fcc1 	bl	8002f1c <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d901      	bls.n	80065ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e0c5      	b.n	8006738 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065ac:	4b65      	ldr	r3, [pc, #404]	; (8006744 <HAL_RCC_OscConfig+0x4e8>)
 80065ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d0ee      	beq.n	8006596 <HAL_RCC_OscConfig+0x33a>
 80065b8:	e014      	b.n	80065e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065ba:	f7fc fcaf 	bl	8002f1c <HAL_GetTick>
 80065be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065c0:	e00a      	b.n	80065d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065c2:	f7fc fcab 	bl	8002f1c <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e0af      	b.n	8006738 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065d8:	4b5a      	ldr	r3, [pc, #360]	; (8006744 <HAL_RCC_OscConfig+0x4e8>)
 80065da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065dc:	f003 0302 	and.w	r3, r3, #2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1ee      	bne.n	80065c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065e4:	7dfb      	ldrb	r3, [r7, #23]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d105      	bne.n	80065f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065ea:	4b56      	ldr	r3, [pc, #344]	; (8006744 <HAL_RCC_OscConfig+0x4e8>)
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	4a55      	ldr	r2, [pc, #340]	; (8006744 <HAL_RCC_OscConfig+0x4e8>)
 80065f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 809b 	beq.w	8006736 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006600:	4b50      	ldr	r3, [pc, #320]	; (8006744 <HAL_RCC_OscConfig+0x4e8>)
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f003 030c 	and.w	r3, r3, #12
 8006608:	2b08      	cmp	r3, #8
 800660a:	d05c      	beq.n	80066c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	2b02      	cmp	r3, #2
 8006612:	d141      	bne.n	8006698 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006614:	4b4c      	ldr	r3, [pc, #304]	; (8006748 <HAL_RCC_OscConfig+0x4ec>)
 8006616:	2200      	movs	r2, #0
 8006618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800661a:	f7fc fc7f 	bl	8002f1c <HAL_GetTick>
 800661e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006620:	e008      	b.n	8006634 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006622:	f7fc fc7b 	bl	8002f1c <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	2b02      	cmp	r3, #2
 800662e:	d901      	bls.n	8006634 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e081      	b.n	8006738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006634:	4b43      	ldr	r3, [pc, #268]	; (8006744 <HAL_RCC_OscConfig+0x4e8>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1f0      	bne.n	8006622 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	69da      	ldr	r2, [r3, #28]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	431a      	orrs	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	019b      	lsls	r3, r3, #6
 8006650:	431a      	orrs	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006656:	085b      	lsrs	r3, r3, #1
 8006658:	3b01      	subs	r3, #1
 800665a:	041b      	lsls	r3, r3, #16
 800665c:	431a      	orrs	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006662:	061b      	lsls	r3, r3, #24
 8006664:	4937      	ldr	r1, [pc, #220]	; (8006744 <HAL_RCC_OscConfig+0x4e8>)
 8006666:	4313      	orrs	r3, r2
 8006668:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800666a:	4b37      	ldr	r3, [pc, #220]	; (8006748 <HAL_RCC_OscConfig+0x4ec>)
 800666c:	2201      	movs	r2, #1
 800666e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006670:	f7fc fc54 	bl	8002f1c <HAL_GetTick>
 8006674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006676:	e008      	b.n	800668a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006678:	f7fc fc50 	bl	8002f1c <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	2b02      	cmp	r3, #2
 8006684:	d901      	bls.n	800668a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e056      	b.n	8006738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800668a:	4b2e      	ldr	r3, [pc, #184]	; (8006744 <HAL_RCC_OscConfig+0x4e8>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d0f0      	beq.n	8006678 <HAL_RCC_OscConfig+0x41c>
 8006696:	e04e      	b.n	8006736 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006698:	4b2b      	ldr	r3, [pc, #172]	; (8006748 <HAL_RCC_OscConfig+0x4ec>)
 800669a:	2200      	movs	r2, #0
 800669c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800669e:	f7fc fc3d 	bl	8002f1c <HAL_GetTick>
 80066a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066a4:	e008      	b.n	80066b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066a6:	f7fc fc39 	bl	8002f1c <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d901      	bls.n	80066b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e03f      	b.n	8006738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066b8:	4b22      	ldr	r3, [pc, #136]	; (8006744 <HAL_RCC_OscConfig+0x4e8>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1f0      	bne.n	80066a6 <HAL_RCC_OscConfig+0x44a>
 80066c4:	e037      	b.n	8006736 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d101      	bne.n	80066d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e032      	b.n	8006738 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066d2:	4b1c      	ldr	r3, [pc, #112]	; (8006744 <HAL_RCC_OscConfig+0x4e8>)
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d028      	beq.n	8006732 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d121      	bne.n	8006732 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d11a      	bne.n	8006732 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006702:	4013      	ands	r3, r2
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006708:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800670a:	4293      	cmp	r3, r2
 800670c:	d111      	bne.n	8006732 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006718:	085b      	lsrs	r3, r3, #1
 800671a:	3b01      	subs	r3, #1
 800671c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800671e:	429a      	cmp	r2, r3
 8006720:	d107      	bne.n	8006732 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800672e:	429a      	cmp	r2, r3
 8006730:	d001      	beq.n	8006736 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e000      	b.n	8006738 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3718      	adds	r7, #24
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	40007000 	.word	0x40007000
 8006744:	40023800 	.word	0x40023800
 8006748:	42470060 	.word	0x42470060

0800674c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e0cc      	b.n	80068fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006760:	4b68      	ldr	r3, [pc, #416]	; (8006904 <HAL_RCC_ClockConfig+0x1b8>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0307 	and.w	r3, r3, #7
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	429a      	cmp	r2, r3
 800676c:	d90c      	bls.n	8006788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800676e:	4b65      	ldr	r3, [pc, #404]	; (8006904 <HAL_RCC_ClockConfig+0x1b8>)
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	b2d2      	uxtb	r2, r2
 8006774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006776:	4b63      	ldr	r3, [pc, #396]	; (8006904 <HAL_RCC_ClockConfig+0x1b8>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0307 	and.w	r3, r3, #7
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	429a      	cmp	r2, r3
 8006782:	d001      	beq.n	8006788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e0b8      	b.n	80068fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0302 	and.w	r3, r3, #2
 8006790:	2b00      	cmp	r3, #0
 8006792:	d020      	beq.n	80067d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b00      	cmp	r3, #0
 800679e:	d005      	beq.n	80067ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067a0:	4b59      	ldr	r3, [pc, #356]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	4a58      	ldr	r2, [pc, #352]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 80067a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80067aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0308 	and.w	r3, r3, #8
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d005      	beq.n	80067c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067b8:	4b53      	ldr	r3, [pc, #332]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	4a52      	ldr	r2, [pc, #328]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 80067be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80067c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067c4:	4b50      	ldr	r3, [pc, #320]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	494d      	ldr	r1, [pc, #308]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d044      	beq.n	800686c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d107      	bne.n	80067fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067ea:	4b47      	ldr	r3, [pc, #284]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d119      	bne.n	800682a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e07f      	b.n	80068fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d003      	beq.n	800680a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006806:	2b03      	cmp	r3, #3
 8006808:	d107      	bne.n	800681a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800680a:	4b3f      	ldr	r3, [pc, #252]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d109      	bne.n	800682a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e06f      	b.n	80068fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800681a:	4b3b      	ldr	r3, [pc, #236]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0302 	and.w	r3, r3, #2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e067      	b.n	80068fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800682a:	4b37      	ldr	r3, [pc, #220]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f023 0203 	bic.w	r2, r3, #3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	4934      	ldr	r1, [pc, #208]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 8006838:	4313      	orrs	r3, r2
 800683a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800683c:	f7fc fb6e 	bl	8002f1c <HAL_GetTick>
 8006840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006842:	e00a      	b.n	800685a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006844:	f7fc fb6a 	bl	8002f1c <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006852:	4293      	cmp	r3, r2
 8006854:	d901      	bls.n	800685a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e04f      	b.n	80068fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800685a:	4b2b      	ldr	r3, [pc, #172]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f003 020c 	and.w	r2, r3, #12
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	429a      	cmp	r2, r3
 800686a:	d1eb      	bne.n	8006844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800686c:	4b25      	ldr	r3, [pc, #148]	; (8006904 <HAL_RCC_ClockConfig+0x1b8>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0307 	and.w	r3, r3, #7
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	429a      	cmp	r2, r3
 8006878:	d20c      	bcs.n	8006894 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800687a:	4b22      	ldr	r3, [pc, #136]	; (8006904 <HAL_RCC_ClockConfig+0x1b8>)
 800687c:	683a      	ldr	r2, [r7, #0]
 800687e:	b2d2      	uxtb	r2, r2
 8006880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006882:	4b20      	ldr	r3, [pc, #128]	; (8006904 <HAL_RCC_ClockConfig+0x1b8>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0307 	and.w	r3, r3, #7
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	429a      	cmp	r2, r3
 800688e:	d001      	beq.n	8006894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e032      	b.n	80068fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0304 	and.w	r3, r3, #4
 800689c:	2b00      	cmp	r3, #0
 800689e:	d008      	beq.n	80068b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068a0:	4b19      	ldr	r3, [pc, #100]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	4916      	ldr	r1, [pc, #88]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0308 	and.w	r3, r3, #8
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d009      	beq.n	80068d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068be:	4b12      	ldr	r3, [pc, #72]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	00db      	lsls	r3, r3, #3
 80068cc:	490e      	ldr	r1, [pc, #56]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068d2:	f000 f821 	bl	8006918 <HAL_RCC_GetSysClockFreq>
 80068d6:	4602      	mov	r2, r0
 80068d8:	4b0b      	ldr	r3, [pc, #44]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	091b      	lsrs	r3, r3, #4
 80068de:	f003 030f 	and.w	r3, r3, #15
 80068e2:	490a      	ldr	r1, [pc, #40]	; (800690c <HAL_RCC_ClockConfig+0x1c0>)
 80068e4:	5ccb      	ldrb	r3, [r1, r3]
 80068e6:	fa22 f303 	lsr.w	r3, r2, r3
 80068ea:	4a09      	ldr	r2, [pc, #36]	; (8006910 <HAL_RCC_ClockConfig+0x1c4>)
 80068ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80068ee:	4b09      	ldr	r3, [pc, #36]	; (8006914 <HAL_RCC_ClockConfig+0x1c8>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fc face 	bl	8002e94 <HAL_InitTick>

  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	40023c00 	.word	0x40023c00
 8006908:	40023800 	.word	0x40023800
 800690c:	08009174 	.word	0x08009174
 8006910:	200000bc 	.word	0x200000bc
 8006914:	200000c0 	.word	0x200000c0

08006918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006918:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800691c:	b084      	sub	sp, #16
 800691e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006920:	2300      	movs	r3, #0
 8006922:	607b      	str	r3, [r7, #4]
 8006924:	2300      	movs	r3, #0
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	2300      	movs	r3, #0
 800692a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006930:	4b67      	ldr	r3, [pc, #412]	; (8006ad0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f003 030c 	and.w	r3, r3, #12
 8006938:	2b08      	cmp	r3, #8
 800693a:	d00d      	beq.n	8006958 <HAL_RCC_GetSysClockFreq+0x40>
 800693c:	2b08      	cmp	r3, #8
 800693e:	f200 80bd 	bhi.w	8006abc <HAL_RCC_GetSysClockFreq+0x1a4>
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <HAL_RCC_GetSysClockFreq+0x34>
 8006946:	2b04      	cmp	r3, #4
 8006948:	d003      	beq.n	8006952 <HAL_RCC_GetSysClockFreq+0x3a>
 800694a:	e0b7      	b.n	8006abc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800694c:	4b61      	ldr	r3, [pc, #388]	; (8006ad4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800694e:	60bb      	str	r3, [r7, #8]
       break;
 8006950:	e0b7      	b.n	8006ac2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006952:	4b61      	ldr	r3, [pc, #388]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006954:	60bb      	str	r3, [r7, #8]
      break;
 8006956:	e0b4      	b.n	8006ac2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006958:	4b5d      	ldr	r3, [pc, #372]	; (8006ad0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006960:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006962:	4b5b      	ldr	r3, [pc, #364]	; (8006ad0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d04d      	beq.n	8006a0a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800696e:	4b58      	ldr	r3, [pc, #352]	; (8006ad0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	099b      	lsrs	r3, r3, #6
 8006974:	461a      	mov	r2, r3
 8006976:	f04f 0300 	mov.w	r3, #0
 800697a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800697e:	f04f 0100 	mov.w	r1, #0
 8006982:	ea02 0800 	and.w	r8, r2, r0
 8006986:	ea03 0901 	and.w	r9, r3, r1
 800698a:	4640      	mov	r0, r8
 800698c:	4649      	mov	r1, r9
 800698e:	f04f 0200 	mov.w	r2, #0
 8006992:	f04f 0300 	mov.w	r3, #0
 8006996:	014b      	lsls	r3, r1, #5
 8006998:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800699c:	0142      	lsls	r2, r0, #5
 800699e:	4610      	mov	r0, r2
 80069a0:	4619      	mov	r1, r3
 80069a2:	ebb0 0008 	subs.w	r0, r0, r8
 80069a6:	eb61 0109 	sbc.w	r1, r1, r9
 80069aa:	f04f 0200 	mov.w	r2, #0
 80069ae:	f04f 0300 	mov.w	r3, #0
 80069b2:	018b      	lsls	r3, r1, #6
 80069b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80069b8:	0182      	lsls	r2, r0, #6
 80069ba:	1a12      	subs	r2, r2, r0
 80069bc:	eb63 0301 	sbc.w	r3, r3, r1
 80069c0:	f04f 0000 	mov.w	r0, #0
 80069c4:	f04f 0100 	mov.w	r1, #0
 80069c8:	00d9      	lsls	r1, r3, #3
 80069ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069ce:	00d0      	lsls	r0, r2, #3
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	eb12 0208 	adds.w	r2, r2, r8
 80069d8:	eb43 0309 	adc.w	r3, r3, r9
 80069dc:	f04f 0000 	mov.w	r0, #0
 80069e0:	f04f 0100 	mov.w	r1, #0
 80069e4:	0259      	lsls	r1, r3, #9
 80069e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80069ea:	0250      	lsls	r0, r2, #9
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4610      	mov	r0, r2
 80069f2:	4619      	mov	r1, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	461a      	mov	r2, r3
 80069f8:	f04f 0300 	mov.w	r3, #0
 80069fc:	f7fa f862 	bl	8000ac4 <__aeabi_uldivmod>
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	4613      	mov	r3, r2
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	e04a      	b.n	8006aa0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a0a:	4b31      	ldr	r3, [pc, #196]	; (8006ad0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	099b      	lsrs	r3, r3, #6
 8006a10:	461a      	mov	r2, r3
 8006a12:	f04f 0300 	mov.w	r3, #0
 8006a16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006a1a:	f04f 0100 	mov.w	r1, #0
 8006a1e:	ea02 0400 	and.w	r4, r2, r0
 8006a22:	ea03 0501 	and.w	r5, r3, r1
 8006a26:	4620      	mov	r0, r4
 8006a28:	4629      	mov	r1, r5
 8006a2a:	f04f 0200 	mov.w	r2, #0
 8006a2e:	f04f 0300 	mov.w	r3, #0
 8006a32:	014b      	lsls	r3, r1, #5
 8006a34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006a38:	0142      	lsls	r2, r0, #5
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	1b00      	subs	r0, r0, r4
 8006a40:	eb61 0105 	sbc.w	r1, r1, r5
 8006a44:	f04f 0200 	mov.w	r2, #0
 8006a48:	f04f 0300 	mov.w	r3, #0
 8006a4c:	018b      	lsls	r3, r1, #6
 8006a4e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006a52:	0182      	lsls	r2, r0, #6
 8006a54:	1a12      	subs	r2, r2, r0
 8006a56:	eb63 0301 	sbc.w	r3, r3, r1
 8006a5a:	f04f 0000 	mov.w	r0, #0
 8006a5e:	f04f 0100 	mov.w	r1, #0
 8006a62:	00d9      	lsls	r1, r3, #3
 8006a64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a68:	00d0      	lsls	r0, r2, #3
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	1912      	adds	r2, r2, r4
 8006a70:	eb45 0303 	adc.w	r3, r5, r3
 8006a74:	f04f 0000 	mov.w	r0, #0
 8006a78:	f04f 0100 	mov.w	r1, #0
 8006a7c:	0299      	lsls	r1, r3, #10
 8006a7e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006a82:	0290      	lsls	r0, r2, #10
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4610      	mov	r0, r2
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f04f 0300 	mov.w	r3, #0
 8006a94:	f7fa f816 	bl	8000ac4 <__aeabi_uldivmod>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006aa0:	4b0b      	ldr	r3, [pc, #44]	; (8006ad0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	0c1b      	lsrs	r3, r3, #16
 8006aa6:	f003 0303 	and.w	r3, r3, #3
 8006aaa:	3301      	adds	r3, #1
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab8:	60bb      	str	r3, [r7, #8]
      break;
 8006aba:	e002      	b.n	8006ac2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006abc:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006abe:	60bb      	str	r3, [r7, #8]
      break;
 8006ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ac2:	68bb      	ldr	r3, [r7, #8]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006ace:	bf00      	nop
 8006ad0:	40023800 	.word	0x40023800
 8006ad4:	00f42400 	.word	0x00f42400
 8006ad8:	007a1200 	.word	0x007a1200

08006adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006adc:	b480      	push	{r7}
 8006ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ae0:	4b03      	ldr	r3, [pc, #12]	; (8006af0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	200000bc 	.word	0x200000bc

08006af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006af8:	f7ff fff0 	bl	8006adc <HAL_RCC_GetHCLKFreq>
 8006afc:	4602      	mov	r2, r0
 8006afe:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	0a9b      	lsrs	r3, r3, #10
 8006b04:	f003 0307 	and.w	r3, r3, #7
 8006b08:	4903      	ldr	r1, [pc, #12]	; (8006b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b0a:	5ccb      	ldrb	r3, [r1, r3]
 8006b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	40023800 	.word	0x40023800
 8006b18:	08009184 	.word	0x08009184

08006b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b20:	f7ff ffdc 	bl	8006adc <HAL_RCC_GetHCLKFreq>
 8006b24:	4602      	mov	r2, r0
 8006b26:	4b05      	ldr	r3, [pc, #20]	; (8006b3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	0b5b      	lsrs	r3, r3, #13
 8006b2c:	f003 0307 	and.w	r3, r3, #7
 8006b30:	4903      	ldr	r1, [pc, #12]	; (8006b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b32:	5ccb      	ldrb	r3, [r1, r3]
 8006b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	40023800 	.word	0x40023800
 8006b40:	08009184 	.word	0x08009184

08006b44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e041      	b.n	8006bda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d106      	bne.n	8006b70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7fb ff94 	bl	8002a98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2202      	movs	r2, #2
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	3304      	adds	r3, #4
 8006b80:	4619      	mov	r1, r3
 8006b82:	4610      	mov	r0, r2
 8006b84:	f000 fc0e 	bl	80073a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
	...

08006be4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d109      	bne.n	8006c08 <HAL_TIM_PWM_Start+0x24>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	bf14      	ite	ne
 8006c00:	2301      	movne	r3, #1
 8006c02:	2300      	moveq	r3, #0
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	e022      	b.n	8006c4e <HAL_TIM_PWM_Start+0x6a>
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	d109      	bne.n	8006c22 <HAL_TIM_PWM_Start+0x3e>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	bf14      	ite	ne
 8006c1a:	2301      	movne	r3, #1
 8006c1c:	2300      	moveq	r3, #0
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	e015      	b.n	8006c4e <HAL_TIM_PWM_Start+0x6a>
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b08      	cmp	r3, #8
 8006c26:	d109      	bne.n	8006c3c <HAL_TIM_PWM_Start+0x58>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	bf14      	ite	ne
 8006c34:	2301      	movne	r3, #1
 8006c36:	2300      	moveq	r3, #0
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	e008      	b.n	8006c4e <HAL_TIM_PWM_Start+0x6a>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	bf14      	ite	ne
 8006c48:	2301      	movne	r3, #1
 8006c4a:	2300      	moveq	r3, #0
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e068      	b.n	8006d28 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d104      	bne.n	8006c66 <HAL_TIM_PWM_Start+0x82>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c64:	e013      	b.n	8006c8e <HAL_TIM_PWM_Start+0xaa>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b04      	cmp	r3, #4
 8006c6a:	d104      	bne.n	8006c76 <HAL_TIM_PWM_Start+0x92>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c74:	e00b      	b.n	8006c8e <HAL_TIM_PWM_Start+0xaa>
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b08      	cmp	r3, #8
 8006c7a:	d104      	bne.n	8006c86 <HAL_TIM_PWM_Start+0xa2>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c84:	e003      	b.n	8006c8e <HAL_TIM_PWM_Start+0xaa>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2202      	movs	r2, #2
 8006c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2201      	movs	r2, #1
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 fd90 	bl	80077bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a23      	ldr	r2, [pc, #140]	; (8006d30 <HAL_TIM_PWM_Start+0x14c>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d107      	bne.n	8006cb6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a1d      	ldr	r2, [pc, #116]	; (8006d30 <HAL_TIM_PWM_Start+0x14c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d018      	beq.n	8006cf2 <HAL_TIM_PWM_Start+0x10e>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc8:	d013      	beq.n	8006cf2 <HAL_TIM_PWM_Start+0x10e>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a19      	ldr	r2, [pc, #100]	; (8006d34 <HAL_TIM_PWM_Start+0x150>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d00e      	beq.n	8006cf2 <HAL_TIM_PWM_Start+0x10e>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a17      	ldr	r2, [pc, #92]	; (8006d38 <HAL_TIM_PWM_Start+0x154>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d009      	beq.n	8006cf2 <HAL_TIM_PWM_Start+0x10e>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a16      	ldr	r2, [pc, #88]	; (8006d3c <HAL_TIM_PWM_Start+0x158>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d004      	beq.n	8006cf2 <HAL_TIM_PWM_Start+0x10e>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a14      	ldr	r2, [pc, #80]	; (8006d40 <HAL_TIM_PWM_Start+0x15c>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d111      	bne.n	8006d16 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f003 0307 	and.w	r3, r3, #7
 8006cfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2b06      	cmp	r3, #6
 8006d02:	d010      	beq.n	8006d26 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f042 0201 	orr.w	r2, r2, #1
 8006d12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d14:	e007      	b.n	8006d26 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f042 0201 	orr.w	r2, r2, #1
 8006d24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	40010000 	.word	0x40010000
 8006d34:	40000400 	.word	0x40000400
 8006d38:	40000800 	.word	0x40000800
 8006d3c:	40000c00 	.word	0x40000c00
 8006d40:	40014000 	.word	0x40014000

08006d44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e097      	b.n	8006e88 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d106      	bne.n	8006d72 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7fb feb3 	bl	8002ad8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2202      	movs	r2, #2
 8006d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	6812      	ldr	r2, [r2, #0]
 8006d84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d88:	f023 0307 	bic.w	r3, r3, #7
 8006d8c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	3304      	adds	r3, #4
 8006d96:	4619      	mov	r1, r3
 8006d98:	4610      	mov	r0, r2
 8006d9a:	f000 fb03 	bl	80073a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dc6:	f023 0303 	bic.w	r3, r3, #3
 8006dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	689a      	ldr	r2, [r3, #8]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	021b      	lsls	r3, r3, #8
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006de4:	f023 030c 	bic.w	r3, r3, #12
 8006de8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006df0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006df4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	021b      	lsls	r3, r3, #8
 8006e00:	4313      	orrs	r3, r2
 8006e02:	693a      	ldr	r2, [r7, #16]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	011a      	lsls	r2, r3, #4
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	031b      	lsls	r3, r3, #12
 8006e14:	4313      	orrs	r3, r2
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006e22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006e2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	695b      	ldr	r3, [r3, #20]
 8006e34:	011b      	lsls	r3, r3, #4
 8006e36:	4313      	orrs	r3, r2
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3718      	adds	r7, #24
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ea0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ea8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006eb0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006eb8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d110      	bne.n	8006ee2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d102      	bne.n	8006ecc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ec6:	7b7b      	ldrb	r3, [r7, #13]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d001      	beq.n	8006ed0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e069      	b.n	8006fa4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ee0:	e031      	b.n	8006f46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b04      	cmp	r3, #4
 8006ee6:	d110      	bne.n	8006f0a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ee8:	7bbb      	ldrb	r3, [r7, #14]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d102      	bne.n	8006ef4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006eee:	7b3b      	ldrb	r3, [r7, #12]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d001      	beq.n	8006ef8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e055      	b.n	8006fa4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f08:	e01d      	b.n	8006f46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d108      	bne.n	8006f22 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f10:	7bbb      	ldrb	r3, [r7, #14]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d105      	bne.n	8006f22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f16:	7b7b      	ldrb	r3, [r7, #13]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d102      	bne.n	8006f22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f1c:	7b3b      	ldrb	r3, [r7, #12]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d001      	beq.n	8006f26 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e03e      	b.n	8006fa4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2202      	movs	r2, #2
 8006f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2202      	movs	r2, #2
 8006f32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2202      	movs	r2, #2
 8006f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2202      	movs	r2, #2
 8006f42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d003      	beq.n	8006f54 <HAL_TIM_Encoder_Start+0xc4>
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	2b04      	cmp	r3, #4
 8006f50:	d008      	beq.n	8006f64 <HAL_TIM_Encoder_Start+0xd4>
 8006f52:	e00f      	b.n	8006f74 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f000 fc2d 	bl	80077bc <TIM_CCxChannelCmd>
      break;
 8006f62:	e016      	b.n	8006f92 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	2104      	movs	r1, #4
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 fc25 	bl	80077bc <TIM_CCxChannelCmd>
      break;
 8006f72:	e00e      	b.n	8006f92 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f000 fc1d 	bl	80077bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2201      	movs	r2, #1
 8006f88:	2104      	movs	r1, #4
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 fc16 	bl	80077bc <TIM_CCxChannelCmd>
      break;
 8006f90:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f042 0201 	orr.w	r2, r2, #1
 8006fa0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d122      	bne.n	8007008 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	f003 0302 	and.w	r3, r3, #2
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d11b      	bne.n	8007008 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f06f 0202 	mvn.w	r2, #2
 8006fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	f003 0303 	and.w	r3, r3, #3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f9ba 	bl	8007368 <HAL_TIM_IC_CaptureCallback>
 8006ff4:	e005      	b.n	8007002 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f9ac 	bl	8007354 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f9bd 	bl	800737c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	f003 0304 	and.w	r3, r3, #4
 8007012:	2b04      	cmp	r3, #4
 8007014:	d122      	bne.n	800705c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	f003 0304 	and.w	r3, r3, #4
 8007020:	2b04      	cmp	r3, #4
 8007022:	d11b      	bne.n	800705c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f06f 0204 	mvn.w	r2, #4
 800702c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2202      	movs	r2, #2
 8007032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f990 	bl	8007368 <HAL_TIM_IC_CaptureCallback>
 8007048:	e005      	b.n	8007056 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f982 	bl	8007354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f993 	bl	800737c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	f003 0308 	and.w	r3, r3, #8
 8007066:	2b08      	cmp	r3, #8
 8007068:	d122      	bne.n	80070b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	f003 0308 	and.w	r3, r3, #8
 8007074:	2b08      	cmp	r3, #8
 8007076:	d11b      	bne.n	80070b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f06f 0208 	mvn.w	r2, #8
 8007080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2204      	movs	r2, #4
 8007086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	f003 0303 	and.w	r3, r3, #3
 8007092:	2b00      	cmp	r3, #0
 8007094:	d003      	beq.n	800709e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f966 	bl	8007368 <HAL_TIM_IC_CaptureCallback>
 800709c:	e005      	b.n	80070aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f958 	bl	8007354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 f969 	bl	800737c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	f003 0310 	and.w	r3, r3, #16
 80070ba:	2b10      	cmp	r3, #16
 80070bc:	d122      	bne.n	8007104 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	f003 0310 	and.w	r3, r3, #16
 80070c8:	2b10      	cmp	r3, #16
 80070ca:	d11b      	bne.n	8007104 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f06f 0210 	mvn.w	r2, #16
 80070d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2208      	movs	r2, #8
 80070da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d003      	beq.n	80070f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f93c 	bl	8007368 <HAL_TIM_IC_CaptureCallback>
 80070f0:	e005      	b.n	80070fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f92e 	bl	8007354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f93f 	bl	800737c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b01      	cmp	r3, #1
 8007110:	d10e      	bne.n	8007130 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	2b01      	cmp	r3, #1
 800711e:	d107      	bne.n	8007130 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f06f 0201 	mvn.w	r2, #1
 8007128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f908 	bl	8007340 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800713a:	2b80      	cmp	r3, #128	; 0x80
 800713c:	d10e      	bne.n	800715c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007148:	2b80      	cmp	r3, #128	; 0x80
 800714a:	d107      	bne.n	800715c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fbce 	bl	80078f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007166:	2b40      	cmp	r3, #64	; 0x40
 8007168:	d10e      	bne.n	8007188 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007174:	2b40      	cmp	r3, #64	; 0x40
 8007176:	d107      	bne.n	8007188 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f904 	bl	8007390 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	f003 0320 	and.w	r3, r3, #32
 8007192:	2b20      	cmp	r3, #32
 8007194:	d10e      	bne.n	80071b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f003 0320 	and.w	r3, r3, #32
 80071a0:	2b20      	cmp	r3, #32
 80071a2:	d107      	bne.n	80071b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f06f 0220 	mvn.w	r2, #32
 80071ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fb98 	bl	80078e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071b4:	bf00      	nop
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d101      	bne.n	80071da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071d6:	2302      	movs	r3, #2
 80071d8:	e0ae      	b.n	8007338 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b0c      	cmp	r3, #12
 80071e6:	f200 809f 	bhi.w	8007328 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80071ea:	a201      	add	r2, pc, #4	; (adr r2, 80071f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f0:	08007225 	.word	0x08007225
 80071f4:	08007329 	.word	0x08007329
 80071f8:	08007329 	.word	0x08007329
 80071fc:	08007329 	.word	0x08007329
 8007200:	08007265 	.word	0x08007265
 8007204:	08007329 	.word	0x08007329
 8007208:	08007329 	.word	0x08007329
 800720c:	08007329 	.word	0x08007329
 8007210:	080072a7 	.word	0x080072a7
 8007214:	08007329 	.word	0x08007329
 8007218:	08007329 	.word	0x08007329
 800721c:	08007329 	.word	0x08007329
 8007220:	080072e7 	.word	0x080072e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68b9      	ldr	r1, [r7, #8]
 800722a:	4618      	mov	r0, r3
 800722c:	f000 f93a 	bl	80074a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	699a      	ldr	r2, [r3, #24]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f042 0208 	orr.w	r2, r2, #8
 800723e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	699a      	ldr	r2, [r3, #24]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f022 0204 	bic.w	r2, r2, #4
 800724e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6999      	ldr	r1, [r3, #24]
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	691a      	ldr	r2, [r3, #16]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	430a      	orrs	r2, r1
 8007260:	619a      	str	r2, [r3, #24]
      break;
 8007262:	e064      	b.n	800732e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68b9      	ldr	r1, [r7, #8]
 800726a:	4618      	mov	r0, r3
 800726c:	f000 f980 	bl	8007570 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	699a      	ldr	r2, [r3, #24]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800727e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	699a      	ldr	r2, [r3, #24]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800728e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	6999      	ldr	r1, [r3, #24]
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	021a      	lsls	r2, r3, #8
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	619a      	str	r2, [r3, #24]
      break;
 80072a4:	e043      	b.n	800732e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68b9      	ldr	r1, [r7, #8]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f000 f9cb 	bl	8007648 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	69da      	ldr	r2, [r3, #28]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f042 0208 	orr.w	r2, r2, #8
 80072c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	69da      	ldr	r2, [r3, #28]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f022 0204 	bic.w	r2, r2, #4
 80072d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69d9      	ldr	r1, [r3, #28]
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	691a      	ldr	r2, [r3, #16]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	430a      	orrs	r2, r1
 80072e2:	61da      	str	r2, [r3, #28]
      break;
 80072e4:	e023      	b.n	800732e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68b9      	ldr	r1, [r7, #8]
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 fa15 	bl	800771c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	69da      	ldr	r2, [r3, #28]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007300:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	69da      	ldr	r2, [r3, #28]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007310:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	69d9      	ldr	r1, [r3, #28]
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	021a      	lsls	r2, r3, #8
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	430a      	orrs	r2, r1
 8007324:	61da      	str	r2, [r3, #28]
      break;
 8007326:	e002      	b.n	800732e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	75fb      	strb	r3, [r7, #23]
      break;
 800732c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007336:	7dfb      	ldrb	r3, [r7, #23]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3718      	adds	r7, #24
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a34      	ldr	r2, [pc, #208]	; (8007488 <TIM_Base_SetConfig+0xe4>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d00f      	beq.n	80073dc <TIM_Base_SetConfig+0x38>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c2:	d00b      	beq.n	80073dc <TIM_Base_SetConfig+0x38>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a31      	ldr	r2, [pc, #196]	; (800748c <TIM_Base_SetConfig+0xe8>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d007      	beq.n	80073dc <TIM_Base_SetConfig+0x38>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a30      	ldr	r2, [pc, #192]	; (8007490 <TIM_Base_SetConfig+0xec>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d003      	beq.n	80073dc <TIM_Base_SetConfig+0x38>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a2f      	ldr	r2, [pc, #188]	; (8007494 <TIM_Base_SetConfig+0xf0>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d108      	bne.n	80073ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a25      	ldr	r2, [pc, #148]	; (8007488 <TIM_Base_SetConfig+0xe4>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d01b      	beq.n	800742e <TIM_Base_SetConfig+0x8a>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073fc:	d017      	beq.n	800742e <TIM_Base_SetConfig+0x8a>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a22      	ldr	r2, [pc, #136]	; (800748c <TIM_Base_SetConfig+0xe8>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d013      	beq.n	800742e <TIM_Base_SetConfig+0x8a>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a21      	ldr	r2, [pc, #132]	; (8007490 <TIM_Base_SetConfig+0xec>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d00f      	beq.n	800742e <TIM_Base_SetConfig+0x8a>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a20      	ldr	r2, [pc, #128]	; (8007494 <TIM_Base_SetConfig+0xf0>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d00b      	beq.n	800742e <TIM_Base_SetConfig+0x8a>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a1f      	ldr	r2, [pc, #124]	; (8007498 <TIM_Base_SetConfig+0xf4>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d007      	beq.n	800742e <TIM_Base_SetConfig+0x8a>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a1e      	ldr	r2, [pc, #120]	; (800749c <TIM_Base_SetConfig+0xf8>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d003      	beq.n	800742e <TIM_Base_SetConfig+0x8a>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a1d      	ldr	r2, [pc, #116]	; (80074a0 <TIM_Base_SetConfig+0xfc>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d108      	bne.n	8007440 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	4313      	orrs	r3, r2
 800743e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	4313      	orrs	r3, r2
 800744c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	689a      	ldr	r2, [r3, #8]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a08      	ldr	r2, [pc, #32]	; (8007488 <TIM_Base_SetConfig+0xe4>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d103      	bne.n	8007474 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	691a      	ldr	r2, [r3, #16]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	615a      	str	r2, [r3, #20]
}
 800747a:	bf00      	nop
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	40010000 	.word	0x40010000
 800748c:	40000400 	.word	0x40000400
 8007490:	40000800 	.word	0x40000800
 8007494:	40000c00 	.word	0x40000c00
 8007498:	40014000 	.word	0x40014000
 800749c:	40014400 	.word	0x40014400
 80074a0:	40014800 	.word	0x40014800

080074a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	f023 0201 	bic.w	r2, r3, #1
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f023 0303 	bic.w	r3, r3, #3
 80074da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f023 0302 	bic.w	r3, r3, #2
 80074ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a1c      	ldr	r2, [pc, #112]	; (800756c <TIM_OC1_SetConfig+0xc8>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d10c      	bne.n	800751a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f023 0308 	bic.w	r3, r3, #8
 8007506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	4313      	orrs	r3, r2
 8007510:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f023 0304 	bic.w	r3, r3, #4
 8007518:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a13      	ldr	r2, [pc, #76]	; (800756c <TIM_OC1_SetConfig+0xc8>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d111      	bne.n	8007546 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	4313      	orrs	r3, r2
 800753a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	4313      	orrs	r3, r2
 8007544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	621a      	str	r2, [r3, #32]
}
 8007560:	bf00      	nop
 8007562:	371c      	adds	r7, #28
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	40010000 	.word	0x40010000

08007570 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007570:	b480      	push	{r7}
 8007572:	b087      	sub	sp, #28
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a1b      	ldr	r3, [r3, #32]
 800757e:	f023 0210 	bic.w	r2, r3, #16
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800759e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	021b      	lsls	r3, r3, #8
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	f023 0320 	bic.w	r3, r3, #32
 80075ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	011b      	lsls	r3, r3, #4
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a1e      	ldr	r2, [pc, #120]	; (8007644 <TIM_OC2_SetConfig+0xd4>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d10d      	bne.n	80075ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	011b      	lsls	r3, r3, #4
 80075de:	697a      	ldr	r2, [r7, #20]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a15      	ldr	r2, [pc, #84]	; (8007644 <TIM_OC2_SetConfig+0xd4>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d113      	bne.n	800761c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007602:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	695b      	ldr	r3, [r3, #20]
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	4313      	orrs	r3, r2
 800760e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	4313      	orrs	r3, r2
 800761a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	697a      	ldr	r2, [r7, #20]
 8007634:	621a      	str	r2, [r3, #32]
}
 8007636:	bf00      	nop
 8007638:	371c      	adds	r7, #28
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	40010000 	.word	0x40010000

08007648 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007648:	b480      	push	{r7}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	69db      	ldr	r3, [r3, #28]
 800766e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f023 0303 	bic.w	r3, r3, #3
 800767e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	4313      	orrs	r3, r2
 8007688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	021b      	lsls	r3, r3, #8
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	4313      	orrs	r3, r2
 800769c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a1d      	ldr	r2, [pc, #116]	; (8007718 <TIM_OC3_SetConfig+0xd0>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d10d      	bne.n	80076c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	021b      	lsls	r3, r3, #8
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a14      	ldr	r2, [pc, #80]	; (8007718 <TIM_OC3_SetConfig+0xd0>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d113      	bne.n	80076f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	011b      	lsls	r3, r3, #4
 80076e0:	693a      	ldr	r2, [r7, #16]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	011b      	lsls	r3, r3, #4
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	621a      	str	r2, [r3, #32]
}
 800770c:	bf00      	nop
 800770e:	371c      	adds	r7, #28
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr
 8007718:	40010000 	.word	0x40010000

0800771c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800771c:	b480      	push	{r7}
 800771e:	b087      	sub	sp, #28
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800774a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	021b      	lsls	r3, r3, #8
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	4313      	orrs	r3, r2
 800775e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007766:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	031b      	lsls	r3, r3, #12
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	4313      	orrs	r3, r2
 8007772:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a10      	ldr	r2, [pc, #64]	; (80077b8 <TIM_OC4_SetConfig+0x9c>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d109      	bne.n	8007790 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007782:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	695b      	ldr	r3, [r3, #20]
 8007788:	019b      	lsls	r3, r3, #6
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	4313      	orrs	r3, r2
 800778e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	693a      	ldr	r2, [r7, #16]
 80077a8:	621a      	str	r2, [r3, #32]
}
 80077aa:	bf00      	nop
 80077ac:	371c      	adds	r7, #28
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	40010000 	.word	0x40010000

080077bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	f003 031f 	and.w	r3, r3, #31
 80077ce:	2201      	movs	r2, #1
 80077d0:	fa02 f303 	lsl.w	r3, r2, r3
 80077d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6a1a      	ldr	r2, [r3, #32]
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	43db      	mvns	r3, r3
 80077de:	401a      	ands	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6a1a      	ldr	r2, [r3, #32]
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	f003 031f 	and.w	r3, r3, #31
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	fa01 f303 	lsl.w	r3, r1, r3
 80077f4:	431a      	orrs	r2, r3
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	621a      	str	r2, [r3, #32]
}
 80077fa:	bf00      	nop
 80077fc:	371c      	adds	r7, #28
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
	...

08007808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007818:	2b01      	cmp	r3, #1
 800781a:	d101      	bne.n	8007820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800781c:	2302      	movs	r3, #2
 800781e:	e050      	b.n	80078c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2202      	movs	r2, #2
 800782c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007846:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	4313      	orrs	r3, r2
 8007850:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a1c      	ldr	r2, [pc, #112]	; (80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d018      	beq.n	8007896 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800786c:	d013      	beq.n	8007896 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a18      	ldr	r2, [pc, #96]	; (80078d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d00e      	beq.n	8007896 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a16      	ldr	r2, [pc, #88]	; (80078d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d009      	beq.n	8007896 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a15      	ldr	r2, [pc, #84]	; (80078dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d004      	beq.n	8007896 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a13      	ldr	r2, [pc, #76]	; (80078e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d10c      	bne.n	80078b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800789c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3714      	adds	r7, #20
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	40010000 	.word	0x40010000
 80078d4:	40000400 	.word	0x40000400
 80078d8:	40000800 	.word	0x40000800
 80078dc:	40000c00 	.word	0x40000c00
 80078e0:	40014000 	.word	0x40014000

080078e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e03f      	b.n	800799e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d106      	bne.n	8007938 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7fb f9e0 	bl	8002cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2224      	movs	r2, #36	; 0x24
 800793c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68da      	ldr	r2, [r3, #12]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800794e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fe97 	bl	8008684 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	691a      	ldr	r2, [r3, #16]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007964:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	695a      	ldr	r2, [r3, #20]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007974:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68da      	ldr	r2, [r3, #12]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007984:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2220      	movs	r2, #32
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2220      	movs	r2, #32
 8007998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b08c      	sub	sp, #48	; 0x30
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	60f8      	str	r0, [r7, #12]
 80079ae:	60b9      	str	r1, [r7, #8]
 80079b0:	4613      	mov	r3, r2
 80079b2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b20      	cmp	r3, #32
 80079be:	d152      	bne.n	8007a66 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d002      	beq.n	80079cc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80079c6:	88fb      	ldrh	r3, [r7, #6]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e04b      	b.n	8007a68 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d101      	bne.n	80079de <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80079da:	2302      	movs	r3, #2
 80079dc:	e044      	b.n	8007a68 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2201      	movs	r2, #1
 80079ea:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80079ec:	88fb      	ldrh	r3, [r7, #6]
 80079ee:	461a      	mov	r2, r3
 80079f0:	68b9      	ldr	r1, [r7, #8]
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 fbea 	bl	80081cc <UART_Start_Receive_DMA>
 80079f8:	4603      	mov	r3, r0
 80079fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80079fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d12c      	bne.n	8007a60 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d125      	bne.n	8007a5a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a0e:	2300      	movs	r3, #0
 8007a10:	613b      	str	r3, [r7, #16]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	613b      	str	r3, [r7, #16]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	613b      	str	r3, [r7, #16]
 8007a22:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	330c      	adds	r3, #12
 8007a2a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	617b      	str	r3, [r7, #20]
   return(result);
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f043 0310 	orr.w	r3, r3, #16
 8007a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	330c      	adds	r3, #12
 8007a42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a44:	627a      	str	r2, [r7, #36]	; 0x24
 8007a46:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a48:	6a39      	ldr	r1, [r7, #32]
 8007a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a4c:	e841 2300 	strex	r3, r2, [r1]
 8007a50:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e5      	bne.n	8007a24 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8007a58:	e002      	b.n	8007a60 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8007a60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a64:	e000      	b.n	8007a68 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8007a66:	2302      	movs	r3, #2
  }
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3730      	adds	r7, #48	; 0x30
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b0ba      	sub	sp, #232	; 0xe8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007a96:	2300      	movs	r3, #0
 8007a98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa6:	f003 030f 	and.w	r3, r3, #15
 8007aaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007aae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10f      	bne.n	8007ad6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aba:	f003 0320 	and.w	r3, r3, #32
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d009      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x66>
 8007ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ac6:	f003 0320 	and.w	r3, r3, #32
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fd1d 	bl	800850e <UART_Receive_IT>
      return;
 8007ad4:	e256      	b.n	8007f84 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007ad6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 80de 	beq.w	8007c9c <HAL_UART_IRQHandler+0x22c>
 8007ae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d106      	bne.n	8007afa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007af0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f000 80d1 	beq.w	8007c9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00b      	beq.n	8007b1e <HAL_UART_IRQHandler+0xae>
 8007b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d005      	beq.n	8007b1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b16:	f043 0201 	orr.w	r2, r3, #1
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b22:	f003 0304 	and.w	r3, r3, #4
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00b      	beq.n	8007b42 <HAL_UART_IRQHandler+0xd2>
 8007b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d005      	beq.n	8007b42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3a:	f043 0202 	orr.w	r2, r3, #2
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00b      	beq.n	8007b66 <HAL_UART_IRQHandler+0xf6>
 8007b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d005      	beq.n	8007b66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5e:	f043 0204 	orr.w	r2, r3, #4
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b6a:	f003 0308 	and.w	r3, r3, #8
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d011      	beq.n	8007b96 <HAL_UART_IRQHandler+0x126>
 8007b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b76:	f003 0320 	and.w	r3, r3, #32
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d105      	bne.n	8007b8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d005      	beq.n	8007b96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8e:	f043 0208 	orr.w	r2, r3, #8
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f000 81ed 	beq.w	8007f7a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ba4:	f003 0320 	and.w	r3, r3, #32
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d008      	beq.n	8007bbe <HAL_UART_IRQHandler+0x14e>
 8007bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb0:	f003 0320 	and.w	r3, r3, #32
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d002      	beq.n	8007bbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 fca8 	bl	800850e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	695b      	ldr	r3, [r3, #20]
 8007bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc8:	2b40      	cmp	r3, #64	; 0x40
 8007bca:	bf0c      	ite	eq
 8007bcc:	2301      	moveq	r3, #1
 8007bce:	2300      	movne	r3, #0
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bda:	f003 0308 	and.w	r3, r3, #8
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d103      	bne.n	8007bea <HAL_UART_IRQHandler+0x17a>
 8007be2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d04f      	beq.n	8007c8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fbb0 	bl	8008350 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bfa:	2b40      	cmp	r3, #64	; 0x40
 8007bfc:	d141      	bne.n	8007c82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	3314      	adds	r3, #20
 8007c04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c0c:	e853 3f00 	ldrex	r3, [r3]
 8007c10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	3314      	adds	r3, #20
 8007c26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c3a:	e841 2300 	strex	r3, r2, [r1]
 8007c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1d9      	bne.n	8007bfe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d013      	beq.n	8007c7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c56:	4a7d      	ldr	r2, [pc, #500]	; (8007e4c <HAL_UART_IRQHandler+0x3dc>)
 8007c58:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fb fc14 	bl	800348c <HAL_DMA_Abort_IT>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d016      	beq.n	8007c98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c74:	4610      	mov	r0, r2
 8007c76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c78:	e00e      	b.n	8007c98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f9a4 	bl	8007fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c80:	e00a      	b.n	8007c98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f9a0 	bl	8007fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c88:	e006      	b.n	8007c98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f99c 	bl	8007fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007c96:	e170      	b.n	8007f7a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c98:	bf00      	nop
    return;
 8007c9a:	e16e      	b.n	8007f7a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	f040 814a 	bne.w	8007f3a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007caa:	f003 0310 	and.w	r3, r3, #16
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f000 8143 	beq.w	8007f3a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cb8:	f003 0310 	and.w	r3, r3, #16
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 813c 	beq.w	8007f3a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	60bb      	str	r3, [r7, #8]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	60bb      	str	r3, [r7, #8]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	60bb      	str	r3, [r7, #8]
 8007cd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce2:	2b40      	cmp	r3, #64	; 0x40
 8007ce4:	f040 80b4 	bne.w	8007e50 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007cf4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 8140 	beq.w	8007f7e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d06:	429a      	cmp	r2, r3
 8007d08:	f080 8139 	bcs.w	8007f7e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d18:	69db      	ldr	r3, [r3, #28]
 8007d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d1e:	f000 8088 	beq.w	8007e32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	330c      	adds	r3, #12
 8007d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d30:	e853 3f00 	ldrex	r3, [r3]
 8007d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007d38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	330c      	adds	r3, #12
 8007d4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007d4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007d5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d5e:	e841 2300 	strex	r3, r2, [r1]
 8007d62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007d66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1d9      	bne.n	8007d22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3314      	adds	r3, #20
 8007d74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d78:	e853 3f00 	ldrex	r3, [r3]
 8007d7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d80:	f023 0301 	bic.w	r3, r3, #1
 8007d84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3314      	adds	r3, #20
 8007d8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d9e:	e841 2300 	strex	r3, r2, [r1]
 8007da2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007da4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1e1      	bne.n	8007d6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	3314      	adds	r3, #20
 8007db0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007db4:	e853 3f00 	ldrex	r3, [r3]
 8007db8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	3314      	adds	r3, #20
 8007dca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007dce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007dd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007dd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007dd6:	e841 2300 	strex	r3, r2, [r1]
 8007dda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1e3      	bne.n	8007daa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2220      	movs	r2, #32
 8007de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	330c      	adds	r3, #12
 8007df6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dfa:	e853 3f00 	ldrex	r3, [r3]
 8007dfe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e02:	f023 0310 	bic.w	r3, r3, #16
 8007e06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	330c      	adds	r3, #12
 8007e10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007e14:	65ba      	str	r2, [r7, #88]	; 0x58
 8007e16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e1c:	e841 2300 	strex	r3, r2, [r1]
 8007e20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1e3      	bne.n	8007df0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7fb fabd 	bl	80033ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	4619      	mov	r1, r3
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7fa f91c 	bl	8002080 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e48:	e099      	b.n	8007f7e <HAL_UART_IRQHandler+0x50e>
 8007e4a:	bf00      	nop
 8007e4c:	08008417 	.word	0x08008417
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f000 808b 	beq.w	8007f82 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007e6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 8086 	beq.w	8007f82 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	330c      	adds	r3, #12
 8007e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e80:	e853 3f00 	ldrex	r3, [r3]
 8007e84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	330c      	adds	r3, #12
 8007e96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007e9a:	647a      	str	r2, [r7, #68]	; 0x44
 8007e9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ea0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ea2:	e841 2300 	strex	r3, r2, [r1]
 8007ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1e3      	bne.n	8007e76 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3314      	adds	r3, #20
 8007eb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb8:	e853 3f00 	ldrex	r3, [r3]
 8007ebc:	623b      	str	r3, [r7, #32]
   return(result);
 8007ebe:	6a3b      	ldr	r3, [r7, #32]
 8007ec0:	f023 0301 	bic.w	r3, r3, #1
 8007ec4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	3314      	adds	r3, #20
 8007ece:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007ed2:	633a      	str	r2, [r7, #48]	; 0x30
 8007ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eda:	e841 2300 	strex	r3, r2, [r1]
 8007ede:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1e3      	bne.n	8007eae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2220      	movs	r2, #32
 8007eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	330c      	adds	r3, #12
 8007efa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	e853 3f00 	ldrex	r3, [r3]
 8007f02:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f023 0310 	bic.w	r3, r3, #16
 8007f0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	330c      	adds	r3, #12
 8007f14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007f18:	61fa      	str	r2, [r7, #28]
 8007f1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1c:	69b9      	ldr	r1, [r7, #24]
 8007f1e:	69fa      	ldr	r2, [r7, #28]
 8007f20:	e841 2300 	strex	r3, r2, [r1]
 8007f24:	617b      	str	r3, [r7, #20]
   return(result);
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1e3      	bne.n	8007ef4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f30:	4619      	mov	r1, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7fa f8a4 	bl	8002080 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f38:	e023      	b.n	8007f82 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d009      	beq.n	8007f5a <HAL_UART_IRQHandler+0x4ea>
 8007f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d003      	beq.n	8007f5a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fa73 	bl	800843e <UART_Transmit_IT>
    return;
 8007f58:	e014      	b.n	8007f84 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00e      	beq.n	8007f84 <HAL_UART_IRQHandler+0x514>
 8007f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d008      	beq.n	8007f84 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fab3 	bl	80084de <UART_EndTransmit_IT>
    return;
 8007f78:	e004      	b.n	8007f84 <HAL_UART_IRQHandler+0x514>
    return;
 8007f7a:	bf00      	nop
 8007f7c:	e002      	b.n	8007f84 <HAL_UART_IRQHandler+0x514>
      return;
 8007f7e:	bf00      	nop
 8007f80:	e000      	b.n	8007f84 <HAL_UART_IRQHandler+0x514>
      return;
 8007f82:	bf00      	nop
  }
}
 8007f84:	37e8      	adds	r7, #232	; 0xe8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop

08007f8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b09c      	sub	sp, #112	; 0x70
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d172      	bne.n	80080de <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	330c      	adds	r3, #12
 8008004:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008008:	e853 3f00 	ldrex	r3, [r3]
 800800c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800800e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008014:	66bb      	str	r3, [r7, #104]	; 0x68
 8008016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	330c      	adds	r3, #12
 800801c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800801e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008020:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008022:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008024:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008026:	e841 2300 	strex	r3, r2, [r1]
 800802a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800802c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1e5      	bne.n	8007ffe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3314      	adds	r3, #20
 8008038:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803c:	e853 3f00 	ldrex	r3, [r3]
 8008040:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008044:	f023 0301 	bic.w	r3, r3, #1
 8008048:	667b      	str	r3, [r7, #100]	; 0x64
 800804a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	3314      	adds	r3, #20
 8008050:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008052:	647a      	str	r2, [r7, #68]	; 0x44
 8008054:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008056:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008058:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800805a:	e841 2300 	strex	r3, r2, [r1]
 800805e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1e5      	bne.n	8008032 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3314      	adds	r3, #20
 800806c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008070:	e853 3f00 	ldrex	r3, [r3]
 8008074:	623b      	str	r3, [r7, #32]
   return(result);
 8008076:	6a3b      	ldr	r3, [r7, #32]
 8008078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800807c:	663b      	str	r3, [r7, #96]	; 0x60
 800807e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3314      	adds	r3, #20
 8008084:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008086:	633a      	str	r2, [r7, #48]	; 0x30
 8008088:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800808c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800808e:	e841 2300 	strex	r3, r2, [r1]
 8008092:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1e5      	bne.n	8008066 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800809a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800809c:	2220      	movs	r2, #32
 800809e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d119      	bne.n	80080de <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	330c      	adds	r3, #12
 80080b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	e853 3f00 	ldrex	r3, [r3]
 80080b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f023 0310 	bic.w	r3, r3, #16
 80080c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	330c      	adds	r3, #12
 80080c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80080ca:	61fa      	str	r2, [r7, #28]
 80080cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ce:	69b9      	ldr	r1, [r7, #24]
 80080d0:	69fa      	ldr	r2, [r7, #28]
 80080d2:	e841 2300 	strex	r3, r2, [r1]
 80080d6:	617b      	str	r3, [r7, #20]
   return(result);
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1e5      	bne.n	80080aa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d106      	bne.n	80080f4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080ea:	4619      	mov	r1, r3
 80080ec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80080ee:	f7f9 ffc7 	bl	8002080 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80080f2:	e002      	b.n	80080fa <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80080f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80080f6:	f7ff ff53 	bl	8007fa0 <HAL_UART_RxCpltCallback>
}
 80080fa:	bf00      	nop
 80080fc:	3770      	adds	r7, #112	; 0x70
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b084      	sub	sp, #16
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008114:	2b01      	cmp	r3, #1
 8008116:	d108      	bne.n	800812a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800811c:	085b      	lsrs	r3, r3, #1
 800811e:	b29b      	uxth	r3, r3
 8008120:	4619      	mov	r1, r3
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f7f9 ffac 	bl	8002080 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008128:	e002      	b.n	8008130 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f7ff ff42 	bl	8007fb4 <HAL_UART_RxHalfCpltCallback>
}
 8008130:	bf00      	nop
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008140:	2300      	movs	r3, #0
 8008142:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008148:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	695b      	ldr	r3, [r3, #20]
 8008150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008154:	2b80      	cmp	r3, #128	; 0x80
 8008156:	bf0c      	ite	eq
 8008158:	2301      	moveq	r3, #1
 800815a:	2300      	movne	r3, #0
 800815c:	b2db      	uxtb	r3, r3
 800815e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008166:	b2db      	uxtb	r3, r3
 8008168:	2b21      	cmp	r3, #33	; 0x21
 800816a:	d108      	bne.n	800817e <UART_DMAError+0x46>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d005      	beq.n	800817e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	2200      	movs	r2, #0
 8008176:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008178:	68b8      	ldr	r0, [r7, #8]
 800817a:	f000 f8c1 	bl	8008300 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	695b      	ldr	r3, [r3, #20]
 8008184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008188:	2b40      	cmp	r3, #64	; 0x40
 800818a:	bf0c      	ite	eq
 800818c:	2301      	moveq	r3, #1
 800818e:	2300      	movne	r3, #0
 8008190:	b2db      	uxtb	r3, r3
 8008192:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800819a:	b2db      	uxtb	r3, r3
 800819c:	2b22      	cmp	r3, #34	; 0x22
 800819e:	d108      	bne.n	80081b2 <UART_DMAError+0x7a>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d005      	beq.n	80081b2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	2200      	movs	r2, #0
 80081aa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80081ac:	68b8      	ldr	r0, [r7, #8]
 80081ae:	f000 f8cf 	bl	8008350 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b6:	f043 0210 	orr.w	r2, r3, #16
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081be:	68b8      	ldr	r0, [r7, #8]
 80081c0:	f7ff ff02 	bl	8007fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081c4:	bf00      	nop
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b098      	sub	sp, #96	; 0x60
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	4613      	mov	r3, r2
 80081d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	88fa      	ldrh	r2, [r7, #6]
 80081e4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2222      	movs	r2, #34	; 0x22
 80081f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f8:	4a3e      	ldr	r2, [pc, #248]	; (80082f4 <UART_Start_Receive_DMA+0x128>)
 80081fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008200:	4a3d      	ldr	r2, [pc, #244]	; (80082f8 <UART_Start_Receive_DMA+0x12c>)
 8008202:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008208:	4a3c      	ldr	r2, [pc, #240]	; (80082fc <UART_Start_Receive_DMA+0x130>)
 800820a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008210:	2200      	movs	r2, #0
 8008212:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008214:	f107 0308 	add.w	r3, r7, #8
 8008218:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	3304      	adds	r3, #4
 8008224:	4619      	mov	r1, r3
 8008226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	88fb      	ldrh	r3, [r7, #6]
 800822c:	f7fb f866 	bl	80032fc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008230:	2300      	movs	r3, #0
 8008232:	613b      	str	r3, [r7, #16]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	613b      	str	r3, [r7, #16]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	613b      	str	r3, [r7, #16]
 8008244:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	330c      	adds	r3, #12
 8008254:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008258:	e853 3f00 	ldrex	r3, [r3]
 800825c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800825e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008264:	65bb      	str	r3, [r7, #88]	; 0x58
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	330c      	adds	r3, #12
 800826c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800826e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008270:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008272:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008274:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008276:	e841 2300 	strex	r3, r2, [r1]
 800827a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800827c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1e5      	bne.n	800824e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	3314      	adds	r3, #20
 8008288:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800828c:	e853 3f00 	ldrex	r3, [r3]
 8008290:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008294:	f043 0301 	orr.w	r3, r3, #1
 8008298:	657b      	str	r3, [r7, #84]	; 0x54
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3314      	adds	r3, #20
 80082a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80082a2:	63ba      	str	r2, [r7, #56]	; 0x38
 80082a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80082a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082aa:	e841 2300 	strex	r3, r2, [r1]
 80082ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1e5      	bne.n	8008282 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	3314      	adds	r3, #20
 80082bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	e853 3f00 	ldrex	r3, [r3]
 80082c4:	617b      	str	r3, [r7, #20]
   return(result);
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082cc:	653b      	str	r3, [r7, #80]	; 0x50
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3314      	adds	r3, #20
 80082d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80082d6:	627a      	str	r2, [r7, #36]	; 0x24
 80082d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082da:	6a39      	ldr	r1, [r7, #32]
 80082dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082de:	e841 2300 	strex	r3, r2, [r1]
 80082e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1e5      	bne.n	80082b6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3760      	adds	r7, #96	; 0x60
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	08007fdd 	.word	0x08007fdd
 80082f8:	08008103 	.word	0x08008103
 80082fc:	08008139 	.word	0x08008139

08008300 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008300:	b480      	push	{r7}
 8008302:	b089      	sub	sp, #36	; 0x24
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	330c      	adds	r3, #12
 800830e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	e853 3f00 	ldrex	r3, [r3]
 8008316:	60bb      	str	r3, [r7, #8]
   return(result);
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800831e:	61fb      	str	r3, [r7, #28]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	330c      	adds	r3, #12
 8008326:	69fa      	ldr	r2, [r7, #28]
 8008328:	61ba      	str	r2, [r7, #24]
 800832a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	6979      	ldr	r1, [r7, #20]
 800832e:	69ba      	ldr	r2, [r7, #24]
 8008330:	e841 2300 	strex	r3, r2, [r1]
 8008334:	613b      	str	r3, [r7, #16]
   return(result);
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e5      	bne.n	8008308 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2220      	movs	r2, #32
 8008340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008344:	bf00      	nop
 8008346:	3724      	adds	r7, #36	; 0x24
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008350:	b480      	push	{r7}
 8008352:	b095      	sub	sp, #84	; 0x54
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	330c      	adds	r3, #12
 800835e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008362:	e853 3f00 	ldrex	r3, [r3]
 8008366:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800836e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	330c      	adds	r3, #12
 8008376:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008378:	643a      	str	r2, [r7, #64]	; 0x40
 800837a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800837e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008380:	e841 2300 	strex	r3, r2, [r1]
 8008384:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1e5      	bne.n	8008358 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	3314      	adds	r3, #20
 8008392:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008394:	6a3b      	ldr	r3, [r7, #32]
 8008396:	e853 3f00 	ldrex	r3, [r3]
 800839a:	61fb      	str	r3, [r7, #28]
   return(result);
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	f023 0301 	bic.w	r3, r3, #1
 80083a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	3314      	adds	r3, #20
 80083aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083b4:	e841 2300 	strex	r3, r2, [r1]
 80083b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1e5      	bne.n	800838c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d119      	bne.n	80083fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	330c      	adds	r3, #12
 80083ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	e853 3f00 	ldrex	r3, [r3]
 80083d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	f023 0310 	bic.w	r3, r3, #16
 80083de:	647b      	str	r3, [r7, #68]	; 0x44
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	330c      	adds	r3, #12
 80083e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083e8:	61ba      	str	r2, [r7, #24]
 80083ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ec:	6979      	ldr	r1, [r7, #20]
 80083ee:	69ba      	ldr	r2, [r7, #24]
 80083f0:	e841 2300 	strex	r3, r2, [r1]
 80083f4:	613b      	str	r3, [r7, #16]
   return(result);
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1e5      	bne.n	80083c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2220      	movs	r2, #32
 8008400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	631a      	str	r2, [r3, #48]	; 0x30
}
 800840a:	bf00      	nop
 800840c:	3754      	adds	r7, #84	; 0x54
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b084      	sub	sp, #16
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008422:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2200      	movs	r2, #0
 8008428:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f7ff fdc9 	bl	8007fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008436:	bf00      	nop
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800843e:	b480      	push	{r7}
 8008440:	b085      	sub	sp, #20
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800844c:	b2db      	uxtb	r3, r3
 800844e:	2b21      	cmp	r3, #33	; 0x21
 8008450:	d13e      	bne.n	80084d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800845a:	d114      	bne.n	8008486 <UART_Transmit_IT+0x48>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d110      	bne.n	8008486 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a1b      	ldr	r3, [r3, #32]
 8008468:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	881b      	ldrh	r3, [r3, #0]
 800846e:	461a      	mov	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008478:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	1c9a      	adds	r2, r3, #2
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	621a      	str	r2, [r3, #32]
 8008484:	e008      	b.n	8008498 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a1b      	ldr	r3, [r3, #32]
 800848a:	1c59      	adds	r1, r3, #1
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	6211      	str	r1, [r2, #32]
 8008490:	781a      	ldrb	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800849c:	b29b      	uxth	r3, r3
 800849e:	3b01      	subs	r3, #1
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	4619      	mov	r1, r3
 80084a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10f      	bne.n	80084cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68da      	ldr	r2, [r3, #12]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68da      	ldr	r2, [r3, #12]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	e000      	b.n	80084d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80084d0:	2302      	movs	r3, #2
  }
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr

080084de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b082      	sub	sp, #8
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68da      	ldr	r2, [r3, #12]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2220      	movs	r2, #32
 80084fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7ff fd44 	bl	8007f8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b08c      	sub	sp, #48	; 0x30
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b22      	cmp	r3, #34	; 0x22
 8008520:	f040 80ab 	bne.w	800867a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800852c:	d117      	bne.n	800855e <UART_Receive_IT+0x50>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d113      	bne.n	800855e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008536:	2300      	movs	r3, #0
 8008538:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800853e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	b29b      	uxth	r3, r3
 8008548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800854c:	b29a      	uxth	r2, r3
 800854e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008550:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008556:	1c9a      	adds	r2, r3, #2
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	629a      	str	r2, [r3, #40]	; 0x28
 800855c:	e026      	b.n	80085ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008562:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008564:	2300      	movs	r3, #0
 8008566:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008570:	d007      	beq.n	8008582 <UART_Receive_IT+0x74>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10a      	bne.n	8008590 <UART_Receive_IT+0x82>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d106      	bne.n	8008590 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	b2da      	uxtb	r2, r3
 800858a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858c:	701a      	strb	r2, [r3, #0]
 800858e:	e008      	b.n	80085a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	b2db      	uxtb	r3, r3
 8008598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800859c:	b2da      	uxtb	r2, r3
 800859e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a6:	1c5a      	adds	r2, r3, #1
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	3b01      	subs	r3, #1
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	4619      	mov	r1, r3
 80085ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d15a      	bne.n	8008676 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68da      	ldr	r2, [r3, #12]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f022 0220 	bic.w	r2, r2, #32
 80085ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68da      	ldr	r2, [r3, #12]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	695a      	ldr	r2, [r3, #20]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f022 0201 	bic.w	r2, r2, #1
 80085ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2220      	movs	r2, #32
 80085f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d135      	bne.n	800866c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	330c      	adds	r3, #12
 800860c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	e853 3f00 	ldrex	r3, [r3]
 8008614:	613b      	str	r3, [r7, #16]
   return(result);
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	f023 0310 	bic.w	r3, r3, #16
 800861c:	627b      	str	r3, [r7, #36]	; 0x24
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	330c      	adds	r3, #12
 8008624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008626:	623a      	str	r2, [r7, #32]
 8008628:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862a:	69f9      	ldr	r1, [r7, #28]
 800862c:	6a3a      	ldr	r2, [r7, #32]
 800862e:	e841 2300 	strex	r3, r2, [r1]
 8008632:	61bb      	str	r3, [r7, #24]
   return(result);
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1e5      	bne.n	8008606 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0310 	and.w	r3, r3, #16
 8008644:	2b10      	cmp	r3, #16
 8008646:	d10a      	bne.n	800865e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008648:	2300      	movs	r3, #0
 800864a:	60fb      	str	r3, [r7, #12]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	60fb      	str	r3, [r7, #12]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	60fb      	str	r3, [r7, #12]
 800865c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f7f9 fd0b 	bl	8002080 <HAL_UARTEx_RxEventCallback>
 800866a:	e002      	b.n	8008672 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7ff fc97 	bl	8007fa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008672:	2300      	movs	r3, #0
 8008674:	e002      	b.n	800867c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	e000      	b.n	800867c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800867a:	2302      	movs	r3, #2
  }
}
 800867c:	4618      	mov	r0, r3
 800867e:	3730      	adds	r7, #48	; 0x30
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008688:	b09f      	sub	sp, #124	; 0x7c
 800868a:	af00      	add	r7, sp, #0
 800868c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800868e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800869a:	68d9      	ldr	r1, [r3, #12]
 800869c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	ea40 0301 	orr.w	r3, r0, r1
 80086a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80086a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086a8:	689a      	ldr	r2, [r3, #8]
 80086aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	431a      	orrs	r2, r3
 80086b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086b2:	695b      	ldr	r3, [r3, #20]
 80086b4:	431a      	orrs	r2, r3
 80086b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086b8:	69db      	ldr	r3, [r3, #28]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80086be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80086c8:	f021 010c 	bic.w	r1, r1, #12
 80086cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80086d2:	430b      	orrs	r3, r1
 80086d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80086d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	695b      	ldr	r3, [r3, #20]
 80086dc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80086e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086e2:	6999      	ldr	r1, [r3, #24]
 80086e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	ea40 0301 	orr.w	r3, r0, r1
 80086ec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80086ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	4bc5      	ldr	r3, [pc, #788]	; (8008a08 <UART_SetConfig+0x384>)
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d004      	beq.n	8008702 <UART_SetConfig+0x7e>
 80086f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	4bc3      	ldr	r3, [pc, #780]	; (8008a0c <UART_SetConfig+0x388>)
 80086fe:	429a      	cmp	r2, r3
 8008700:	d103      	bne.n	800870a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008702:	f7fe fa0b 	bl	8006b1c <HAL_RCC_GetPCLK2Freq>
 8008706:	6778      	str	r0, [r7, #116]	; 0x74
 8008708:	e002      	b.n	8008710 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800870a:	f7fe f9f3 	bl	8006af4 <HAL_RCC_GetPCLK1Freq>
 800870e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008712:	69db      	ldr	r3, [r3, #28]
 8008714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008718:	f040 80b6 	bne.w	8008888 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800871c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800871e:	461c      	mov	r4, r3
 8008720:	f04f 0500 	mov.w	r5, #0
 8008724:	4622      	mov	r2, r4
 8008726:	462b      	mov	r3, r5
 8008728:	1891      	adds	r1, r2, r2
 800872a:	6439      	str	r1, [r7, #64]	; 0x40
 800872c:	415b      	adcs	r3, r3
 800872e:	647b      	str	r3, [r7, #68]	; 0x44
 8008730:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008734:	1912      	adds	r2, r2, r4
 8008736:	eb45 0303 	adc.w	r3, r5, r3
 800873a:	f04f 0000 	mov.w	r0, #0
 800873e:	f04f 0100 	mov.w	r1, #0
 8008742:	00d9      	lsls	r1, r3, #3
 8008744:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008748:	00d0      	lsls	r0, r2, #3
 800874a:	4602      	mov	r2, r0
 800874c:	460b      	mov	r3, r1
 800874e:	1911      	adds	r1, r2, r4
 8008750:	6639      	str	r1, [r7, #96]	; 0x60
 8008752:	416b      	adcs	r3, r5
 8008754:	667b      	str	r3, [r7, #100]	; 0x64
 8008756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	461a      	mov	r2, r3
 800875c:	f04f 0300 	mov.w	r3, #0
 8008760:	1891      	adds	r1, r2, r2
 8008762:	63b9      	str	r1, [r7, #56]	; 0x38
 8008764:	415b      	adcs	r3, r3
 8008766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008768:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800876c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008770:	f7f8 f9a8 	bl	8000ac4 <__aeabi_uldivmod>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4ba5      	ldr	r3, [pc, #660]	; (8008a10 <UART_SetConfig+0x38c>)
 800877a:	fba3 2302 	umull	r2, r3, r3, r2
 800877e:	095b      	lsrs	r3, r3, #5
 8008780:	011e      	lsls	r6, r3, #4
 8008782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008784:	461c      	mov	r4, r3
 8008786:	f04f 0500 	mov.w	r5, #0
 800878a:	4622      	mov	r2, r4
 800878c:	462b      	mov	r3, r5
 800878e:	1891      	adds	r1, r2, r2
 8008790:	6339      	str	r1, [r7, #48]	; 0x30
 8008792:	415b      	adcs	r3, r3
 8008794:	637b      	str	r3, [r7, #52]	; 0x34
 8008796:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800879a:	1912      	adds	r2, r2, r4
 800879c:	eb45 0303 	adc.w	r3, r5, r3
 80087a0:	f04f 0000 	mov.w	r0, #0
 80087a4:	f04f 0100 	mov.w	r1, #0
 80087a8:	00d9      	lsls	r1, r3, #3
 80087aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80087ae:	00d0      	lsls	r0, r2, #3
 80087b0:	4602      	mov	r2, r0
 80087b2:	460b      	mov	r3, r1
 80087b4:	1911      	adds	r1, r2, r4
 80087b6:	65b9      	str	r1, [r7, #88]	; 0x58
 80087b8:	416b      	adcs	r3, r5
 80087ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	461a      	mov	r2, r3
 80087c2:	f04f 0300 	mov.w	r3, #0
 80087c6:	1891      	adds	r1, r2, r2
 80087c8:	62b9      	str	r1, [r7, #40]	; 0x28
 80087ca:	415b      	adcs	r3, r3
 80087cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087d2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80087d6:	f7f8 f975 	bl	8000ac4 <__aeabi_uldivmod>
 80087da:	4602      	mov	r2, r0
 80087dc:	460b      	mov	r3, r1
 80087de:	4b8c      	ldr	r3, [pc, #560]	; (8008a10 <UART_SetConfig+0x38c>)
 80087e0:	fba3 1302 	umull	r1, r3, r3, r2
 80087e4:	095b      	lsrs	r3, r3, #5
 80087e6:	2164      	movs	r1, #100	; 0x64
 80087e8:	fb01 f303 	mul.w	r3, r1, r3
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	00db      	lsls	r3, r3, #3
 80087f0:	3332      	adds	r3, #50	; 0x32
 80087f2:	4a87      	ldr	r2, [pc, #540]	; (8008a10 <UART_SetConfig+0x38c>)
 80087f4:	fba2 2303 	umull	r2, r3, r2, r3
 80087f8:	095b      	lsrs	r3, r3, #5
 80087fa:	005b      	lsls	r3, r3, #1
 80087fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008800:	441e      	add	r6, r3
 8008802:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008804:	4618      	mov	r0, r3
 8008806:	f04f 0100 	mov.w	r1, #0
 800880a:	4602      	mov	r2, r0
 800880c:	460b      	mov	r3, r1
 800880e:	1894      	adds	r4, r2, r2
 8008810:	623c      	str	r4, [r7, #32]
 8008812:	415b      	adcs	r3, r3
 8008814:	627b      	str	r3, [r7, #36]	; 0x24
 8008816:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800881a:	1812      	adds	r2, r2, r0
 800881c:	eb41 0303 	adc.w	r3, r1, r3
 8008820:	f04f 0400 	mov.w	r4, #0
 8008824:	f04f 0500 	mov.w	r5, #0
 8008828:	00dd      	lsls	r5, r3, #3
 800882a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800882e:	00d4      	lsls	r4, r2, #3
 8008830:	4622      	mov	r2, r4
 8008832:	462b      	mov	r3, r5
 8008834:	1814      	adds	r4, r2, r0
 8008836:	653c      	str	r4, [r7, #80]	; 0x50
 8008838:	414b      	adcs	r3, r1
 800883a:	657b      	str	r3, [r7, #84]	; 0x54
 800883c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	461a      	mov	r2, r3
 8008842:	f04f 0300 	mov.w	r3, #0
 8008846:	1891      	adds	r1, r2, r2
 8008848:	61b9      	str	r1, [r7, #24]
 800884a:	415b      	adcs	r3, r3
 800884c:	61fb      	str	r3, [r7, #28]
 800884e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008852:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008856:	f7f8 f935 	bl	8000ac4 <__aeabi_uldivmod>
 800885a:	4602      	mov	r2, r0
 800885c:	460b      	mov	r3, r1
 800885e:	4b6c      	ldr	r3, [pc, #432]	; (8008a10 <UART_SetConfig+0x38c>)
 8008860:	fba3 1302 	umull	r1, r3, r3, r2
 8008864:	095b      	lsrs	r3, r3, #5
 8008866:	2164      	movs	r1, #100	; 0x64
 8008868:	fb01 f303 	mul.w	r3, r1, r3
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	00db      	lsls	r3, r3, #3
 8008870:	3332      	adds	r3, #50	; 0x32
 8008872:	4a67      	ldr	r2, [pc, #412]	; (8008a10 <UART_SetConfig+0x38c>)
 8008874:	fba2 2303 	umull	r2, r3, r2, r3
 8008878:	095b      	lsrs	r3, r3, #5
 800887a:	f003 0207 	and.w	r2, r3, #7
 800887e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4432      	add	r2, r6
 8008884:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008886:	e0b9      	b.n	80089fc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008888:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800888a:	461c      	mov	r4, r3
 800888c:	f04f 0500 	mov.w	r5, #0
 8008890:	4622      	mov	r2, r4
 8008892:	462b      	mov	r3, r5
 8008894:	1891      	adds	r1, r2, r2
 8008896:	6139      	str	r1, [r7, #16]
 8008898:	415b      	adcs	r3, r3
 800889a:	617b      	str	r3, [r7, #20]
 800889c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80088a0:	1912      	adds	r2, r2, r4
 80088a2:	eb45 0303 	adc.w	r3, r5, r3
 80088a6:	f04f 0000 	mov.w	r0, #0
 80088aa:	f04f 0100 	mov.w	r1, #0
 80088ae:	00d9      	lsls	r1, r3, #3
 80088b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80088b4:	00d0      	lsls	r0, r2, #3
 80088b6:	4602      	mov	r2, r0
 80088b8:	460b      	mov	r3, r1
 80088ba:	eb12 0804 	adds.w	r8, r2, r4
 80088be:	eb43 0905 	adc.w	r9, r3, r5
 80088c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f04f 0100 	mov.w	r1, #0
 80088cc:	f04f 0200 	mov.w	r2, #0
 80088d0:	f04f 0300 	mov.w	r3, #0
 80088d4:	008b      	lsls	r3, r1, #2
 80088d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80088da:	0082      	lsls	r2, r0, #2
 80088dc:	4640      	mov	r0, r8
 80088de:	4649      	mov	r1, r9
 80088e0:	f7f8 f8f0 	bl	8000ac4 <__aeabi_uldivmod>
 80088e4:	4602      	mov	r2, r0
 80088e6:	460b      	mov	r3, r1
 80088e8:	4b49      	ldr	r3, [pc, #292]	; (8008a10 <UART_SetConfig+0x38c>)
 80088ea:	fba3 2302 	umull	r2, r3, r3, r2
 80088ee:	095b      	lsrs	r3, r3, #5
 80088f0:	011e      	lsls	r6, r3, #4
 80088f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088f4:	4618      	mov	r0, r3
 80088f6:	f04f 0100 	mov.w	r1, #0
 80088fa:	4602      	mov	r2, r0
 80088fc:	460b      	mov	r3, r1
 80088fe:	1894      	adds	r4, r2, r2
 8008900:	60bc      	str	r4, [r7, #8]
 8008902:	415b      	adcs	r3, r3
 8008904:	60fb      	str	r3, [r7, #12]
 8008906:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800890a:	1812      	adds	r2, r2, r0
 800890c:	eb41 0303 	adc.w	r3, r1, r3
 8008910:	f04f 0400 	mov.w	r4, #0
 8008914:	f04f 0500 	mov.w	r5, #0
 8008918:	00dd      	lsls	r5, r3, #3
 800891a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800891e:	00d4      	lsls	r4, r2, #3
 8008920:	4622      	mov	r2, r4
 8008922:	462b      	mov	r3, r5
 8008924:	1814      	adds	r4, r2, r0
 8008926:	64bc      	str	r4, [r7, #72]	; 0x48
 8008928:	414b      	adcs	r3, r1
 800892a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800892c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	4618      	mov	r0, r3
 8008932:	f04f 0100 	mov.w	r1, #0
 8008936:	f04f 0200 	mov.w	r2, #0
 800893a:	f04f 0300 	mov.w	r3, #0
 800893e:	008b      	lsls	r3, r1, #2
 8008940:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008944:	0082      	lsls	r2, r0, #2
 8008946:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800894a:	f7f8 f8bb 	bl	8000ac4 <__aeabi_uldivmod>
 800894e:	4602      	mov	r2, r0
 8008950:	460b      	mov	r3, r1
 8008952:	4b2f      	ldr	r3, [pc, #188]	; (8008a10 <UART_SetConfig+0x38c>)
 8008954:	fba3 1302 	umull	r1, r3, r3, r2
 8008958:	095b      	lsrs	r3, r3, #5
 800895a:	2164      	movs	r1, #100	; 0x64
 800895c:	fb01 f303 	mul.w	r3, r1, r3
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	011b      	lsls	r3, r3, #4
 8008964:	3332      	adds	r3, #50	; 0x32
 8008966:	4a2a      	ldr	r2, [pc, #168]	; (8008a10 <UART_SetConfig+0x38c>)
 8008968:	fba2 2303 	umull	r2, r3, r2, r3
 800896c:	095b      	lsrs	r3, r3, #5
 800896e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008972:	441e      	add	r6, r3
 8008974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008976:	4618      	mov	r0, r3
 8008978:	f04f 0100 	mov.w	r1, #0
 800897c:	4602      	mov	r2, r0
 800897e:	460b      	mov	r3, r1
 8008980:	1894      	adds	r4, r2, r2
 8008982:	603c      	str	r4, [r7, #0]
 8008984:	415b      	adcs	r3, r3
 8008986:	607b      	str	r3, [r7, #4]
 8008988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800898c:	1812      	adds	r2, r2, r0
 800898e:	eb41 0303 	adc.w	r3, r1, r3
 8008992:	f04f 0400 	mov.w	r4, #0
 8008996:	f04f 0500 	mov.w	r5, #0
 800899a:	00dd      	lsls	r5, r3, #3
 800899c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80089a0:	00d4      	lsls	r4, r2, #3
 80089a2:	4622      	mov	r2, r4
 80089a4:	462b      	mov	r3, r5
 80089a6:	eb12 0a00 	adds.w	sl, r2, r0
 80089aa:	eb43 0b01 	adc.w	fp, r3, r1
 80089ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f04f 0100 	mov.w	r1, #0
 80089b8:	f04f 0200 	mov.w	r2, #0
 80089bc:	f04f 0300 	mov.w	r3, #0
 80089c0:	008b      	lsls	r3, r1, #2
 80089c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80089c6:	0082      	lsls	r2, r0, #2
 80089c8:	4650      	mov	r0, sl
 80089ca:	4659      	mov	r1, fp
 80089cc:	f7f8 f87a 	bl	8000ac4 <__aeabi_uldivmod>
 80089d0:	4602      	mov	r2, r0
 80089d2:	460b      	mov	r3, r1
 80089d4:	4b0e      	ldr	r3, [pc, #56]	; (8008a10 <UART_SetConfig+0x38c>)
 80089d6:	fba3 1302 	umull	r1, r3, r3, r2
 80089da:	095b      	lsrs	r3, r3, #5
 80089dc:	2164      	movs	r1, #100	; 0x64
 80089de:	fb01 f303 	mul.w	r3, r1, r3
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	011b      	lsls	r3, r3, #4
 80089e6:	3332      	adds	r3, #50	; 0x32
 80089e8:	4a09      	ldr	r2, [pc, #36]	; (8008a10 <UART_SetConfig+0x38c>)
 80089ea:	fba2 2303 	umull	r2, r3, r2, r3
 80089ee:	095b      	lsrs	r3, r3, #5
 80089f0:	f003 020f 	and.w	r2, r3, #15
 80089f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4432      	add	r2, r6
 80089fa:	609a      	str	r2, [r3, #8]
}
 80089fc:	bf00      	nop
 80089fe:	377c      	adds	r7, #124	; 0x7c
 8008a00:	46bd      	mov	sp, r7
 8008a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a06:	bf00      	nop
 8008a08:	40011000 	.word	0x40011000
 8008a0c:	40011400 	.word	0x40011400
 8008a10:	51eb851f 	.word	0x51eb851f

08008a14 <__errno>:
 8008a14:	4b01      	ldr	r3, [pc, #4]	; (8008a1c <__errno+0x8>)
 8008a16:	6818      	ldr	r0, [r3, #0]
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	200000c8 	.word	0x200000c8

08008a20 <__libc_init_array>:
 8008a20:	b570      	push	{r4, r5, r6, lr}
 8008a22:	4d0d      	ldr	r5, [pc, #52]	; (8008a58 <__libc_init_array+0x38>)
 8008a24:	4c0d      	ldr	r4, [pc, #52]	; (8008a5c <__libc_init_array+0x3c>)
 8008a26:	1b64      	subs	r4, r4, r5
 8008a28:	10a4      	asrs	r4, r4, #2
 8008a2a:	2600      	movs	r6, #0
 8008a2c:	42a6      	cmp	r6, r4
 8008a2e:	d109      	bne.n	8008a44 <__libc_init_array+0x24>
 8008a30:	4d0b      	ldr	r5, [pc, #44]	; (8008a60 <__libc_init_array+0x40>)
 8008a32:	4c0c      	ldr	r4, [pc, #48]	; (8008a64 <__libc_init_array+0x44>)
 8008a34:	f000 f90a 	bl	8008c4c <_init>
 8008a38:	1b64      	subs	r4, r4, r5
 8008a3a:	10a4      	asrs	r4, r4, #2
 8008a3c:	2600      	movs	r6, #0
 8008a3e:	42a6      	cmp	r6, r4
 8008a40:	d105      	bne.n	8008a4e <__libc_init_array+0x2e>
 8008a42:	bd70      	pop	{r4, r5, r6, pc}
 8008a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a48:	4798      	blx	r3
 8008a4a:	3601      	adds	r6, #1
 8008a4c:	e7ee      	b.n	8008a2c <__libc_init_array+0xc>
 8008a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a52:	4798      	blx	r3
 8008a54:	3601      	adds	r6, #1
 8008a56:	e7f2      	b.n	8008a3e <__libc_init_array+0x1e>
 8008a58:	080091c4 	.word	0x080091c4
 8008a5c:	080091c4 	.word	0x080091c4
 8008a60:	080091c4 	.word	0x080091c4
 8008a64:	080091c8 	.word	0x080091c8

08008a68 <__itoa>:
 8008a68:	1e93      	subs	r3, r2, #2
 8008a6a:	2b22      	cmp	r3, #34	; 0x22
 8008a6c:	b510      	push	{r4, lr}
 8008a6e:	460c      	mov	r4, r1
 8008a70:	d904      	bls.n	8008a7c <__itoa+0x14>
 8008a72:	2300      	movs	r3, #0
 8008a74:	700b      	strb	r3, [r1, #0]
 8008a76:	461c      	mov	r4, r3
 8008a78:	4620      	mov	r0, r4
 8008a7a:	bd10      	pop	{r4, pc}
 8008a7c:	2a0a      	cmp	r2, #10
 8008a7e:	d109      	bne.n	8008a94 <__itoa+0x2c>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	da07      	bge.n	8008a94 <__itoa+0x2c>
 8008a84:	232d      	movs	r3, #45	; 0x2d
 8008a86:	700b      	strb	r3, [r1, #0]
 8008a88:	4240      	negs	r0, r0
 8008a8a:	2101      	movs	r1, #1
 8008a8c:	4421      	add	r1, r4
 8008a8e:	f000 f88d 	bl	8008bac <__utoa>
 8008a92:	e7f1      	b.n	8008a78 <__itoa+0x10>
 8008a94:	2100      	movs	r1, #0
 8008a96:	e7f9      	b.n	8008a8c <__itoa+0x24>

08008a98 <itoa>:
 8008a98:	f7ff bfe6 	b.w	8008a68 <__itoa>

08008a9c <malloc>:
 8008a9c:	4b02      	ldr	r3, [pc, #8]	; (8008aa8 <malloc+0xc>)
 8008a9e:	4601      	mov	r1, r0
 8008aa0:	6818      	ldr	r0, [r3, #0]
 8008aa2:	f000 b819 	b.w	8008ad8 <_malloc_r>
 8008aa6:	bf00      	nop
 8008aa8:	200000c8 	.word	0x200000c8

08008aac <memcpy>:
 8008aac:	440a      	add	r2, r1
 8008aae:	4291      	cmp	r1, r2
 8008ab0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ab4:	d100      	bne.n	8008ab8 <memcpy+0xc>
 8008ab6:	4770      	bx	lr
 8008ab8:	b510      	push	{r4, lr}
 8008aba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008abe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ac2:	4291      	cmp	r1, r2
 8008ac4:	d1f9      	bne.n	8008aba <memcpy+0xe>
 8008ac6:	bd10      	pop	{r4, pc}

08008ac8 <memset>:
 8008ac8:	4402      	add	r2, r0
 8008aca:	4603      	mov	r3, r0
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d100      	bne.n	8008ad2 <memset+0xa>
 8008ad0:	4770      	bx	lr
 8008ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ad6:	e7f9      	b.n	8008acc <memset+0x4>

08008ad8 <_malloc_r>:
 8008ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ada:	1ccd      	adds	r5, r1, #3
 8008adc:	f025 0503 	bic.w	r5, r5, #3
 8008ae0:	3508      	adds	r5, #8
 8008ae2:	2d0c      	cmp	r5, #12
 8008ae4:	bf38      	it	cc
 8008ae6:	250c      	movcc	r5, #12
 8008ae8:	2d00      	cmp	r5, #0
 8008aea:	4606      	mov	r6, r0
 8008aec:	db01      	blt.n	8008af2 <_malloc_r+0x1a>
 8008aee:	42a9      	cmp	r1, r5
 8008af0:	d903      	bls.n	8008afa <_malloc_r+0x22>
 8008af2:	230c      	movs	r3, #12
 8008af4:	6033      	str	r3, [r6, #0]
 8008af6:	2000      	movs	r0, #0
 8008af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008afa:	f000 f899 	bl	8008c30 <__malloc_lock>
 8008afe:	4921      	ldr	r1, [pc, #132]	; (8008b84 <_malloc_r+0xac>)
 8008b00:	680a      	ldr	r2, [r1, #0]
 8008b02:	4614      	mov	r4, r2
 8008b04:	b99c      	cbnz	r4, 8008b2e <_malloc_r+0x56>
 8008b06:	4f20      	ldr	r7, [pc, #128]	; (8008b88 <_malloc_r+0xb0>)
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	b923      	cbnz	r3, 8008b16 <_malloc_r+0x3e>
 8008b0c:	4621      	mov	r1, r4
 8008b0e:	4630      	mov	r0, r6
 8008b10:	f000 f83c 	bl	8008b8c <_sbrk_r>
 8008b14:	6038      	str	r0, [r7, #0]
 8008b16:	4629      	mov	r1, r5
 8008b18:	4630      	mov	r0, r6
 8008b1a:	f000 f837 	bl	8008b8c <_sbrk_r>
 8008b1e:	1c43      	adds	r3, r0, #1
 8008b20:	d123      	bne.n	8008b6a <_malloc_r+0x92>
 8008b22:	230c      	movs	r3, #12
 8008b24:	6033      	str	r3, [r6, #0]
 8008b26:	4630      	mov	r0, r6
 8008b28:	f000 f888 	bl	8008c3c <__malloc_unlock>
 8008b2c:	e7e3      	b.n	8008af6 <_malloc_r+0x1e>
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	1b5b      	subs	r3, r3, r5
 8008b32:	d417      	bmi.n	8008b64 <_malloc_r+0x8c>
 8008b34:	2b0b      	cmp	r3, #11
 8008b36:	d903      	bls.n	8008b40 <_malloc_r+0x68>
 8008b38:	6023      	str	r3, [r4, #0]
 8008b3a:	441c      	add	r4, r3
 8008b3c:	6025      	str	r5, [r4, #0]
 8008b3e:	e004      	b.n	8008b4a <_malloc_r+0x72>
 8008b40:	6863      	ldr	r3, [r4, #4]
 8008b42:	42a2      	cmp	r2, r4
 8008b44:	bf0c      	ite	eq
 8008b46:	600b      	streq	r3, [r1, #0]
 8008b48:	6053      	strne	r3, [r2, #4]
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	f000 f876 	bl	8008c3c <__malloc_unlock>
 8008b50:	f104 000b 	add.w	r0, r4, #11
 8008b54:	1d23      	adds	r3, r4, #4
 8008b56:	f020 0007 	bic.w	r0, r0, #7
 8008b5a:	1ac2      	subs	r2, r0, r3
 8008b5c:	d0cc      	beq.n	8008af8 <_malloc_r+0x20>
 8008b5e:	1a1b      	subs	r3, r3, r0
 8008b60:	50a3      	str	r3, [r4, r2]
 8008b62:	e7c9      	b.n	8008af8 <_malloc_r+0x20>
 8008b64:	4622      	mov	r2, r4
 8008b66:	6864      	ldr	r4, [r4, #4]
 8008b68:	e7cc      	b.n	8008b04 <_malloc_r+0x2c>
 8008b6a:	1cc4      	adds	r4, r0, #3
 8008b6c:	f024 0403 	bic.w	r4, r4, #3
 8008b70:	42a0      	cmp	r0, r4
 8008b72:	d0e3      	beq.n	8008b3c <_malloc_r+0x64>
 8008b74:	1a21      	subs	r1, r4, r0
 8008b76:	4630      	mov	r0, r6
 8008b78:	f000 f808 	bl	8008b8c <_sbrk_r>
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	d1dd      	bne.n	8008b3c <_malloc_r+0x64>
 8008b80:	e7cf      	b.n	8008b22 <_malloc_r+0x4a>
 8008b82:	bf00      	nop
 8008b84:	20000188 	.word	0x20000188
 8008b88:	2000018c 	.word	0x2000018c

08008b8c <_sbrk_r>:
 8008b8c:	b538      	push	{r3, r4, r5, lr}
 8008b8e:	4d06      	ldr	r5, [pc, #24]	; (8008ba8 <_sbrk_r+0x1c>)
 8008b90:	2300      	movs	r3, #0
 8008b92:	4604      	mov	r4, r0
 8008b94:	4608      	mov	r0, r1
 8008b96:	602b      	str	r3, [r5, #0]
 8008b98:	f7f9 fe1c 	bl	80027d4 <_sbrk>
 8008b9c:	1c43      	adds	r3, r0, #1
 8008b9e:	d102      	bne.n	8008ba6 <_sbrk_r+0x1a>
 8008ba0:	682b      	ldr	r3, [r5, #0]
 8008ba2:	b103      	cbz	r3, 8008ba6 <_sbrk_r+0x1a>
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	bd38      	pop	{r3, r4, r5, pc}
 8008ba8:	200004b0 	.word	0x200004b0

08008bac <__utoa>:
 8008bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bae:	4c1f      	ldr	r4, [pc, #124]	; (8008c2c <__utoa+0x80>)
 8008bb0:	b08b      	sub	sp, #44	; 0x2c
 8008bb2:	4605      	mov	r5, r0
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	466e      	mov	r6, sp
 8008bb8:	f104 0c20 	add.w	ip, r4, #32
 8008bbc:	6820      	ldr	r0, [r4, #0]
 8008bbe:	6861      	ldr	r1, [r4, #4]
 8008bc0:	4637      	mov	r7, r6
 8008bc2:	c703      	stmia	r7!, {r0, r1}
 8008bc4:	3408      	adds	r4, #8
 8008bc6:	4564      	cmp	r4, ip
 8008bc8:	463e      	mov	r6, r7
 8008bca:	d1f7      	bne.n	8008bbc <__utoa+0x10>
 8008bcc:	7921      	ldrb	r1, [r4, #4]
 8008bce:	7139      	strb	r1, [r7, #4]
 8008bd0:	1e91      	subs	r1, r2, #2
 8008bd2:	6820      	ldr	r0, [r4, #0]
 8008bd4:	6038      	str	r0, [r7, #0]
 8008bd6:	2922      	cmp	r1, #34	; 0x22
 8008bd8:	f04f 0100 	mov.w	r1, #0
 8008bdc:	d904      	bls.n	8008be8 <__utoa+0x3c>
 8008bde:	7019      	strb	r1, [r3, #0]
 8008be0:	460b      	mov	r3, r1
 8008be2:	4618      	mov	r0, r3
 8008be4:	b00b      	add	sp, #44	; 0x2c
 8008be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008be8:	1e58      	subs	r0, r3, #1
 8008bea:	4684      	mov	ip, r0
 8008bec:	fbb5 f7f2 	udiv	r7, r5, r2
 8008bf0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8008bf4:	fb02 5617 	mls	r6, r2, r7, r5
 8008bf8:	4476      	add	r6, lr
 8008bfa:	460c      	mov	r4, r1
 8008bfc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008c00:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008c04:	462e      	mov	r6, r5
 8008c06:	42b2      	cmp	r2, r6
 8008c08:	f101 0101 	add.w	r1, r1, #1
 8008c0c:	463d      	mov	r5, r7
 8008c0e:	d9ed      	bls.n	8008bec <__utoa+0x40>
 8008c10:	2200      	movs	r2, #0
 8008c12:	545a      	strb	r2, [r3, r1]
 8008c14:	1919      	adds	r1, r3, r4
 8008c16:	1aa5      	subs	r5, r4, r2
 8008c18:	42aa      	cmp	r2, r5
 8008c1a:	dae2      	bge.n	8008be2 <__utoa+0x36>
 8008c1c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008c20:	780e      	ldrb	r6, [r1, #0]
 8008c22:	7006      	strb	r6, [r0, #0]
 8008c24:	3201      	adds	r2, #1
 8008c26:	f801 5901 	strb.w	r5, [r1], #-1
 8008c2a:	e7f4      	b.n	8008c16 <__utoa+0x6a>
 8008c2c:	08009194 	.word	0x08009194

08008c30 <__malloc_lock>:
 8008c30:	4801      	ldr	r0, [pc, #4]	; (8008c38 <__malloc_lock+0x8>)
 8008c32:	f000 b809 	b.w	8008c48 <__retarget_lock_acquire_recursive>
 8008c36:	bf00      	nop
 8008c38:	200004b8 	.word	0x200004b8

08008c3c <__malloc_unlock>:
 8008c3c:	4801      	ldr	r0, [pc, #4]	; (8008c44 <__malloc_unlock+0x8>)
 8008c3e:	f000 b804 	b.w	8008c4a <__retarget_lock_release_recursive>
 8008c42:	bf00      	nop
 8008c44:	200004b8 	.word	0x200004b8

08008c48 <__retarget_lock_acquire_recursive>:
 8008c48:	4770      	bx	lr

08008c4a <__retarget_lock_release_recursive>:
 8008c4a:	4770      	bx	lr

08008c4c <_init>:
 8008c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4e:	bf00      	nop
 8008c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c52:	bc08      	pop	{r3}
 8008c54:	469e      	mov	lr, r3
 8008c56:	4770      	bx	lr

08008c58 <_fini>:
 8008c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5a:	bf00      	nop
 8008c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5e:	bc08      	pop	{r3}
 8008c60:	469e      	mov	lr, r3
 8008c62:	4770      	bx	lr
